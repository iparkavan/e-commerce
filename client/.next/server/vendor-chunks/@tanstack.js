"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tanstack";
exports.ids = ["vendor-chunks/@tanstack"];
exports.modules = {

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/focusManager.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/focusManager.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FocusManager: () => (/* binding */ FocusManager),\n/* harmony export */   focusManager: () => (/* binding */ focusManager)\n/* harmony export */ });\n/* harmony import */ var _subscribable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/subscribable.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js\");\n// src/focusManager.ts\n\n\nvar FocusManager = class extends _subscribable_js__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    #focused;\n    #cleanup;\n    #setup;\n    constructor(){\n        super();\n        this.#setup = (onFocus)=>{\n            if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__.isServer && window.addEventListener) {\n                const listener = ()=>onFocus();\n                window.addEventListener(\"visibilitychange\", listener, false);\n                return ()=>{\n                    window.removeEventListener(\"visibilitychange\", listener);\n                };\n            }\n            return;\n        };\n    }\n    onSubscribe() {\n        if (!this.#cleanup) {\n            this.setEventListener(this.#setup);\n        }\n    }\n    onUnsubscribe() {\n        if (!this.hasListeners()) {\n            this.#cleanup?.();\n            this.#cleanup = void 0;\n        }\n    }\n    setEventListener(setup) {\n        this.#setup = setup;\n        this.#cleanup?.();\n        this.#cleanup = setup((focused)=>{\n            if (typeof focused === \"boolean\") {\n                this.setFocused(focused);\n            } else {\n                this.onFocus();\n            }\n        });\n    }\n    setFocused(focused) {\n        const changed = this.#focused !== focused;\n        if (changed) {\n            this.#focused = focused;\n            this.onFocus();\n        }\n    }\n    onFocus() {\n        this.listeners.forEach((listener)=>{\n            listener();\n        });\n    }\n    isFocused() {\n        if (typeof this.#focused === \"boolean\") {\n            return this.#focused;\n        }\n        return globalThis.document?.visibilityState !== \"hidden\";\n    }\n};\nvar focusManager = new FocusManager();\n //# sourceMappingURL=focusManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL2ZvY3VzTWFuYWdlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsc0JBQXNCO0FBQzJCO0FBQ1g7QUFDdEMsSUFBSUUsZUFBZSxjQUFjRiwwREFBWUE7SUFDM0MsQ0FBQ0csT0FBTyxDQUFDO0lBQ1QsQ0FBQ0MsT0FBTyxDQUFDO0lBQ1QsQ0FBQ0MsS0FBSyxDQUFDO0lBQ1BDLGFBQWM7UUFDWixLQUFLO1FBQ0wsSUFBSSxDQUFDLENBQUNELEtBQUssR0FBRyxDQUFDRTtZQUNiLElBQUksQ0FBQ04sK0NBQVFBLElBQUlPLE9BQU9DLGdCQUFnQixFQUFFO2dCQUN4QyxNQUFNQyxXQUFXLElBQU1IO2dCQUN2QkMsT0FBT0MsZ0JBQWdCLENBQUMsb0JBQW9CQyxVQUFVO2dCQUN0RCxPQUFPO29CQUNMRixPQUFPRyxtQkFBbUIsQ0FBQyxvQkFBb0JEO2dCQUNqRDtZQUNGO1lBQ0E7UUFDRjtJQUNGO0lBQ0FFLGNBQWM7UUFDWixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUNSLE9BQU8sRUFBRTtZQUNsQixJQUFJLENBQUNTLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDUixLQUFLO1FBQ25DO0lBQ0Y7SUFDQVMsZ0JBQWdCO1FBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQ0MsWUFBWSxJQUFJO1lBQ3hCLElBQUksQ0FBQyxDQUFDWCxPQUFPO1lBQ2IsSUFBSSxDQUFDLENBQUNBLE9BQU8sR0FBRyxLQUFLO1FBQ3ZCO0lBQ0Y7SUFDQVMsaUJBQWlCUixLQUFLLEVBQUU7UUFDdEIsSUFBSSxDQUFDLENBQUNBLEtBQUssR0FBR0E7UUFDZCxJQUFJLENBQUMsQ0FBQ0QsT0FBTztRQUNiLElBQUksQ0FBQyxDQUFDQSxPQUFPLEdBQUdDLE1BQU0sQ0FBQ0Y7WUFDckIsSUFBSSxPQUFPQSxZQUFZLFdBQVc7Z0JBQ2hDLElBQUksQ0FBQ2EsVUFBVSxDQUFDYjtZQUNsQixPQUFPO2dCQUNMLElBQUksQ0FBQ0ksT0FBTztZQUNkO1FBQ0Y7SUFDRjtJQUNBUyxXQUFXYixPQUFPLEVBQUU7UUFDbEIsTUFBTWMsVUFBVSxJQUFJLENBQUMsQ0FBQ2QsT0FBTyxLQUFLQTtRQUNsQyxJQUFJYyxTQUFTO1lBQ1gsSUFBSSxDQUFDLENBQUNkLE9BQU8sR0FBR0E7WUFDaEIsSUFBSSxDQUFDSSxPQUFPO1FBQ2Q7SUFDRjtJQUNBQSxVQUFVO1FBQ1IsSUFBSSxDQUFDVyxTQUFTLENBQUNDLE9BQU8sQ0FBQyxDQUFDVDtZQUN0QkE7UUFDRjtJQUNGO0lBQ0FVLFlBQVk7UUFDVixJQUFJLE9BQU8sSUFBSSxDQUFDLENBQUNqQixPQUFPLEtBQUssV0FBVztZQUN0QyxPQUFPLElBQUksQ0FBQyxDQUFDQSxPQUFPO1FBQ3RCO1FBQ0EsT0FBT2tCLFdBQVdDLFFBQVEsRUFBRUMsb0JBQW9CO0lBQ2xEO0FBQ0Y7QUFDQSxJQUFJQyxlQUFlLElBQUl0QjtBQUlyQixDQUNGLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZV9jbGllbnQvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL2ZvY3VzTWFuYWdlci5qcz9hYmYzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9mb2N1c01hbmFnZXIudHNcbmltcG9ydCB7IFN1YnNjcmliYWJsZSB9IGZyb20gXCIuL3N1YnNjcmliYWJsZS5qc1wiO1xuaW1wb3J0IHsgaXNTZXJ2ZXIgfSBmcm9tIFwiLi91dGlscy5qc1wiO1xudmFyIEZvY3VzTWFuYWdlciA9IGNsYXNzIGV4dGVuZHMgU3Vic2NyaWJhYmxlIHtcbiAgI2ZvY3VzZWQ7XG4gICNjbGVhbnVwO1xuICAjc2V0dXA7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy4jc2V0dXAgPSAob25Gb2N1cykgPT4ge1xuICAgICAgaWYgKCFpc1NlcnZlciAmJiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICBjb25zdCBsaXN0ZW5lciA9ICgpID0+IG9uRm9jdXMoKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIGxpc3RlbmVyKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9O1xuICB9XG4gIG9uU3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy4jY2xlYW51cCkge1xuICAgICAgdGhpcy5zZXRFdmVudExpc3RlbmVyKHRoaXMuI3NldHVwKTtcbiAgICB9XG4gIH1cbiAgb25VbnN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMuaGFzTGlzdGVuZXJzKCkpIHtcbiAgICAgIHRoaXMuI2NsZWFudXA/LigpO1xuICAgICAgdGhpcy4jY2xlYW51cCA9IHZvaWQgMDtcbiAgICB9XG4gIH1cbiAgc2V0RXZlbnRMaXN0ZW5lcihzZXR1cCkge1xuICAgIHRoaXMuI3NldHVwID0gc2V0dXA7XG4gICAgdGhpcy4jY2xlYW51cD8uKCk7XG4gICAgdGhpcy4jY2xlYW51cCA9IHNldHVwKChmb2N1c2VkKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGZvY3VzZWQgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgIHRoaXMuc2V0Rm9jdXNlZChmb2N1c2VkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25Gb2N1cygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHNldEZvY3VzZWQoZm9jdXNlZCkge1xuICAgIGNvbnN0IGNoYW5nZWQgPSB0aGlzLiNmb2N1c2VkICE9PSBmb2N1c2VkO1xuICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICB0aGlzLiNmb2N1c2VkID0gZm9jdXNlZDtcbiAgICAgIHRoaXMub25Gb2N1cygpO1xuICAgIH1cbiAgfVxuICBvbkZvY3VzKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PiB7XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH0pO1xuICB9XG4gIGlzRm9jdXNlZCgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuI2ZvY3VzZWQgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICByZXR1cm4gdGhpcy4jZm9jdXNlZDtcbiAgICB9XG4gICAgcmV0dXJuIGdsb2JhbFRoaXMuZG9jdW1lbnQ/LnZpc2liaWxpdHlTdGF0ZSAhPT0gXCJoaWRkZW5cIjtcbiAgfVxufTtcbnZhciBmb2N1c01hbmFnZXIgPSBuZXcgRm9jdXNNYW5hZ2VyKCk7XG5leHBvcnQge1xuICBGb2N1c01hbmFnZXIsXG4gIGZvY3VzTWFuYWdlclxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvY3VzTWFuYWdlci5qcy5tYXAiXSwibmFtZXMiOlsiU3Vic2NyaWJhYmxlIiwiaXNTZXJ2ZXIiLCJGb2N1c01hbmFnZXIiLCJmb2N1c2VkIiwiY2xlYW51cCIsInNldHVwIiwiY29uc3RydWN0b3IiLCJvbkZvY3VzIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImxpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uU3Vic2NyaWJlIiwic2V0RXZlbnRMaXN0ZW5lciIsIm9uVW5zdWJzY3JpYmUiLCJoYXNMaXN0ZW5lcnMiLCJzZXRGb2N1c2VkIiwiY2hhbmdlZCIsImxpc3RlbmVycyIsImZvckVhY2giLCJpc0ZvY3VzZWQiLCJnbG9iYWxUaGlzIiwiZG9jdW1lbnQiLCJ2aXNpYmlsaXR5U3RhdGUiLCJmb2N1c01hbmFnZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/focusManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/infiniteQueryBehavior.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/infiniteQueryBehavior.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasNextPage: () => (/* binding */ hasNextPage),\n/* harmony export */   hasPreviousPage: () => (/* binding */ hasPreviousPage),\n/* harmony export */   infiniteQueryBehavior: () => (/* binding */ infiniteQueryBehavior)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js\");\n// src/infiniteQueryBehavior.ts\n\nfunction infiniteQueryBehavior(pages) {\n    return {\n        onFetch: (context, query)=>{\n            const fetchFn = async ()=>{\n                const options = context.options;\n                const direction = context.fetchOptions?.meta?.fetchMore?.direction;\n                const oldPages = context.state.data?.pages || [];\n                const oldPageParams = context.state.data?.pageParams || [];\n                const empty = {\n                    pages: [],\n                    pageParams: []\n                };\n                let cancelled = false;\n                const addSignalProperty = (object)=>{\n                    Object.defineProperty(object, \"signal\", {\n                        enumerable: true,\n                        get: ()=>{\n                            if (context.signal.aborted) {\n                                cancelled = true;\n                            } else {\n                                context.signal.addEventListener(\"abort\", ()=>{\n                                    cancelled = true;\n                                });\n                            }\n                            return context.signal;\n                        }\n                    });\n                };\n                const queryFn = context.options.queryFn || (()=>Promise.reject(new Error(`Missing queryFn: '${context.options.queryHash}'`)));\n                const fetchPage = async (data, param, previous)=>{\n                    if (cancelled) {\n                        return Promise.reject();\n                    }\n                    if (param == null && data.pages.length) {\n                        return Promise.resolve(data);\n                    }\n                    const queryFnContext = {\n                        queryKey: context.queryKey,\n                        pageParam: param,\n                        direction: previous ? \"backward\" : \"forward\",\n                        meta: context.options.meta\n                    };\n                    addSignalProperty(queryFnContext);\n                    const page = await queryFn(queryFnContext);\n                    const { maxPages } = context.options;\n                    const addTo = previous ? _utils_js__WEBPACK_IMPORTED_MODULE_0__.addToStart : _utils_js__WEBPACK_IMPORTED_MODULE_0__.addToEnd;\n                    return {\n                        pages: addTo(data.pages, page, maxPages),\n                        pageParams: addTo(data.pageParams, param, maxPages)\n                    };\n                };\n                let result;\n                if (direction && oldPages.length) {\n                    const previous = direction === \"backward\";\n                    const pageParamFn = previous ? getPreviousPageParam : getNextPageParam;\n                    const oldData = {\n                        pages: oldPages,\n                        pageParams: oldPageParams\n                    };\n                    const param = pageParamFn(options, oldData);\n                    result = await fetchPage(oldData, param, previous);\n                } else {\n                    result = await fetchPage(empty, oldPageParams[0] ?? options.initialPageParam);\n                    const remainingPages = pages ?? oldPages.length;\n                    for(let i = 1; i < remainingPages; i++){\n                        const param = getNextPageParam(options, result);\n                        result = await fetchPage(result, param);\n                    }\n                }\n                return result;\n            };\n            if (context.options.persister) {\n                context.fetchFn = ()=>{\n                    return context.options.persister?.(fetchFn, {\n                        queryKey: context.queryKey,\n                        meta: context.options.meta,\n                        signal: context.signal\n                    }, query);\n                };\n            } else {\n                context.fetchFn = fetchFn;\n            }\n        }\n    };\n}\nfunction getNextPageParam(options, { pages, pageParams }) {\n    const lastIndex = pages.length - 1;\n    return options.getNextPageParam(pages[lastIndex], pages, pageParams[lastIndex], pageParams);\n}\nfunction getPreviousPageParam(options, { pages, pageParams }) {\n    return options.getPreviousPageParam?.(pages[0], pages, pageParams[0], pageParams);\n}\nfunction hasNextPage(options, data) {\n    if (!data) return false;\n    return getNextPageParam(options, data) != null;\n}\nfunction hasPreviousPage(options, data) {\n    if (!data || !options.getPreviousPageParam) return false;\n    return getPreviousPageParam(options, data) != null;\n}\n //# sourceMappingURL=infiniteQueryBehavior.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/infiniteQueryBehavior.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/mutation.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/mutation.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mutation: () => (/* binding */ Mutation),\n/* harmony export */   getDefaultState: () => (/* binding */ getDefaultState)\n/* harmony export */ });\n/* harmony import */ var _notifyManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./notifyManager.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/notifyManager.js\");\n/* harmony import */ var _removable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./removable.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/removable.js\");\n/* harmony import */ var _retryer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./retryer.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/retryer.js\");\n// src/mutation.ts\n\n\n\nvar Mutation = class extends _removable_js__WEBPACK_IMPORTED_MODULE_0__.Removable {\n    constructor(config){\n        super();\n        this.mutationId = config.mutationId;\n        this.#defaultOptions = config.defaultOptions;\n        this.#mutationCache = config.mutationCache;\n        this.#observers = [];\n        this.state = config.state || getDefaultState();\n        this.setOptions(config.options);\n        this.scheduleGc();\n    }\n    #observers;\n    #defaultOptions;\n    #mutationCache;\n    #retryer;\n    setOptions(options) {\n        this.options = {\n            ...this.#defaultOptions,\n            ...options\n        };\n        this.updateGcTime(this.options.gcTime);\n    }\n    get meta() {\n        return this.options.meta;\n    }\n    addObserver(observer) {\n        if (!this.#observers.includes(observer)) {\n            this.#observers.push(observer);\n            this.clearGcTimeout();\n            this.#mutationCache.notify({\n                type: \"observerAdded\",\n                mutation: this,\n                observer\n            });\n        }\n    }\n    removeObserver(observer) {\n        this.#observers = this.#observers.filter((x)=>x !== observer);\n        this.scheduleGc();\n        this.#mutationCache.notify({\n            type: \"observerRemoved\",\n            mutation: this,\n            observer\n        });\n    }\n    optionalRemove() {\n        if (!this.#observers.length) {\n            if (this.state.status === \"pending\") {\n                this.scheduleGc();\n            } else {\n                this.#mutationCache.remove(this);\n            }\n        }\n    }\n    continue() {\n        return this.#retryer?.continue() ?? // continuing a mutation assumes that variables are set, mutation must have been dehydrated before\n        this.execute(this.state.variables);\n    }\n    async execute(variables) {\n        const executeMutation = ()=>{\n            this.#retryer = (0,_retryer_js__WEBPACK_IMPORTED_MODULE_1__.createRetryer)({\n                fn: ()=>{\n                    if (!this.options.mutationFn) {\n                        return Promise.reject(new Error(\"No mutationFn found\"));\n                    }\n                    return this.options.mutationFn(variables);\n                },\n                onFail: (failureCount, error)=>{\n                    this.#dispatch({\n                        type: \"failed\",\n                        failureCount,\n                        error\n                    });\n                },\n                onPause: ()=>{\n                    this.#dispatch({\n                        type: \"pause\"\n                    });\n                },\n                onContinue: ()=>{\n                    this.#dispatch({\n                        type: \"continue\"\n                    });\n                },\n                retry: this.options.retry ?? 0,\n                retryDelay: this.options.retryDelay,\n                networkMode: this.options.networkMode\n            });\n            return this.#retryer.promise;\n        };\n        const restored = this.state.status === \"pending\";\n        try {\n            if (!restored) {\n                this.#dispatch({\n                    type: \"pending\",\n                    variables\n                });\n                await this.#mutationCache.config.onMutate?.(variables, this);\n                const context = await this.options.onMutate?.(variables);\n                if (context !== this.state.context) {\n                    this.#dispatch({\n                        type: \"pending\",\n                        context,\n                        variables\n                    });\n                }\n            }\n            const data = await executeMutation();\n            await this.#mutationCache.config.onSuccess?.(data, variables, this.state.context, this);\n            await this.options.onSuccess?.(data, variables, this.state.context);\n            await this.#mutationCache.config.onSettled?.(data, null, this.state.variables, this.state.context, this);\n            await this.options.onSettled?.(data, null, variables, this.state.context);\n            this.#dispatch({\n                type: \"success\",\n                data\n            });\n            return data;\n        } catch (error) {\n            try {\n                await this.#mutationCache.config.onError?.(error, variables, this.state.context, this);\n                await this.options.onError?.(error, variables, this.state.context);\n                await this.#mutationCache.config.onSettled?.(void 0, error, this.state.variables, this.state.context, this);\n                await this.options.onSettled?.(void 0, error, variables, this.state.context);\n                throw error;\n            } finally{\n                this.#dispatch({\n                    type: \"error\",\n                    error\n                });\n            }\n        }\n    }\n    #dispatch(action) {\n        const reducer = (state)=>{\n            switch(action.type){\n                case \"failed\":\n                    return {\n                        ...state,\n                        failureCount: action.failureCount,\n                        failureReason: action.error\n                    };\n                case \"pause\":\n                    return {\n                        ...state,\n                        isPaused: true\n                    };\n                case \"continue\":\n                    return {\n                        ...state,\n                        isPaused: false\n                    };\n                case \"pending\":\n                    return {\n                        ...state,\n                        context: action.context,\n                        data: void 0,\n                        failureCount: 0,\n                        failureReason: null,\n                        error: null,\n                        isPaused: !(0,_retryer_js__WEBPACK_IMPORTED_MODULE_1__.canFetch)(this.options.networkMode),\n                        status: \"pending\",\n                        variables: action.variables,\n                        submittedAt: Date.now()\n                    };\n                case \"success\":\n                    return {\n                        ...state,\n                        data: action.data,\n                        failureCount: 0,\n                        failureReason: null,\n                        error: null,\n                        status: \"success\",\n                        isPaused: false\n                    };\n                case \"error\":\n                    return {\n                        ...state,\n                        data: void 0,\n                        error: action.error,\n                        failureCount: state.failureCount + 1,\n                        failureReason: action.error,\n                        isPaused: false,\n                        status: \"error\"\n                    };\n            }\n        };\n        this.state = reducer(this.state);\n        _notifyManager_js__WEBPACK_IMPORTED_MODULE_2__.notifyManager.batch(()=>{\n            this.#observers.forEach((observer)=>{\n                observer.onMutationUpdate(action);\n            });\n            this.#mutationCache.notify({\n                mutation: this,\n                type: \"updated\",\n                action\n            });\n        });\n    }\n};\nfunction getDefaultState() {\n    return {\n        context: void 0,\n        data: void 0,\n        error: null,\n        failureCount: 0,\n        failureReason: null,\n        isPaused: false,\n        status: \"idle\",\n        variables: void 0,\n        submittedAt: 0\n    };\n}\n //# sourceMappingURL=mutation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/mutation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/mutationCache.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/mutationCache.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MutationCache: () => (/* binding */ MutationCache)\n/* harmony export */ });\n/* harmony import */ var _notifyManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./notifyManager.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/notifyManager.js\");\n/* harmony import */ var _mutation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mutation.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/mutation.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js\");\n/* harmony import */ var _subscribable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/subscribable.js\");\n// src/mutationCache.ts\n\n\n\n\nvar MutationCache = class extends _subscribable_js__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(config = {}){\n        super();\n        this.config = config;\n        this.#mutations = [];\n        this.#mutationId = 0;\n    }\n    #mutations;\n    #mutationId;\n    #resuming;\n    build(client, options, state) {\n        const mutation = new _mutation_js__WEBPACK_IMPORTED_MODULE_1__.Mutation({\n            mutationCache: this,\n            mutationId: ++this.#mutationId,\n            options: client.defaultMutationOptions(options),\n            state\n        });\n        this.add(mutation);\n        return mutation;\n    }\n    add(mutation) {\n        this.#mutations.push(mutation);\n        this.notify({\n            type: \"added\",\n            mutation\n        });\n    }\n    remove(mutation) {\n        this.#mutations = this.#mutations.filter((x)=>x !== mutation);\n        this.notify({\n            type: \"removed\",\n            mutation\n        });\n    }\n    clear() {\n        _notifyManager_js__WEBPACK_IMPORTED_MODULE_2__.notifyManager.batch(()=>{\n            this.#mutations.forEach((mutation)=>{\n                this.remove(mutation);\n            });\n        });\n    }\n    getAll() {\n        return this.#mutations;\n    }\n    find(filters) {\n        const defaultedFilters = {\n            exact: true,\n            ...filters\n        };\n        return this.#mutations.find((mutation)=>(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.matchMutation)(defaultedFilters, mutation));\n    }\n    findAll(filters = {}) {\n        return this.#mutations.filter((mutation)=>(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.matchMutation)(filters, mutation));\n    }\n    notify(event) {\n        _notifyManager_js__WEBPACK_IMPORTED_MODULE_2__.notifyManager.batch(()=>{\n            this.listeners.forEach((listener)=>{\n                listener(event);\n            });\n        });\n    }\n    resumePausedMutations() {\n        this.#resuming = (this.#resuming ?? Promise.resolve()).then(()=>{\n            const pausedMutations = this.#mutations.filter((x)=>x.state.isPaused);\n            return _notifyManager_js__WEBPACK_IMPORTED_MODULE_2__.notifyManager.batch(()=>pausedMutations.reduce((promise, mutation)=>promise.then(()=>mutation.continue().catch(_utils_js__WEBPACK_IMPORTED_MODULE_3__.noop)), Promise.resolve()));\n        }).then(()=>{\n            this.#resuming = void 0;\n        });\n        return this.#resuming;\n    }\n};\n //# sourceMappingURL=mutationCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL211dGF0aW9uQ2FjaGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSx1QkFBdUI7QUFDNEI7QUFDVjtBQUNRO0FBQ0E7QUFDakQsSUFBSUssZ0JBQWdCLGNBQWNELDBEQUFZQTtJQUM1Q0UsWUFBWUMsU0FBUyxDQUFDLENBQUMsQ0FBRTtRQUN2QixLQUFLO1FBQ0wsSUFBSSxDQUFDQSxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDLENBQUNDLFNBQVMsR0FBRyxFQUFFO1FBQ3BCLElBQUksQ0FBQyxDQUFDQyxVQUFVLEdBQUc7SUFDckI7SUFDQSxDQUFDRCxTQUFTLENBQUM7SUFDWCxDQUFDQyxVQUFVLENBQUM7SUFDWixDQUFDQyxRQUFRLENBQUM7SUFDVkMsTUFBTUMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLEtBQUssRUFBRTtRQUM1QixNQUFNQyxXQUFXLElBQUlkLGtEQUFRQSxDQUFDO1lBQzVCZSxlQUFlLElBQUk7WUFDbkJQLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQ0EsVUFBVTtZQUM5QkksU0FBU0QsT0FBT0ssc0JBQXNCLENBQUNKO1lBQ3ZDQztRQUNGO1FBQ0EsSUFBSSxDQUFDSSxHQUFHLENBQUNIO1FBQ1QsT0FBT0E7SUFDVDtJQUNBRyxJQUFJSCxRQUFRLEVBQUU7UUFDWixJQUFJLENBQUMsQ0FBQ1AsU0FBUyxDQUFDVyxJQUFJLENBQUNKO1FBQ3JCLElBQUksQ0FBQ0ssTUFBTSxDQUFDO1lBQUVDLE1BQU07WUFBU047UUFBUztJQUN4QztJQUNBTyxPQUFPUCxRQUFRLEVBQUU7UUFDZixJQUFJLENBQUMsQ0FBQ1AsU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDQSxTQUFTLENBQUNlLE1BQU0sQ0FBQyxDQUFDQyxJQUFNQSxNQUFNVDtRQUN0RCxJQUFJLENBQUNLLE1BQU0sQ0FBQztZQUFFQyxNQUFNO1lBQVdOO1FBQVM7SUFDMUM7SUFDQVUsUUFBUTtRQUNOekIsNERBQWFBLENBQUMwQixLQUFLLENBQUM7WUFDbEIsSUFBSSxDQUFDLENBQUNsQixTQUFTLENBQUNtQixPQUFPLENBQUMsQ0FBQ1o7Z0JBQ3ZCLElBQUksQ0FBQ08sTUFBTSxDQUFDUDtZQUNkO1FBQ0Y7SUFDRjtJQUNBYSxTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUMsQ0FBQ3BCLFNBQVM7SUFDeEI7SUFDQXFCLEtBQUtDLE9BQU8sRUFBRTtRQUNaLE1BQU1DLG1CQUFtQjtZQUFFQyxPQUFPO1lBQU0sR0FBR0YsT0FBTztRQUFDO1FBQ25ELE9BQU8sSUFBSSxDQUFDLENBQUN0QixTQUFTLENBQUNxQixJQUFJLENBQ3pCLENBQUNkLFdBQWFiLHdEQUFhQSxDQUFDNkIsa0JBQWtCaEI7SUFFbEQ7SUFDQWtCLFFBQVFILFVBQVUsQ0FBQyxDQUFDLEVBQUU7UUFDcEIsT0FBTyxJQUFJLENBQUMsQ0FBQ3RCLFNBQVMsQ0FBQ2UsTUFBTSxDQUMzQixDQUFDUixXQUFhYix3REFBYUEsQ0FBQzRCLFNBQVNmO0lBRXpDO0lBQ0FLLE9BQU9jLEtBQUssRUFBRTtRQUNabEMsNERBQWFBLENBQUMwQixLQUFLLENBQUM7WUFDbEIsSUFBSSxDQUFDUyxTQUFTLENBQUNSLE9BQU8sQ0FBQyxDQUFDUztnQkFDdEJBLFNBQVNGO1lBQ1g7UUFDRjtJQUNGO0lBQ0FHLHdCQUF3QjtRQUN0QixJQUFJLENBQUMsQ0FBQzNCLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDQSxRQUFRLElBQUk0QixRQUFRQyxPQUFPLEVBQUMsRUFBR0MsSUFBSSxDQUFDO1lBQzFELE1BQU1DLGtCQUFrQixJQUFJLENBQUMsQ0FBQ2pDLFNBQVMsQ0FBQ2UsTUFBTSxDQUFDLENBQUNDLElBQU1BLEVBQUVWLEtBQUssQ0FBQzRCLFFBQVE7WUFDdEUsT0FBTzFDLDREQUFhQSxDQUFDMEIsS0FBSyxDQUN4QixJQUFNZSxnQkFBZ0JFLE1BQU0sQ0FDMUIsQ0FBQ0MsU0FBUzdCLFdBQWE2QixRQUFRSixJQUFJLENBQUMsSUFBTXpCLFNBQVM4QixRQUFRLEdBQUdDLEtBQUssQ0FBQzNDLDJDQUFJQSxJQUN4RW1DLFFBQVFDLE9BQU87UUFHckIsR0FBR0MsSUFBSSxDQUFDO1lBQ04sSUFBSSxDQUFDLENBQUM5QixRQUFRLEdBQUcsS0FBSztRQUN4QjtRQUNBLE9BQU8sSUFBSSxDQUFDLENBQUNBLFFBQVE7SUFDdkI7QUFDRjtBQUdFLENBQ0YseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlX2NsaWVudC8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcXVlcnktY29yZS9idWlsZC9tb2Rlcm4vbXV0YXRpb25DYWNoZS5qcz9mNTVlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9tdXRhdGlvbkNhY2hlLnRzXG5pbXBvcnQgeyBub3RpZnlNYW5hZ2VyIH0gZnJvbSBcIi4vbm90aWZ5TWFuYWdlci5qc1wiO1xuaW1wb3J0IHsgTXV0YXRpb24gfSBmcm9tIFwiLi9tdXRhdGlvbi5qc1wiO1xuaW1wb3J0IHsgbWF0Y2hNdXRhdGlvbiwgbm9vcCB9IGZyb20gXCIuL3V0aWxzLmpzXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmFibGUgfSBmcm9tIFwiLi9zdWJzY3JpYmFibGUuanNcIjtcbnZhciBNdXRhdGlvbkNhY2hlID0gY2xhc3MgZXh0ZW5kcyBTdWJzY3JpYmFibGUge1xuICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy4jbXV0YXRpb25zID0gW107XG4gICAgdGhpcy4jbXV0YXRpb25JZCA9IDA7XG4gIH1cbiAgI211dGF0aW9ucztcbiAgI211dGF0aW9uSWQ7XG4gICNyZXN1bWluZztcbiAgYnVpbGQoY2xpZW50LCBvcHRpb25zLCBzdGF0ZSkge1xuICAgIGNvbnN0IG11dGF0aW9uID0gbmV3IE11dGF0aW9uKHtcbiAgICAgIG11dGF0aW9uQ2FjaGU6IHRoaXMsXG4gICAgICBtdXRhdGlvbklkOiArK3RoaXMuI211dGF0aW9uSWQsXG4gICAgICBvcHRpb25zOiBjbGllbnQuZGVmYXVsdE11dGF0aW9uT3B0aW9ucyhvcHRpb25zKSxcbiAgICAgIHN0YXRlXG4gICAgfSk7XG4gICAgdGhpcy5hZGQobXV0YXRpb24pO1xuICAgIHJldHVybiBtdXRhdGlvbjtcbiAgfVxuICBhZGQobXV0YXRpb24pIHtcbiAgICB0aGlzLiNtdXRhdGlvbnMucHVzaChtdXRhdGlvbik7XG4gICAgdGhpcy5ub3RpZnkoeyB0eXBlOiBcImFkZGVkXCIsIG11dGF0aW9uIH0pO1xuICB9XG4gIHJlbW92ZShtdXRhdGlvbikge1xuICAgIHRoaXMuI211dGF0aW9ucyA9IHRoaXMuI211dGF0aW9ucy5maWx0ZXIoKHgpID0+IHggIT09IG11dGF0aW9uKTtcbiAgICB0aGlzLm5vdGlmeSh7IHR5cGU6IFwicmVtb3ZlZFwiLCBtdXRhdGlvbiB9KTtcbiAgfVxuICBjbGVhcigpIHtcbiAgICBub3RpZnlNYW5hZ2VyLmJhdGNoKCgpID0+IHtcbiAgICAgIHRoaXMuI211dGF0aW9ucy5mb3JFYWNoKChtdXRhdGlvbikgPT4ge1xuICAgICAgICB0aGlzLnJlbW92ZShtdXRhdGlvbik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICBnZXRBbGwoKSB7XG4gICAgcmV0dXJuIHRoaXMuI211dGF0aW9ucztcbiAgfVxuICBmaW5kKGZpbHRlcnMpIHtcbiAgICBjb25zdCBkZWZhdWx0ZWRGaWx0ZXJzID0geyBleGFjdDogdHJ1ZSwgLi4uZmlsdGVycyB9O1xuICAgIHJldHVybiB0aGlzLiNtdXRhdGlvbnMuZmluZChcbiAgICAgIChtdXRhdGlvbikgPT4gbWF0Y2hNdXRhdGlvbihkZWZhdWx0ZWRGaWx0ZXJzLCBtdXRhdGlvbilcbiAgICApO1xuICB9XG4gIGZpbmRBbGwoZmlsdGVycyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuI211dGF0aW9ucy5maWx0ZXIoXG4gICAgICAobXV0YXRpb24pID0+IG1hdGNoTXV0YXRpb24oZmlsdGVycywgbXV0YXRpb24pXG4gICAgKTtcbiAgfVxuICBub3RpZnkoZXZlbnQpIHtcbiAgICBub3RpZnlNYW5hZ2VyLmJhdGNoKCgpID0+IHtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PiB7XG4gICAgICAgIGxpc3RlbmVyKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIHJlc3VtZVBhdXNlZE11dGF0aW9ucygpIHtcbiAgICB0aGlzLiNyZXN1bWluZyA9ICh0aGlzLiNyZXN1bWluZyA/PyBQcm9taXNlLnJlc29sdmUoKSkudGhlbigoKSA9PiB7XG4gICAgICBjb25zdCBwYXVzZWRNdXRhdGlvbnMgPSB0aGlzLiNtdXRhdGlvbnMuZmlsdGVyKCh4KSA9PiB4LnN0YXRlLmlzUGF1c2VkKTtcbiAgICAgIHJldHVybiBub3RpZnlNYW5hZ2VyLmJhdGNoKFxuICAgICAgICAoKSA9PiBwYXVzZWRNdXRhdGlvbnMucmVkdWNlKFxuICAgICAgICAgIChwcm9taXNlLCBtdXRhdGlvbikgPT4gcHJvbWlzZS50aGVuKCgpID0+IG11dGF0aW9uLmNvbnRpbnVlKCkuY2F0Y2gobm9vcCkpLFxuICAgICAgICAgIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfSkudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLiNyZXN1bWluZyA9IHZvaWQgMDtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy4jcmVzdW1pbmc7XG4gIH1cbn07XG5leHBvcnQge1xuICBNdXRhdGlvbkNhY2hlXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXV0YXRpb25DYWNoZS5qcy5tYXAiXSwibmFtZXMiOlsibm90aWZ5TWFuYWdlciIsIk11dGF0aW9uIiwibWF0Y2hNdXRhdGlvbiIsIm5vb3AiLCJTdWJzY3JpYmFibGUiLCJNdXRhdGlvbkNhY2hlIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJtdXRhdGlvbnMiLCJtdXRhdGlvbklkIiwicmVzdW1pbmciLCJidWlsZCIsImNsaWVudCIsIm9wdGlvbnMiLCJzdGF0ZSIsIm11dGF0aW9uIiwibXV0YXRpb25DYWNoZSIsImRlZmF1bHRNdXRhdGlvbk9wdGlvbnMiLCJhZGQiLCJwdXNoIiwibm90aWZ5IiwidHlwZSIsInJlbW92ZSIsImZpbHRlciIsIngiLCJjbGVhciIsImJhdGNoIiwiZm9yRWFjaCIsImdldEFsbCIsImZpbmQiLCJmaWx0ZXJzIiwiZGVmYXVsdGVkRmlsdGVycyIsImV4YWN0IiwiZmluZEFsbCIsImV2ZW50IiwibGlzdGVuZXJzIiwibGlzdGVuZXIiLCJyZXN1bWVQYXVzZWRNdXRhdGlvbnMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJwYXVzZWRNdXRhdGlvbnMiLCJpc1BhdXNlZCIsInJlZHVjZSIsInByb21pc2UiLCJjb250aW51ZSIsImNhdGNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/mutationCache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/mutationObserver.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/mutationObserver.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MutationObserver: () => (/* binding */ MutationObserver)\n/* harmony export */ });\n/* harmony import */ var _mutation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mutation.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/mutation.js\");\n/* harmony import */ var _notifyManager_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./notifyManager.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/notifyManager.js\");\n/* harmony import */ var _subscribable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/subscribable.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js\");\n// src/mutationObserver.ts\n\n\n\n\nvar MutationObserver = class extends _subscribable_js__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(client, options){\n        super();\n        this.#currentResult = void 0;\n        this.#client = client;\n        this.setOptions(options);\n        this.bindMethods();\n        this.#updateResult();\n    }\n    #client;\n    #currentResult;\n    #currentMutation;\n    #mutateOptions;\n    bindMethods() {\n        this.mutate = this.mutate.bind(this);\n        this.reset = this.reset.bind(this);\n    }\n    setOptions(options) {\n        const prevOptions = this.options;\n        this.options = this.#client.defaultMutationOptions(options);\n        if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.shallowEqualObjects)(prevOptions, this.options)) {\n            this.#client.getMutationCache().notify({\n                type: \"observerOptionsUpdated\",\n                mutation: this.#currentMutation,\n                observer: this\n            });\n        }\n        this.#currentMutation?.setOptions(this.options);\n        if (prevOptions?.mutationKey && this.options.mutationKey && (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.hashKey)(prevOptions.mutationKey) !== (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.hashKey)(this.options.mutationKey)) {\n            this.reset();\n        }\n    }\n    onUnsubscribe() {\n        if (!this.hasListeners()) {\n            this.#currentMutation?.removeObserver(this);\n        }\n    }\n    onMutationUpdate(action) {\n        this.#updateResult();\n        this.#notify(action);\n    }\n    getCurrentResult() {\n        return this.#currentResult;\n    }\n    reset() {\n        this.#currentMutation?.removeObserver(this);\n        this.#currentMutation = void 0;\n        this.#updateResult();\n        this.#notify();\n    }\n    mutate(variables, options) {\n        this.#mutateOptions = options;\n        this.#currentMutation?.removeObserver(this);\n        this.#currentMutation = this.#client.getMutationCache().build(this.#client, this.options);\n        this.#currentMutation.addObserver(this);\n        return this.#currentMutation.execute(variables);\n    }\n    #updateResult() {\n        const state = this.#currentMutation?.state ?? (0,_mutation_js__WEBPACK_IMPORTED_MODULE_2__.getDefaultState)();\n        this.#currentResult = {\n            ...state,\n            isPending: state.status === \"pending\",\n            isSuccess: state.status === \"success\",\n            isError: state.status === \"error\",\n            isIdle: state.status === \"idle\",\n            mutate: this.mutate,\n            reset: this.reset\n        };\n    }\n    #notify(action) {\n        _notifyManager_js__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            if (this.#mutateOptions && this.hasListeners()) {\n                const variables = this.#currentResult.variables;\n                const context = this.#currentResult.context;\n                if (action?.type === \"success\") {\n                    this.#mutateOptions.onSuccess?.(action.data, variables, context);\n                    this.#mutateOptions.onSettled?.(action.data, null, variables, context);\n                } else if (action?.type === \"error\") {\n                    this.#mutateOptions.onError?.(action.error, variables, context);\n                    this.#mutateOptions.onSettled?.(void 0, action.error, variables, context);\n                }\n            }\n            this.listeners.forEach((listener)=>{\n                listener(this.#currentResult);\n            });\n        });\n    }\n};\n //# sourceMappingURL=mutationObserver.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/mutationObserver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/notifyManager.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/notifyManager.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNotifyManager: () => (/* binding */ createNotifyManager),\n/* harmony export */   notifyManager: () => (/* binding */ notifyManager)\n/* harmony export */ });\n// src/notifyManager.ts\nfunction createNotifyManager() {\n    let queue = [];\n    let transactions = 0;\n    let notifyFn = (callback)=>{\n        callback();\n    };\n    let batchNotifyFn = (callback)=>{\n        callback();\n    };\n    let scheduleFn = (cb)=>setTimeout(cb, 0);\n    const setScheduler = (fn)=>{\n        scheduleFn = fn;\n    };\n    const batch = (callback)=>{\n        let result;\n        transactions++;\n        try {\n            result = callback();\n        } finally{\n            transactions--;\n            if (!transactions) {\n                flush();\n            }\n        }\n        return result;\n    };\n    const schedule = (callback)=>{\n        if (transactions) {\n            queue.push(callback);\n        } else {\n            scheduleFn(()=>{\n                notifyFn(callback);\n            });\n        }\n    };\n    const batchCalls = (callback)=>{\n        return (...args)=>{\n            schedule(()=>{\n                callback(...args);\n            });\n        };\n    };\n    const flush = ()=>{\n        const originalQueue = queue;\n        queue = [];\n        if (originalQueue.length) {\n            scheduleFn(()=>{\n                batchNotifyFn(()=>{\n                    originalQueue.forEach((callback)=>{\n                        notifyFn(callback);\n                    });\n                });\n            });\n        }\n    };\n    const setNotifyFunction = (fn)=>{\n        notifyFn = fn;\n    };\n    const setBatchNotifyFunction = (fn)=>{\n        batchNotifyFn = fn;\n    };\n    return {\n        batch,\n        batchCalls,\n        schedule,\n        setNotifyFunction,\n        setBatchNotifyFunction,\n        setScheduler\n    };\n}\nvar notifyManager = createNotifyManager();\n //# sourceMappingURL=notifyManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL25vdGlmeU1hbmFnZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx1QkFBdUI7QUFDdkIsU0FBU0E7SUFDUCxJQUFJQyxRQUFRLEVBQUU7SUFDZCxJQUFJQyxlQUFlO0lBQ25CLElBQUlDLFdBQVcsQ0FBQ0M7UUFDZEE7SUFDRjtJQUNBLElBQUlDLGdCQUFnQixDQUFDRDtRQUNuQkE7SUFDRjtJQUNBLElBQUlFLGFBQWEsQ0FBQ0MsS0FBT0MsV0FBV0QsSUFBSTtJQUN4QyxNQUFNRSxlQUFlLENBQUNDO1FBQ3BCSixhQUFhSTtJQUNmO0lBQ0EsTUFBTUMsUUFBUSxDQUFDUDtRQUNiLElBQUlRO1FBQ0pWO1FBQ0EsSUFBSTtZQUNGVSxTQUFTUjtRQUNYLFNBQVU7WUFDUkY7WUFDQSxJQUFJLENBQUNBLGNBQWM7Z0JBQ2pCVztZQUNGO1FBQ0Y7UUFDQSxPQUFPRDtJQUNUO0lBQ0EsTUFBTUUsV0FBVyxDQUFDVjtRQUNoQixJQUFJRixjQUFjO1lBQ2hCRCxNQUFNYyxJQUFJLENBQUNYO1FBQ2IsT0FBTztZQUNMRSxXQUFXO2dCQUNUSCxTQUFTQztZQUNYO1FBQ0Y7SUFDRjtJQUNBLE1BQU1ZLGFBQWEsQ0FBQ1o7UUFDbEIsT0FBTyxDQUFDLEdBQUdhO1lBQ1RILFNBQVM7Z0JBQ1BWLFlBQVlhO1lBQ2Q7UUFDRjtJQUNGO0lBQ0EsTUFBTUosUUFBUTtRQUNaLE1BQU1LLGdCQUFnQmpCO1FBQ3RCQSxRQUFRLEVBQUU7UUFDVixJQUFJaUIsY0FBY0MsTUFBTSxFQUFFO1lBQ3hCYixXQUFXO2dCQUNURCxjQUFjO29CQUNaYSxjQUFjRSxPQUFPLENBQUMsQ0FBQ2hCO3dCQUNyQkQsU0FBU0M7b0JBQ1g7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0Y7SUFDQSxNQUFNaUIsb0JBQW9CLENBQUNYO1FBQ3pCUCxXQUFXTztJQUNiO0lBQ0EsTUFBTVkseUJBQXlCLENBQUNaO1FBQzlCTCxnQkFBZ0JLO0lBQ2xCO0lBQ0EsT0FBTztRQUNMQztRQUNBSztRQUNBRjtRQUNBTztRQUNBQztRQUNBYjtJQUNGO0FBQ0Y7QUFDQSxJQUFJYyxnQkFBZ0J2QjtBQUlsQixDQUNGLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZV9jbGllbnQvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL25vdGlmeU1hbmFnZXIuanM/ZjY1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvbm90aWZ5TWFuYWdlci50c1xuZnVuY3Rpb24gY3JlYXRlTm90aWZ5TWFuYWdlcigpIHtcbiAgbGV0IHF1ZXVlID0gW107XG4gIGxldCB0cmFuc2FjdGlvbnMgPSAwO1xuICBsZXQgbm90aWZ5Rm4gPSAoY2FsbGJhY2spID0+IHtcbiAgICBjYWxsYmFjaygpO1xuICB9O1xuICBsZXQgYmF0Y2hOb3RpZnlGbiA9IChjYWxsYmFjaykgPT4ge1xuICAgIGNhbGxiYWNrKCk7XG4gIH07XG4gIGxldCBzY2hlZHVsZUZuID0gKGNiKSA9PiBzZXRUaW1lb3V0KGNiLCAwKTtcbiAgY29uc3Qgc2V0U2NoZWR1bGVyID0gKGZuKSA9PiB7XG4gICAgc2NoZWR1bGVGbiA9IGZuO1xuICB9O1xuICBjb25zdCBiYXRjaCA9IChjYWxsYmFjaykgPT4ge1xuICAgIGxldCByZXN1bHQ7XG4gICAgdHJhbnNhY3Rpb25zKys7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGNhbGxiYWNrKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyYW5zYWN0aW9ucy0tO1xuICAgICAgaWYgKCF0cmFuc2FjdGlvbnMpIHtcbiAgICAgICAgZmx1c2goKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgY29uc3Qgc2NoZWR1bGUgPSAoY2FsbGJhY2spID0+IHtcbiAgICBpZiAodHJhbnNhY3Rpb25zKSB7XG4gICAgICBxdWV1ZS5wdXNoKGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NoZWR1bGVGbigoKSA9PiB7XG4gICAgICAgIG5vdGlmeUZuKGNhbGxiYWNrKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgYmF0Y2hDYWxscyA9IChjYWxsYmFjaykgPT4ge1xuICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgICAgc2NoZWR1bGUoKCkgPT4ge1xuICAgICAgICBjYWxsYmFjayguLi5hcmdzKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG4gIGNvbnN0IGZsdXNoID0gKCkgPT4ge1xuICAgIGNvbnN0IG9yaWdpbmFsUXVldWUgPSBxdWV1ZTtcbiAgICBxdWV1ZSA9IFtdO1xuICAgIGlmIChvcmlnaW5hbFF1ZXVlLmxlbmd0aCkge1xuICAgICAgc2NoZWR1bGVGbigoKSA9PiB7XG4gICAgICAgIGJhdGNoTm90aWZ5Rm4oKCkgPT4ge1xuICAgICAgICAgIG9yaWdpbmFsUXVldWUuZm9yRWFjaCgoY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIG5vdGlmeUZuKGNhbGxiYWNrKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHNldE5vdGlmeUZ1bmN0aW9uID0gKGZuKSA9PiB7XG4gICAgbm90aWZ5Rm4gPSBmbjtcbiAgfTtcbiAgY29uc3Qgc2V0QmF0Y2hOb3RpZnlGdW5jdGlvbiA9IChmbikgPT4ge1xuICAgIGJhdGNoTm90aWZ5Rm4gPSBmbjtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBiYXRjaCxcbiAgICBiYXRjaENhbGxzLFxuICAgIHNjaGVkdWxlLFxuICAgIHNldE5vdGlmeUZ1bmN0aW9uLFxuICAgIHNldEJhdGNoTm90aWZ5RnVuY3Rpb24sXG4gICAgc2V0U2NoZWR1bGVyXG4gIH07XG59XG52YXIgbm90aWZ5TWFuYWdlciA9IGNyZWF0ZU5vdGlmeU1hbmFnZXIoKTtcbmV4cG9ydCB7XG4gIGNyZWF0ZU5vdGlmeU1hbmFnZXIsXG4gIG5vdGlmeU1hbmFnZXJcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3RpZnlNYW5hZ2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJjcmVhdGVOb3RpZnlNYW5hZ2VyIiwicXVldWUiLCJ0cmFuc2FjdGlvbnMiLCJub3RpZnlGbiIsImNhbGxiYWNrIiwiYmF0Y2hOb3RpZnlGbiIsInNjaGVkdWxlRm4iLCJjYiIsInNldFRpbWVvdXQiLCJzZXRTY2hlZHVsZXIiLCJmbiIsImJhdGNoIiwicmVzdWx0IiwiZmx1c2giLCJzY2hlZHVsZSIsInB1c2giLCJiYXRjaENhbGxzIiwiYXJncyIsIm9yaWdpbmFsUXVldWUiLCJsZW5ndGgiLCJmb3JFYWNoIiwic2V0Tm90aWZ5RnVuY3Rpb24iLCJzZXRCYXRjaE5vdGlmeUZ1bmN0aW9uIiwibm90aWZ5TWFuYWdlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/notifyManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/onlineManager.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/onlineManager.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OnlineManager: () => (/* binding */ OnlineManager),\n/* harmony export */   onlineManager: () => (/* binding */ onlineManager)\n/* harmony export */ });\n/* harmony import */ var _subscribable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/subscribable.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js\");\n// src/onlineManager.ts\n\n\nvar OnlineManager = class extends _subscribable_js__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    #online;\n    #cleanup;\n    #setup;\n    constructor(){\n        super();\n        this.#online = true;\n        this.#setup = (onOnline)=>{\n            if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__.isServer && window.addEventListener) {\n                const onlineListener = ()=>onOnline(true);\n                const offlineListener = ()=>onOnline(false);\n                window.addEventListener(\"online\", onlineListener, false);\n                window.addEventListener(\"offline\", offlineListener, false);\n                return ()=>{\n                    window.removeEventListener(\"online\", onlineListener);\n                    window.removeEventListener(\"offline\", offlineListener);\n                };\n            }\n            return;\n        };\n    }\n    onSubscribe() {\n        if (!this.#cleanup) {\n            this.setEventListener(this.#setup);\n        }\n    }\n    onUnsubscribe() {\n        if (!this.hasListeners()) {\n            this.#cleanup?.();\n            this.#cleanup = void 0;\n        }\n    }\n    setEventListener(setup) {\n        this.#setup = setup;\n        this.#cleanup?.();\n        this.#cleanup = setup(this.setOnline.bind(this));\n    }\n    setOnline(online) {\n        const changed = this.#online !== online;\n        if (changed) {\n            this.#online = online;\n            this.listeners.forEach((listener)=>{\n                listener(online);\n            });\n        }\n    }\n    isOnline() {\n        return this.#online;\n    }\n};\nvar onlineManager = new OnlineManager();\n //# sourceMappingURL=onlineManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL29ubGluZU1hbmFnZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLHVCQUF1QjtBQUMwQjtBQUNYO0FBQ3RDLElBQUlFLGdCQUFnQixjQUFjRiwwREFBWUE7SUFDNUMsQ0FBQ0csTUFBTSxDQUFRO0lBQ2YsQ0FBQ0MsT0FBTyxDQUFDO0lBQ1QsQ0FBQ0MsS0FBSyxDQUFDO0lBQ1BDLGFBQWM7UUFDWixLQUFLO2FBSlAsQ0FBQ0gsTUFBTSxHQUFHO1FBS1IsSUFBSSxDQUFDLENBQUNFLEtBQUssR0FBRyxDQUFDRTtZQUNiLElBQUksQ0FBQ04sK0NBQVFBLElBQUlPLE9BQU9DLGdCQUFnQixFQUFFO2dCQUN4QyxNQUFNQyxpQkFBaUIsSUFBTUgsU0FBUztnQkFDdEMsTUFBTUksa0JBQWtCLElBQU1KLFNBQVM7Z0JBQ3ZDQyxPQUFPQyxnQkFBZ0IsQ0FBQyxVQUFVQyxnQkFBZ0I7Z0JBQ2xERixPQUFPQyxnQkFBZ0IsQ0FBQyxXQUFXRSxpQkFBaUI7Z0JBQ3BELE9BQU87b0JBQ0xILE9BQU9JLG1CQUFtQixDQUFDLFVBQVVGO29CQUNyQ0YsT0FBT0ksbUJBQW1CLENBQUMsV0FBV0Q7Z0JBQ3hDO1lBQ0Y7WUFDQTtRQUNGO0lBQ0Y7SUFDQUUsY0FBYztRQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQ1QsT0FBTyxFQUFFO1lBQ2xCLElBQUksQ0FBQ1UsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUNULEtBQUs7UUFDbkM7SUFDRjtJQUNBVSxnQkFBZ0I7UUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDQyxZQUFZLElBQUk7WUFDeEIsSUFBSSxDQUFDLENBQUNaLE9BQU87WUFDYixJQUFJLENBQUMsQ0FBQ0EsT0FBTyxHQUFHLEtBQUs7UUFDdkI7SUFDRjtJQUNBVSxpQkFBaUJULEtBQUssRUFBRTtRQUN0QixJQUFJLENBQUMsQ0FBQ0EsS0FBSyxHQUFHQTtRQUNkLElBQUksQ0FBQyxDQUFDRCxPQUFPO1FBQ2IsSUFBSSxDQUFDLENBQUNBLE9BQU8sR0FBR0MsTUFBTSxJQUFJLENBQUNZLFNBQVMsQ0FBQ0MsSUFBSSxDQUFDLElBQUk7SUFDaEQ7SUFDQUQsVUFBVWQsTUFBTSxFQUFFO1FBQ2hCLE1BQU1nQixVQUFVLElBQUksQ0FBQyxDQUFDaEIsTUFBTSxLQUFLQTtRQUNqQyxJQUFJZ0IsU0FBUztZQUNYLElBQUksQ0FBQyxDQUFDaEIsTUFBTSxHQUFHQTtZQUNmLElBQUksQ0FBQ2lCLFNBQVMsQ0FBQ0MsT0FBTyxDQUFDLENBQUNDO2dCQUN0QkEsU0FBU25CO1lBQ1g7UUFDRjtJQUNGO0lBQ0FvQixXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUMsQ0FBQ3BCLE1BQU07SUFDckI7QUFDRjtBQUNBLElBQUlxQixnQkFBZ0IsSUFBSXRCO0FBSXRCLENBQ0YseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlX2NsaWVudC8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcXVlcnktY29yZS9idWlsZC9tb2Rlcm4vb25saW5lTWFuYWdlci5qcz9lMmEzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9vbmxpbmVNYW5hZ2VyLnRzXG5pbXBvcnQgeyBTdWJzY3JpYmFibGUgfSBmcm9tIFwiLi9zdWJzY3JpYmFibGUuanNcIjtcbmltcG9ydCB7IGlzU2VydmVyIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbnZhciBPbmxpbmVNYW5hZ2VyID0gY2xhc3MgZXh0ZW5kcyBTdWJzY3JpYmFibGUge1xuICAjb25saW5lID0gdHJ1ZTtcbiAgI2NsZWFudXA7XG4gICNzZXR1cDtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLiNzZXR1cCA9IChvbk9ubGluZSkgPT4ge1xuICAgICAgaWYgKCFpc1NlcnZlciAmJiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICBjb25zdCBvbmxpbmVMaXN0ZW5lciA9ICgpID0+IG9uT25saW5lKHRydWUpO1xuICAgICAgICBjb25zdCBvZmZsaW5lTGlzdGVuZXIgPSAoKSA9PiBvbk9ubGluZShmYWxzZSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwib25saW5lXCIsIG9ubGluZUxpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwib2ZmbGluZVwiLCBvZmZsaW5lTGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm9ubGluZVwiLCBvbmxpbmVMaXN0ZW5lcik7XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJvZmZsaW5lXCIsIG9mZmxpbmVMaXN0ZW5lcik7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfTtcbiAgfVxuICBvblN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMuI2NsZWFudXApIHtcbiAgICAgIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcih0aGlzLiNzZXR1cCk7XG4gICAgfVxuICB9XG4gIG9uVW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLmhhc0xpc3RlbmVycygpKSB7XG4gICAgICB0aGlzLiNjbGVhbnVwPy4oKTtcbiAgICAgIHRoaXMuI2NsZWFudXAgPSB2b2lkIDA7XG4gICAgfVxuICB9XG4gIHNldEV2ZW50TGlzdGVuZXIoc2V0dXApIHtcbiAgICB0aGlzLiNzZXR1cCA9IHNldHVwO1xuICAgIHRoaXMuI2NsZWFudXA/LigpO1xuICAgIHRoaXMuI2NsZWFudXAgPSBzZXR1cCh0aGlzLnNldE9ubGluZS5iaW5kKHRoaXMpKTtcbiAgfVxuICBzZXRPbmxpbmUob25saW5lKSB7XG4gICAgY29uc3QgY2hhbmdlZCA9IHRoaXMuI29ubGluZSAhPT0gb25saW5lO1xuICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICB0aGlzLiNvbmxpbmUgPSBvbmxpbmU7XG4gICAgICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4ge1xuICAgICAgICBsaXN0ZW5lcihvbmxpbmUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGlzT25saW5lKCkge1xuICAgIHJldHVybiB0aGlzLiNvbmxpbmU7XG4gIH1cbn07XG52YXIgb25saW5lTWFuYWdlciA9IG5ldyBPbmxpbmVNYW5hZ2VyKCk7XG5leHBvcnQge1xuICBPbmxpbmVNYW5hZ2VyLFxuICBvbmxpbmVNYW5hZ2VyXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b25saW5lTWFuYWdlci5qcy5tYXAiXSwibmFtZXMiOlsiU3Vic2NyaWJhYmxlIiwiaXNTZXJ2ZXIiLCJPbmxpbmVNYW5hZ2VyIiwib25saW5lIiwiY2xlYW51cCIsInNldHVwIiwiY29uc3RydWN0b3IiLCJvbk9ubGluZSIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbmxpbmVMaXN0ZW5lciIsIm9mZmxpbmVMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvblN1YnNjcmliZSIsInNldEV2ZW50TGlzdGVuZXIiLCJvblVuc3Vic2NyaWJlIiwiaGFzTGlzdGVuZXJzIiwic2V0T25saW5lIiwiYmluZCIsImNoYW5nZWQiLCJsaXN0ZW5lcnMiLCJmb3JFYWNoIiwibGlzdGVuZXIiLCJpc09ubGluZSIsIm9ubGluZU1hbmFnZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/onlineManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/query.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/query.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Query: () => (/* binding */ Query)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js\");\n/* harmony import */ var _notifyManager_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./notifyManager.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/notifyManager.js\");\n/* harmony import */ var _retryer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./retryer.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/retryer.js\");\n/* harmony import */ var _removable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./removable.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/removable.js\");\n// src/query.ts\n\n\n\n\nvar Query = class extends _removable_js__WEBPACK_IMPORTED_MODULE_0__.Removable {\n    constructor(config){\n        super();\n        this.#abortSignalConsumed = false;\n        this.#defaultOptions = config.defaultOptions;\n        this.#setOptions(config.options);\n        this.#observers = [];\n        this.#cache = config.cache;\n        this.queryKey = config.queryKey;\n        this.queryHash = config.queryHash;\n        this.#initialState = config.state || getDefaultState(this.options);\n        this.state = this.#initialState;\n        this.scheduleGc();\n    }\n    #initialState;\n    #revertState;\n    #cache;\n    #promise;\n    #retryer;\n    #observers;\n    #defaultOptions;\n    #abortSignalConsumed;\n    get meta() {\n        return this.options.meta;\n    }\n    #setOptions(options) {\n        this.options = {\n            ...this.#defaultOptions,\n            ...options\n        };\n        this.updateGcTime(this.options.gcTime);\n    }\n    optionalRemove() {\n        if (!this.#observers.length && this.state.fetchStatus === \"idle\") {\n            this.#cache.remove(this);\n        }\n    }\n    setData(newData, options) {\n        const data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.replaceData)(this.state.data, newData, this.options);\n        this.#dispatch({\n            data,\n            type: \"success\",\n            dataUpdatedAt: options?.updatedAt,\n            manual: options?.manual\n        });\n        return data;\n    }\n    setState(state, setStateOptions) {\n        this.#dispatch({\n            type: \"setState\",\n            state,\n            setStateOptions\n        });\n    }\n    cancel(options) {\n        const promise = this.#promise;\n        this.#retryer?.cancel(options);\n        return promise ? promise.then(_utils_js__WEBPACK_IMPORTED_MODULE_1__.noop).catch(_utils_js__WEBPACK_IMPORTED_MODULE_1__.noop) : Promise.resolve();\n    }\n    destroy() {\n        super.destroy();\n        this.cancel({\n            silent: true\n        });\n    }\n    reset() {\n        this.destroy();\n        this.setState(this.#initialState);\n    }\n    isActive() {\n        return this.#observers.some((observer)=>observer.options.enabled !== false);\n    }\n    isDisabled() {\n        return this.getObserversCount() > 0 && !this.isActive();\n    }\n    isStale() {\n        return this.state.isInvalidated || !this.state.dataUpdatedAt || this.#observers.some((observer)=>observer.getCurrentResult().isStale);\n    }\n    isStaleByTime(staleTime = 0) {\n        return this.state.isInvalidated || !this.state.dataUpdatedAt || !(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.timeUntilStale)(this.state.dataUpdatedAt, staleTime);\n    }\n    onFocus() {\n        const observer = this.#observers.find((x)=>x.shouldFetchOnWindowFocus());\n        observer?.refetch({\n            cancelRefetch: false\n        });\n        this.#retryer?.continue();\n    }\n    onOnline() {\n        const observer = this.#observers.find((x)=>x.shouldFetchOnReconnect());\n        observer?.refetch({\n            cancelRefetch: false\n        });\n        this.#retryer?.continue();\n    }\n    addObserver(observer) {\n        if (!this.#observers.includes(observer)) {\n            this.#observers.push(observer);\n            this.clearGcTimeout();\n            this.#cache.notify({\n                type: \"observerAdded\",\n                query: this,\n                observer\n            });\n        }\n    }\n    removeObserver(observer) {\n        if (this.#observers.includes(observer)) {\n            this.#observers = this.#observers.filter((x)=>x !== observer);\n            if (!this.#observers.length) {\n                if (this.#retryer) {\n                    if (this.#abortSignalConsumed) {\n                        this.#retryer.cancel({\n                            revert: true\n                        });\n                    } else {\n                        this.#retryer.cancelRetry();\n                    }\n                }\n                this.scheduleGc();\n            }\n            this.#cache.notify({\n                type: \"observerRemoved\",\n                query: this,\n                observer\n            });\n        }\n    }\n    getObserversCount() {\n        return this.#observers.length;\n    }\n    invalidate() {\n        if (!this.state.isInvalidated) {\n            this.#dispatch({\n                type: \"invalidate\"\n            });\n        }\n    }\n    fetch(options, fetchOptions) {\n        if (this.state.fetchStatus !== \"idle\") {\n            if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n                this.cancel({\n                    silent: true\n                });\n            } else if (this.#promise) {\n                this.#retryer?.continueRetry();\n                return this.#promise;\n            }\n        }\n        if (options) {\n            this.#setOptions(options);\n        }\n        if (!this.options.queryFn) {\n            const observer = this.#observers.find((x)=>x.options.queryFn);\n            if (observer) {\n                this.#setOptions(observer.options);\n            }\n        }\n        if (true) {\n            if (!Array.isArray(this.options.queryKey)) {\n                console.error(`As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`);\n            }\n        }\n        const abortController = new AbortController();\n        const queryFnContext = {\n            queryKey: this.queryKey,\n            meta: this.meta\n        };\n        const addSignalProperty = (object)=>{\n            Object.defineProperty(object, \"signal\", {\n                enumerable: true,\n                get: ()=>{\n                    this.#abortSignalConsumed = true;\n                    return abortController.signal;\n                }\n            });\n        };\n        addSignalProperty(queryFnContext);\n        const fetchFn = ()=>{\n            if (!this.options.queryFn) {\n                return Promise.reject(new Error(`Missing queryFn: '${this.options.queryHash}'`));\n            }\n            this.#abortSignalConsumed = false;\n            if (this.options.persister) {\n                return this.options.persister(this.options.queryFn, queryFnContext, this);\n            }\n            return this.options.queryFn(queryFnContext);\n        };\n        const context = {\n            fetchOptions,\n            options: this.options,\n            queryKey: this.queryKey,\n            state: this.state,\n            fetchFn\n        };\n        addSignalProperty(context);\n        this.options.behavior?.onFetch(context, this);\n        this.#revertState = this.state;\n        if (this.state.fetchStatus === \"idle\" || this.state.fetchMeta !== context.fetchOptions?.meta) {\n            this.#dispatch({\n                type: \"fetch\",\n                meta: context.fetchOptions?.meta\n            });\n        }\n        const onError = (error)=>{\n            if (!((0,_retryer_js__WEBPACK_IMPORTED_MODULE_2__.isCancelledError)(error) && error.silent)) {\n                this.#dispatch({\n                    type: \"error\",\n                    error\n                });\n            }\n            if (!(0,_retryer_js__WEBPACK_IMPORTED_MODULE_2__.isCancelledError)(error)) {\n                this.#cache.config.onError?.(error, this);\n                this.#cache.config.onSettled?.(this.state.data, error, this);\n            }\n            if (!this.isFetchingOptimistic) {\n                this.scheduleGc();\n            }\n            this.isFetchingOptimistic = false;\n        };\n        this.#retryer = (0,_retryer_js__WEBPACK_IMPORTED_MODULE_2__.createRetryer)({\n            fn: context.fetchFn,\n            abort: abortController.abort.bind(abortController),\n            onSuccess: (data)=>{\n                if (typeof data === \"undefined\") {\n                    if (true) {\n                        console.error(`Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`);\n                    }\n                    onError(new Error(`${this.queryHash} data is undefined`));\n                    return;\n                }\n                this.setData(data);\n                this.#cache.config.onSuccess?.(data, this);\n                this.#cache.config.onSettled?.(data, this.state.error, this);\n                if (!this.isFetchingOptimistic) {\n                    this.scheduleGc();\n                }\n                this.isFetchingOptimistic = false;\n            },\n            onError,\n            onFail: (failureCount, error)=>{\n                this.#dispatch({\n                    type: \"failed\",\n                    failureCount,\n                    error\n                });\n            },\n            onPause: ()=>{\n                this.#dispatch({\n                    type: \"pause\"\n                });\n            },\n            onContinue: ()=>{\n                this.#dispatch({\n                    type: \"continue\"\n                });\n            },\n            retry: context.options.retry,\n            retryDelay: context.options.retryDelay,\n            networkMode: context.options.networkMode\n        });\n        this.#promise = this.#retryer.promise;\n        return this.#promise;\n    }\n    #dispatch(action) {\n        const reducer = (state)=>{\n            switch(action.type){\n                case \"failed\":\n                    return {\n                        ...state,\n                        fetchFailureCount: action.failureCount,\n                        fetchFailureReason: action.error\n                    };\n                case \"pause\":\n                    return {\n                        ...state,\n                        fetchStatus: \"paused\"\n                    };\n                case \"continue\":\n                    return {\n                        ...state,\n                        fetchStatus: \"fetching\"\n                    };\n                case \"fetch\":\n                    return {\n                        ...state,\n                        fetchFailureCount: 0,\n                        fetchFailureReason: null,\n                        fetchMeta: action.meta ?? null,\n                        fetchStatus: (0,_retryer_js__WEBPACK_IMPORTED_MODULE_2__.canFetch)(this.options.networkMode) ? \"fetching\" : \"paused\",\n                        ...!state.dataUpdatedAt && {\n                            error: null,\n                            status: \"pending\"\n                        }\n                    };\n                case \"success\":\n                    return {\n                        ...state,\n                        data: action.data,\n                        dataUpdateCount: state.dataUpdateCount + 1,\n                        dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n                        error: null,\n                        isInvalidated: false,\n                        status: \"success\",\n                        ...!action.manual && {\n                            fetchStatus: \"idle\",\n                            fetchFailureCount: 0,\n                            fetchFailureReason: null\n                        }\n                    };\n                case \"error\":\n                    const error = action.error;\n                    if ((0,_retryer_js__WEBPACK_IMPORTED_MODULE_2__.isCancelledError)(error) && error.revert && this.#revertState) {\n                        return {\n                            ...this.#revertState,\n                            fetchStatus: \"idle\"\n                        };\n                    }\n                    return {\n                        ...state,\n                        error,\n                        errorUpdateCount: state.errorUpdateCount + 1,\n                        errorUpdatedAt: Date.now(),\n                        fetchFailureCount: state.fetchFailureCount + 1,\n                        fetchFailureReason: error,\n                        fetchStatus: \"idle\",\n                        status: \"error\"\n                    };\n                case \"invalidate\":\n                    return {\n                        ...state,\n                        isInvalidated: true\n                    };\n                case \"setState\":\n                    return {\n                        ...state,\n                        ...action.state\n                    };\n            }\n        };\n        this.state = reducer(this.state);\n        _notifyManager_js__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.#observers.forEach((observer)=>{\n                observer.onQueryUpdate();\n            });\n            this.#cache.notify({\n                query: this,\n                type: \"updated\",\n                action\n            });\n        });\n    }\n};\nfunction getDefaultState(options) {\n    const data = typeof options.initialData === \"function\" ? options.initialData() : options.initialData;\n    const hasData = typeof data !== \"undefined\";\n    const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === \"function\" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n    return {\n        data,\n        dataUpdateCount: 0,\n        dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n        error: null,\n        errorUpdateCount: 0,\n        errorUpdatedAt: 0,\n        fetchFailureCount: 0,\n        fetchFailureReason: null,\n        fetchMeta: null,\n        isInvalidated: false,\n        status: hasData ? \"success\" : \"pending\",\n        fetchStatus: \"idle\"\n    };\n}\n //# sourceMappingURL=query.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/query.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/queryCache.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/queryCache.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryCache: () => (/* binding */ QueryCache)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js\");\n/* harmony import */ var _query_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./query.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/query.js\");\n/* harmony import */ var _notifyManager_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./notifyManager.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/notifyManager.js\");\n/* harmony import */ var _subscribable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/subscribable.js\");\n// src/queryCache.ts\n\n\n\n\nvar QueryCache = class extends _subscribable_js__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(config = {}){\n        super();\n        this.config = config;\n        this.#queries = /* @__PURE__ */ new Map();\n    }\n    #queries;\n    build(client, options, state) {\n        const queryKey = options.queryKey;\n        const queryHash = options.queryHash ?? (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.hashQueryKeyByOptions)(queryKey, options);\n        let query = this.get(queryHash);\n        if (!query) {\n            query = new _query_js__WEBPACK_IMPORTED_MODULE_2__.Query({\n                cache: this,\n                queryKey,\n                queryHash,\n                options: client.defaultQueryOptions(options),\n                state,\n                defaultOptions: client.getQueryDefaults(queryKey)\n            });\n            this.add(query);\n        }\n        return query;\n    }\n    add(query) {\n        if (!this.#queries.has(query.queryHash)) {\n            this.#queries.set(query.queryHash, query);\n            this.notify({\n                type: \"added\",\n                query\n            });\n        }\n    }\n    remove(query) {\n        const queryInMap = this.#queries.get(query.queryHash);\n        if (queryInMap) {\n            query.destroy();\n            if (queryInMap === query) {\n                this.#queries.delete(query.queryHash);\n            }\n            this.notify({\n                type: \"removed\",\n                query\n            });\n        }\n    }\n    clear() {\n        _notifyManager_js__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.getAll().forEach((query)=>{\n                this.remove(query);\n            });\n        });\n    }\n    get(queryHash) {\n        return this.#queries.get(queryHash);\n    }\n    getAll() {\n        return [\n            ...this.#queries.values()\n        ];\n    }\n    find(filters) {\n        const defaultedFilters = {\n            exact: true,\n            ...filters\n        };\n        return this.getAll().find((query)=>(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.matchQuery)(defaultedFilters, query));\n    }\n    findAll(filters = {}) {\n        const queries = this.getAll();\n        return Object.keys(filters).length > 0 ? queries.filter((query)=>(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.matchQuery)(filters, query)) : queries;\n    }\n    notify(event) {\n        _notifyManager_js__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.listeners.forEach((listener)=>{\n                listener(event);\n            });\n        });\n    }\n    onFocus() {\n        _notifyManager_js__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.getAll().forEach((query)=>{\n                query.onFocus();\n            });\n        });\n    }\n    onOnline() {\n        _notifyManager_js__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.getAll().forEach((query)=>{\n                query.onOnline();\n            });\n        });\n    }\n};\n //# sourceMappingURL=queryCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL3F1ZXJ5Q2FjaGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxvQkFBb0I7QUFDMkM7QUFDNUI7QUFDZ0I7QUFDRjtBQUNqRCxJQUFJSyxhQUFhLGNBQWNELDBEQUFZQTtJQUN6Q0UsWUFBWUMsU0FBUyxDQUFDLENBQUMsQ0FBRTtRQUN2QixLQUFLO1FBQ0wsSUFBSSxDQUFDQSxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDLENBQUNDLE9BQU8sR0FBRyxhQUFhLEdBQUcsSUFBSUM7SUFDdEM7SUFDQSxDQUFDRCxPQUFPLENBQUM7SUFDVEUsTUFBTUMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLEtBQUssRUFBRTtRQUM1QixNQUFNQyxXQUFXRixRQUFRRSxRQUFRO1FBQ2pDLE1BQU1DLFlBQVlILFFBQVFHLFNBQVMsSUFBSWYsZ0VBQXFCQSxDQUFDYyxVQUFVRjtRQUN2RSxJQUFJSSxRQUFRLElBQUksQ0FBQ0MsR0FBRyxDQUFDRjtRQUNyQixJQUFJLENBQUNDLE9BQU87WUFDVkEsUUFBUSxJQUFJZCw0Q0FBS0EsQ0FBQztnQkFDaEJnQixPQUFPLElBQUk7Z0JBQ1hKO2dCQUNBQztnQkFDQUgsU0FBU0QsT0FBT1EsbUJBQW1CLENBQUNQO2dCQUNwQ0M7Z0JBQ0FPLGdCQUFnQlQsT0FBT1UsZ0JBQWdCLENBQUNQO1lBQzFDO1lBQ0EsSUFBSSxDQUFDUSxHQUFHLENBQUNOO1FBQ1g7UUFDQSxPQUFPQTtJQUNUO0lBQ0FNLElBQUlOLEtBQUssRUFBRTtRQUNULElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQ1IsT0FBTyxDQUFDZSxHQUFHLENBQUNQLE1BQU1ELFNBQVMsR0FBRztZQUN2QyxJQUFJLENBQUMsQ0FBQ1AsT0FBTyxDQUFDZ0IsR0FBRyxDQUFDUixNQUFNRCxTQUFTLEVBQUVDO1lBQ25DLElBQUksQ0FBQ1MsTUFBTSxDQUFDO2dCQUNWQyxNQUFNO2dCQUNOVjtZQUNGO1FBQ0Y7SUFDRjtJQUNBVyxPQUFPWCxLQUFLLEVBQUU7UUFDWixNQUFNWSxhQUFhLElBQUksQ0FBQyxDQUFDcEIsT0FBTyxDQUFDUyxHQUFHLENBQUNELE1BQU1ELFNBQVM7UUFDcEQsSUFBSWEsWUFBWTtZQUNkWixNQUFNYSxPQUFPO1lBQ2IsSUFBSUQsZUFBZVosT0FBTztnQkFDeEIsSUFBSSxDQUFDLENBQUNSLE9BQU8sQ0FBQ3NCLE1BQU0sQ0FBQ2QsTUFBTUQsU0FBUztZQUN0QztZQUNBLElBQUksQ0FBQ1UsTUFBTSxDQUFDO2dCQUFFQyxNQUFNO2dCQUFXVjtZQUFNO1FBQ3ZDO0lBQ0Y7SUFDQWUsUUFBUTtRQUNONUIsNERBQWFBLENBQUM2QixLQUFLLENBQUM7WUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxDQUFDbEI7Z0JBQ3JCLElBQUksQ0FBQ1csTUFBTSxDQUFDWDtZQUNkO1FBQ0Y7SUFDRjtJQUNBQyxJQUFJRixTQUFTLEVBQUU7UUFDYixPQUFPLElBQUksQ0FBQyxDQUFDUCxPQUFPLENBQUNTLEdBQUcsQ0FBQ0Y7SUFDM0I7SUFDQWtCLFNBQVM7UUFDUCxPQUFPO2VBQUksSUFBSSxDQUFDLENBQUN6QixPQUFPLENBQUMyQixNQUFNO1NBQUc7SUFDcEM7SUFDQUMsS0FBS0MsT0FBTyxFQUFFO1FBQ1osTUFBTUMsbUJBQW1CO1lBQUVDLE9BQU87WUFBTSxHQUFHRixPQUFPO1FBQUM7UUFDbkQsT0FBTyxJQUFJLENBQUNKLE1BQU0sR0FBR0csSUFBSSxDQUN2QixDQUFDcEIsUUFBVWYscURBQVVBLENBQUNxQyxrQkFBa0J0QjtJQUU1QztJQUNBd0IsUUFBUUgsVUFBVSxDQUFDLENBQUMsRUFBRTtRQUNwQixNQUFNN0IsVUFBVSxJQUFJLENBQUN5QixNQUFNO1FBQzNCLE9BQU9RLE9BQU9DLElBQUksQ0FBQ0wsU0FBU00sTUFBTSxHQUFHLElBQUluQyxRQUFRb0MsTUFBTSxDQUFDLENBQUM1QixRQUFVZixxREFBVUEsQ0FBQ29DLFNBQVNyQixVQUFVUjtJQUNuRztJQUNBaUIsT0FBT29CLEtBQUssRUFBRTtRQUNaMUMsNERBQWFBLENBQUM2QixLQUFLLENBQUM7WUFDbEIsSUFBSSxDQUFDYyxTQUFTLENBQUNaLE9BQU8sQ0FBQyxDQUFDYTtnQkFDdEJBLFNBQVNGO1lBQ1g7UUFDRjtJQUNGO0lBQ0FHLFVBQVU7UUFDUjdDLDREQUFhQSxDQUFDNkIsS0FBSyxDQUFDO1lBQ2xCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQyxPQUFPLENBQUMsQ0FBQ2xCO2dCQUNyQkEsTUFBTWdDLE9BQU87WUFDZjtRQUNGO0lBQ0Y7SUFDQUMsV0FBVztRQUNUOUMsNERBQWFBLENBQUM2QixLQUFLLENBQUM7WUFDbEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxDQUFDbEI7Z0JBQ3JCQSxNQUFNaUMsUUFBUTtZQUNoQjtRQUNGO0lBQ0Y7QUFDRjtBQUdFLENBQ0Ysc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlX2NsaWVudC8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcXVlcnktY29yZS9idWlsZC9tb2Rlcm4vcXVlcnlDYWNoZS5qcz9iOWVhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9xdWVyeUNhY2hlLnRzXG5pbXBvcnQgeyBoYXNoUXVlcnlLZXlCeU9wdGlvbnMsIG1hdGNoUXVlcnkgfSBmcm9tIFwiLi91dGlscy5qc1wiO1xuaW1wb3J0IHsgUXVlcnkgfSBmcm9tIFwiLi9xdWVyeS5qc1wiO1xuaW1wb3J0IHsgbm90aWZ5TWFuYWdlciB9IGZyb20gXCIuL25vdGlmeU1hbmFnZXIuanNcIjtcbmltcG9ydCB7IFN1YnNjcmliYWJsZSB9IGZyb20gXCIuL3N1YnNjcmliYWJsZS5qc1wiO1xudmFyIFF1ZXJ5Q2FjaGUgPSBjbGFzcyBleHRlbmRzIFN1YnNjcmliYWJsZSB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICB0aGlzLiNxdWVyaWVzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgfVxuICAjcXVlcmllcztcbiAgYnVpbGQoY2xpZW50LCBvcHRpb25zLCBzdGF0ZSkge1xuICAgIGNvbnN0IHF1ZXJ5S2V5ID0gb3B0aW9ucy5xdWVyeUtleTtcbiAgICBjb25zdCBxdWVyeUhhc2ggPSBvcHRpb25zLnF1ZXJ5SGFzaCA/PyBoYXNoUXVlcnlLZXlCeU9wdGlvbnMocXVlcnlLZXksIG9wdGlvbnMpO1xuICAgIGxldCBxdWVyeSA9IHRoaXMuZ2V0KHF1ZXJ5SGFzaCk7XG4gICAgaWYgKCFxdWVyeSkge1xuICAgICAgcXVlcnkgPSBuZXcgUXVlcnkoe1xuICAgICAgICBjYWNoZTogdGhpcyxcbiAgICAgICAgcXVlcnlLZXksXG4gICAgICAgIHF1ZXJ5SGFzaCxcbiAgICAgICAgb3B0aW9uczogY2xpZW50LmRlZmF1bHRRdWVyeU9wdGlvbnMob3B0aW9ucyksXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBkZWZhdWx0T3B0aW9uczogY2xpZW50LmdldFF1ZXJ5RGVmYXVsdHMocXVlcnlLZXkpXG4gICAgICB9KTtcbiAgICAgIHRoaXMuYWRkKHF1ZXJ5KTtcbiAgICB9XG4gICAgcmV0dXJuIHF1ZXJ5O1xuICB9XG4gIGFkZChxdWVyeSkge1xuICAgIGlmICghdGhpcy4jcXVlcmllcy5oYXMocXVlcnkucXVlcnlIYXNoKSkge1xuICAgICAgdGhpcy4jcXVlcmllcy5zZXQocXVlcnkucXVlcnlIYXNoLCBxdWVyeSk7XG4gICAgICB0aGlzLm5vdGlmeSh7XG4gICAgICAgIHR5cGU6IFwiYWRkZWRcIixcbiAgICAgICAgcXVlcnlcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICByZW1vdmUocXVlcnkpIHtcbiAgICBjb25zdCBxdWVyeUluTWFwID0gdGhpcy4jcXVlcmllcy5nZXQocXVlcnkucXVlcnlIYXNoKTtcbiAgICBpZiAocXVlcnlJbk1hcCkge1xuICAgICAgcXVlcnkuZGVzdHJveSgpO1xuICAgICAgaWYgKHF1ZXJ5SW5NYXAgPT09IHF1ZXJ5KSB7XG4gICAgICAgIHRoaXMuI3F1ZXJpZXMuZGVsZXRlKHF1ZXJ5LnF1ZXJ5SGFzaCk7XG4gICAgICB9XG4gICAgICB0aGlzLm5vdGlmeSh7IHR5cGU6IFwicmVtb3ZlZFwiLCBxdWVyeSB9KTtcbiAgICB9XG4gIH1cbiAgY2xlYXIoKSB7XG4gICAgbm90aWZ5TWFuYWdlci5iYXRjaCgoKSA9PiB7XG4gICAgICB0aGlzLmdldEFsbCgpLmZvckVhY2goKHF1ZXJ5KSA9PiB7XG4gICAgICAgIHRoaXMucmVtb3ZlKHF1ZXJ5KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGdldChxdWVyeUhhc2gpIHtcbiAgICByZXR1cm4gdGhpcy4jcXVlcmllcy5nZXQocXVlcnlIYXNoKTtcbiAgfVxuICBnZXRBbGwoKSB7XG4gICAgcmV0dXJuIFsuLi50aGlzLiNxdWVyaWVzLnZhbHVlcygpXTtcbiAgfVxuICBmaW5kKGZpbHRlcnMpIHtcbiAgICBjb25zdCBkZWZhdWx0ZWRGaWx0ZXJzID0geyBleGFjdDogdHJ1ZSwgLi4uZmlsdGVycyB9O1xuICAgIHJldHVybiB0aGlzLmdldEFsbCgpLmZpbmQoXG4gICAgICAocXVlcnkpID0+IG1hdGNoUXVlcnkoZGVmYXVsdGVkRmlsdGVycywgcXVlcnkpXG4gICAgKTtcbiAgfVxuICBmaW5kQWxsKGZpbHRlcnMgPSB7fSkge1xuICAgIGNvbnN0IHF1ZXJpZXMgPSB0aGlzLmdldEFsbCgpO1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhmaWx0ZXJzKS5sZW5ndGggPiAwID8gcXVlcmllcy5maWx0ZXIoKHF1ZXJ5KSA9PiBtYXRjaFF1ZXJ5KGZpbHRlcnMsIHF1ZXJ5KSkgOiBxdWVyaWVzO1xuICB9XG4gIG5vdGlmeShldmVudCkge1xuICAgIG5vdGlmeU1hbmFnZXIuYmF0Y2goKCkgPT4ge1xuICAgICAgdGhpcy5saXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXIpID0+IHtcbiAgICAgICAgbGlzdGVuZXIoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgb25Gb2N1cygpIHtcbiAgICBub3RpZnlNYW5hZ2VyLmJhdGNoKCgpID0+IHtcbiAgICAgIHRoaXMuZ2V0QWxsKCkuZm9yRWFjaCgocXVlcnkpID0+IHtcbiAgICAgICAgcXVlcnkub25Gb2N1cygpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgb25PbmxpbmUoKSB7XG4gICAgbm90aWZ5TWFuYWdlci5iYXRjaCgoKSA9PiB7XG4gICAgICB0aGlzLmdldEFsbCgpLmZvckVhY2goKHF1ZXJ5KSA9PiB7XG4gICAgICAgIHF1ZXJ5Lm9uT25saW5lKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufTtcbmV4cG9ydCB7XG4gIFF1ZXJ5Q2FjaGVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1xdWVyeUNhY2hlLmpzLm1hcCJdLCJuYW1lcyI6WyJoYXNoUXVlcnlLZXlCeU9wdGlvbnMiLCJtYXRjaFF1ZXJ5IiwiUXVlcnkiLCJub3RpZnlNYW5hZ2VyIiwiU3Vic2NyaWJhYmxlIiwiUXVlcnlDYWNoZSIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwicXVlcmllcyIsIk1hcCIsImJ1aWxkIiwiY2xpZW50Iiwib3B0aW9ucyIsInN0YXRlIiwicXVlcnlLZXkiLCJxdWVyeUhhc2giLCJxdWVyeSIsImdldCIsImNhY2hlIiwiZGVmYXVsdFF1ZXJ5T3B0aW9ucyIsImRlZmF1bHRPcHRpb25zIiwiZ2V0UXVlcnlEZWZhdWx0cyIsImFkZCIsImhhcyIsInNldCIsIm5vdGlmeSIsInR5cGUiLCJyZW1vdmUiLCJxdWVyeUluTWFwIiwiZGVzdHJveSIsImRlbGV0ZSIsImNsZWFyIiwiYmF0Y2giLCJnZXRBbGwiLCJmb3JFYWNoIiwidmFsdWVzIiwiZmluZCIsImZpbHRlcnMiLCJkZWZhdWx0ZWRGaWx0ZXJzIiwiZXhhY3QiLCJmaW5kQWxsIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsImZpbHRlciIsImV2ZW50IiwibGlzdGVuZXJzIiwibGlzdGVuZXIiLCJvbkZvY3VzIiwib25PbmxpbmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/queryCache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/queryClient.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/queryClient.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryClient: () => (/* binding */ QueryClient)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js\");\n/* harmony import */ var _queryCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./queryCache.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/queryCache.js\");\n/* harmony import */ var _mutationCache_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mutationCache.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/mutationCache.js\");\n/* harmony import */ var _focusManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./focusManager.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/focusManager.js\");\n/* harmony import */ var _onlineManager_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./onlineManager.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/onlineManager.js\");\n/* harmony import */ var _notifyManager_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./notifyManager.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/notifyManager.js\");\n/* harmony import */ var _infiniteQueryBehavior_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./infiniteQueryBehavior.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/infiniteQueryBehavior.js\");\n// src/queryClient.ts\n\n\n\n\n\n\n\nvar QueryClient = class {\n    #queryCache;\n    #mutationCache;\n    #defaultOptions;\n    #queryDefaults;\n    #mutationDefaults;\n    #mountCount;\n    #unsubscribeFocus;\n    #unsubscribeOnline;\n    constructor(config = {}){\n        this.#queryCache = config.queryCache || new _queryCache_js__WEBPACK_IMPORTED_MODULE_0__.QueryCache();\n        this.#mutationCache = config.mutationCache || new _mutationCache_js__WEBPACK_IMPORTED_MODULE_1__.MutationCache();\n        this.#defaultOptions = config.defaultOptions || {};\n        this.#queryDefaults = /* @__PURE__ */ new Map();\n        this.#mutationDefaults = /* @__PURE__ */ new Map();\n        this.#mountCount = 0;\n    }\n    mount() {\n        this.#mountCount++;\n        if (this.#mountCount !== 1) return;\n        this.#unsubscribeFocus = _focusManager_js__WEBPACK_IMPORTED_MODULE_2__.focusManager.subscribe(()=>{\n            if (_focusManager_js__WEBPACK_IMPORTED_MODULE_2__.focusManager.isFocused()) {\n                this.resumePausedMutations();\n                this.#queryCache.onFocus();\n            }\n        });\n        this.#unsubscribeOnline = _onlineManager_js__WEBPACK_IMPORTED_MODULE_3__.onlineManager.subscribe(()=>{\n            if (_onlineManager_js__WEBPACK_IMPORTED_MODULE_3__.onlineManager.isOnline()) {\n                this.resumePausedMutations();\n                this.#queryCache.onOnline();\n            }\n        });\n    }\n    unmount() {\n        this.#mountCount--;\n        if (this.#mountCount !== 0) return;\n        this.#unsubscribeFocus?.();\n        this.#unsubscribeFocus = void 0;\n        this.#unsubscribeOnline?.();\n        this.#unsubscribeOnline = void 0;\n    }\n    isFetching(filters) {\n        return this.#queryCache.findAll({\n            ...filters,\n            fetchStatus: \"fetching\"\n        }).length;\n    }\n    isMutating(filters) {\n        return this.#mutationCache.findAll({\n            ...filters,\n            status: \"pending\"\n        }).length;\n    }\n    getQueryData(queryKey) {\n        return this.#queryCache.find({\n            queryKey\n        })?.state.data;\n    }\n    ensureQueryData(options) {\n        const cachedData = this.getQueryData(options.queryKey);\n        return cachedData !== void 0 ? Promise.resolve(cachedData) : this.fetchQuery(options);\n    }\n    getQueriesData(filters) {\n        return this.getQueryCache().findAll(filters).map(({ queryKey, state })=>{\n            const data = state.data;\n            return [\n                queryKey,\n                data\n            ];\n        });\n    }\n    setQueryData(queryKey, updater, options) {\n        const query = this.#queryCache.find({\n            queryKey\n        });\n        const prevData = query?.state.data;\n        const data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.functionalUpdate)(updater, prevData);\n        if (typeof data === \"undefined\") {\n            return void 0;\n        }\n        const defaultedOptions = this.defaultQueryOptions({\n            queryKey\n        });\n        return this.#queryCache.build(this, defaultedOptions).setData(data, {\n            ...options,\n            manual: true\n        });\n    }\n    setQueriesData(filters, updater, options) {\n        return _notifyManager_js__WEBPACK_IMPORTED_MODULE_5__.notifyManager.batch(()=>this.getQueryCache().findAll(filters).map(({ queryKey })=>[\n                    queryKey,\n                    this.setQueryData(queryKey, updater, options)\n                ]));\n    }\n    getQueryState(queryKey) {\n        return this.#queryCache.find({\n            queryKey\n        })?.state;\n    }\n    removeQueries(filters) {\n        const queryCache = this.#queryCache;\n        _notifyManager_js__WEBPACK_IMPORTED_MODULE_5__.notifyManager.batch(()=>{\n            queryCache.findAll(filters).forEach((query)=>{\n                queryCache.remove(query);\n            });\n        });\n    }\n    resetQueries(filters, options) {\n        const queryCache = this.#queryCache;\n        const refetchFilters = {\n            type: \"active\",\n            ...filters\n        };\n        return _notifyManager_js__WEBPACK_IMPORTED_MODULE_5__.notifyManager.batch(()=>{\n            queryCache.findAll(filters).forEach((query)=>{\n                query.reset();\n            });\n            return this.refetchQueries(refetchFilters, options);\n        });\n    }\n    cancelQueries(filters = {}, cancelOptions = {}) {\n        const defaultedCancelOptions = {\n            revert: true,\n            ...cancelOptions\n        };\n        const promises = _notifyManager_js__WEBPACK_IMPORTED_MODULE_5__.notifyManager.batch(()=>this.#queryCache.findAll(filters).map((query)=>query.cancel(defaultedCancelOptions)));\n        return Promise.all(promises).then(_utils_js__WEBPACK_IMPORTED_MODULE_4__.noop).catch(_utils_js__WEBPACK_IMPORTED_MODULE_4__.noop);\n    }\n    invalidateQueries(filters = {}, options = {}) {\n        return _notifyManager_js__WEBPACK_IMPORTED_MODULE_5__.notifyManager.batch(()=>{\n            this.#queryCache.findAll(filters).forEach((query)=>{\n                query.invalidate();\n            });\n            if (filters.refetchType === \"none\") {\n                return Promise.resolve();\n            }\n            const refetchFilters = {\n                ...filters,\n                type: filters.refetchType ?? filters.type ?? \"active\"\n            };\n            return this.refetchQueries(refetchFilters, options);\n        });\n    }\n    refetchQueries(filters = {}, options) {\n        const fetchOptions = {\n            ...options,\n            cancelRefetch: options?.cancelRefetch ?? true\n        };\n        const promises = _notifyManager_js__WEBPACK_IMPORTED_MODULE_5__.notifyManager.batch(()=>this.#queryCache.findAll(filters).filter((query)=>!query.isDisabled()).map((query)=>{\n                let promise = query.fetch(void 0, fetchOptions);\n                if (!fetchOptions.throwOnError) {\n                    promise = promise.catch(_utils_js__WEBPACK_IMPORTED_MODULE_4__.noop);\n                }\n                return query.state.fetchStatus === \"paused\" ? Promise.resolve() : promise;\n            }));\n        return Promise.all(promises).then(_utils_js__WEBPACK_IMPORTED_MODULE_4__.noop);\n    }\n    fetchQuery(options) {\n        const defaultedOptions = this.defaultQueryOptions(options);\n        if (typeof defaultedOptions.retry === \"undefined\") {\n            defaultedOptions.retry = false;\n        }\n        const query = this.#queryCache.build(this, defaultedOptions);\n        return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n    }\n    prefetchQuery(options) {\n        return this.fetchQuery(options).then(_utils_js__WEBPACK_IMPORTED_MODULE_4__.noop).catch(_utils_js__WEBPACK_IMPORTED_MODULE_4__.noop);\n    }\n    fetchInfiniteQuery(options) {\n        options.behavior = (0,_infiniteQueryBehavior_js__WEBPACK_IMPORTED_MODULE_6__.infiniteQueryBehavior)(options.pages);\n        return this.fetchQuery(options);\n    }\n    prefetchInfiniteQuery(options) {\n        return this.fetchInfiniteQuery(options).then(_utils_js__WEBPACK_IMPORTED_MODULE_4__.noop).catch(_utils_js__WEBPACK_IMPORTED_MODULE_4__.noop);\n    }\n    resumePausedMutations() {\n        return this.#mutationCache.resumePausedMutations();\n    }\n    getQueryCache() {\n        return this.#queryCache;\n    }\n    getMutationCache() {\n        return this.#mutationCache;\n    }\n    getDefaultOptions() {\n        return this.#defaultOptions;\n    }\n    setDefaultOptions(options) {\n        this.#defaultOptions = options;\n    }\n    setQueryDefaults(queryKey, options) {\n        this.#queryDefaults.set((0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.hashKey)(queryKey), {\n            queryKey,\n            defaultOptions: options\n        });\n    }\n    getQueryDefaults(queryKey) {\n        const defaults = [\n            ...this.#queryDefaults.values()\n        ];\n        let result = {};\n        defaults.forEach((queryDefault)=>{\n            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.partialMatchKey)(queryKey, queryDefault.queryKey)) {\n                result = {\n                    ...result,\n                    ...queryDefault.defaultOptions\n                };\n            }\n        });\n        return result;\n    }\n    setMutationDefaults(mutationKey, options) {\n        this.#mutationDefaults.set((0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.hashKey)(mutationKey), {\n            mutationKey,\n            defaultOptions: options\n        });\n    }\n    getMutationDefaults(mutationKey) {\n        const defaults = [\n            ...this.#mutationDefaults.values()\n        ];\n        let result = {};\n        defaults.forEach((queryDefault)=>{\n            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.partialMatchKey)(mutationKey, queryDefault.mutationKey)) {\n                result = {\n                    ...result,\n                    ...queryDefault.defaultOptions\n                };\n            }\n        });\n        return result;\n    }\n    defaultQueryOptions(options) {\n        if (options?._defaulted) {\n            return options;\n        }\n        const defaultedOptions = {\n            ...this.#defaultOptions.queries,\n            ...options?.queryKey && this.getQueryDefaults(options.queryKey),\n            ...options,\n            _defaulted: true\n        };\n        if (!defaultedOptions.queryHash) {\n            defaultedOptions.queryHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.hashQueryKeyByOptions)(defaultedOptions.queryKey, defaultedOptions);\n        }\n        if (typeof defaultedOptions.refetchOnReconnect === \"undefined\") {\n            defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== \"always\";\n        }\n        if (typeof defaultedOptions.throwOnError === \"undefined\") {\n            defaultedOptions.throwOnError = !!defaultedOptions.suspense;\n        }\n        if (typeof defaultedOptions.networkMode === \"undefined\" && defaultedOptions.persister) {\n            defaultedOptions.networkMode = \"offlineFirst\";\n        }\n        return defaultedOptions;\n    }\n    defaultMutationOptions(options) {\n        if (options?._defaulted) {\n            return options;\n        }\n        return {\n            ...this.#defaultOptions.mutations,\n            ...options?.mutationKey && this.getMutationDefaults(options.mutationKey),\n            ...options,\n            _defaulted: true\n        };\n    }\n    clear() {\n        this.#queryCache.clear();\n        this.#mutationCache.clear();\n    }\n};\n //# sourceMappingURL=queryClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/queryClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/queryObserver.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/queryObserver.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryObserver: () => (/* binding */ QueryObserver)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js\");\n/* harmony import */ var _notifyManager_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./notifyManager.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/notifyManager.js\");\n/* harmony import */ var _focusManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./focusManager.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/focusManager.js\");\n/* harmony import */ var _subscribable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/subscribable.js\");\n/* harmony import */ var _retryer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./retryer.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/retryer.js\");\n// src/queryObserver.ts\n\n\n\n\n\nvar QueryObserver = class extends _subscribable_js__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(client, options){\n        super();\n        this.#currentQuery = void 0;\n        this.#currentQueryInitialState = void 0;\n        this.#currentResult = void 0;\n        this.#trackedProps = /* @__PURE__ */ new Set();\n        this.options = options;\n        this.#client = client;\n        this.#selectError = null;\n        this.bindMethods();\n        this.setOptions(options);\n    }\n    #client;\n    #currentQuery;\n    #currentQueryInitialState;\n    #currentResult;\n    #currentResultState;\n    #currentResultOptions;\n    #selectError;\n    #selectFn;\n    #selectResult;\n    // This property keeps track of the last query with defined data.\n    // It will be used to pass the previous data and query to the placeholder function between renders.\n    #lastQueryWithDefinedData;\n    #staleTimeoutId;\n    #refetchIntervalId;\n    #currentRefetchInterval;\n    #trackedProps;\n    bindMethods() {\n        this.refetch = this.refetch.bind(this);\n    }\n    onSubscribe() {\n        if (this.listeners.size === 1) {\n            this.#currentQuery.addObserver(this);\n            if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n                this.#executeFetch();\n            } else {\n                this.updateResult();\n            }\n            this.#updateTimers();\n        }\n    }\n    onUnsubscribe() {\n        if (!this.hasListeners()) {\n            this.destroy();\n        }\n    }\n    shouldFetchOnReconnect() {\n        return shouldFetchOn(this.#currentQuery, this.options, this.options.refetchOnReconnect);\n    }\n    shouldFetchOnWindowFocus() {\n        return shouldFetchOn(this.#currentQuery, this.options, this.options.refetchOnWindowFocus);\n    }\n    destroy() {\n        this.listeners = /* @__PURE__ */ new Set();\n        this.#clearStaleTimeout();\n        this.#clearRefetchInterval();\n        this.#currentQuery.removeObserver(this);\n    }\n    setOptions(options, notifyOptions) {\n        const prevOptions = this.options;\n        const prevQuery = this.#currentQuery;\n        this.options = this.#client.defaultQueryOptions(options);\n        if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.shallowEqualObjects)(prevOptions, this.options)) {\n            this.#client.getQueryCache().notify({\n                type: \"observerOptionsUpdated\",\n                query: this.#currentQuery,\n                observer: this\n            });\n        }\n        if (typeof this.options.enabled !== \"undefined\" && typeof this.options.enabled !== \"boolean\") {\n            throw new Error(\"Expected enabled to be a boolean\");\n        }\n        if (!this.options.queryKey) {\n            this.options.queryKey = prevOptions.queryKey;\n        }\n        this.#updateQuery();\n        const mounted = this.hasListeners();\n        if (mounted && shouldFetchOptionally(this.#currentQuery, prevQuery, this.options, prevOptions)) {\n            this.#executeFetch();\n        }\n        this.updateResult(notifyOptions);\n        if (mounted && (this.#currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n            this.#updateStaleTimeout();\n        }\n        const nextRefetchInterval = this.#computeRefetchInterval();\n        if (mounted && (this.#currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.#currentRefetchInterval)) {\n            this.#updateRefetchInterval(nextRefetchInterval);\n        }\n    }\n    getOptimisticResult(options) {\n        const query = this.#client.getQueryCache().build(this.#client, options);\n        const result = this.createResult(query, options);\n        if (shouldAssignObserverCurrentProperties(this, result)) {\n            this.#currentResult = result;\n            this.#currentResultOptions = this.options;\n            this.#currentResultState = this.#currentQuery.state;\n        }\n        return result;\n    }\n    getCurrentResult() {\n        return this.#currentResult;\n    }\n    trackResult(result) {\n        const trackedResult = {};\n        Object.keys(result).forEach((key)=>{\n            Object.defineProperty(trackedResult, key, {\n                configurable: false,\n                enumerable: true,\n                get: ()=>{\n                    this.#trackedProps.add(key);\n                    return result[key];\n                }\n            });\n        });\n        return trackedResult;\n    }\n    getCurrentQuery() {\n        return this.#currentQuery;\n    }\n    refetch({ ...options } = {}) {\n        return this.fetch({\n            ...options\n        });\n    }\n    fetchOptimistic(options) {\n        const defaultedOptions = this.#client.defaultQueryOptions(options);\n        const query = this.#client.getQueryCache().build(this.#client, defaultedOptions);\n        query.isFetchingOptimistic = true;\n        return query.fetch().then(()=>this.createResult(query, defaultedOptions));\n    }\n    fetch(fetchOptions) {\n        return this.#executeFetch({\n            ...fetchOptions,\n            cancelRefetch: fetchOptions.cancelRefetch ?? true\n        }).then(()=>{\n            this.updateResult();\n            return this.#currentResult;\n        });\n    }\n    #executeFetch(fetchOptions) {\n        this.#updateQuery();\n        let promise = this.#currentQuery.fetch(this.options, fetchOptions);\n        if (!fetchOptions?.throwOnError) {\n            promise = promise.catch(_utils_js__WEBPACK_IMPORTED_MODULE_1__.noop);\n        }\n        return promise;\n    }\n    #updateStaleTimeout() {\n        this.#clearStaleTimeout();\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_1__.isServer || this.#currentResult.isStale || !(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isValidTimeout)(this.options.staleTime)) {\n            return;\n        }\n        const time = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.timeUntilStale)(this.#currentResult.dataUpdatedAt, this.options.staleTime);\n        const timeout = time + 1;\n        this.#staleTimeoutId = setTimeout(()=>{\n            if (!this.#currentResult.isStale) {\n                this.updateResult();\n            }\n        }, timeout);\n    }\n    #computeRefetchInterval() {\n        return (typeof this.options.refetchInterval === \"function\" ? this.options.refetchInterval(this.#currentQuery) : this.options.refetchInterval) ?? false;\n    }\n    #updateRefetchInterval(nextInterval) {\n        this.#clearRefetchInterval();\n        this.#currentRefetchInterval = nextInterval;\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_1__.isServer || this.options.enabled === false || !(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isValidTimeout)(this.#currentRefetchInterval) || this.#currentRefetchInterval === 0) {\n            return;\n        }\n        this.#refetchIntervalId = setInterval(()=>{\n            if (this.options.refetchIntervalInBackground || _focusManager_js__WEBPACK_IMPORTED_MODULE_2__.focusManager.isFocused()) {\n                this.#executeFetch();\n            }\n        }, this.#currentRefetchInterval);\n    }\n    #updateTimers() {\n        this.#updateStaleTimeout();\n        this.#updateRefetchInterval(this.#computeRefetchInterval());\n    }\n    #clearStaleTimeout() {\n        if (this.#staleTimeoutId) {\n            clearTimeout(this.#staleTimeoutId);\n            this.#staleTimeoutId = void 0;\n        }\n    }\n    #clearRefetchInterval() {\n        if (this.#refetchIntervalId) {\n            clearInterval(this.#refetchIntervalId);\n            this.#refetchIntervalId = void 0;\n        }\n    }\n    createResult(query, options) {\n        const prevQuery = this.#currentQuery;\n        const prevOptions = this.options;\n        const prevResult = this.#currentResult;\n        const prevResultState = this.#currentResultState;\n        const prevResultOptions = this.#currentResultOptions;\n        const queryChange = query !== prevQuery;\n        const queryInitialState = queryChange ? query.state : this.#currentQueryInitialState;\n        const { state } = query;\n        let { error, errorUpdatedAt, fetchStatus, status } = state;\n        let isPlaceholderData = false;\n        let data;\n        if (options._optimisticResults) {\n            const mounted = this.hasListeners();\n            const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n            const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n            if (fetchOnMount || fetchOptionally) {\n                fetchStatus = (0,_retryer_js__WEBPACK_IMPORTED_MODULE_3__.canFetch)(query.options.networkMode) ? \"fetching\" : \"paused\";\n                if (!state.dataUpdatedAt) {\n                    status = \"pending\";\n                }\n            }\n            if (options._optimisticResults === \"isRestoring\") {\n                fetchStatus = \"idle\";\n            }\n        }\n        if (options.select && typeof state.data !== \"undefined\") {\n            if (prevResult && state.data === prevResultState?.data && options.select === this.#selectFn) {\n                data = this.#selectResult;\n            } else {\n                try {\n                    this.#selectFn = options.select;\n                    data = options.select(state.data);\n                    data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.replaceData)(prevResult?.data, data, options);\n                    this.#selectResult = data;\n                    this.#selectError = null;\n                } catch (selectError) {\n                    this.#selectError = selectError;\n                }\n            }\n        } else {\n            data = state.data;\n        }\n        if (typeof options.placeholderData !== \"undefined\" && typeof data === \"undefined\" && status === \"pending\") {\n            let placeholderData;\n            if (prevResult?.isPlaceholderData && options.placeholderData === prevResultOptions?.placeholderData) {\n                placeholderData = prevResult.data;\n            } else {\n                placeholderData = typeof options.placeholderData === \"function\" ? options.placeholderData(this.#lastQueryWithDefinedData?.state.data, this.#lastQueryWithDefinedData) : options.placeholderData;\n                if (options.select && typeof placeholderData !== \"undefined\") {\n                    try {\n                        placeholderData = options.select(placeholderData);\n                        this.#selectError = null;\n                    } catch (selectError) {\n                        this.#selectError = selectError;\n                    }\n                }\n            }\n            if (typeof placeholderData !== \"undefined\") {\n                status = \"success\";\n                data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.replaceData)(prevResult?.data, placeholderData, options);\n                isPlaceholderData = true;\n            }\n        }\n        if (this.#selectError) {\n            error = this.#selectError;\n            data = this.#selectResult;\n            errorUpdatedAt = Date.now();\n            status = \"error\";\n        }\n        const isFetching = fetchStatus === \"fetching\";\n        const isPending = status === \"pending\";\n        const isError = status === \"error\";\n        const isLoading = isPending && isFetching;\n        const result = {\n            status,\n            fetchStatus,\n            isPending,\n            isSuccess: status === \"success\",\n            isError,\n            isInitialLoading: isLoading,\n            isLoading,\n            data,\n            dataUpdatedAt: state.dataUpdatedAt,\n            error,\n            errorUpdatedAt,\n            failureCount: state.fetchFailureCount,\n            failureReason: state.fetchFailureReason,\n            errorUpdateCount: state.errorUpdateCount,\n            isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n            isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n            isFetching,\n            isRefetching: isFetching && !isPending,\n            isLoadingError: isError && state.dataUpdatedAt === 0,\n            isPaused: fetchStatus === \"paused\",\n            isPlaceholderData,\n            isRefetchError: isError && state.dataUpdatedAt !== 0,\n            isStale: isStale(query, options),\n            refetch: this.refetch\n        };\n        return result;\n    }\n    updateResult(notifyOptions) {\n        const prevResult = this.#currentResult;\n        const nextResult = this.createResult(this.#currentQuery, this.options);\n        this.#currentResultState = this.#currentQuery.state;\n        this.#currentResultOptions = this.options;\n        if (this.#currentResultState.data !== void 0) {\n            this.#lastQueryWithDefinedData = this.#currentQuery;\n        }\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.shallowEqualObjects)(nextResult, prevResult)) {\n            return;\n        }\n        this.#currentResult = nextResult;\n        const defaultNotifyOptions = {};\n        const shouldNotifyListeners = ()=>{\n            if (!prevResult) {\n                return true;\n            }\n            const { notifyOnChangeProps } = this.options;\n            const notifyOnChangePropsValue = typeof notifyOnChangeProps === \"function\" ? notifyOnChangeProps() : notifyOnChangeProps;\n            if (notifyOnChangePropsValue === \"all\" || !notifyOnChangePropsValue && !this.#trackedProps.size) {\n                return true;\n            }\n            const includedProps = new Set(notifyOnChangePropsValue ?? this.#trackedProps);\n            if (this.options.throwOnError) {\n                includedProps.add(\"error\");\n            }\n            return Object.keys(this.#currentResult).some((key)=>{\n                const typedKey = key;\n                const changed = this.#currentResult[typedKey] !== prevResult[typedKey];\n                return changed && includedProps.has(typedKey);\n            });\n        };\n        if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n            defaultNotifyOptions.listeners = true;\n        }\n        this.#notify({\n            ...defaultNotifyOptions,\n            ...notifyOptions\n        });\n    }\n    #updateQuery() {\n        const query = this.#client.getQueryCache().build(this.#client, this.options);\n        if (query === this.#currentQuery) {\n            return;\n        }\n        const prevQuery = this.#currentQuery;\n        this.#currentQuery = query;\n        this.#currentQueryInitialState = query.state;\n        if (this.hasListeners()) {\n            prevQuery?.removeObserver(this);\n            query.addObserver(this);\n        }\n    }\n    onQueryUpdate() {\n        this.updateResult();\n        if (this.hasListeners()) {\n            this.#updateTimers();\n        }\n    }\n    #notify(notifyOptions) {\n        _notifyManager_js__WEBPACK_IMPORTED_MODULE_4__.notifyManager.batch(()=>{\n            if (notifyOptions.listeners) {\n                this.listeners.forEach((listener)=>{\n                    listener(this.#currentResult);\n                });\n            }\n            this.#client.getQueryCache().notify({\n                query: this.#currentQuery,\n                type: \"observerResultsUpdated\"\n            });\n        });\n    }\n};\nfunction shouldLoadOnMount(query, options) {\n    return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === \"error\" && options.retryOnMount === false);\n}\nfunction shouldFetchOnMount(query, options) {\n    return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\nfunction shouldFetchOn(query, options, field) {\n    if (options.enabled !== false) {\n        const value = typeof field === \"function\" ? field(query) : field;\n        return value === \"always\" || value !== false && isStale(query, options);\n    }\n    return false;\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n    return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== \"error\") && isStale(query, options);\n}\nfunction isStale(query, options) {\n    return query.isStaleByTime(options.staleTime);\n}\nfunction shouldAssignObserverCurrentProperties(observer, optimisticResult) {\n    if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.shallowEqualObjects)(observer.getCurrentResult(), optimisticResult)) {\n        return true;\n    }\n    return false;\n}\n //# sourceMappingURL=queryObserver.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/queryObserver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/removable.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/removable.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Removable: () => (/* binding */ Removable)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js\");\n// src/removable.ts\n\nvar Removable = class {\n    #gcTimeout;\n    destroy() {\n        this.clearGcTimeout();\n    }\n    scheduleGc() {\n        this.clearGcTimeout();\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isValidTimeout)(this.gcTime)) {\n            this.#gcTimeout = setTimeout(()=>{\n                this.optionalRemove();\n            }, this.gcTime);\n        }\n    }\n    updateGcTime(newGcTime) {\n        this.gcTime = Math.max(this.gcTime || 0, newGcTime ?? (_utils_js__WEBPACK_IMPORTED_MODULE_0__.isServer ? Infinity : 5 * 60 * 1e3));\n    }\n    clearGcTimeout() {\n        if (this.#gcTimeout) {\n            clearTimeout(this.#gcTimeout);\n            this.#gcTimeout = void 0;\n        }\n    }\n};\n //# sourceMappingURL=removable.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL3JlbW92YWJsZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLG1CQUFtQjtBQUNtQztBQUN0RCxJQUFJRSxZQUFZO0lBQ2QsQ0FBQ0MsU0FBUyxDQUFDO0lBQ1hDLFVBQVU7UUFDUixJQUFJLENBQUNDLGNBQWM7SUFDckI7SUFDQUMsYUFBYTtRQUNYLElBQUksQ0FBQ0QsY0FBYztRQUNuQixJQUFJSix5REFBY0EsQ0FBQyxJQUFJLENBQUNNLE1BQU0sR0FBRztZQUMvQixJQUFJLENBQUMsQ0FBQ0osU0FBUyxHQUFHSyxXQUFXO2dCQUMzQixJQUFJLENBQUNDLGNBQWM7WUFDckIsR0FBRyxJQUFJLENBQUNGLE1BQU07UUFDaEI7SUFDRjtJQUNBRyxhQUFhQyxTQUFTLEVBQUU7UUFDdEIsSUFBSSxDQUFDSixNQUFNLEdBQUdLLEtBQUtDLEdBQUcsQ0FDcEIsSUFBSSxDQUFDTixNQUFNLElBQUksR0FDZkksYUFBY1gsQ0FBQUEsK0NBQVFBLEdBQUdjLFdBQVcsSUFBSSxLQUFLLEdBQUU7SUFFbkQ7SUFDQVQsaUJBQWlCO1FBQ2YsSUFBSSxJQUFJLENBQUMsQ0FBQ0YsU0FBUyxFQUFFO1lBQ25CWSxhQUFhLElBQUksQ0FBQyxDQUFDWixTQUFTO1lBQzVCLElBQUksQ0FBQyxDQUFDQSxTQUFTLEdBQUcsS0FBSztRQUN6QjtJQUNGO0FBQ0Y7QUFHRSxDQUNGLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZV9jbGllbnQvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL3JlbW92YWJsZS5qcz81OTc4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9yZW1vdmFibGUudHNcbmltcG9ydCB7IGlzU2VydmVyLCBpc1ZhbGlkVGltZW91dCB9IGZyb20gXCIuL3V0aWxzLmpzXCI7XG52YXIgUmVtb3ZhYmxlID0gY2xhc3Mge1xuICAjZ2NUaW1lb3V0O1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuY2xlYXJHY1RpbWVvdXQoKTtcbiAgfVxuICBzY2hlZHVsZUdjKCkge1xuICAgIHRoaXMuY2xlYXJHY1RpbWVvdXQoKTtcbiAgICBpZiAoaXNWYWxpZFRpbWVvdXQodGhpcy5nY1RpbWUpKSB7XG4gICAgICB0aGlzLiNnY1RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5vcHRpb25hbFJlbW92ZSgpO1xuICAgICAgfSwgdGhpcy5nY1RpbWUpO1xuICAgIH1cbiAgfVxuICB1cGRhdGVHY1RpbWUobmV3R2NUaW1lKSB7XG4gICAgdGhpcy5nY1RpbWUgPSBNYXRoLm1heChcbiAgICAgIHRoaXMuZ2NUaW1lIHx8IDAsXG4gICAgICBuZXdHY1RpbWUgPz8gKGlzU2VydmVyID8gSW5maW5pdHkgOiA1ICogNjAgKiAxZTMpXG4gICAgKTtcbiAgfVxuICBjbGVhckdjVGltZW91dCgpIHtcbiAgICBpZiAodGhpcy4jZ2NUaW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy4jZ2NUaW1lb3V0KTtcbiAgICAgIHRoaXMuI2djVGltZW91dCA9IHZvaWQgMDtcbiAgICB9XG4gIH1cbn07XG5leHBvcnQge1xuICBSZW1vdmFibGVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZW1vdmFibGUuanMubWFwIl0sIm5hbWVzIjpbImlzU2VydmVyIiwiaXNWYWxpZFRpbWVvdXQiLCJSZW1vdmFibGUiLCJnY1RpbWVvdXQiLCJkZXN0cm95IiwiY2xlYXJHY1RpbWVvdXQiLCJzY2hlZHVsZUdjIiwiZ2NUaW1lIiwic2V0VGltZW91dCIsIm9wdGlvbmFsUmVtb3ZlIiwidXBkYXRlR2NUaW1lIiwibmV3R2NUaW1lIiwiTWF0aCIsIm1heCIsIkluZmluaXR5IiwiY2xlYXJUaW1lb3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/removable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/retryer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/retryer.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CancelledError: () => (/* binding */ CancelledError),\n/* harmony export */   canFetch: () => (/* binding */ canFetch),\n/* harmony export */   createRetryer: () => (/* binding */ createRetryer),\n/* harmony export */   isCancelledError: () => (/* binding */ isCancelledError)\n/* harmony export */ });\n/* harmony import */ var _focusManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./focusManager.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/focusManager.js\");\n/* harmony import */ var _onlineManager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./onlineManager.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/onlineManager.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js\");\n// src/retryer.ts\n\n\n\nfunction defaultRetryDelay(failureCount) {\n    return Math.min(1e3 * 2 ** failureCount, 3e4);\n}\nfunction canFetch(networkMode) {\n    return (networkMode ?? \"online\") === \"online\" ? _onlineManager_js__WEBPACK_IMPORTED_MODULE_0__.onlineManager.isOnline() : true;\n}\nvar CancelledError = class {\n    constructor(options){\n        this.revert = options?.revert;\n        this.silent = options?.silent;\n    }\n};\nfunction isCancelledError(value) {\n    return value instanceof CancelledError;\n}\nfunction createRetryer(config) {\n    let isRetryCancelled = false;\n    let failureCount = 0;\n    let isResolved = false;\n    let continueFn;\n    let promiseResolve;\n    let promiseReject;\n    const promise = new Promise((outerResolve, outerReject)=>{\n        promiseResolve = outerResolve;\n        promiseReject = outerReject;\n    });\n    const cancel = (cancelOptions)=>{\n        if (!isResolved) {\n            reject(new CancelledError(cancelOptions));\n            config.abort?.();\n        }\n    };\n    const cancelRetry = ()=>{\n        isRetryCancelled = true;\n    };\n    const continueRetry = ()=>{\n        isRetryCancelled = false;\n    };\n    const shouldPause = ()=>!_focusManager_js__WEBPACK_IMPORTED_MODULE_1__.focusManager.isFocused() || config.networkMode !== \"always\" && !_onlineManager_js__WEBPACK_IMPORTED_MODULE_0__.onlineManager.isOnline();\n    const resolve = (value)=>{\n        if (!isResolved) {\n            isResolved = true;\n            config.onSuccess?.(value);\n            continueFn?.();\n            promiseResolve(value);\n        }\n    };\n    const reject = (value)=>{\n        if (!isResolved) {\n            isResolved = true;\n            config.onError?.(value);\n            continueFn?.();\n            promiseReject(value);\n        }\n    };\n    const pause = ()=>{\n        return new Promise((continueResolve)=>{\n            continueFn = (value)=>{\n                const canContinue = isResolved || !shouldPause();\n                if (canContinue) {\n                    continueResolve(value);\n                }\n                return canContinue;\n            };\n            config.onPause?.();\n        }).then(()=>{\n            continueFn = void 0;\n            if (!isResolved) {\n                config.onContinue?.();\n            }\n        });\n    };\n    const run = ()=>{\n        if (isResolved) {\n            return;\n        }\n        let promiseOrValue;\n        try {\n            promiseOrValue = config.fn();\n        } catch (error) {\n            promiseOrValue = Promise.reject(error);\n        }\n        Promise.resolve(promiseOrValue).then(resolve).catch((error)=>{\n            if (isResolved) {\n                return;\n            }\n            const retry = config.retry ?? (_utils_js__WEBPACK_IMPORTED_MODULE_2__.isServer ? 0 : 3);\n            const retryDelay = config.retryDelay ?? defaultRetryDelay;\n            const delay = typeof retryDelay === \"function\" ? retryDelay(failureCount, error) : retryDelay;\n            const shouldRetry = retry === true || typeof retry === \"number\" && failureCount < retry || typeof retry === \"function\" && retry(failureCount, error);\n            if (isRetryCancelled || !shouldRetry) {\n                reject(error);\n                return;\n            }\n            failureCount++;\n            config.onFail?.(failureCount, error);\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.sleep)(delay).then(()=>{\n                if (shouldPause()) {\n                    return pause();\n                }\n                return;\n            }).then(()=>{\n                if (isRetryCancelled) {\n                    reject(error);\n                } else {\n                    run();\n                }\n            });\n        });\n    };\n    if (canFetch(config.networkMode)) {\n        run();\n    } else {\n        pause().then(run);\n    }\n    return {\n        promise,\n        cancel,\n        continue: ()=>{\n            const didContinue = continueFn?.();\n            return didContinue ? promise : Promise.resolve();\n        },\n        cancelRetry,\n        continueRetry\n    };\n}\n //# sourceMappingURL=retryer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/retryer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/subscribable.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/subscribable.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Subscribable: () => (/* binding */ Subscribable)\n/* harmony export */ });\n// src/subscribable.ts\nvar Subscribable = class {\n    constructor(){\n        this.listeners = /* @__PURE__ */ new Set();\n        this.subscribe = this.subscribe.bind(this);\n    }\n    subscribe(listener) {\n        this.listeners.add(listener);\n        this.onSubscribe();\n        return ()=>{\n            this.listeners.delete(listener);\n            this.onUnsubscribe();\n        };\n    }\n    hasListeners() {\n        return this.listeners.size > 0;\n    }\n    onSubscribe() {}\n    onUnsubscribe() {}\n};\n //# sourceMappingURL=subscribable.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL3N1YnNjcmliYWJsZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsc0JBQXNCO0FBQ3RCLElBQUlBLGVBQWU7SUFDakJDLGFBQWM7UUFDWixJQUFJLENBQUNDLFNBQVMsR0FBRyxhQUFhLEdBQUcsSUFBSUM7UUFDckMsSUFBSSxDQUFDQyxTQUFTLEdBQUcsSUFBSSxDQUFDQSxTQUFTLENBQUNDLElBQUksQ0FBQyxJQUFJO0lBQzNDO0lBQ0FELFVBQVVFLFFBQVEsRUFBRTtRQUNsQixJQUFJLENBQUNKLFNBQVMsQ0FBQ0ssR0FBRyxDQUFDRDtRQUNuQixJQUFJLENBQUNFLFdBQVc7UUFDaEIsT0FBTztZQUNMLElBQUksQ0FBQ04sU0FBUyxDQUFDTyxNQUFNLENBQUNIO1lBQ3RCLElBQUksQ0FBQ0ksYUFBYTtRQUNwQjtJQUNGO0lBQ0FDLGVBQWU7UUFDYixPQUFPLElBQUksQ0FBQ1QsU0FBUyxDQUFDVSxJQUFJLEdBQUc7SUFDL0I7SUFDQUosY0FBYyxDQUNkO0lBQ0FFLGdCQUFnQixDQUNoQjtBQUNGO0FBR0UsQ0FDRix3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2VfY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1jb3JlL2J1aWxkL21vZGVybi9zdWJzY3JpYmFibGUuanM/YmViYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvc3Vic2NyaWJhYmxlLnRzXG52YXIgU3Vic2NyaWJhYmxlID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmxpc3RlbmVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgdGhpcy5zdWJzY3JpYmUgPSB0aGlzLnN1YnNjcmliZS5iaW5kKHRoaXMpO1xuICB9XG4gIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIHRoaXMubGlzdGVuZXJzLmFkZChsaXN0ZW5lcik7XG4gICAgdGhpcy5vblN1YnNjcmliZSgpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB0aGlzLmxpc3RlbmVycy5kZWxldGUobGlzdGVuZXIpO1xuICAgICAgdGhpcy5vblVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfVxuICBoYXNMaXN0ZW5lcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMubGlzdGVuZXJzLnNpemUgPiAwO1xuICB9XG4gIG9uU3Vic2NyaWJlKCkge1xuICB9XG4gIG9uVW5zdWJzY3JpYmUoKSB7XG4gIH1cbn07XG5leHBvcnQge1xuICBTdWJzY3JpYmFibGVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmFibGUuanMubWFwIl0sIm5hbWVzIjpbIlN1YnNjcmliYWJsZSIsImNvbnN0cnVjdG9yIiwibGlzdGVuZXJzIiwiU2V0Iiwic3Vic2NyaWJlIiwiYmluZCIsImxpc3RlbmVyIiwiYWRkIiwib25TdWJzY3JpYmUiLCJkZWxldGUiLCJvblVuc3Vic2NyaWJlIiwiaGFzTGlzdGVuZXJzIiwic2l6ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/subscribable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/modern/utils.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addToEnd: () => (/* binding */ addToEnd),\n/* harmony export */   addToStart: () => (/* binding */ addToStart),\n/* harmony export */   functionalUpdate: () => (/* binding */ functionalUpdate),\n/* harmony export */   hashKey: () => (/* binding */ hashKey),\n/* harmony export */   hashQueryKeyByOptions: () => (/* binding */ hashQueryKeyByOptions),\n/* harmony export */   isPlainArray: () => (/* binding */ isPlainArray),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isServer: () => (/* binding */ isServer),\n/* harmony export */   isValidTimeout: () => (/* binding */ isValidTimeout),\n/* harmony export */   keepPreviousData: () => (/* binding */ keepPreviousData),\n/* harmony export */   matchMutation: () => (/* binding */ matchMutation),\n/* harmony export */   matchQuery: () => (/* binding */ matchQuery),\n/* harmony export */   noop: () => (/* binding */ noop),\n/* harmony export */   partialMatchKey: () => (/* binding */ partialMatchKey),\n/* harmony export */   replaceData: () => (/* binding */ replaceData),\n/* harmony export */   replaceEqualDeep: () => (/* binding */ replaceEqualDeep),\n/* harmony export */   shallowEqualObjects: () => (/* binding */ shallowEqualObjects),\n/* harmony export */   sleep: () => (/* binding */ sleep),\n/* harmony export */   timeUntilStale: () => (/* binding */ timeUntilStale)\n/* harmony export */ });\n// src/utils.ts\nvar isServer =  true || 0;\nfunction noop() {\n    return void 0;\n}\nfunction functionalUpdate(updater, input) {\n    return typeof updater === \"function\" ? updater(input) : updater;\n}\nfunction isValidTimeout(value) {\n    return typeof value === \"number\" && value >= 0 && value !== Infinity;\n}\nfunction timeUntilStale(updatedAt, staleTime) {\n    return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);\n}\nfunction matchQuery(filters, query) {\n    const { type = \"all\", exact, fetchStatus, predicate, queryKey, stale } = filters;\n    if (queryKey) {\n        if (exact) {\n            if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n                return false;\n            }\n        } else if (!partialMatchKey(query.queryKey, queryKey)) {\n            return false;\n        }\n    }\n    if (type !== \"all\") {\n        const isActive = query.isActive();\n        if (type === \"active\" && !isActive) {\n            return false;\n        }\n        if (type === \"inactive\" && isActive) {\n            return false;\n        }\n    }\n    if (typeof stale === \"boolean\" && query.isStale() !== stale) {\n        return false;\n    }\n    if (typeof fetchStatus !== \"undefined\" && fetchStatus !== query.state.fetchStatus) {\n        return false;\n    }\n    if (predicate && !predicate(query)) {\n        return false;\n    }\n    return true;\n}\nfunction matchMutation(filters, mutation) {\n    const { exact, status, predicate, mutationKey } = filters;\n    if (mutationKey) {\n        if (!mutation.options.mutationKey) {\n            return false;\n        }\n        if (exact) {\n            if (hashKey(mutation.options.mutationKey) !== hashKey(mutationKey)) {\n                return false;\n            }\n        } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n            return false;\n        }\n    }\n    if (status && mutation.state.status !== status) {\n        return false;\n    }\n    if (predicate && !predicate(mutation)) {\n        return false;\n    }\n    return true;\n}\nfunction hashQueryKeyByOptions(queryKey, options) {\n    const hashFn = options?.queryKeyHashFn || hashKey;\n    return hashFn(queryKey);\n}\nfunction hashKey(queryKey) {\n    return JSON.stringify(queryKey, (_, val)=>isPlainObject(val) ? Object.keys(val).sort().reduce((result, key)=>{\n            result[key] = val[key];\n            return result;\n        }, {}) : val);\n}\nfunction partialMatchKey(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (typeof a !== typeof b) {\n        return false;\n    }\n    if (a && b && typeof a === \"object\" && typeof b === \"object\") {\n        return !Object.keys(b).some((key)=>!partialMatchKey(a[key], b[key]));\n    }\n    return false;\n}\nfunction replaceEqualDeep(a, b) {\n    if (a === b) {\n        return a;\n    }\n    const array = isPlainArray(a) && isPlainArray(b);\n    if (array || isPlainObject(a) && isPlainObject(b)) {\n        const aSize = array ? a.length : Object.keys(a).length;\n        const bItems = array ? b : Object.keys(b);\n        const bSize = bItems.length;\n        const copy = array ? [] : {};\n        let equalItems = 0;\n        for(let i = 0; i < bSize; i++){\n            const key = array ? i : bItems[i];\n            copy[key] = replaceEqualDeep(a[key], b[key]);\n            if (copy[key] === a[key]) {\n                equalItems++;\n            }\n        }\n        return aSize === bSize && equalItems === aSize ? a : copy;\n    }\n    return b;\n}\nfunction shallowEqualObjects(a, b) {\n    if (a && !b || b && !a) {\n        return false;\n    }\n    for(const key in a){\n        if (a[key] !== b[key]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isPlainArray(value) {\n    return Array.isArray(value) && value.length === Object.keys(value).length;\n}\nfunction isPlainObject(o) {\n    if (!hasObjectPrototype(o)) {\n        return false;\n    }\n    const ctor = o.constructor;\n    if (typeof ctor === \"undefined\") {\n        return true;\n    }\n    const prot = ctor.prototype;\n    if (!hasObjectPrototype(prot)) {\n        return false;\n    }\n    if (!prot.hasOwnProperty(\"isPrototypeOf\")) {\n        return false;\n    }\n    return true;\n}\nfunction hasObjectPrototype(o) {\n    return Object.prototype.toString.call(o) === \"[object Object]\";\n}\nfunction sleep(ms) {\n    return new Promise((resolve)=>{\n        setTimeout(resolve, ms);\n    });\n}\nfunction replaceData(prevData, data, options) {\n    if (typeof options.structuralSharing === \"function\") {\n        return options.structuralSharing(prevData, data);\n    } else if (options.structuralSharing !== false) {\n        return replaceEqualDeep(prevData, data);\n    }\n    return data;\n}\nfunction keepPreviousData(previousData) {\n    return previousData;\n}\nfunction addToEnd(items, item, max = 0) {\n    const newItems = [\n        ...items,\n        item\n    ];\n    return max && newItems.length > max ? newItems.slice(1) : newItems;\n}\nfunction addToStart(items, item, max = 0) {\n    const newItems = [\n        item,\n        ...items\n    ];\n    return max && newItems.length > max ? newItems.slice(0, -1) : newItems;\n}\n //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/modern/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-devtools/build/Devtools/A6DP7BKI.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tanstack/query-devtools/build/Devtools/A6DP7BKI.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Devtools_default)\n/* harmony export */ });\n/* harmony import */ var _chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chunk/UF7WX6DB.js */ \"(ssr)/./node_modules/@tanstack/query-devtools/build/chunk/UF7WX6DB.js\");\n\n// ../../node_modules/.pnpm/@tanstack+match-sorter-utils@8.8.4/node_modules/@tanstack/match-sorter-utils/build/lib/index.mjs\nvar characterMap = {\n    À: \"A\",\n    Á: \"A\",\n    Â: \"A\",\n    Ã: \"A\",\n    Ä: \"A\",\n    Å: \"A\",\n    Ấ: \"A\",\n    Ắ: \"A\",\n    Ẳ: \"A\",\n    Ẵ: \"A\",\n    Ặ: \"A\",\n    Æ: \"AE\",\n    Ầ: \"A\",\n    Ằ: \"A\",\n    Ȃ: \"A\",\n    Ç: \"C\",\n    Ḉ: \"C\",\n    È: \"E\",\n    É: \"E\",\n    Ê: \"E\",\n    Ë: \"E\",\n    Ế: \"E\",\n    Ḗ: \"E\",\n    Ề: \"E\",\n    Ḕ: \"E\",\n    Ḝ: \"E\",\n    Ȇ: \"E\",\n    Ì: \"I\",\n    Í: \"I\",\n    Î: \"I\",\n    Ï: \"I\",\n    Ḯ: \"I\",\n    Ȋ: \"I\",\n    Ð: \"D\",\n    Ñ: \"N\",\n    Ò: \"O\",\n    Ó: \"O\",\n    Ô: \"O\",\n    Õ: \"O\",\n    Ö: \"O\",\n    Ø: \"O\",\n    Ố: \"O\",\n    Ṍ: \"O\",\n    Ṓ: \"O\",\n    Ȏ: \"O\",\n    Ù: \"U\",\n    Ú: \"U\",\n    Û: \"U\",\n    Ü: \"U\",\n    Ý: \"Y\",\n    à: \"a\",\n    á: \"a\",\n    â: \"a\",\n    ã: \"a\",\n    ä: \"a\",\n    å: \"a\",\n    ấ: \"a\",\n    ắ: \"a\",\n    ẳ: \"a\",\n    ẵ: \"a\",\n    ặ: \"a\",\n    æ: \"ae\",\n    ầ: \"a\",\n    ằ: \"a\",\n    ȃ: \"a\",\n    ç: \"c\",\n    ḉ: \"c\",\n    è: \"e\",\n    é: \"e\",\n    ê: \"e\",\n    ë: \"e\",\n    ế: \"e\",\n    ḗ: \"e\",\n    ề: \"e\",\n    ḕ: \"e\",\n    ḝ: \"e\",\n    ȇ: \"e\",\n    ì: \"i\",\n    í: \"i\",\n    î: \"i\",\n    ï: \"i\",\n    ḯ: \"i\",\n    ȋ: \"i\",\n    ð: \"d\",\n    ñ: \"n\",\n    ò: \"o\",\n    ó: \"o\",\n    ô: \"o\",\n    õ: \"o\",\n    ö: \"o\",\n    ø: \"o\",\n    ố: \"o\",\n    ṍ: \"o\",\n    ṓ: \"o\",\n    ȏ: \"o\",\n    ù: \"u\",\n    ú: \"u\",\n    û: \"u\",\n    ü: \"u\",\n    ý: \"y\",\n    ÿ: \"y\",\n    Ā: \"A\",\n    ā: \"a\",\n    Ă: \"A\",\n    ă: \"a\",\n    Ą: \"A\",\n    ą: \"a\",\n    Ć: \"C\",\n    ć: \"c\",\n    Ĉ: \"C\",\n    ĉ: \"c\",\n    Ċ: \"C\",\n    ċ: \"c\",\n    Č: \"C\",\n    č: \"c\",\n    C̆: \"C\",\n    c̆: \"c\",\n    Ď: \"D\",\n    ď: \"d\",\n    Đ: \"D\",\n    đ: \"d\",\n    Ē: \"E\",\n    ē: \"e\",\n    Ĕ: \"E\",\n    ĕ: \"e\",\n    Ė: \"E\",\n    ė: \"e\",\n    Ę: \"E\",\n    ę: \"e\",\n    Ě: \"E\",\n    ě: \"e\",\n    Ĝ: \"G\",\n    Ǵ: \"G\",\n    ĝ: \"g\",\n    ǵ: \"g\",\n    Ğ: \"G\",\n    ğ: \"g\",\n    Ġ: \"G\",\n    ġ: \"g\",\n    Ģ: \"G\",\n    ģ: \"g\",\n    Ĥ: \"H\",\n    ĥ: \"h\",\n    Ħ: \"H\",\n    ħ: \"h\",\n    Ḫ: \"H\",\n    ḫ: \"h\",\n    Ĩ: \"I\",\n    ĩ: \"i\",\n    Ī: \"I\",\n    ī: \"i\",\n    Ĭ: \"I\",\n    ĭ: \"i\",\n    Į: \"I\",\n    į: \"i\",\n    İ: \"I\",\n    ı: \"i\",\n    Ĳ: \"IJ\",\n    ĳ: \"ij\",\n    Ĵ: \"J\",\n    ĵ: \"j\",\n    Ķ: \"K\",\n    ķ: \"k\",\n    Ḱ: \"K\",\n    ḱ: \"k\",\n    K̆: \"K\",\n    k̆: \"k\",\n    Ĺ: \"L\",\n    ĺ: \"l\",\n    Ļ: \"L\",\n    ļ: \"l\",\n    Ľ: \"L\",\n    ľ: \"l\",\n    Ŀ: \"L\",\n    ŀ: \"l\",\n    Ł: \"l\",\n    ł: \"l\",\n    Ḿ: \"M\",\n    ḿ: \"m\",\n    M̆: \"M\",\n    m̆: \"m\",\n    Ń: \"N\",\n    ń: \"n\",\n    Ņ: \"N\",\n    ņ: \"n\",\n    Ň: \"N\",\n    ň: \"n\",\n    ŉ: \"n\",\n    N̆: \"N\",\n    n̆: \"n\",\n    Ō: \"O\",\n    ō: \"o\",\n    Ŏ: \"O\",\n    ŏ: \"o\",\n    Ő: \"O\",\n    ő: \"o\",\n    Œ: \"OE\",\n    œ: \"oe\",\n    P̆: \"P\",\n    p̆: \"p\",\n    Ŕ: \"R\",\n    ŕ: \"r\",\n    Ŗ: \"R\",\n    ŗ: \"r\",\n    Ř: \"R\",\n    ř: \"r\",\n    R̆: \"R\",\n    r̆: \"r\",\n    Ȓ: \"R\",\n    ȓ: \"r\",\n    Ś: \"S\",\n    ś: \"s\",\n    Ŝ: \"S\",\n    ŝ: \"s\",\n    Ş: \"S\",\n    Ș: \"S\",\n    ș: \"s\",\n    ş: \"s\",\n    Š: \"S\",\n    š: \"s\",\n    Ţ: \"T\",\n    ţ: \"t\",\n    ț: \"t\",\n    Ț: \"T\",\n    Ť: \"T\",\n    ť: \"t\",\n    Ŧ: \"T\",\n    ŧ: \"t\",\n    T̆: \"T\",\n    t̆: \"t\",\n    Ũ: \"U\",\n    ũ: \"u\",\n    Ū: \"U\",\n    ū: \"u\",\n    Ŭ: \"U\",\n    ŭ: \"u\",\n    Ů: \"U\",\n    ů: \"u\",\n    Ű: \"U\",\n    ű: \"u\",\n    Ų: \"U\",\n    ų: \"u\",\n    Ȗ: \"U\",\n    ȗ: \"u\",\n    V̆: \"V\",\n    v̆: \"v\",\n    Ŵ: \"W\",\n    ŵ: \"w\",\n    Ẃ: \"W\",\n    ẃ: \"w\",\n    X̆: \"X\",\n    x̆: \"x\",\n    Ŷ: \"Y\",\n    ŷ: \"y\",\n    Ÿ: \"Y\",\n    Y̆: \"Y\",\n    y̆: \"y\",\n    Ź: \"Z\",\n    ź: \"z\",\n    Ż: \"Z\",\n    ż: \"z\",\n    Ž: \"Z\",\n    ž: \"z\",\n    ſ: \"s\",\n    ƒ: \"f\",\n    Ơ: \"O\",\n    ơ: \"o\",\n    Ư: \"U\",\n    ư: \"u\",\n    Ǎ: \"A\",\n    ǎ: \"a\",\n    Ǐ: \"I\",\n    ǐ: \"i\",\n    Ǒ: \"O\",\n    ǒ: \"o\",\n    Ǔ: \"U\",\n    ǔ: \"u\",\n    Ǖ: \"U\",\n    ǖ: \"u\",\n    Ǘ: \"U\",\n    ǘ: \"u\",\n    Ǚ: \"U\",\n    ǚ: \"u\",\n    Ǜ: \"U\",\n    ǜ: \"u\",\n    Ứ: \"U\",\n    ứ: \"u\",\n    Ṹ: \"U\",\n    ṹ: \"u\",\n    Ǻ: \"A\",\n    ǻ: \"a\",\n    Ǽ: \"AE\",\n    ǽ: \"ae\",\n    Ǿ: \"O\",\n    ǿ: \"o\",\n    Þ: \"TH\",\n    þ: \"th\",\n    Ṕ: \"P\",\n    ṕ: \"p\",\n    Ṥ: \"S\",\n    ṥ: \"s\",\n    X́: \"X\",\n    x́: \"x\",\n    Ѓ: \"Г\",\n    ѓ: \"г\",\n    Ќ: \"К\",\n    ќ: \"к\",\n    A̋: \"A\",\n    a̋: \"a\",\n    E̋: \"E\",\n    e̋: \"e\",\n    I̋: \"I\",\n    i̋: \"i\",\n    Ǹ: \"N\",\n    ǹ: \"n\",\n    Ồ: \"O\",\n    ồ: \"o\",\n    Ṑ: \"O\",\n    ṑ: \"o\",\n    Ừ: \"U\",\n    ừ: \"u\",\n    Ẁ: \"W\",\n    ẁ: \"w\",\n    Ỳ: \"Y\",\n    ỳ: \"y\",\n    Ȁ: \"A\",\n    ȁ: \"a\",\n    Ȅ: \"E\",\n    ȅ: \"e\",\n    Ȉ: \"I\",\n    ȉ: \"i\",\n    Ȍ: \"O\",\n    ȍ: \"o\",\n    Ȑ: \"R\",\n    ȑ: \"r\",\n    Ȕ: \"U\",\n    ȕ: \"u\",\n    B̌: \"B\",\n    b̌: \"b\",\n    Č̣: \"C\",\n    č̣: \"c\",\n    Ê̌: \"E\",\n    ê̌: \"e\",\n    F̌: \"F\",\n    f̌: \"f\",\n    Ǧ: \"G\",\n    ǧ: \"g\",\n    Ȟ: \"H\",\n    ȟ: \"h\",\n    J̌: \"J\",\n    ǰ: \"j\",\n    Ǩ: \"K\",\n    ǩ: \"k\",\n    M̌: \"M\",\n    m̌: \"m\",\n    P̌: \"P\",\n    p̌: \"p\",\n    Q̌: \"Q\",\n    q̌: \"q\",\n    Ř̩: \"R\",\n    ř̩: \"r\",\n    Ṧ: \"S\",\n    ṧ: \"s\",\n    V̌: \"V\",\n    v̌: \"v\",\n    W̌: \"W\",\n    w̌: \"w\",\n    X̌: \"X\",\n    x̌: \"x\",\n    Y̌: \"Y\",\n    y̌: \"y\",\n    A̧: \"A\",\n    a̧: \"a\",\n    B̧: \"B\",\n    b̧: \"b\",\n    Ḑ: \"D\",\n    ḑ: \"d\",\n    Ȩ: \"E\",\n    ȩ: \"e\",\n    Ɛ̧: \"E\",\n    ɛ̧: \"e\",\n    Ḩ: \"H\",\n    ḩ: \"h\",\n    I̧: \"I\",\n    i̧: \"i\",\n    Ɨ̧: \"I\",\n    ɨ̧: \"i\",\n    M̧: \"M\",\n    m̧: \"m\",\n    O̧: \"O\",\n    o̧: \"o\",\n    Q̧: \"Q\",\n    q̧: \"q\",\n    U̧: \"U\",\n    u̧: \"u\",\n    X̧: \"X\",\n    x̧: \"x\",\n    Z̧: \"Z\",\n    z̧: \"z\"\n};\nvar chars = Object.keys(characterMap).join(\"|\");\nvar allAccents = new RegExp(chars, \"g\");\nfunction removeAccents(str) {\n    return str.replace(allAccents, (match)=>{\n        return characterMap[match];\n    });\n}\nvar rankings = {\n    CASE_SENSITIVE_EQUAL: 7,\n    EQUAL: 6,\n    STARTS_WITH: 5,\n    WORD_STARTS_WITH: 4,\n    CONTAINS: 3,\n    ACRONYM: 2,\n    MATCHES: 1,\n    NO_MATCH: 0\n};\nfunction rankItem(item, value, options) {\n    var _options$threshold;\n    options = options || {};\n    options.threshold = (_options$threshold = options.threshold) != null ? _options$threshold : rankings.MATCHES;\n    if (!options.accessors) {\n        const rank = getMatchRanking(item, value, options);\n        return {\n            // ends up being duplicate of 'item' in matches but consistent\n            rankedValue: item,\n            rank,\n            accessorIndex: -1,\n            accessorThreshold: options.threshold,\n            passed: rank >= options.threshold\n        };\n    }\n    const valuesToRank = getAllValuesToRank(item, options.accessors);\n    const rankingInfo = {\n        rankedValue: item,\n        rank: rankings.NO_MATCH,\n        accessorIndex: -1,\n        accessorThreshold: options.threshold,\n        passed: false\n    };\n    for(let i2 = 0; i2 < valuesToRank.length; i2++){\n        const rankValue = valuesToRank[i2];\n        let newRank = getMatchRanking(rankValue.itemValue, value, options);\n        const { minRanking, maxRanking, threshold = options.threshold } = rankValue.attributes;\n        if (newRank < minRanking && newRank >= rankings.MATCHES) {\n            newRank = minRanking;\n        } else if (newRank > maxRanking) {\n            newRank = maxRanking;\n        }\n        newRank = Math.min(newRank, maxRanking);\n        if (newRank >= threshold && newRank > rankingInfo.rank) {\n            rankingInfo.rank = newRank;\n            rankingInfo.passed = true;\n            rankingInfo.accessorIndex = i2;\n            rankingInfo.accessorThreshold = threshold;\n            rankingInfo.rankedValue = rankValue.itemValue;\n        }\n    }\n    return rankingInfo;\n}\nfunction getMatchRanking(testString, stringToRank, options) {\n    testString = prepareValueForComparison(testString, options);\n    stringToRank = prepareValueForComparison(stringToRank, options);\n    if (stringToRank.length > testString.length) {\n        return rankings.NO_MATCH;\n    }\n    if (testString === stringToRank) {\n        return rankings.CASE_SENSITIVE_EQUAL;\n    }\n    testString = testString.toLowerCase();\n    stringToRank = stringToRank.toLowerCase();\n    if (testString === stringToRank) {\n        return rankings.EQUAL;\n    }\n    if (testString.startsWith(stringToRank)) {\n        return rankings.STARTS_WITH;\n    }\n    if (testString.includes(` ${stringToRank}`)) {\n        return rankings.WORD_STARTS_WITH;\n    }\n    if (testString.includes(stringToRank)) {\n        return rankings.CONTAINS;\n    } else if (stringToRank.length === 1) {\n        return rankings.NO_MATCH;\n    }\n    if (getAcronym(testString).includes(stringToRank)) {\n        return rankings.ACRONYM;\n    }\n    return getClosenessRanking(testString, stringToRank);\n}\nfunction getAcronym(string) {\n    let acronym = \"\";\n    const wordsInString = string.split(\" \");\n    wordsInString.forEach((wordInString)=>{\n        const splitByHyphenWords = wordInString.split(\"-\");\n        splitByHyphenWords.forEach((splitByHyphenWord)=>{\n            acronym += splitByHyphenWord.substr(0, 1);\n        });\n    });\n    return acronym;\n}\nfunction getClosenessRanking(testString, stringToRank) {\n    let matchingInOrderCharCount = 0;\n    let charNumber = 0;\n    function findMatchingCharacter(matchChar, string, index) {\n        for(let j = index, J = string.length; j < J; j++){\n            const stringChar = string[j];\n            if (stringChar === matchChar) {\n                matchingInOrderCharCount += 1;\n                return j + 1;\n            }\n        }\n        return -1;\n    }\n    function getRanking(spread3) {\n        const spreadPercentage = 1 / spread3;\n        const inOrderPercentage = matchingInOrderCharCount / stringToRank.length;\n        const ranking = rankings.MATCHES + inOrderPercentage * spreadPercentage;\n        return ranking;\n    }\n    const firstIndex = findMatchingCharacter(stringToRank[0], testString, 0);\n    if (firstIndex < 0) {\n        return rankings.NO_MATCH;\n    }\n    charNumber = firstIndex;\n    for(let i2 = 1, I = stringToRank.length; i2 < I; i2++){\n        const matchChar = stringToRank[i2];\n        charNumber = findMatchingCharacter(matchChar, testString, charNumber);\n        const found = charNumber > -1;\n        if (!found) {\n            return rankings.NO_MATCH;\n        }\n    }\n    const spread2 = charNumber - firstIndex;\n    return getRanking(spread2);\n}\nfunction prepareValueForComparison(value, _ref) {\n    let { keepDiacritics } = _ref;\n    value = `${value}`;\n    if (!keepDiacritics) {\n        value = removeAccents(value);\n    }\n    return value;\n}\nfunction getItemValues(item, accessor) {\n    let accessorFn = accessor;\n    if (typeof accessor === \"object\") {\n        accessorFn = accessor.accessor;\n    }\n    const value = accessorFn(item);\n    if (value == null) {\n        return [];\n    }\n    if (Array.isArray(value)) {\n        return value;\n    }\n    return [\n        String(value)\n    ];\n}\nfunction getAllValuesToRank(item, accessors) {\n    const allValues = [];\n    for(let j = 0, J = accessors.length; j < J; j++){\n        const accessor = accessors[j];\n        const attributes = getAccessorAttributes(accessor);\n        const itemValues = getItemValues(item, accessor);\n        for(let i2 = 0, I = itemValues.length; i2 < I; i2++){\n            allValues.push({\n                itemValue: itemValues[i2],\n                attributes\n            });\n        }\n    }\n    return allValues;\n}\nvar defaultKeyAttributes = {\n    maxRanking: Infinity,\n    minRanking: -Infinity\n};\nfunction getAccessorAttributes(accessor) {\n    if (typeof accessor === \"function\") {\n        return defaultKeyAttributes;\n    }\n    return {\n        ...defaultKeyAttributes,\n        ...accessor\n    };\n}\n// ../../node_modules/.pnpm/goober@2.1.13_csstype@3.1.2/node_modules/goober/dist/goober.modern.js\nvar e = {\n    data: \"\"\n};\nvar t = (t2)=> false ? 0 : t2 || e;\nvar l = /(?:([\\u0080-\\uFFFF\\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\\s*)/g;\nvar a = /\\/\\*[^]*?\\*\\/|  +/g;\nvar n = /\\n+/g;\nvar o = (e2, t2)=>{\n    let r2 = \"\", l2 = \"\", a2 = \"\";\n    for(let n2 in e2){\n        let c2 = e2[n2];\n        \"@\" == n2[0] ? \"i\" == n2[1] ? r2 = n2 + \" \" + c2 + \";\" : l2 += \"f\" == n2[1] ? o(c2, n2) : n2 + \"{\" + o(c2, \"k\" == n2[1] ? \"\" : t2) + \"}\" : \"object\" == typeof c2 ? l2 += o(c2, t2 ? t2.replace(/([^,])+/g, (e3)=>n2.replace(/(^:.*)|([^,])+/g, (t3)=>/&/.test(t3) ? t3.replace(/&/g, e3) : e3 ? e3 + \" \" + t3 : t3)) : n2) : null != c2 && (n2 = /^--/.test(n2) ? n2 : n2.replace(/[A-Z]/g, \"-$&\").toLowerCase(), a2 += o.p ? o.p(n2, c2) : n2 + \":\" + c2 + \";\");\n    }\n    return r2 + (t2 && a2 ? t2 + \"{\" + a2 + \"}\" : a2) + l2;\n};\nvar c = {};\nvar s = (e2)=>{\n    if (\"object\" == typeof e2) {\n        let t2 = \"\";\n        for(let r2 in e2)t2 += r2 + s(e2[r2]);\n        return t2;\n    }\n    return e2;\n};\nvar i = (e2, t2, r2, i2, p2)=>{\n    let u2 = s(e2), d = c[u2] || (c[u2] = ((e3)=>{\n        let t3 = 0, r3 = 11;\n        for(; t3 < e3.length;)r3 = 101 * r3 + e3.charCodeAt(t3++) >>> 0;\n        return \"go\" + r3;\n    })(u2));\n    if (!c[d]) {\n        let t3 = u2 !== e2 ? e2 : ((e3)=>{\n            let t4, r3, o2 = [\n                {}\n            ];\n            for(; t4 = l.exec(e3.replace(a, \"\"));)t4[4] ? o2.shift() : t4[3] ? (r3 = t4[3].replace(n, \" \").trim(), o2.unshift(o2[0][r3] = o2[0][r3] || {})) : o2[0][t4[1]] = t4[2].replace(n, \" \").trim();\n            return o2[0];\n        })(e2);\n        c[d] = o(p2 ? {\n            [\"@keyframes \" + d]: t3\n        } : t3, r2 ? \"\" : \".\" + d);\n    }\n    let f = r2 && c.g ? c.g : null;\n    return r2 && (c.g = c[d]), ((e3, t3, r3, l2)=>{\n        l2 ? t3.data = t3.data.replace(l2, e3) : -1 === t3.data.indexOf(e3) && (t3.data = r3 ? e3 + t3.data : t3.data + e3);\n    })(c[d], t2, i2, f), d;\n};\nvar p = (e2, t2, r2)=>e2.reduce((e3, l2, a2)=>{\n        let n2 = t2[a2];\n        if (n2 && n2.call) {\n            let e4 = n2(r2), t3 = e4 && e4.props && e4.props.className || /^go/.test(e4) && e4;\n            n2 = t3 ? \".\" + t3 : e4 && \"object\" == typeof e4 ? e4.props ? \"\" : o(e4, \"\") : false === e4 ? \"\" : e4;\n        }\n        return e3 + l2 + (null == n2 ? \"\" : n2);\n    }, \"\");\nfunction u(e2) {\n    let r2 = this || {}, l2 = e2.call ? e2(r2.p) : e2;\n    return i(l2.unshift ? l2.raw ? p(l2, [].slice.call(arguments, 1), r2.p) : l2.reduce((e3, t2)=>Object.assign(e3, t2 && t2.call ? t2(r2.p) : t2), {}) : l2, t(r2.target), r2.g, r2.o, r2.k);\n}\nu.bind({\n    g: 1\n});\nu.bind({\n    k: 1\n});\n// ../../node_modules/.pnpm/clsx@2.0.0/node_modules/clsx/dist/clsx.mjs\nfunction r(e2) {\n    var t2, f, n2 = \"\";\n    if (\"string\" == typeof e2 || \"number\" == typeof e2) n2 += e2;\n    else if (\"object\" == typeof e2) if (Array.isArray(e2)) for(t2 = 0; t2 < e2.length; t2++)e2[t2] && (f = r(e2[t2])) && (n2 && (n2 += \" \"), n2 += f);\n    else for(t2 in e2)e2[t2] && (n2 && (n2 += \" \"), n2 += t2);\n    return n2;\n}\nfunction clsx() {\n    for(var e2, t2, f = 0, n2 = \"\"; f < arguments.length;)(e2 = arguments[f++]) && (t2 = r(e2)) && (n2 && (n2 += \" \"), n2 += t2);\n    return n2;\n}\n// ../../node_modules/.pnpm/@solid-primitives+transition-group@1.0.3_solid-js@1.8.7/node_modules/@solid-primitives/transition-group/dist/index.js\nvar noop = ()=>{};\nfunction createListTransition(source, options) {\n    const initSource = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.untrack)(source);\n    if (_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.isServer) {\n        const copy = initSource.slice();\n        return ()=>copy;\n    }\n    const { onChange } = options;\n    let prevSet = new Set(options.appear ? void 0 : initSource);\n    const exiting = /* @__PURE__ */ new WeakSet();\n    const [toRemove, setToRemove] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)([], {\n        equals: false\n    });\n    const [isTransitionPending] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.useTransition)();\n    const finishRemoved = options.exitMethod === \"remove\" ? noop : (els)=>{\n        setToRemove((p2)=>(p2.push.apply(p2, els), p2));\n        for (const el of els)exiting.delete(el);\n    };\n    const handleRemoved = options.exitMethod === \"remove\" ? noop : options.exitMethod === \"keep-index\" ? (els, el, i2)=>els.splice(i2, 0, el) : (els, el)=>els.push(el);\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)((prev)=>{\n        const elsToRemove = toRemove();\n        const sourceList = source();\n        sourceList[_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.$TRACK];\n        if ((0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.untrack)(isTransitionPending)) {\n            isTransitionPending();\n            return prev;\n        }\n        if (elsToRemove.length) {\n            const next = prev.filter((e2)=>!elsToRemove.includes(e2));\n            elsToRemove.length = 0;\n            onChange({\n                list: next,\n                added: [],\n                removed: [],\n                unchanged: next,\n                finishRemoved\n            });\n            return next;\n        }\n        return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.untrack)(()=>{\n            const nextSet = new Set(sourceList);\n            const next = sourceList.slice();\n            const added = [];\n            const removed = [];\n            const unchanged = [];\n            for (const el of sourceList){\n                (prevSet.has(el) ? unchanged : added).push(el);\n            }\n            let nothingChanged = !added.length;\n            for(let i2 = 0; i2 < prev.length; i2++){\n                const el = prev[i2];\n                if (!nextSet.has(el)) {\n                    if (!exiting.has(el)) {\n                        removed.push(el);\n                        exiting.add(el);\n                    }\n                    handleRemoved(next, el, i2);\n                }\n                if (nothingChanged && el !== next[i2]) nothingChanged = false;\n            }\n            if (!removed.length && nothingChanged) return prev;\n            onChange({\n                list: next,\n                added,\n                removed,\n                unchanged,\n                finishRemoved\n            });\n            prevSet = nextSet;\n            return next;\n        });\n    }, options.appear ? [] : initSource.slice());\n}\n// ../../node_modules/.pnpm/@solid-primitives+utils@6.2.1_solid-js@1.8.7/node_modules/@solid-primitives/utils/dist/chunk/R5675YMU.js\nvar isClient = !_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.isServer;\nvar isDev = isClient && !!_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.DEV;\nvar noop2 = ()=>void 0;\nvar isNonNullable = (i2)=>i2 != null;\nvar filterNonNullable = (arr)=>arr.filter(isNonNullable);\nfunction chain(callbacks) {\n    return (...args)=>{\n        for (const callback of callbacks)callback && callback(...args);\n    };\n}\nfunction reverseChain(callbacks) {\n    return (...args)=>{\n        for(let i2 = callbacks.length - 1; i2 >= 0; i2--){\n            const callback = callbacks[i2];\n            callback && callback(...args);\n        }\n    };\n}\nvar access = (v)=>typeof v === \"function\" && !v.length ? v() : v;\nvar asArray = (value)=>Array.isArray(value) ? value : value ? [\n        value\n    ] : [];\nfunction accessWith(valueOrFn, ...args) {\n    return typeof valueOrFn === \"function\" ? valueOrFn(...args) : valueOrFn;\n}\nvar tryOnCleanup = isDev ? (fn)=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.getOwner)() ? (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(fn) : fn : _chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup;\nfunction handleDiffArray(current, prev, handleAdded, handleRemoved) {\n    const currLength = current.length;\n    const prevLength = prev.length;\n    let i2 = 0;\n    if (!prevLength) {\n        for(; i2 < currLength; i2++)handleAdded(current[i2]);\n        return;\n    }\n    if (!currLength) {\n        for(; i2 < prevLength; i2++)handleRemoved(prev[i2]);\n        return;\n    }\n    for(; i2 < prevLength; i2++){\n        if (prev[i2] !== current[i2]) break;\n    }\n    let prevEl;\n    let currEl;\n    prev = prev.slice(i2);\n    current = current.slice(i2);\n    for (prevEl of prev){\n        if (!current.includes(prevEl)) handleRemoved(prevEl);\n    }\n    for (currEl of current){\n        if (!prev.includes(currEl)) handleAdded(currEl);\n    }\n}\n// ../../node_modules/.pnpm/@solid-primitives+refs@1.0.5_solid-js@1.8.7/node_modules/@solid-primitives/refs/dist/index.js\nfunction mergeRefs(...refs) {\n    return chain(refs);\n}\nvar defaultElementPredicate = _chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.isServer ? (item)=>item != null && typeof item === \"object\" && \"t\" in item : (item)=>item instanceof Element;\nfunction getResolvedElements(value, predicate) {\n    if (predicate(value)) return value;\n    if (typeof value === \"function\" && !value.length) return getResolvedElements(value(), predicate);\n    if (Array.isArray(value)) {\n        const results = [];\n        for (const item of value){\n            const result = getResolvedElements(item, predicate);\n            if (result) Array.isArray(result) ? results.push.apply(results, result) : results.push(result);\n        }\n        return results.length ? results : null;\n    }\n    return null;\n}\nfunction resolveElements(fn, predicate = defaultElementPredicate, serverPredicate = defaultElementPredicate) {\n    const children2 = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(fn);\n    const memo = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>getResolvedElements(children2(), _chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.isServer ? serverPredicate : predicate));\n    memo.toArray = ()=>{\n        const value = memo();\n        return Array.isArray(value) ? value : value ? [\n            value\n        ] : [];\n    };\n    return memo;\n}\n// ../../node_modules/.pnpm/solid-transition-group@0.2.3_solid-js@1.8.7/node_modules/solid-transition-group/dist/index.js\nfunction createClassnames(props) {\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const name = props.name || \"s\";\n        return {\n            enterActive: (props.enterActiveClass || name + \"-enter-active\").split(\" \"),\n            enter: (props.enterClass || name + \"-enter\").split(\" \"),\n            enterTo: (props.enterToClass || name + \"-enter-to\").split(\" \"),\n            exitActive: (props.exitActiveClass || name + \"-exit-active\").split(\" \"),\n            exit: (props.exitClass || name + \"-exit\").split(\" \"),\n            exitTo: (props.exitToClass || name + \"-exit-to\").split(\" \"),\n            move: (props.moveClass || name + \"-move\").split(\" \")\n        };\n    });\n}\nfunction nextFrame(fn) {\n    requestAnimationFrame(()=>requestAnimationFrame(fn));\n}\nfunction enterTransition(classes, events, el, done) {\n    const { onBeforeEnter, onEnter, onAfterEnter } = events;\n    onBeforeEnter?.(el);\n    el.classList.add(...classes.enter);\n    el.classList.add(...classes.enterActive);\n    queueMicrotask(()=>{\n        if (!el.parentNode) return done?.();\n        onEnter?.(el, ()=>endTransition());\n    });\n    nextFrame(()=>{\n        el.classList.remove(...classes.enter);\n        el.classList.add(...classes.enterTo);\n        if (!onEnter || onEnter.length < 2) {\n            el.addEventListener(\"transitionend\", endTransition);\n            el.addEventListener(\"animationend\", endTransition);\n        }\n    });\n    function endTransition(e2) {\n        if (!e2 || e2.target === el) {\n            done?.();\n            el.removeEventListener(\"transitionend\", endTransition);\n            el.removeEventListener(\"animationend\", endTransition);\n            el.classList.remove(...classes.enterActive);\n            el.classList.remove(...classes.enterTo);\n            onAfterEnter?.(el);\n        }\n    }\n}\nfunction exitTransition(classes, events, el, done) {\n    const { onBeforeExit, onExit, onAfterExit } = events;\n    if (!el.parentNode) return done?.();\n    onBeforeExit?.(el);\n    el.classList.add(...classes.exit);\n    el.classList.add(...classes.exitActive);\n    onExit?.(el, ()=>endTransition());\n    nextFrame(()=>{\n        el.classList.remove(...classes.exit);\n        el.classList.add(...classes.exitTo);\n        if (!onExit || onExit.length < 2) {\n            el.addEventListener(\"transitionend\", endTransition);\n            el.addEventListener(\"animationend\", endTransition);\n        }\n    });\n    function endTransition(e2) {\n        if (!e2 || e2.target === el) {\n            done?.();\n            el.removeEventListener(\"transitionend\", endTransition);\n            el.removeEventListener(\"animationend\", endTransition);\n            el.classList.remove(...classes.exitActive);\n            el.classList.remove(...classes.exitTo);\n            onAfterExit?.(el);\n        }\n    }\n}\nvar TransitionGroup = (props)=>{\n    const classnames = createClassnames(props);\n    return createListTransition(resolveElements(()=>props.children).toArray, {\n        appear: props.appear,\n        exitMethod: \"keep-index\",\n        onChange ({ added, removed, finishRemoved, list }) {\n            const classes = classnames();\n            for (const el of added){\n                enterTransition(classes, props, el);\n            }\n            const toMove = [];\n            for (const el of list){\n                if (el.isConnected && (el instanceof HTMLElement || el instanceof SVGElement)) {\n                    toMove.push({\n                        el,\n                        rect: el.getBoundingClientRect()\n                    });\n                }\n            }\n            queueMicrotask(()=>{\n                const moved = [];\n                for (const { el, rect } of toMove){\n                    if (el.isConnected) {\n                        const newRect = el.getBoundingClientRect(), dX = rect.left - newRect.left, dY = rect.top - newRect.top;\n                        if (dX || dY) {\n                            el.style.transform = `translate(${dX}px, ${dY}px)`;\n                            el.style.transitionDuration = \"0s\";\n                            moved.push(el);\n                        }\n                    }\n                }\n                document.body.offsetHeight;\n                for (const el of moved){\n                    let endTransition2 = function(e2) {\n                        if (e2.target === el || /transform$/.test(e2.propertyName)) {\n                            el.removeEventListener(\"transitionend\", endTransition2);\n                            el.classList.remove(...classes.move);\n                        }\n                    };\n                    el.classList.add(...classes.move);\n                    el.style.transform = el.style.transitionDuration = \"\";\n                    el.addEventListener(\"transitionend\", endTransition2);\n                }\n            });\n            for (const el of removed){\n                exitTransition(classes, props, el, ()=>finishRemoved([\n                        el\n                    ]));\n            }\n        }\n    });\n};\n// ../../node_modules/.pnpm/@solid-primitives+keyed@1.2.0_solid-js@1.8.7/node_modules/@solid-primitives/keyed/dist/index.js\nvar FALLBACK = Symbol(\"fallback\");\nfunction dispose(list) {\n    for (const o2 of list)o2.dispose();\n}\nfunction keyArray(items, keyFn, mapFn, options = {}) {\n    if (_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.isServer) {\n        const itemsRef = items();\n        let s2 = [];\n        if (itemsRef && itemsRef.length) {\n            for(let i2 = 0, len = itemsRef.length; i2 < len; i2++)s2.push(mapFn(()=>itemsRef[i2], ()=>i2));\n        } else if (options.fallback) s2 = [\n            options.fallback()\n        ];\n        return ()=>s2;\n    }\n    const prev = /* @__PURE__ */ new Map();\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>dispose(prev.values()));\n    return ()=>{\n        const list = items() || [];\n        list[_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.$TRACK];\n        return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.untrack)(()=>{\n            if (!list.length) {\n                dispose(prev.values());\n                prev.clear();\n                if (!options.fallback) return [];\n                const fb2 = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRoot)((dispose2)=>{\n                    prev.set(FALLBACK, {\n                        dispose: dispose2\n                    });\n                    return options.fallback();\n                });\n                return [\n                    fb2\n                ];\n            }\n            const result = new Array(list.length);\n            const fb = prev.get(FALLBACK);\n            if (!prev.size || fb) {\n                fb?.dispose();\n                prev.delete(FALLBACK);\n                for(let i2 = 0; i2 < list.length; i2++){\n                    const item = list[i2];\n                    const key = keyFn(item, i2);\n                    addNewItem(result, item, i2, key);\n                }\n                return result;\n            }\n            const prevKeys = new Set(prev.keys());\n            for(let i2 = 0; i2 < list.length; i2++){\n                const item = list[i2];\n                const key = keyFn(item, i2);\n                prevKeys.delete(key);\n                const lookup = prev.get(key);\n                if (lookup) {\n                    result[i2] = lookup.mapped;\n                    lookup.setIndex?.(i2);\n                    lookup.setItem(()=>item);\n                } else addNewItem(result, item, i2, key);\n            }\n            for (const key of prevKeys){\n                prev.get(key)?.dispose();\n                prev.delete(key);\n            }\n            return result;\n        });\n    };\n    function addNewItem(list, item, i2, key) {\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRoot)((dispose2)=>{\n            const [getItem, setItem] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(item);\n            const save = {\n                setItem,\n                dispose: dispose2\n            };\n            if (mapFn.length > 1) {\n                const [index, setIndex] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(i2);\n                save.setIndex = setIndex;\n                save.mapped = mapFn(getItem, index);\n            } else save.mapped = mapFn(getItem);\n            prev.set(key, save);\n            list[i2] = save.mapped;\n        });\n    }\n}\nfunction Key(props) {\n    const { by } = props;\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(keyArray(()=>props.each, typeof by === \"function\" ? by : (v)=>v[by], props.children, \"fallback\" in props ? {\n        fallback: ()=>props.fallback\n    } : void 0));\n}\n// ../../node_modules/.pnpm/@solid-primitives+storage@1.3.11_solid-js@1.8.7/node_modules/@solid-primitives/storage/dist/index.js\nfunction createStorage(props) {\n    const [error, setError] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const handleError = props?.throw ? (err, fallback)=>{\n        setError(err instanceof Error ? err : new Error(fallback));\n        throw err;\n    } : (err, fallback)=>{\n        setError(err instanceof Error ? err : new Error(fallback));\n    };\n    const apis = props?.api ? Array.isArray(props.api) ? props.api : [\n        props.api\n    ] : [\n        globalThis.localStorage\n    ].filter(Boolean);\n    const prefix = props?.prefix ? `${props.prefix}.` : \"\";\n    const signals = /* @__PURE__ */ new Map();\n    const store = new Proxy({}, {\n        get (_, key) {\n            let node = signals.get(key);\n            if (!node) {\n                node = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(void 0, {\n                    equals: false\n                });\n                signals.set(key, node);\n            }\n            node[0]();\n            const value = apis.reduce((result, api)=>{\n                if (result !== null || !api) {\n                    return result;\n                }\n                try {\n                    return api.getItem(`${prefix}${key}`);\n                } catch (err) {\n                    handleError(err, `Error reading ${prefix}${key} from ${api[\"name\"]}`);\n                    return null;\n                }\n            }, null);\n            if (value !== null && props?.deserializer) {\n                return props.deserializer(value, key, props.options);\n            }\n            return value;\n        }\n    });\n    const setter = (key, value, options)=>{\n        const filteredValue = props?.serializer ? props.serializer(value, key, options ?? props.options) : value;\n        const apiKey = `${prefix}${key}`;\n        apis.forEach((api)=>{\n            try {\n                api.getItem(apiKey) !== filteredValue && api.setItem(apiKey, filteredValue);\n            } catch (err) {\n                handleError(err, `Error setting ${prefix}${key} to ${filteredValue} in ${api.name}`);\n            }\n        });\n        const node = signals.get(key);\n        node && node[1]();\n    };\n    const remove = (key)=>apis.forEach((api)=>{\n            try {\n                api.removeItem(`${prefix}${key}`);\n            } catch (err) {\n                handleError(err, `Error removing ${prefix}${key} from ${api.name}`);\n            }\n        });\n    const clear = ()=>apis.forEach((api)=>{\n            try {\n                api.clear();\n            } catch (err) {\n                handleError(err, `Error clearing ${api.name}`);\n            }\n        });\n    const toJSON = ()=>{\n        const result = {};\n        const addValue = (key, value)=>{\n            if (!result.hasOwnProperty(key)) {\n                const filteredValue = value && props?.deserializer ? props.deserializer(value, key, props.options) : value;\n                if (filteredValue) {\n                    result[key] = filteredValue;\n                }\n            }\n        };\n        apis.forEach((api)=>{\n            if (typeof api.getAll === \"function\") {\n                let values;\n                try {\n                    values = api.getAll();\n                } catch (err) {\n                    handleError(err, `Error getting all values from in ${api.name}`);\n                }\n                for (const key of values){\n                    addValue(key, values[key]);\n                }\n            } else {\n                let index = 0, key;\n                try {\n                    while(key = api.key(index++)){\n                        if (!result.hasOwnProperty(key)) {\n                            addValue(key, api.getItem(key));\n                        }\n                    }\n                } catch (err) {\n                    handleError(err, `Error getting all values from ${api.name}`);\n                }\n            }\n        });\n        return result;\n    };\n    props?.sync !== false && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onMount)(()=>{\n        const listener = (ev)=>{\n            let changed = false;\n            apis.forEach((api)=>{\n                try {\n                    if (api !== ev.storageArea && ev.key && ev.newValue !== api.getItem(ev.key)) {\n                        ev.newValue ? api.setItem(ev.key, ev.newValue) : api.removeItem(ev.key);\n                        changed = true;\n                    }\n                } catch (err) {\n                    handleError(err, `Error synching api ${api.name} from storage event (${ev.key}=${ev.newValue})`);\n                }\n            });\n            changed && ev.key && signals.get(ev.key)?.[1]();\n        };\n        if (\"addEventListener\" in globalThis) {\n            globalThis.addEventListener(\"storage\", listener);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>globalThis.removeEventListener(\"storage\", listener));\n        } else {\n            apis.forEach((api)=>api.addEventListener?.(\"storage\", listener));\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>apis.forEach((api)=>api.removeEventListener?.(\"storage\", listener)));\n        }\n    });\n    return [\n        store,\n        setter,\n        {\n            clear,\n            error,\n            remove,\n            toJSON\n        }\n    ];\n}\nvar createLocalStorage = createStorage;\nvar addClearMethod = (storage)=>{\n    if (typeof storage.clear === \"function\") {\n        return storage;\n    }\n    storage.clear = ()=>{\n        let key;\n        while(key = storage.key(0)){\n            storage.removeItem(key);\n        }\n    };\n    return storage;\n};\nvar serializeCookieOptions = (options)=>{\n    if (!options) {\n        return \"\";\n    }\n    let memo = \"\";\n    for(const key in options){\n        if (!options.hasOwnProperty(key)) {\n            continue;\n        }\n        const value = options[key];\n        memo += value instanceof Date ? `; ${key}=${value.toUTCString()}` : typeof value === \"boolean\" ? `; ${key}` : `; ${key}=${value}`;\n    }\n    return memo;\n};\nvar cookieStorage = addClearMethod({\n    _cookies: [\n        globalThis.document,\n        \"cookie\"\n    ],\n    getItem: (key)=>cookieStorage._cookies[0][cookieStorage._cookies[1]].match(\"(^|;)\\\\s*\" + key + \"\\\\s*=\\\\s*([^;]+)\")?.pop() ?? null,\n    setItem: (key, value, options)=>{\n        const oldValue = cookieStorage.getItem(key);\n        cookieStorage._cookies[0][cookieStorage._cookies[1]] = `${key}=${value}${serializeCookieOptions(options)}`;\n        const storageEvent = Object.assign(new Event(\"storage\"), {\n            key,\n            oldValue,\n            newValue: value,\n            url: globalThis.document.URL,\n            storageArea: cookieStorage\n        });\n        window.dispatchEvent(storageEvent);\n    },\n    removeItem: (key)=>{\n        cookieStorage._cookies[0][cookieStorage._cookies[1]] = `${key}=deleted${serializeCookieOptions({\n            expires: /* @__PURE__ */ new Date(0)\n        })}`;\n    },\n    key: (index)=>{\n        let key = null;\n        let count = 0;\n        cookieStorage._cookies[0][cookieStorage._cookies[1]].replace(/(?:^|;)\\s*(.+?)\\s*=\\s*[^;]+/g, (_, found)=>{\n            if (!key && found && count++ === index) {\n                key = found;\n            }\n            return \"\";\n        });\n        return key;\n    },\n    get length () {\n        let length = 0;\n        cookieStorage._cookies[0][cookieStorage._cookies[1]].replace(/(?:^|;)\\s*.+?\\s*=\\s*[^;]+/g, (found)=>{\n            length += found ? 1 : 0;\n            return \"\";\n        });\n        return length;\n    }\n});\n// ../../node_modules/.pnpm/@solid-primitives+event-listener@2.3.0_solid-js@1.8.7/node_modules/@solid-primitives/event-listener/dist/index.js\nfunction makeEventListener(target, type, handler, options) {\n    target.addEventListener(type, handler, options);\n    return tryOnCleanup(target.removeEventListener.bind(target, type, handler, options));\n}\nfunction createEventListener(targets, type, handler, options) {\n    if (_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.isServer) return;\n    const attachListeners = ()=>{\n        asArray(access(targets)).forEach((el)=>{\n            if (el) asArray(access(type)).forEach((type2)=>makeEventListener(el, type2, handler, options));\n        });\n    };\n    if (typeof targets === \"function\") (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(attachListeners);\n    else (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(attachListeners);\n}\n// ../../node_modules/.pnpm/@solid-primitives+resize-observer@2.0.22_solid-js@1.8.7/node_modules/@solid-primitives/resize-observer/dist/index.js\nfunction makeResizeObserver(callback, options) {\n    if (_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.isServer) {\n        return {\n            observe: noop2,\n            unobserve: noop2\n        };\n    }\n    const observer = new ResizeObserver(callback);\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(observer.disconnect.bind(observer));\n    return {\n        observe: (ref)=>observer.observe(ref, options),\n        unobserve: observer.unobserve.bind(observer)\n    };\n}\nfunction createResizeObserver(targets, onResize, options) {\n    if (_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.isServer) return;\n    const previousMap = /* @__PURE__ */ new WeakMap(), { observe, unobserve } = makeResizeObserver((entries2)=>{\n        for (const entry of entries2){\n            const { contentRect, target } = entry, width = Math.round(contentRect.width), height = Math.round(contentRect.height), previous = previousMap.get(target);\n            if (!previous || previous.width !== width || previous.height !== height) {\n                onResize(contentRect, target, entry);\n                previousMap.set(target, {\n                    width,\n                    height\n                });\n            }\n        }\n    }, options);\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)((prev)=>{\n        const refs = filterNonNullable(asArray(access(targets)));\n        handleDiffArray(refs, prev, observe, unobserve);\n        return refs;\n    }, []);\n}\n// ../../node_modules/.pnpm/@solid-primitives+props@3.1.8_solid-js@1.8.7/node_modules/@solid-primitives/props/dist/index.js\nfunction trueFn2() {\n    return true;\n}\nvar propTraps = {\n    get (_, property, receiver) {\n        if (property === _chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.$PROXY) return receiver;\n        return _.get(property);\n    },\n    has (_, property) {\n        return _.has(property);\n    },\n    set: trueFn2,\n    deleteProperty: trueFn2,\n    getOwnPropertyDescriptor (_, property) {\n        return {\n            configurable: true,\n            enumerable: true,\n            get () {\n                return _.get(property);\n            },\n            set: trueFn2,\n            deleteProperty: trueFn2\n        };\n    },\n    ownKeys (_) {\n        return _.keys();\n    }\n};\nvar extractCSSregex = /((?:--)?(?:\\w+-?)+)\\s*:\\s*([^;]*)/g;\nfunction stringStyleToObject(style2) {\n    const object = {};\n    let match;\n    while(match = extractCSSregex.exec(style2)){\n        object[match[1]] = match[2];\n    }\n    return object;\n}\nfunction combineStyle(a2, b2) {\n    if (typeof a2 === \"string\") {\n        if (typeof b2 === \"string\") return `${a2};${b2}`;\n        a2 = stringStyleToObject(a2);\n    } else if (typeof b2 === \"string\") {\n        b2 = stringStyleToObject(b2);\n    }\n    return {\n        ...a2,\n        ...b2\n    };\n}\nvar reduce = (sources, key, calc)=>{\n    let v = void 0;\n    for (const props of sources){\n        const propV = access(props)[key];\n        if (!v) v = propV;\n        else if (propV) v = calc(v, propV);\n    }\n    return v;\n};\nfunction combineProps(...args) {\n    const restArgs = Array.isArray(args[0]);\n    const sources = restArgs ? args[0] : args;\n    if (sources.length === 1) return sources[0];\n    const chainFn = restArgs && args[1]?.reverseEventHandlers ? reverseChain : chain;\n    const listeners2 = {};\n    for (const props of sources){\n        const propsObj = access(props);\n        for(const key in propsObj){\n            if (key[0] === \"o\" && key[1] === \"n\" && key[2]) {\n                const v = propsObj[key];\n                const name = key.toLowerCase();\n                const callback = typeof v === \"function\" ? v : // jsx event handlers can be tuples of [callback, arg]\n                Array.isArray(v) ? v.length === 1 ? v[0] : v[0].bind(void 0, v[1]) : void 0;\n                if (callback) listeners2[name] ? listeners2[name].push(callback) : listeners2[name] = [\n                    callback\n                ];\n                else delete listeners2[name];\n            }\n        }\n    }\n    const merge = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)(...sources);\n    return new Proxy({\n        get (key) {\n            if (typeof key !== \"string\") return Reflect.get(merge, key);\n            if (key === \"style\") return reduce(sources, \"style\", combineStyle);\n            if (key === \"ref\") {\n                const callbacks = [];\n                for (const props of sources){\n                    const cb = access(props)[key];\n                    if (typeof cb === \"function\") callbacks.push(cb);\n                }\n                return chainFn(callbacks);\n            }\n            if (key[0] === \"o\" && key[1] === \"n\" && key[2]) {\n                const callbacks = listeners2[key.toLowerCase()];\n                return callbacks ? chainFn(callbacks) : Reflect.get(merge, key);\n            }\n            if (key === \"class\" || key === \"className\") return reduce(sources, key, (a2, b2)=>`${a2} ${b2}`);\n            if (key === \"classList\") return reduce(sources, key, (a2, b2)=>({\n                    ...a2,\n                    ...b2\n                }));\n            return Reflect.get(merge, key);\n        },\n        has (key) {\n            return Reflect.has(merge, key);\n        },\n        keys () {\n            return Object.keys(merge);\n        }\n    }, propTraps);\n}\n// ../../node_modules/.pnpm/@kobalte+utils@0.9.0_solid-js@1.8.7/node_modules/@kobalte/utils/dist/index.js\nfunction addItemToArray(array, item, index = -1) {\n    if (!(index in array)) {\n        return [\n            ...array,\n            item\n        ];\n    }\n    return [\n        ...array.slice(0, index),\n        item,\n        ...array.slice(index)\n    ];\n}\nfunction removeItemFromArray(array, item) {\n    const updatedArray = [\n        ...array\n    ];\n    const index = updatedArray.indexOf(item);\n    if (index !== -1) {\n        updatedArray.splice(index, 1);\n    }\n    return updatedArray;\n}\nfunction isNumber(value) {\n    return typeof value === \"number\";\n}\nfunction isArray(value) {\n    return Array.isArray(value);\n}\nfunction isString(value) {\n    return Object.prototype.toString.call(value) === \"[object String]\";\n}\nfunction isFunction(value) {\n    return typeof value === \"function\";\n}\nfunction createGenerateId(baseId) {\n    return (suffix)=>`${baseId()}-${suffix}`;\n}\nfunction contains(parent, child) {\n    if (!parent) {\n        return false;\n    }\n    return parent === child || parent.contains(child);\n}\nfunction getActiveElement(node, activeDescendant = false) {\n    const { activeElement } = getDocument(node);\n    if (!activeElement?.nodeName) {\n        return null;\n    }\n    if (isFrame(activeElement) && activeElement.contentDocument) {\n        return getActiveElement(activeElement.contentDocument.body, activeDescendant);\n    }\n    if (activeDescendant) {\n        const id = activeElement.getAttribute(\"aria-activedescendant\");\n        if (id) {\n            const element = getDocument(activeElement).getElementById(id);\n            if (element) {\n                return element;\n            }\n        }\n    }\n    return activeElement;\n}\nfunction getWindow(node) {\n    return getDocument(node).defaultView || window;\n}\nfunction getDocument(node) {\n    return node ? node.ownerDocument || node : document;\n}\nfunction isFrame(element) {\n    return element.tagName === \"IFRAME\";\n}\nvar EventKey = /* @__PURE__ */ ((EventKey2)=>{\n    EventKey2[\"Escape\"] = \"Escape\";\n    EventKey2[\"Enter\"] = \"Enter\";\n    EventKey2[\"Tab\"] = \"Tab\";\n    EventKey2[\"Space\"] = \" \";\n    EventKey2[\"ArrowDown\"] = \"ArrowDown\";\n    EventKey2[\"ArrowLeft\"] = \"ArrowLeft\";\n    EventKey2[\"ArrowRight\"] = \"ArrowRight\";\n    EventKey2[\"ArrowUp\"] = \"ArrowUp\";\n    EventKey2[\"End\"] = \"End\";\n    EventKey2[\"Home\"] = \"Home\";\n    EventKey2[\"PageDown\"] = \"PageDown\";\n    EventKey2[\"PageUp\"] = \"PageUp\";\n    return EventKey2;\n})(EventKey || {});\nfunction testPlatform(re) {\n    return  false ? // @ts-ignore\n    0 : false;\n}\nfunction isMac() {\n    return testPlatform(/^Mac/i);\n}\nfunction isIPhone() {\n    return testPlatform(/^iPhone/i);\n}\nfunction isIPad() {\n    return testPlatform(/^iPad/i) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.\n    isMac() && navigator.maxTouchPoints > 1;\n}\nfunction isIOS() {\n    return isIPhone() || isIPad();\n}\nfunction isAppleDevice() {\n    return isMac() || isIOS();\n}\nfunction callHandler(event, handler) {\n    if (handler) {\n        if (isFunction(handler)) {\n            handler(event);\n        } else {\n            handler[0](handler[1], event);\n        }\n    }\n    return event?.defaultPrevented;\n}\nfunction composeEventHandlers(handlers) {\n    return (event)=>{\n        for (const handler of handlers){\n            callHandler(event, handler);\n        }\n    };\n}\nfunction isCtrlKey(e2) {\n    if (isMac()) {\n        return e2.metaKey && !e2.ctrlKey;\n    }\n    return e2.ctrlKey && !e2.metaKey;\n}\nfunction focusWithoutScrolling(element) {\n    if (!element) {\n        return;\n    }\n    if (supportsPreventScroll()) {\n        element.focus({\n            preventScroll: true\n        });\n    } else {\n        const scrollableElements = getScrollableElements(element);\n        element.focus();\n        restoreScrollPosition(scrollableElements);\n    }\n}\nvar supportsPreventScrollCached = null;\nfunction supportsPreventScroll() {\n    if (supportsPreventScrollCached == null) {\n        supportsPreventScrollCached = false;\n        try {\n            const focusElem = document.createElement(\"div\");\n            focusElem.focus({\n                get preventScroll () {\n                    supportsPreventScrollCached = true;\n                    return true;\n                }\n            });\n        } catch (e2) {}\n    }\n    return supportsPreventScrollCached;\n}\nfunction getScrollableElements(element) {\n    let parent = element.parentNode;\n    const scrollableElements = [];\n    const rootScrollingElement = document.scrollingElement || document.documentElement;\n    while(parent instanceof HTMLElement && parent !== rootScrollingElement){\n        if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) {\n            scrollableElements.push({\n                element: parent,\n                scrollTop: parent.scrollTop,\n                scrollLeft: parent.scrollLeft\n            });\n        }\n        parent = parent.parentNode;\n    }\n    if (rootScrollingElement instanceof HTMLElement) {\n        scrollableElements.push({\n            element: rootScrollingElement,\n            scrollTop: rootScrollingElement.scrollTop,\n            scrollLeft: rootScrollingElement.scrollLeft\n        });\n    }\n    return scrollableElements;\n}\nfunction restoreScrollPosition(scrollableElements) {\n    for (const { element, scrollTop, scrollLeft } of scrollableElements){\n        element.scrollTop = scrollTop;\n        element.scrollLeft = scrollLeft;\n    }\n}\nvar focusableElements = [\n    \"input:not([type='hidden']):not([disabled])\",\n    \"select:not([disabled])\",\n    \"textarea:not([disabled])\",\n    \"button:not([disabled])\",\n    \"a[href]\",\n    \"area[href]\",\n    \"[tabindex]\",\n    \"iframe\",\n    \"object\",\n    \"embed\",\n    \"audio[controls]\",\n    \"video[controls]\",\n    \"[contenteditable]:not([contenteditable='false'])\"\n];\nvar tabbableElements = [\n    ...focusableElements,\n    '[tabindex]:not([tabindex=\"-1\"]):not([disabled])'\n];\nvar FOCUSABLE_ELEMENT_SELECTOR = focusableElements.join(\":not([hidden]),\") + \",[tabindex]:not([disabled]):not([hidden])\";\nvar TABBABLE_ELEMENT_SELECTOR = tabbableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\nfunction getAllTabbableIn(container, includeContainer) {\n    const elements = Array.from(container.querySelectorAll(FOCUSABLE_ELEMENT_SELECTOR));\n    const tabbableElements2 = elements.filter(isTabbable);\n    if (includeContainer && isTabbable(container)) {\n        tabbableElements2.unshift(container);\n    }\n    tabbableElements2.forEach((element, i2)=>{\n        if (isFrame(element) && element.contentDocument) {\n            const frameBody = element.contentDocument.body;\n            const allFrameTabbable = getAllTabbableIn(frameBody, false);\n            tabbableElements2.splice(i2, 1, ...allFrameTabbable);\n        }\n    });\n    return tabbableElements2;\n}\nfunction isTabbable(element) {\n    return isFocusable(element) && !hasNegativeTabIndex(element);\n}\nfunction isFocusable(element) {\n    return element.matches(FOCUSABLE_ELEMENT_SELECTOR) && isElementVisible(element);\n}\nfunction hasNegativeTabIndex(element) {\n    const tabIndex = parseInt(element.getAttribute(\"tabindex\") || \"0\", 10);\n    return tabIndex < 0;\n}\nfunction isElementVisible(element, childElement) {\n    return element.nodeName !== \"#comment\" && isStyleVisible(element) && isAttributeVisible(element, childElement) && (!element.parentElement || isElementVisible(element.parentElement, element));\n}\nfunction isStyleVisible(element) {\n    if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) {\n        return false;\n    }\n    const { display, visibility } = element.style;\n    let isVisible = display !== \"none\" && visibility !== \"hidden\" && visibility !== \"collapse\";\n    if (isVisible) {\n        if (!element.ownerDocument.defaultView) {\n            return isVisible;\n        }\n        const { getComputedStyle: getComputedStyle3 } = element.ownerDocument.defaultView;\n        const { display: computedDisplay, visibility: computedVisibility } = getComputedStyle3(element);\n        isVisible = computedDisplay !== \"none\" && computedVisibility !== \"hidden\" && computedVisibility !== \"collapse\";\n    }\n    return isVisible;\n}\nfunction isAttributeVisible(element, childElement) {\n    return !element.hasAttribute(\"hidden\") && (element.nodeName === \"DETAILS\" && childElement && childElement.nodeName !== \"SUMMARY\" ? element.hasAttribute(\"open\") : true);\n}\nfunction isElementInScope(element, scope) {\n    return scope.some((node)=>node.contains(element));\n}\nfunction getFocusableTreeWalker(root, opts, scope) {\n    const selector = opts?.tabbable ? TABBABLE_ELEMENT_SELECTOR : FOCUSABLE_ELEMENT_SELECTOR;\n    const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {\n        acceptNode (node) {\n            if (opts?.from?.contains(node)) {\n                return NodeFilter.FILTER_REJECT;\n            }\n            if (node.matches(selector) && isElementVisible(node) && (!scope || isElementInScope(node, scope)) && (!opts?.accept || opts.accept(node))) {\n                return NodeFilter.FILTER_ACCEPT;\n            }\n            return NodeFilter.FILTER_SKIP;\n        }\n    });\n    if (opts?.from) {\n        walker.currentNode = opts.from;\n    }\n    return walker;\n}\nfunction noop3() {\n    return;\n}\nfunction isPointInPolygon(point, polygon) {\n    const [x, y] = point;\n    let inside = false;\n    const length = polygon.length;\n    for(let l2 = length, i2 = 0, j = l2 - 1; i2 < l2; j = i2++){\n        const [xi, yi] = polygon[i2];\n        const [xj, yj] = polygon[j];\n        const [, vy] = polygon[j === 0 ? l2 - 1 : j - 1] || [\n            0,\n            0\n        ];\n        const where = (yi - yj) * (x - xi) - (xi - xj) * (y - yi);\n        if (yj < yi) {\n            if (y >= yj && y < yi) {\n                if (where === 0) return true;\n                if (where > 0) {\n                    if (y === yj) {\n                        if (y > vy) {\n                            inside = !inside;\n                        }\n                    } else {\n                        inside = !inside;\n                    }\n                }\n            }\n        } else if (yi < yj) {\n            if (y > yi && y <= yj) {\n                if (where === 0) return true;\n                if (where < 0) {\n                    if (y === yj) {\n                        if (y < vy) {\n                            inside = !inside;\n                        }\n                    } else {\n                        inside = !inside;\n                    }\n                }\n            }\n        } else if (y == yi && (x >= xj && x <= xi || x >= xi && x <= xj)) {\n            return true;\n        }\n    }\n    return inside;\n}\nfunction mergeDefaultProps(defaultProps, props) {\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)(defaultProps, props);\n}\nvar transitionsByElement = /* @__PURE__ */ new Map();\nvar transitionCallbacks = /* @__PURE__ */ new Set();\nfunction setupGlobalEvents() {\n    if (true) {\n        return;\n    }\n    const onTransitionStart = (e2)=>{\n        if (!e2.target) {\n            return;\n        }\n        let transitions = transitionsByElement.get(e2.target);\n        if (!transitions) {\n            transitions = /* @__PURE__ */ new Set();\n            transitionsByElement.set(e2.target, transitions);\n            e2.target.addEventListener(\"transitioncancel\", onTransitionEnd);\n        }\n        transitions.add(e2.propertyName);\n    };\n    const onTransitionEnd = (e2)=>{\n        if (!e2.target) {\n            return;\n        }\n        const properties = transitionsByElement.get(e2.target);\n        if (!properties) {\n            return;\n        }\n        properties.delete(e2.propertyName);\n        if (properties.size === 0) {\n            e2.target.removeEventListener(\"transitioncancel\", onTransitionEnd);\n            transitionsByElement.delete(e2.target);\n        }\n        if (transitionsByElement.size === 0) {\n            for (const cb of transitionCallbacks){\n                cb();\n            }\n            transitionCallbacks.clear();\n        }\n    };\n    document.body.addEventListener(\"transitionrun\", onTransitionStart);\n    document.body.addEventListener(\"transitionend\", onTransitionEnd);\n}\nif (typeof document !== \"undefined\") {\n    if (document.readyState !== \"loading\") {\n        setupGlobalEvents();\n    } else {\n        document.addEventListener(\"DOMContentLoaded\", setupGlobalEvents);\n    }\n}\nfunction scrollIntoView(scrollView, element) {\n    const offsetX = relativeOffset(scrollView, element, \"left\");\n    const offsetY = relativeOffset(scrollView, element, \"top\");\n    const width = element.offsetWidth;\n    const height = element.offsetHeight;\n    let x = scrollView.scrollLeft;\n    let y = scrollView.scrollTop;\n    const maxX = x + scrollView.offsetWidth;\n    const maxY = y + scrollView.offsetHeight;\n    if (offsetX <= x) {\n        x = offsetX;\n    } else if (offsetX + width > maxX) {\n        x += offsetX + width - maxX;\n    }\n    if (offsetY <= y) {\n        y = offsetY;\n    } else if (offsetY + height > maxY) {\n        y += offsetY + height - maxY;\n    }\n    scrollView.scrollLeft = x;\n    scrollView.scrollTop = y;\n}\nfunction relativeOffset(ancestor, child, axis) {\n    const prop = axis === \"left\" ? \"offsetLeft\" : \"offsetTop\";\n    let sum = 0;\n    while(child.offsetParent){\n        sum += child[prop];\n        if (child.offsetParent === ancestor) {\n            break;\n        } else if (child.offsetParent.contains(ancestor)) {\n            sum -= ancestor[prop];\n            break;\n        }\n        child = child.offsetParent;\n    }\n    return sum;\n}\nvar visuallyHiddenStyles = {\n    border: \"0\",\n    clip: \"rect(0 0 0 0)\",\n    \"clip-path\": \"inset(50%)\",\n    height: \"1px\",\n    margin: \"0 -1px -1px 0\",\n    overflow: \"hidden\",\n    padding: \"0\",\n    position: \"absolute\",\n    width: \"1px\",\n    \"white-space\": \"nowrap\"\n};\n// ../../node_modules/.pnpm/solid-js@1.8.7/node_modules/solid-js/store/dist/store.js\nvar $RAW = Symbol(\"store-raw\");\nvar $NODE = Symbol(\"store-node\");\nvar $HAS = Symbol(\"store-has\");\nvar $SELF = Symbol(\"store-self\");\nfunction wrap$1(value) {\n    let p2 = value[_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.$PROXY];\n    if (!p2) {\n        Object.defineProperty(value, _chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.$PROXY, {\n            value: p2 = new Proxy(value, proxyTraps$1)\n        });\n        if (!Array.isArray(value)) {\n            const keys2 = Object.keys(value), desc = Object.getOwnPropertyDescriptors(value);\n            for(let i2 = 0, l2 = keys2.length; i2 < l2; i2++){\n                const prop = keys2[i2];\n                if (desc[prop].get) {\n                    Object.defineProperty(value, prop, {\n                        enumerable: desc[prop].enumerable,\n                        get: desc[prop].get.bind(p2)\n                    });\n                }\n            }\n        }\n    }\n    return p2;\n}\nfunction isWrappable(obj) {\n    let proto;\n    return obj != null && typeof obj === \"object\" && (obj[_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.$PROXY] || !(proto = Object.getPrototypeOf(obj)) || proto === Object.prototype || Array.isArray(obj));\n}\nfunction unwrap(item, set = /* @__PURE__ */ new Set()) {\n    let result, unwrapped, v, prop;\n    if (result = item != null && item[$RAW]) return result;\n    if (!isWrappable(item) || set.has(item)) return item;\n    if (Array.isArray(item)) {\n        if (Object.isFrozen(item)) item = item.slice(0);\n        else set.add(item);\n        for(let i2 = 0, l2 = item.length; i2 < l2; i2++){\n            v = item[i2];\n            if ((unwrapped = unwrap(v, set)) !== v) item[i2] = unwrapped;\n        }\n    } else {\n        if (Object.isFrozen(item)) item = Object.assign({}, item);\n        else set.add(item);\n        const keys2 = Object.keys(item), desc = Object.getOwnPropertyDescriptors(item);\n        for(let i2 = 0, l2 = keys2.length; i2 < l2; i2++){\n            prop = keys2[i2];\n            if (desc[prop].get) continue;\n            v = item[prop];\n            if ((unwrapped = unwrap(v, set)) !== v) item[prop] = unwrapped;\n        }\n    }\n    return item;\n}\nfunction getNodes(target, symbol) {\n    let nodes = target[symbol];\n    if (!nodes) Object.defineProperty(target, symbol, {\n        value: nodes = /* @__PURE__ */ Object.create(null)\n    });\n    return nodes;\n}\nfunction getNode(nodes, property, value) {\n    if (nodes[property]) return nodes[property];\n    const [s2, set] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(value, {\n        equals: false,\n        internal: true\n    });\n    s2.$ = set;\n    return nodes[property] = s2;\n}\nfunction proxyDescriptor$1(target, property) {\n    const desc = Reflect.getOwnPropertyDescriptor(target, property);\n    if (!desc || desc.get || !desc.configurable || property === _chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.$PROXY || property === $NODE) return desc;\n    delete desc.value;\n    delete desc.writable;\n    desc.get = ()=>target[_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.$PROXY][property];\n    return desc;\n}\nfunction trackSelf(target) {\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.getListener)() && getNode(getNodes(target, $NODE), $SELF)();\n}\nfunction ownKeys(target) {\n    trackSelf(target);\n    return Reflect.ownKeys(target);\n}\nvar proxyTraps$1 = {\n    get (target, property, receiver) {\n        if (property === $RAW) return target;\n        if (property === _chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.$PROXY) return receiver;\n        if (property === _chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.$TRACK) {\n            trackSelf(target);\n            return receiver;\n        }\n        const nodes = getNodes(target, $NODE);\n        const tracked = nodes[property];\n        let value = tracked ? tracked() : target[property];\n        if (property === $NODE || property === $HAS || property === \"__proto__\") return value;\n        if (!tracked) {\n            const desc = Object.getOwnPropertyDescriptor(target, property);\n            if ((0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.getListener)() && (typeof value !== \"function\" || target.hasOwnProperty(property)) && !(desc && desc.get)) value = getNode(nodes, property, value)();\n        }\n        return isWrappable(value) ? wrap$1(value) : value;\n    },\n    has (target, property) {\n        if (property === $RAW || property === _chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.$PROXY || property === _chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.$TRACK || property === $NODE || property === $HAS || property === \"__proto__\") return true;\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.getListener)() && getNode(getNodes(target, $HAS), property)();\n        return property in target;\n    },\n    set () {\n        return true;\n    },\n    deleteProperty () {\n        return true;\n    },\n    ownKeys,\n    getOwnPropertyDescriptor: proxyDescriptor$1\n};\nfunction setProperty(state2, property, value, deleting = false) {\n    if (!deleting && state2[property] === value) return;\n    const prev = state2[property], len = state2.length;\n    if (value === void 0) {\n        delete state2[property];\n        if (state2[$HAS] && state2[$HAS][property] && prev !== void 0) state2[$HAS][property].$();\n    } else {\n        state2[property] = value;\n        if (state2[$HAS] && state2[$HAS][property] && prev === void 0) state2[$HAS][property].$();\n    }\n    let nodes = getNodes(state2, $NODE), node;\n    if (node = getNode(nodes, property, prev)) node.$(()=>value);\n    if (Array.isArray(state2) && state2.length !== len) {\n        for(let i2 = state2.length; i2 < len; i2++)(node = nodes[i2]) && node.$();\n        (node = getNode(nodes, \"length\", len)) && node.$(state2.length);\n    }\n    (node = nodes[$SELF]) && node.$();\n}\nfunction mergeStoreNode(state2, value) {\n    const keys2 = Object.keys(value);\n    for(let i2 = 0; i2 < keys2.length; i2 += 1){\n        const key = keys2[i2];\n        setProperty(state2, key, value[key]);\n    }\n}\nfunction updateArray(current, next) {\n    if (typeof next === \"function\") next = next(current);\n    next = unwrap(next);\n    if (Array.isArray(next)) {\n        if (current === next) return;\n        let i2 = 0, len = next.length;\n        for(; i2 < len; i2++){\n            const value = next[i2];\n            if (current[i2] !== value) setProperty(current, i2, value);\n        }\n        setProperty(current, \"length\", len);\n    } else mergeStoreNode(current, next);\n}\nfunction updatePath(current, path, traversed = []) {\n    let part, prev = current;\n    if (path.length > 1) {\n        part = path.shift();\n        const partType = typeof part, isArray2 = Array.isArray(current);\n        if (Array.isArray(part)) {\n            for(let i2 = 0; i2 < part.length; i2++){\n                updatePath(current, [\n                    part[i2]\n                ].concat(path), traversed);\n            }\n            return;\n        } else if (isArray2 && partType === \"function\") {\n            for(let i2 = 0; i2 < current.length; i2++){\n                if (part(current[i2], i2)) updatePath(current, [\n                    i2\n                ].concat(path), traversed);\n            }\n            return;\n        } else if (isArray2 && partType === \"object\") {\n            const { from = 0, to = current.length - 1, by = 1 } = part;\n            for(let i2 = from; i2 <= to; i2 += by){\n                updatePath(current, [\n                    i2\n                ].concat(path), traversed);\n            }\n            return;\n        } else if (path.length > 1) {\n            updatePath(current[part], path, [\n                part\n            ].concat(traversed));\n            return;\n        }\n        prev = current[part];\n        traversed = [\n            part\n        ].concat(traversed);\n    }\n    let value = path[0];\n    if (typeof value === \"function\") {\n        value = value(prev, traversed);\n        if (value === prev) return;\n    }\n    if (part === void 0 && value == void 0) return;\n    value = unwrap(value);\n    if (part === void 0 || isWrappable(prev) && isWrappable(value) && !Array.isArray(value)) {\n        mergeStoreNode(prev, value);\n    } else setProperty(current, part, value);\n}\nfunction createStore(...[store, options]) {\n    const unwrappedStore = unwrap(store || {});\n    const isArray2 = Array.isArray(unwrappedStore);\n    const wrappedStore = wrap$1(unwrappedStore);\n    function setStore(...args) {\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.batch)(()=>{\n            isArray2 && args.length === 1 ? updateArray(unwrappedStore, args[0]) : updatePath(unwrappedStore, args);\n        });\n    }\n    return [\n        wrappedStore,\n        setStore\n    ];\n}\n// ../../node_modules/.pnpm/@internationalized+message@3.1.1/node_modules/@internationalized/message/dist/import.mjs\nvar $d6fd23bc337660df$export$64839e615120df17 = class {\n    getStringForLocale(key, locale) {\n        let strings = this.messages[locale];\n        if (!strings) {\n            strings = $d6fd23bc337660df$var$getStringsForLocale(locale, this.messages, this.defaultLocale);\n            this.messages[locale] = strings;\n        }\n        let string = strings[key];\n        if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n        return string;\n    }\n    constructor(messages, defaultLocale = \"en-US\"){\n        this.messages = {\n            ...messages\n        };\n        this.defaultLocale = defaultLocale;\n    }\n};\nfunction $d6fd23bc337660df$var$getStringsForLocale(locale, strings, defaultLocale = \"en-US\") {\n    if (strings[locale]) return strings[locale];\n    let language = $d6fd23bc337660df$var$getLanguage(locale);\n    if (strings[language]) return strings[language];\n    for(let key in strings){\n        if (key.startsWith(language + \"-\")) return strings[key];\n    }\n    return strings[defaultLocale];\n}\nfunction $d6fd23bc337660df$var$getLanguage(locale) {\n    if (Intl.Locale) return new Intl.Locale(locale).language;\n    return locale.split(\"-\")[0];\n}\n// ../../node_modules/.pnpm/@floating-ui+utils@0.1.6/node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs\nvar sides = [\n    \"top\",\n    \"right\",\n    \"bottom\",\n    \"left\"\n];\nvar min = Math.min;\nvar max = Math.max;\nvar round = Math.round;\nvar floor = Math.floor;\nvar createCoords = (v)=>({\n        x: v,\n        y: v\n    });\nvar oppositeSideMap = {\n    left: \"right\",\n    right: \"left\",\n    bottom: \"top\",\n    top: \"bottom\"\n};\nvar oppositeAlignmentMap = {\n    start: \"end\",\n    end: \"start\"\n};\nfunction clamp2(start, value, end) {\n    return max(start, min(value, end));\n}\nfunction evaluate(value, param) {\n    return typeof value === \"function\" ? value(param) : value;\n}\nfunction getSide(placement) {\n    return placement.split(\"-\")[0];\n}\nfunction getAlignment(placement) {\n    return placement.split(\"-\")[1];\n}\nfunction getOppositeAxis(axis) {\n    return axis === \"x\" ? \"y\" : \"x\";\n}\nfunction getAxisLength(axis) {\n    return axis === \"y\" ? \"height\" : \"width\";\n}\nfunction getSideAxis(placement) {\n    return [\n        \"top\",\n        \"bottom\"\n    ].includes(getSide(placement)) ? \"y\" : \"x\";\n}\nfunction getAlignmentAxis(placement) {\n    return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n    if (rtl === void 0) {\n        rtl = false;\n    }\n    const alignment = getAlignment(placement);\n    const alignmentAxis = getAlignmentAxis(placement);\n    const length = getAxisLength(alignmentAxis);\n    let mainAlignmentSide = alignmentAxis === \"x\" ? alignment === (rtl ? \"end\" : \"start\") ? \"right\" : \"left\" : alignment === \"start\" ? \"bottom\" : \"top\";\n    if (rects.reference[length] > rects.floating[length]) {\n        mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n    }\n    return [\n        mainAlignmentSide,\n        getOppositePlacement(mainAlignmentSide)\n    ];\n}\nfunction getExpandedPlacements(placement) {\n    const oppositePlacement = getOppositePlacement(placement);\n    return [\n        getOppositeAlignmentPlacement(placement),\n        oppositePlacement,\n        getOppositeAlignmentPlacement(oppositePlacement)\n    ];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n    return placement.replace(/start|end/g, (alignment)=>oppositeAlignmentMap[alignment]);\n}\nfunction getSideList(side, isStart, rtl) {\n    const lr = [\n        \"left\",\n        \"right\"\n    ];\n    const rl = [\n        \"right\",\n        \"left\"\n    ];\n    const tb = [\n        \"top\",\n        \"bottom\"\n    ];\n    const bt = [\n        \"bottom\",\n        \"top\"\n    ];\n    switch(side){\n        case \"top\":\n        case \"bottom\":\n            if (rtl) return isStart ? rl : lr;\n            return isStart ? lr : rl;\n        case \"left\":\n        case \"right\":\n            return isStart ? tb : bt;\n        default:\n            return [];\n    }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n    const alignment = getAlignment(placement);\n    let list = getSideList(getSide(placement), direction === \"start\", rtl);\n    if (alignment) {\n        list = list.map((side)=>side + \"-\" + alignment);\n        if (flipAlignment) {\n            list = list.concat(list.map(getOppositeAlignmentPlacement));\n        }\n    }\n    return list;\n}\nfunction getOppositePlacement(placement) {\n    return placement.replace(/left|right|bottom|top/g, (side)=>oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n    return {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n        ...padding\n    };\n}\nfunction getPaddingObject(padding) {\n    return typeof padding !== \"number\" ? expandPaddingObject(padding) : {\n        top: padding,\n        right: padding,\n        bottom: padding,\n        left: padding\n    };\n}\nfunction rectToClientRect(rect) {\n    return {\n        ...rect,\n        top: rect.y,\n        left: rect.x,\n        right: rect.x + rect.width,\n        bottom: rect.y + rect.height\n    };\n}\n// ../../node_modules/.pnpm/@floating-ui+core@1.5.0/node_modules/@floating-ui/core/dist/floating-ui.core.mjs\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n    let { reference, floating } = _ref;\n    const sideAxis = getSideAxis(placement);\n    const alignmentAxis = getAlignmentAxis(placement);\n    const alignLength = getAxisLength(alignmentAxis);\n    const side = getSide(placement);\n    const isVertical = sideAxis === \"y\";\n    const commonX = reference.x + reference.width / 2 - floating.width / 2;\n    const commonY = reference.y + reference.height / 2 - floating.height / 2;\n    const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n    let coords;\n    switch(side){\n        case \"top\":\n            coords = {\n                x: commonX,\n                y: reference.y - floating.height\n            };\n            break;\n        case \"bottom\":\n            coords = {\n                x: commonX,\n                y: reference.y + reference.height\n            };\n            break;\n        case \"right\":\n            coords = {\n                x: reference.x + reference.width,\n                y: commonY\n            };\n            break;\n        case \"left\":\n            coords = {\n                x: reference.x - floating.width,\n                y: commonY\n            };\n            break;\n        default:\n            coords = {\n                x: reference.x,\n                y: reference.y\n            };\n    }\n    switch(getAlignment(placement)){\n        case \"start\":\n            coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n            break;\n        case \"end\":\n            coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n            break;\n    }\n    return coords;\n}\nvar computePosition = async (reference, floating, config)=>{\n    const { placement = \"bottom\", strategy = \"absolute\", middleware = [], platform: platform2 } = config;\n    const validMiddleware = middleware.filter(Boolean);\n    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));\n    let rects = await platform2.getElementRects({\n        reference,\n        floating,\n        strategy\n    });\n    let { x, y } = computeCoordsFromPlacement(rects, placement, rtl);\n    let statefulPlacement = placement;\n    let middlewareData = {};\n    let resetCount = 0;\n    for(let i2 = 0; i2 < validMiddleware.length; i2++){\n        const { name, fn } = validMiddleware[i2];\n        const { x: nextX, y: nextY, data, reset } = await fn({\n            x,\n            y,\n            initialPlacement: placement,\n            placement: statefulPlacement,\n            strategy,\n            middlewareData,\n            rects,\n            platform: platform2,\n            elements: {\n                reference,\n                floating\n            }\n        });\n        x = nextX != null ? nextX : x;\n        y = nextY != null ? nextY : y;\n        middlewareData = {\n            ...middlewareData,\n            [name]: {\n                ...middlewareData[name],\n                ...data\n            }\n        };\n        if (reset && resetCount <= 50) {\n            resetCount++;\n            if (typeof reset === \"object\") {\n                if (reset.placement) {\n                    statefulPlacement = reset.placement;\n                }\n                if (reset.rects) {\n                    rects = reset.rects === true ? await platform2.getElementRects({\n                        reference,\n                        floating,\n                        strategy\n                    }) : reset.rects;\n                }\n                ({ x, y } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n            }\n            i2 = -1;\n            continue;\n        }\n    }\n    return {\n        x,\n        y,\n        placement: statefulPlacement,\n        strategy,\n        middlewareData\n    };\n};\nasync function detectOverflow(state2, options) {\n    var _await$platform$isEle;\n    if (options === void 0) {\n        options = {};\n    }\n    const { x, y, platform: platform2, rects, elements, strategy } = state2;\n    const { boundary = \"clippingAncestors\", rootBoundary = \"viewport\", elementContext = \"floating\", altBoundary = false, padding = 0 } = evaluate(options, state2);\n    const paddingObject = getPaddingObject(padding);\n    const altContext = elementContext === \"floating\" ? \"reference\" : \"floating\";\n    const element = elements[altBoundary ? altContext : elementContext];\n    const clippingClientRect = rectToClientRect(await platform2.getClippingRect({\n        element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),\n        boundary,\n        rootBoundary,\n        strategy\n    }));\n    const rect = elementContext === \"floating\" ? {\n        ...rects.floating,\n        x,\n        y\n    } : rects.reference;\n    const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));\n    const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {\n        x: 1,\n        y: 1\n    } : {\n        x: 1,\n        y: 1\n    };\n    const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({\n        rect,\n        offsetParent,\n        strategy\n    }) : rect);\n    return {\n        top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n        bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n        left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n        right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n    };\n}\nvar arrow = (options)=>({\n        name: \"arrow\",\n        options,\n        async fn (state2) {\n            const { x, y, placement, rects, platform: platform2, elements, middlewareData } = state2;\n            const { element, padding = 0 } = evaluate(options, state2) || {};\n            if (element == null) {\n                return {};\n            }\n            const paddingObject = getPaddingObject(padding);\n            const coords = {\n                x,\n                y\n            };\n            const axis = getAlignmentAxis(placement);\n            const length = getAxisLength(axis);\n            const arrowDimensions = await platform2.getDimensions(element);\n            const isYAxis = axis === \"y\";\n            const minProp = isYAxis ? \"top\" : \"left\";\n            const maxProp = isYAxis ? \"bottom\" : \"right\";\n            const clientProp = isYAxis ? \"clientHeight\" : \"clientWidth\";\n            const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n            const startDiff = coords[axis] - rects.reference[axis];\n            const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));\n            let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n            if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {\n                clientSize = elements.floating[clientProp] || rects.floating[length];\n            }\n            const centerToReference = endDiff / 2 - startDiff / 2;\n            const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n            const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n            const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n            const min$1 = minPadding;\n            const max2 = clientSize - arrowDimensions[length] - maxPadding;\n            const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n            const offset2 = clamp2(min$1, center, max2);\n            const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center != offset2 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n            const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;\n            return {\n                [axis]: coords[axis] + alignmentOffset,\n                data: {\n                    [axis]: offset2,\n                    centerOffset: center - offset2 - alignmentOffset,\n                    ...shouldAddOffset && {\n                        alignmentOffset\n                    }\n                },\n                reset: shouldAddOffset\n            };\n        }\n    });\nvar flip = function(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    return {\n        name: \"flip\",\n        options,\n        async fn (state2) {\n            var _middlewareData$arrow, _middlewareData$flip;\n            const { placement, middlewareData, rects, initialPlacement, platform: platform2, elements } = state2;\n            const { mainAxis: checkMainAxis = true, crossAxis: checkCrossAxis = true, fallbackPlacements: specifiedFallbackPlacements, fallbackStrategy = \"bestFit\", fallbackAxisSideDirection = \"none\", flipAlignment = true, ...detectOverflowOptions } = evaluate(options, state2);\n            if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n                return {};\n            }\n            const side = getSide(placement);\n            const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n            const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));\n            const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [\n                getOppositePlacement(initialPlacement)\n            ] : getExpandedPlacements(initialPlacement));\n            if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== \"none\") {\n                fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n            }\n            const placements2 = [\n                initialPlacement,\n                ...fallbackPlacements\n            ];\n            const overflow = await detectOverflow(state2, detectOverflowOptions);\n            const overflows = [];\n            let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n            if (checkMainAxis) {\n                overflows.push(overflow[side]);\n            }\n            if (checkCrossAxis) {\n                const sides2 = getAlignmentSides(placement, rects, rtl);\n                overflows.push(overflow[sides2[0]], overflow[sides2[1]]);\n            }\n            overflowsData = [\n                ...overflowsData,\n                {\n                    placement,\n                    overflows\n                }\n            ];\n            if (!overflows.every((side2)=>side2 <= 0)) {\n                var _middlewareData$flip2, _overflowsData$filter;\n                const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n                const nextPlacement = placements2[nextIndex];\n                if (nextPlacement) {\n                    return {\n                        data: {\n                            index: nextIndex,\n                            overflows: overflowsData\n                        },\n                        reset: {\n                            placement: nextPlacement\n                        }\n                    };\n                }\n                let resetPlacement = (_overflowsData$filter = overflowsData.filter((d)=>d.overflows[0] <= 0).sort((a2, b2)=>a2.overflows[1] - b2.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n                if (!resetPlacement) {\n                    switch(fallbackStrategy){\n                        case \"bestFit\":\n                            {\n                                var _overflowsData$map$so;\n                                const placement2 = (_overflowsData$map$so = overflowsData.map((d)=>[\n                                        d.placement,\n                                        d.overflows.filter((overflow2)=>overflow2 > 0).reduce((acc, overflow2)=>acc + overflow2, 0)\n                                    ]).sort((a2, b2)=>a2[1] - b2[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n                                if (placement2) {\n                                    resetPlacement = placement2;\n                                }\n                                break;\n                            }\n                        case \"initialPlacement\":\n                            resetPlacement = initialPlacement;\n                            break;\n                    }\n                }\n                if (placement !== resetPlacement) {\n                    return {\n                        reset: {\n                            placement: resetPlacement\n                        }\n                    };\n                }\n            }\n            return {};\n        }\n    };\n};\nfunction getSideOffsets(overflow, rect) {\n    return {\n        top: overflow.top - rect.height,\n        right: overflow.right - rect.width,\n        bottom: overflow.bottom - rect.height,\n        left: overflow.left - rect.width\n    };\n}\nfunction isAnySideFullyClipped(overflow) {\n    return sides.some((side)=>overflow[side] >= 0);\n}\nvar hide = function(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    return {\n        name: \"hide\",\n        options,\n        async fn (state2) {\n            const { rects } = state2;\n            const { strategy = \"referenceHidden\", ...detectOverflowOptions } = evaluate(options, state2);\n            switch(strategy){\n                case \"referenceHidden\":\n                    {\n                        const overflow = await detectOverflow(state2, {\n                            ...detectOverflowOptions,\n                            elementContext: \"reference\"\n                        });\n                        const offsets = getSideOffsets(overflow, rects.reference);\n                        return {\n                            data: {\n                                referenceHiddenOffsets: offsets,\n                                referenceHidden: isAnySideFullyClipped(offsets)\n                            }\n                        };\n                    }\n                case \"escaped\":\n                    {\n                        const overflow = await detectOverflow(state2, {\n                            ...detectOverflowOptions,\n                            altBoundary: true\n                        });\n                        const offsets = getSideOffsets(overflow, rects.floating);\n                        return {\n                            data: {\n                                escapedOffsets: offsets,\n                                escaped: isAnySideFullyClipped(offsets)\n                            }\n                        };\n                    }\n                default:\n                    {\n                        return {};\n                    }\n            }\n        }\n    };\n};\nasync function convertValueToCoords(state2, options) {\n    const { placement, platform: platform2, elements } = state2;\n    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));\n    const side = getSide(placement);\n    const alignment = getAlignment(placement);\n    const isVertical = getSideAxis(placement) === \"y\";\n    const mainAxisMulti = [\n        \"left\",\n        \"top\"\n    ].includes(side) ? -1 : 1;\n    const crossAxisMulti = rtl && isVertical ? -1 : 1;\n    const rawValue = evaluate(options, state2);\n    let { mainAxis, crossAxis, alignmentAxis } = typeof rawValue === \"number\" ? {\n        mainAxis: rawValue,\n        crossAxis: 0,\n        alignmentAxis: null\n    } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        alignmentAxis: null,\n        ...rawValue\n    };\n    if (alignment && typeof alignmentAxis === \"number\") {\n        crossAxis = alignment === \"end\" ? alignmentAxis * -1 : alignmentAxis;\n    }\n    return isVertical ? {\n        x: crossAxis * crossAxisMulti,\n        y: mainAxis * mainAxisMulti\n    } : {\n        x: mainAxis * mainAxisMulti,\n        y: crossAxis * crossAxisMulti\n    };\n}\nvar offset = function(options) {\n    if (options === void 0) {\n        options = 0;\n    }\n    return {\n        name: \"offset\",\n        options,\n        async fn (state2) {\n            const { x, y } = state2;\n            const diffCoords = await convertValueToCoords(state2, options);\n            return {\n                x: x + diffCoords.x,\n                y: y + diffCoords.y,\n                data: diffCoords\n            };\n        }\n    };\n};\nvar shift = function(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    return {\n        name: \"shift\",\n        options,\n        async fn (state2) {\n            const { x, y, placement } = state2;\n            const { mainAxis: checkMainAxis = true, crossAxis: checkCrossAxis = false, limiter = {\n                fn: (_ref)=>{\n                    let { x: x2, y: y2 } = _ref;\n                    return {\n                        x: x2,\n                        y: y2\n                    };\n                }\n            }, ...detectOverflowOptions } = evaluate(options, state2);\n            const coords = {\n                x,\n                y\n            };\n            const overflow = await detectOverflow(state2, detectOverflowOptions);\n            const crossAxis = getSideAxis(getSide(placement));\n            const mainAxis = getOppositeAxis(crossAxis);\n            let mainAxisCoord = coords[mainAxis];\n            let crossAxisCoord = coords[crossAxis];\n            if (checkMainAxis) {\n                const minSide = mainAxis === \"y\" ? \"top\" : \"left\";\n                const maxSide = mainAxis === \"y\" ? \"bottom\" : \"right\";\n                const min2 = mainAxisCoord + overflow[minSide];\n                const max2 = mainAxisCoord - overflow[maxSide];\n                mainAxisCoord = clamp2(min2, mainAxisCoord, max2);\n            }\n            if (checkCrossAxis) {\n                const minSide = crossAxis === \"y\" ? \"top\" : \"left\";\n                const maxSide = crossAxis === \"y\" ? \"bottom\" : \"right\";\n                const min2 = crossAxisCoord + overflow[minSide];\n                const max2 = crossAxisCoord - overflow[maxSide];\n                crossAxisCoord = clamp2(min2, crossAxisCoord, max2);\n            }\n            const limitedCoords = limiter.fn({\n                ...state2,\n                [mainAxis]: mainAxisCoord,\n                [crossAxis]: crossAxisCoord\n            });\n            return {\n                ...limitedCoords,\n                data: {\n                    x: limitedCoords.x - x,\n                    y: limitedCoords.y - y\n                }\n            };\n        }\n    };\n};\nvar size = function(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    return {\n        name: \"size\",\n        options,\n        async fn (state2) {\n            const { placement, rects, platform: platform2, elements } = state2;\n            const { apply = ()=>{}, ...detectOverflowOptions } = evaluate(options, state2);\n            const overflow = await detectOverflow(state2, detectOverflowOptions);\n            const side = getSide(placement);\n            const alignment = getAlignment(placement);\n            const isYAxis = getSideAxis(placement) === \"y\";\n            const { width, height } = rects.floating;\n            let heightSide;\n            let widthSide;\n            if (side === \"top\" || side === \"bottom\") {\n                heightSide = side;\n                widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? \"start\" : \"end\") ? \"left\" : \"right\";\n            } else {\n                widthSide = side;\n                heightSide = alignment === \"end\" ? \"top\" : \"bottom\";\n            }\n            const overflowAvailableHeight = height - overflow[heightSide];\n            const overflowAvailableWidth = width - overflow[widthSide];\n            const noShift = !state2.middlewareData.shift;\n            let availableHeight = overflowAvailableHeight;\n            let availableWidth = overflowAvailableWidth;\n            if (isYAxis) {\n                const maximumClippingWidth = width - overflow.left - overflow.right;\n                availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n            } else {\n                const maximumClippingHeight = height - overflow.top - overflow.bottom;\n                availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n            }\n            if (noShift && !alignment) {\n                const xMin = max(overflow.left, 0);\n                const xMax = max(overflow.right, 0);\n                const yMin = max(overflow.top, 0);\n                const yMax = max(overflow.bottom, 0);\n                if (isYAxis) {\n                    availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n                } else {\n                    availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n                }\n            }\n            await apply({\n                ...state2,\n                availableWidth,\n                availableHeight\n            });\n            const nextDimensions = await platform2.getDimensions(elements.floating);\n            if (width !== nextDimensions.width || height !== nextDimensions.height) {\n                return {\n                    reset: {\n                        rects: true\n                    }\n                };\n            }\n            return {};\n        }\n    };\n};\n// ../../node_modules/.pnpm/@floating-ui+utils@0.1.6/node_modules/@floating-ui/utils/dom/dist/floating-ui.utils.dom.mjs\nfunction getNodeName(node) {\n    if (isNode(node)) {\n        return (node.nodeName || \"\").toLowerCase();\n    }\n    return \"#document\";\n}\nfunction getWindow2(node) {\n    var _node$ownerDocument;\n    return (node == null ? void 0 : (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement(node) {\n    var _ref;\n    return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n    return value instanceof Node || value instanceof getWindow2(value).Node;\n}\nfunction isElement(value) {\n    return value instanceof Element || value instanceof getWindow2(value).Element;\n}\nfunction isHTMLElement(value) {\n    return value instanceof HTMLElement || value instanceof getWindow2(value).HTMLElement;\n}\nfunction isShadowRoot(value) {\n    if (typeof ShadowRoot === \"undefined\") {\n        return false;\n    }\n    return value instanceof ShadowRoot || value instanceof getWindow2(value).ShadowRoot;\n}\nfunction isOverflowElement(element) {\n    const { overflow, overflowX, overflowY, display } = getComputedStyle2(element);\n    return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && ![\n        \"inline\",\n        \"contents\"\n    ].includes(display);\n}\nfunction isTableElement(element) {\n    return [\n        \"table\",\n        \"td\",\n        \"th\"\n    ].includes(getNodeName(element));\n}\nfunction isContainingBlock(element) {\n    const webkit = isWebKit();\n    const css = getComputedStyle2(element);\n    return css.transform !== \"none\" || css.perspective !== \"none\" || (css.containerType ? css.containerType !== \"normal\" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== \"none\" : false) || !webkit && (css.filter ? css.filter !== \"none\" : false) || [\n        \"transform\",\n        \"perspective\",\n        \"filter\"\n    ].some((value)=>(css.willChange || \"\").includes(value)) || [\n        \"paint\",\n        \"layout\",\n        \"strict\",\n        \"content\"\n    ].some((value)=>(css.contain || \"\").includes(value));\n}\nfunction getContainingBlock(element) {\n    let currentNode = getParentNode(element);\n    while(isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)){\n        if (isContainingBlock(currentNode)) {\n            return currentNode;\n        } else {\n            currentNode = getParentNode(currentNode);\n        }\n    }\n    return null;\n}\nfunction isWebKit() {\n    if (typeof CSS === \"undefined\" || !CSS.supports) return false;\n    return CSS.supports(\"-webkit-backdrop-filter\", \"none\");\n}\nfunction isLastTraversableNode(node) {\n    return [\n        \"html\",\n        \"body\",\n        \"#document\"\n    ].includes(getNodeName(node));\n}\nfunction getComputedStyle2(element) {\n    return getWindow2(element).getComputedStyle(element);\n}\nfunction getNodeScroll(element) {\n    if (isElement(element)) {\n        return {\n            scrollLeft: element.scrollLeft,\n            scrollTop: element.scrollTop\n        };\n    }\n    return {\n        scrollLeft: element.pageXOffset,\n        scrollTop: element.pageYOffset\n    };\n}\nfunction getParentNode(node) {\n    if (getNodeName(node) === \"html\") {\n        return node;\n    }\n    const result = // Step into the shadow DOM of the parent of a slotted node.\n    node.assignedSlot || // DOM Element detected.\n    node.parentNode || // ShadowRoot detected.\n    isShadowRoot(node) && node.host || // Fallback.\n    getDocumentElement(node);\n    return isShadowRoot(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n    const parentNode = getParentNode(node);\n    if (isLastTraversableNode(parentNode)) {\n        return node.ownerDocument ? node.ownerDocument.body : node.body;\n    }\n    if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n        return parentNode;\n    }\n    return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list, traverseIframes) {\n    var _node$ownerDocument2;\n    if (list === void 0) {\n        list = [];\n    }\n    if (traverseIframes === void 0) {\n        traverseIframes = true;\n    }\n    const scrollableAncestor = getNearestOverflowAncestor(node);\n    const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n    const win = getWindow2(scrollableAncestor);\n    if (isBody) {\n        return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);\n    }\n    return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));\n}\n// ../../node_modules/.pnpm/@floating-ui+dom@1.5.3/node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\nfunction getCssDimensions(element) {\n    const css = getComputedStyle2(element);\n    let width = parseFloat(css.width) || 0;\n    let height = parseFloat(css.height) || 0;\n    const hasOffset = isHTMLElement(element);\n    const offsetWidth = hasOffset ? element.offsetWidth : width;\n    const offsetHeight = hasOffset ? element.offsetHeight : height;\n    const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n    if (shouldFallback) {\n        width = offsetWidth;\n        height = offsetHeight;\n    }\n    return {\n        width,\n        height,\n        $: shouldFallback\n    };\n}\nfunction unwrapElement(element) {\n    return !isElement(element) ? element.contextElement : element;\n}\nfunction getScale(element) {\n    const domElement = unwrapElement(element);\n    if (!isHTMLElement(domElement)) {\n        return createCoords(1);\n    }\n    const rect = domElement.getBoundingClientRect();\n    const { width, height, $ } = getCssDimensions(domElement);\n    let x = ($ ? round(rect.width) : rect.width) / width;\n    let y = ($ ? round(rect.height) : rect.height) / height;\n    if (!x || !Number.isFinite(x)) {\n        x = 1;\n    }\n    if (!y || !Number.isFinite(y)) {\n        y = 1;\n    }\n    return {\n        x,\n        y\n    };\n}\nvar noOffsets = /* @__PURE__ */ createCoords(0);\nfunction getVisualOffsets(element) {\n    const win = getWindow2(element);\n    if (!isWebKit() || !win.visualViewport) {\n        return noOffsets;\n    }\n    return {\n        x: win.visualViewport.offsetLeft,\n        y: win.visualViewport.offsetTop\n    };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n    if (isFixed === void 0) {\n        isFixed = false;\n    }\n    if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow2(element)) {\n        return false;\n    }\n    return isFixed;\n}\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n    if (includeScale === void 0) {\n        includeScale = false;\n    }\n    if (isFixedStrategy === void 0) {\n        isFixedStrategy = false;\n    }\n    const clientRect = element.getBoundingClientRect();\n    const domElement = unwrapElement(element);\n    let scale = createCoords(1);\n    if (includeScale) {\n        if (offsetParent) {\n            if (isElement(offsetParent)) {\n                scale = getScale(offsetParent);\n            }\n        } else {\n            scale = getScale(element);\n        }\n    }\n    const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n    let x = (clientRect.left + visualOffsets.x) / scale.x;\n    let y = (clientRect.top + visualOffsets.y) / scale.y;\n    let width = clientRect.width / scale.x;\n    let height = clientRect.height / scale.y;\n    if (domElement) {\n        const win = getWindow2(domElement);\n        const offsetWin = offsetParent && isElement(offsetParent) ? getWindow2(offsetParent) : offsetParent;\n        let currentIFrame = win.frameElement;\n        while(currentIFrame && offsetParent && offsetWin !== win){\n            const iframeScale = getScale(currentIFrame);\n            const iframeRect = currentIFrame.getBoundingClientRect();\n            const css = getComputedStyle2(currentIFrame);\n            const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n            const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n            x *= iframeScale.x;\n            y *= iframeScale.y;\n            width *= iframeScale.x;\n            height *= iframeScale.y;\n            x += left;\n            y += top;\n            currentIFrame = getWindow2(currentIFrame).frameElement;\n        }\n    }\n    return rectToClientRect({\n        width,\n        height,\n        x,\n        y\n    });\n}\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n    let { rect, offsetParent, strategy } = _ref;\n    const isOffsetParentAnElement = isHTMLElement(offsetParent);\n    const documentElement = getDocumentElement(offsetParent);\n    if (offsetParent === documentElement) {\n        return rect;\n    }\n    let scroll = {\n        scrollLeft: 0,\n        scrollTop: 0\n    };\n    let scale = createCoords(1);\n    const offsets = createCoords(0);\n    if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== \"fixed\") {\n        if (getNodeName(offsetParent) !== \"body\" || isOverflowElement(documentElement)) {\n            scroll = getNodeScroll(offsetParent);\n        }\n        if (isHTMLElement(offsetParent)) {\n            const offsetRect = getBoundingClientRect(offsetParent);\n            scale = getScale(offsetParent);\n            offsets.x = offsetRect.x + offsetParent.clientLeft;\n            offsets.y = offsetRect.y + offsetParent.clientTop;\n        }\n    }\n    return {\n        width: rect.width * scale.x,\n        height: rect.height * scale.y,\n        x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,\n        y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y\n    };\n}\nfunction getClientRects(element) {\n    return Array.from(element.getClientRects());\n}\nfunction getWindowScrollBarX(element) {\n    return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;\n}\nfunction getDocumentRect(element) {\n    const html = getDocumentElement(element);\n    const scroll = getNodeScroll(element);\n    const body = element.ownerDocument.body;\n    const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n    const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n    let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n    const y = -scroll.scrollTop;\n    if (getComputedStyle2(body).direction === \"rtl\") {\n        x += max(html.clientWidth, body.clientWidth) - width;\n    }\n    return {\n        width,\n        height,\n        x,\n        y\n    };\n}\nfunction getViewportRect(element, strategy) {\n    const win = getWindow2(element);\n    const html = getDocumentElement(element);\n    const visualViewport = win.visualViewport;\n    let width = html.clientWidth;\n    let height = html.clientHeight;\n    let x = 0;\n    let y = 0;\n    if (visualViewport) {\n        width = visualViewport.width;\n        height = visualViewport.height;\n        const visualViewportBased = isWebKit();\n        if (!visualViewportBased || visualViewportBased && strategy === \"fixed\") {\n            x = visualViewport.offsetLeft;\n            y = visualViewport.offsetTop;\n        }\n    }\n    return {\n        width,\n        height,\n        x,\n        y\n    };\n}\nfunction getInnerBoundingClientRect(element, strategy) {\n    const clientRect = getBoundingClientRect(element, true, strategy === \"fixed\");\n    const top = clientRect.top + element.clientTop;\n    const left = clientRect.left + element.clientLeft;\n    const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n    const width = element.clientWidth * scale.x;\n    const height = element.clientHeight * scale.y;\n    const x = left * scale.x;\n    const y = top * scale.y;\n    return {\n        width,\n        height,\n        x,\n        y\n    };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n    let rect;\n    if (clippingAncestor === \"viewport\") {\n        rect = getViewportRect(element, strategy);\n    } else if (clippingAncestor === \"document\") {\n        rect = getDocumentRect(getDocumentElement(element));\n    } else if (isElement(clippingAncestor)) {\n        rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n    } else {\n        const visualOffsets = getVisualOffsets(element);\n        rect = {\n            ...clippingAncestor,\n            x: clippingAncestor.x - visualOffsets.x,\n            y: clippingAncestor.y - visualOffsets.y\n        };\n    }\n    return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n    const parentNode = getParentNode(element);\n    if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n        return false;\n    }\n    return getComputedStyle2(parentNode).position === \"fixed\" || hasFixedPositionAncestor(parentNode, stopNode);\n}\nfunction getClippingElementAncestors(element, cache) {\n    const cachedResult = cache.get(element);\n    if (cachedResult) {\n        return cachedResult;\n    }\n    let result = getOverflowAncestors(element, [], false).filter((el)=>isElement(el) && getNodeName(el) !== \"body\");\n    let currentContainingBlockComputedStyle = null;\n    const elementIsFixed = getComputedStyle2(element).position === \"fixed\";\n    let currentNode = elementIsFixed ? getParentNode(element) : element;\n    while(isElement(currentNode) && !isLastTraversableNode(currentNode)){\n        const computedStyle = getComputedStyle2(currentNode);\n        const currentNodeIsContaining = isContainingBlock(currentNode);\n        if (!currentNodeIsContaining && computedStyle.position === \"fixed\") {\n            currentContainingBlockComputedStyle = null;\n        }\n        const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === \"static\" && !!currentContainingBlockComputedStyle && [\n            \"absolute\",\n            \"fixed\"\n        ].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n        if (shouldDropCurrentNode) {\n            result = result.filter((ancestor)=>ancestor !== currentNode);\n        } else {\n            currentContainingBlockComputedStyle = computedStyle;\n        }\n        currentNode = getParentNode(currentNode);\n    }\n    cache.set(element, result);\n    return result;\n}\nfunction getClippingRect(_ref) {\n    let { element, boundary, rootBoundary, strategy } = _ref;\n    const elementClippingAncestors = boundary === \"clippingAncestors\" ? getClippingElementAncestors(element, this._c) : [].concat(boundary);\n    const clippingAncestors = [\n        ...elementClippingAncestors,\n        rootBoundary\n    ];\n    const firstClippingAncestor = clippingAncestors[0];\n    const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor)=>{\n        const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n        accRect.top = max(rect.top, accRect.top);\n        accRect.right = min(rect.right, accRect.right);\n        accRect.bottom = min(rect.bottom, accRect.bottom);\n        accRect.left = max(rect.left, accRect.left);\n        return accRect;\n    }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n    return {\n        width: clippingRect.right - clippingRect.left,\n        height: clippingRect.bottom - clippingRect.top,\n        x: clippingRect.left,\n        y: clippingRect.top\n    };\n}\nfunction getDimensions(element) {\n    return getCssDimensions(element);\n}\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n    const isOffsetParentAnElement = isHTMLElement(offsetParent);\n    const documentElement = getDocumentElement(offsetParent);\n    const isFixed = strategy === \"fixed\";\n    const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n    let scroll = {\n        scrollLeft: 0,\n        scrollTop: 0\n    };\n    const offsets = createCoords(0);\n    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n        if (getNodeName(offsetParent) !== \"body\" || isOverflowElement(documentElement)) {\n            scroll = getNodeScroll(offsetParent);\n        }\n        if (isOffsetParentAnElement) {\n            const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n            offsets.x = offsetRect.x + offsetParent.clientLeft;\n            offsets.y = offsetRect.y + offsetParent.clientTop;\n        } else if (documentElement) {\n            offsets.x = getWindowScrollBarX(documentElement);\n        }\n    }\n    return {\n        x: rect.left + scroll.scrollLeft - offsets.x,\n        y: rect.top + scroll.scrollTop - offsets.y,\n        width: rect.width,\n        height: rect.height\n    };\n}\nfunction getTrueOffsetParent(element, polyfill) {\n    if (!isHTMLElement(element) || getComputedStyle2(element).position === \"fixed\") {\n        return null;\n    }\n    if (polyfill) {\n        return polyfill(element);\n    }\n    return element.offsetParent;\n}\nfunction getOffsetParent(element, polyfill) {\n    const window2 = getWindow2(element);\n    if (!isHTMLElement(element)) {\n        return window2;\n    }\n    let offsetParent = getTrueOffsetParent(element, polyfill);\n    while(offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === \"static\"){\n        offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n    }\n    if (offsetParent && (getNodeName(offsetParent) === \"html\" || getNodeName(offsetParent) === \"body\" && getComputedStyle2(offsetParent).position === \"static\" && !isContainingBlock(offsetParent))) {\n        return window2;\n    }\n    return offsetParent || getContainingBlock(element) || window2;\n}\nvar getElementRects = async function(_ref) {\n    let { reference, floating, strategy } = _ref;\n    const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n    const getDimensionsFn = this.getDimensions;\n    return {\n        reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),\n        floating: {\n            x: 0,\n            y: 0,\n            ...await getDimensionsFn(floating)\n        }\n    };\n};\nfunction isRTL(element) {\n    return getComputedStyle2(element).direction === \"rtl\";\n}\nvar platform = {\n    convertOffsetParentRelativeRectToViewportRelativeRect,\n    getDocumentElement,\n    getClippingRect,\n    getOffsetParent,\n    getElementRects,\n    getClientRects,\n    getDimensions,\n    getScale,\n    isElement,\n    isRTL\n};\nfunction observeMove(element, onMove) {\n    let io = null;\n    let timeoutId;\n    const root = getDocumentElement(element);\n    function cleanup() {\n        clearTimeout(timeoutId);\n        io && io.disconnect();\n        io = null;\n    }\n    function refresh(skip, threshold) {\n        if (skip === void 0) {\n            skip = false;\n        }\n        if (threshold === void 0) {\n            threshold = 1;\n        }\n        cleanup();\n        const { left, top, width, height } = element.getBoundingClientRect();\n        if (!skip) {\n            onMove();\n        }\n        if (!width || !height) {\n            return;\n        }\n        const insetTop = floor(top);\n        const insetRight = floor(root.clientWidth - (left + width));\n        const insetBottom = floor(root.clientHeight - (top + height));\n        const insetLeft = floor(left);\n        const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n        const options = {\n            rootMargin,\n            threshold: max(0, min(1, threshold)) || 1\n        };\n        let isFirstUpdate = true;\n        function handleObserve(entries2) {\n            const ratio = entries2[0].intersectionRatio;\n            if (ratio !== threshold) {\n                if (!isFirstUpdate) {\n                    return refresh();\n                }\n                if (!ratio) {\n                    timeoutId = setTimeout(()=>{\n                        refresh(false, 1e-7);\n                    }, 100);\n                } else {\n                    refresh(false, ratio);\n                }\n            }\n            isFirstUpdate = false;\n        }\n        try {\n            io = new IntersectionObserver(handleObserve, {\n                ...options,\n                // Handle <iframe>s\n                root: root.ownerDocument\n            });\n        } catch (e2) {\n            io = new IntersectionObserver(handleObserve, options);\n        }\n        io.observe(element);\n    }\n    refresh(true);\n    return cleanup;\n}\nfunction autoUpdate(reference, floating, update, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    const { ancestorScroll = true, ancestorResize = true, elementResize = typeof ResizeObserver === \"function\", layoutShift = typeof IntersectionObserver === \"function\", animationFrame = false } = options;\n    const referenceEl = unwrapElement(reference);\n    const ancestors = ancestorScroll || ancestorResize ? [\n        ...referenceEl ? getOverflowAncestors(referenceEl) : [],\n        ...getOverflowAncestors(floating)\n    ] : [];\n    ancestors.forEach((ancestor)=>{\n        ancestorScroll && ancestor.addEventListener(\"scroll\", update, {\n            passive: true\n        });\n        ancestorResize && ancestor.addEventListener(\"resize\", update);\n    });\n    const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n    let reobserveFrame = -1;\n    let resizeObserver = null;\n    if (elementResize) {\n        resizeObserver = new ResizeObserver((_ref)=>{\n            let [firstEntry] = _ref;\n            if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n                resizeObserver.unobserve(floating);\n                cancelAnimationFrame(reobserveFrame);\n                reobserveFrame = requestAnimationFrame(()=>{\n                    resizeObserver && resizeObserver.observe(floating);\n                });\n            }\n            update();\n        });\n        if (referenceEl && !animationFrame) {\n            resizeObserver.observe(referenceEl);\n        }\n        resizeObserver.observe(floating);\n    }\n    let frameId;\n    let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n    if (animationFrame) {\n        frameLoop();\n    }\n    function frameLoop() {\n        const nextRefRect = getBoundingClientRect(reference);\n        if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {\n            update();\n        }\n        prevRefRect = nextRefRect;\n        frameId = requestAnimationFrame(frameLoop);\n    }\n    update();\n    return ()=>{\n        ancestors.forEach((ancestor)=>{\n            ancestorScroll && ancestor.removeEventListener(\"scroll\", update);\n            ancestorResize && ancestor.removeEventListener(\"resize\", update);\n        });\n        cleanupIo && cleanupIo();\n        resizeObserver && resizeObserver.disconnect();\n        resizeObserver = null;\n        if (animationFrame) {\n            cancelAnimationFrame(frameId);\n        }\n    };\n}\nvar computePosition2 = (reference, floating, options)=>{\n    const cache = /* @__PURE__ */ new Map();\n    const mergedOptions = {\n        platform,\n        ...options\n    };\n    const platformWithCache = {\n        ...mergedOptions.platform,\n        _c: cache\n    };\n    return computePosition(reference, floating, {\n        ...mergedOptions,\n        platform: platformWithCache\n    });\n};\n// ../../node_modules/.pnpm/@kobalte+core@0.11.2_solid-js@1.8.7/node_modules/@kobalte/core/dist/esm/index.js\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction buildNodes(params) {\n    let index = params.startIndex ?? 0;\n    const level = params.startLevel ?? 0;\n    const nodes = [];\n    const getKey = (data)=>{\n        if (data == null) {\n            return \"\";\n        }\n        const _getKey = params.getKey ?? \"key\";\n        const dataKey = isString(_getKey) ? data[_getKey] : _getKey(data);\n        return dataKey != null ? String(dataKey) : \"\";\n    };\n    const getTextValue = (data)=>{\n        if (data == null) {\n            return \"\";\n        }\n        const _getTextValue = params.getTextValue ?? \"textValue\";\n        const dataTextValue = isString(_getTextValue) ? data[_getTextValue] : _getTextValue(data);\n        return dataTextValue != null ? String(dataTextValue) : \"\";\n    };\n    const getDisabled = (data)=>{\n        if (data == null) {\n            return false;\n        }\n        const _getDisabled = params.getDisabled ?? \"disabled\";\n        return (isString(_getDisabled) ? data[_getDisabled] : _getDisabled(data)) ?? false;\n    };\n    const getSectionChildren = (data)=>{\n        if (data == null) {\n            return void 0;\n        }\n        if (isString(params.getSectionChildren)) {\n            return data[params.getSectionChildren];\n        }\n        return params.getSectionChildren?.(data);\n    };\n    for (const data of params.dataSource){\n        if (isString(data) || isNumber(data)) {\n            nodes.push({\n                type: \"item\",\n                rawValue: data,\n                key: String(data),\n                textValue: String(data),\n                disabled: getDisabled(data),\n                level,\n                index\n            });\n            index++;\n            continue;\n        }\n        if (getSectionChildren(data) != null) {\n            nodes.push({\n                type: \"section\",\n                rawValue: data,\n                key: \"\",\n                // not applicable here\n                textValue: \"\",\n                // not applicable here\n                disabled: false,\n                // not applicable here\n                level,\n                index\n            });\n            index++;\n            const sectionChildren = getSectionChildren(data) ?? [];\n            if (sectionChildren.length > 0) {\n                const childNodes = buildNodes({\n                    dataSource: sectionChildren,\n                    getKey: params.getKey,\n                    getTextValue: params.getTextValue,\n                    getDisabled: params.getDisabled,\n                    getSectionChildren: params.getSectionChildren,\n                    startIndex: index,\n                    startLevel: level + 1\n                });\n                nodes.push(...childNodes);\n                index += childNodes.length;\n            }\n        } else {\n            nodes.push({\n                type: \"item\",\n                rawValue: data,\n                key: getKey(data),\n                textValue: getTextValue(data),\n                disabled: getDisabled(data),\n                level,\n                index\n            });\n            index++;\n        }\n    }\n    return nodes;\n}\nfunction createCollection(props, deps = []) {\n    const initialNodes = buildNodes({\n        dataSource: access(props.dataSource),\n        getKey: access(props.getKey),\n        getTextValue: access(props.getTextValue),\n        getDisabled: access(props.getDisabled),\n        getSectionChildren: access(props.getSectionChildren)\n    });\n    const [collection, setCollection] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(props.factory(initialNodes));\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)((0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.on)([\n        ()=>access(props.dataSource),\n        ()=>access(props.getKey),\n        ()=>access(props.getTextValue),\n        ()=>access(props.getDisabled),\n        ()=>access(props.getSectionChildren),\n        ()=>props.factory,\n        ...deps\n    ], ([dataSource, getKey, getTextValue, getDisabled, getSectionChildren, factory])=>{\n        const nodes = buildNodes({\n            dataSource,\n            getKey,\n            getTextValue,\n            getDisabled,\n            getSectionChildren\n        });\n        setCollection(()=>factory(nodes));\n    }, {\n        defer: true\n    }));\n    return collection;\n}\nfunction createControllableSignal(props) {\n    const [_value, _setValue] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(props.defaultValue?.());\n    const isControlled = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>props.value?.() !== void 0);\n    const value = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>isControlled() ? props.value?.() : _value());\n    const setValue = (next)=>{\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.untrack)(()=>{\n            const nextValue = accessWith(next, value());\n            if (!Object.is(nextValue, value())) {\n                if (!isControlled()) {\n                    _setValue(nextValue);\n                }\n                props.onChange?.(nextValue);\n            }\n            return nextValue;\n        });\n    };\n    return [\n        value,\n        setValue\n    ];\n}\nfunction createControllableBooleanSignal(props) {\n    const [_value, setValue] = createControllableSignal(props);\n    const value = ()=>_value() ?? false;\n    return [\n        value,\n        setValue\n    ];\n}\nfunction createControllableArraySignal(props) {\n    const [_value, setValue] = createControllableSignal(props);\n    const value = ()=>_value() ?? [];\n    return [\n        value,\n        setValue\n    ];\n}\nfunction createDisclosureState(props = {}) {\n    const [isOpen, setIsOpen] = createControllableBooleanSignal({\n        value: ()=>access(props.open),\n        defaultValue: ()=>!!access(props.defaultOpen),\n        onChange: (value)=>props.onOpenChange?.(value)\n    });\n    const open = ()=>{\n        setIsOpen(true);\n    };\n    const close = ()=>{\n        setIsOpen(false);\n    };\n    const toggle = ()=>{\n        isOpen() ? close() : open();\n    };\n    return {\n        isOpen,\n        setIsOpen,\n        open,\n        close,\n        toggle\n    };\n}\nfunction createEscapeKeyDown(props) {\n    const handleKeyDown = (event)=>{\n        if (event.key === EventKey.Escape) {\n            props.onEscapeKeyDown?.(event);\n        }\n    };\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.isServer) {\n            return;\n        }\n        if (access(props.isDisabled)) {\n            return;\n        }\n        const document2 = props.ownerDocument?.() ?? getDocument();\n        document2.addEventListener(\"keydown\", handleKeyDown);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            document2.removeEventListener(\"keydown\", handleKeyDown);\n        });\n    });\n}\nvar DATA_TOP_LAYER_ATTR = \"data-kb-top-layer\";\nvar originalBodyPointerEvents;\nvar hasDisabledBodyPointerEvents = false;\nvar layers = [];\nfunction indexOf(node) {\n    return layers.findIndex((layer)=>layer.node === node);\n}\nfunction find(node) {\n    return layers[indexOf(node)];\n}\nfunction isTopMostLayer(node) {\n    return layers[layers.length - 1].node === node;\n}\nfunction getPointerBlockingLayers() {\n    return layers.filter((layer)=>layer.isPointerBlocking);\n}\nfunction getTopMostPointerBlockingLayer() {\n    return [\n        ...getPointerBlockingLayers()\n    ].slice(-1)[0];\n}\nfunction hasPointerBlockingLayer() {\n    return getPointerBlockingLayers().length > 0;\n}\nfunction isBelowPointerBlockingLayer(node) {\n    const highestBlockingIndex = indexOf(getTopMostPointerBlockingLayer()?.node);\n    return indexOf(node) < highestBlockingIndex;\n}\nfunction addLayer(layer) {\n    layers.push(layer);\n}\nfunction removeLayer(node) {\n    const index = indexOf(node);\n    if (index < 0) {\n        return;\n    }\n    layers.splice(index, 1);\n}\nfunction assignPointerEventToLayers() {\n    layers.forEach(({ node })=>{\n        node.style.pointerEvents = isBelowPointerBlockingLayer(node) ? \"none\" : \"auto\";\n    });\n}\nfunction disableBodyPointerEvents(node) {\n    if (hasPointerBlockingLayer() && !hasDisabledBodyPointerEvents) {\n        const ownerDocument = getDocument(node);\n        originalBodyPointerEvents = document.body.style.pointerEvents;\n        ownerDocument.body.style.pointerEvents = \"none\";\n        hasDisabledBodyPointerEvents = true;\n    }\n}\nfunction restoreBodyPointerEvents(node) {\n    if (hasPointerBlockingLayer()) {\n        return;\n    }\n    const ownerDocument = getDocument(node);\n    ownerDocument.body.style.pointerEvents = originalBodyPointerEvents;\n    if (ownerDocument.body.style.length === 0) {\n        ownerDocument.body.removeAttribute(\"style\");\n    }\n    hasDisabledBodyPointerEvents = false;\n}\nvar layerStack = {\n    layers,\n    isTopMostLayer,\n    hasPointerBlockingLayer,\n    isBelowPointerBlockingLayer,\n    addLayer,\n    removeLayer,\n    indexOf,\n    find,\n    assignPointerEventToLayers,\n    disableBodyPointerEvents,\n    restoreBodyPointerEvents\n};\nvar AUTOFOCUS_ON_MOUNT_EVENT = \"focusScope.autoFocusOnMount\";\nvar AUTOFOCUS_ON_UNMOUNT_EVENT = \"focusScope.autoFocusOnUnmount\";\nvar EVENT_OPTIONS = {\n    bubbles: false,\n    cancelable: true\n};\nvar focusScopeStack = {\n    /** A stack of focus scopes, with the active one at the top */ stack: [],\n    active () {\n        return this.stack[0];\n    },\n    add (scope) {\n        if (scope !== this.active()) {\n            this.active()?.pause();\n        }\n        this.stack = removeItemFromArray(this.stack, scope);\n        this.stack.unshift(scope);\n    },\n    remove (scope) {\n        this.stack = removeItemFromArray(this.stack, scope);\n        this.active()?.resume();\n    }\n};\nfunction createFocusScope(props, ref) {\n    const [isPaused, setIsPaused] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(false);\n    const focusScope = {\n        pause () {\n            setIsPaused(true);\n        },\n        resume () {\n            setIsPaused(false);\n        }\n    };\n    let lastFocusedElement = null;\n    const onMountAutoFocus = (e2)=>props.onMountAutoFocus?.(e2);\n    const onUnmountAutoFocus = (e2)=>props.onUnmountAutoFocus?.(e2);\n    const ownerDocument = ()=>getDocument(ref());\n    const createSentinel = ()=>{\n        const element = ownerDocument().createElement(\"span\");\n        element.setAttribute(\"data-focus-trap\", \"\");\n        element.tabIndex = 0;\n        Object.assign(element.style, visuallyHiddenStyles);\n        return element;\n    };\n    const tabbables = ()=>{\n        const container = ref();\n        if (!container) {\n            return [];\n        }\n        return getAllTabbableIn(container, true).filter((el)=>!el.hasAttribute(\"data-focus-trap\"));\n    };\n    const firstTabbable = ()=>{\n        const items = tabbables();\n        return items.length > 0 ? items[0] : null;\n    };\n    const lastTabbable = ()=>{\n        const items = tabbables();\n        return items.length > 0 ? items[items.length - 1] : null;\n    };\n    const shouldPreventUnmountAutoFocus = ()=>{\n        const container = ref();\n        if (!container) {\n            return false;\n        }\n        const activeElement = getActiveElement(container);\n        if (!activeElement) {\n            return false;\n        }\n        if (contains(container, activeElement)) {\n            return false;\n        }\n        return isFocusable(activeElement);\n    };\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.isServer) {\n            return;\n        }\n        const container = ref();\n        if (!container) {\n            return;\n        }\n        focusScopeStack.add(focusScope);\n        const previouslyFocusedElement = getActiveElement(container);\n        const hasFocusedCandidate = contains(container, previouslyFocusedElement);\n        if (!hasFocusedCandidate) {\n            const mountEvent = new CustomEvent(AUTOFOCUS_ON_MOUNT_EVENT, EVENT_OPTIONS);\n            container.addEventListener(AUTOFOCUS_ON_MOUNT_EVENT, onMountAutoFocus);\n            container.dispatchEvent(mountEvent);\n            if (!mountEvent.defaultPrevented) {\n                setTimeout(()=>{\n                    focusWithoutScrolling(firstTabbable());\n                    if (getActiveElement(container) === previouslyFocusedElement) {\n                        focusWithoutScrolling(container);\n                    }\n                }, 0);\n            }\n        }\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            container.removeEventListener(AUTOFOCUS_ON_MOUNT_EVENT, onMountAutoFocus);\n            setTimeout(()=>{\n                const unmountEvent = new CustomEvent(AUTOFOCUS_ON_UNMOUNT_EVENT, EVENT_OPTIONS);\n                if (shouldPreventUnmountAutoFocus()) {\n                    unmountEvent.preventDefault();\n                }\n                container.addEventListener(AUTOFOCUS_ON_UNMOUNT_EVENT, onUnmountAutoFocus);\n                container.dispatchEvent(unmountEvent);\n                if (!unmountEvent.defaultPrevented) {\n                    focusWithoutScrolling(previouslyFocusedElement ?? ownerDocument().body);\n                }\n                container.removeEventListener(AUTOFOCUS_ON_UNMOUNT_EVENT, onUnmountAutoFocus);\n                focusScopeStack.remove(focusScope);\n            }, 0);\n        });\n    });\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.isServer) {\n            return;\n        }\n        const container = ref();\n        if (!container || !access(props.trapFocus) || isPaused()) {\n            return;\n        }\n        const onFocusIn = (event)=>{\n            const target = event.target;\n            if (target?.closest(`[${DATA_TOP_LAYER_ATTR}]`)) {\n                return;\n            }\n            if (contains(container, target)) {\n                lastFocusedElement = target;\n            } else {\n                focusWithoutScrolling(lastFocusedElement);\n            }\n        };\n        const onFocusOut = (event)=>{\n            const relatedTarget = event.relatedTarget;\n            const target = relatedTarget ?? getActiveElement(container);\n            if (target?.closest(`[${DATA_TOP_LAYER_ATTR}]`)) {\n                return;\n            }\n            if (!contains(container, target)) {\n                focusWithoutScrolling(lastFocusedElement);\n            }\n        };\n        ownerDocument().addEventListener(\"focusin\", onFocusIn);\n        ownerDocument().addEventListener(\"focusout\", onFocusOut);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            ownerDocument().removeEventListener(\"focusin\", onFocusIn);\n            ownerDocument().removeEventListener(\"focusout\", onFocusOut);\n        });\n    });\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.isServer) {\n            return;\n        }\n        const container = ref();\n        if (!container || !access(props.trapFocus) || isPaused()) {\n            return;\n        }\n        const startSentinel = createSentinel();\n        container.insertAdjacentElement(\"afterbegin\", startSentinel);\n        const endSentinel = createSentinel();\n        container.insertAdjacentElement(\"beforeend\", endSentinel);\n        function onFocus(event) {\n            const first = firstTabbable();\n            const last = lastTabbable();\n            if (event.relatedTarget === first) {\n                focusWithoutScrolling(last);\n            } else {\n                focusWithoutScrolling(first);\n            }\n        }\n        startSentinel.addEventListener(\"focusin\", onFocus);\n        endSentinel.addEventListener(\"focusin\", onFocus);\n        const observer = new MutationObserver((mutations)=>{\n            for (const mutation of mutations){\n                if (mutation.previousSibling === endSentinel) {\n                    endSentinel.remove();\n                    container.insertAdjacentElement(\"beforeend\", endSentinel);\n                }\n                if (mutation.nextSibling === startSentinel) {\n                    startSentinel.remove();\n                    container.insertAdjacentElement(\"afterbegin\", startSentinel);\n                }\n            }\n        });\n        observer.observe(container, {\n            childList: true,\n            subtree: false\n        });\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            startSentinel.removeEventListener(\"focusin\", onFocus);\n            endSentinel.removeEventListener(\"focusin\", onFocus);\n            startSentinel.remove();\n            endSentinel.remove();\n            observer.disconnect();\n        });\n    });\n}\nfunction createFormResetListener(element, handler) {\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)((0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.on)(element, (element2)=>{\n        if (element2 == null) {\n            return;\n        }\n        const form = getClosestForm(element2);\n        if (form == null) {\n            return;\n        }\n        form.addEventListener(\"reset\", handler, {\n            passive: true\n        });\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            form.removeEventListener(\"reset\", handler);\n        });\n    }));\n}\nfunction getClosestForm(element) {\n    return isFormElement(element) ? element.form : element.closest(\"form\");\n}\nfunction isFormElement(element) {\n    return element.matches(\"textarea, input, select, button\");\n}\nvar DATA_LIVE_ANNOUNCER_ATTR = \"data-live-announcer\";\nfunction createHideOutside(props) {\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (access(props.isDisabled)) {\n            return;\n        }\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(ariaHideOutside(access(props.targets), access(props.root)));\n    });\n}\nvar refCountMap = /* @__PURE__ */ new WeakMap();\nvar observerStack = [];\nfunction ariaHideOutside(targets, root = document.body) {\n    const visibleNodes = new Set(targets);\n    const hiddenNodes = /* @__PURE__ */ new Set();\n    const walk = (root2)=>{\n        for (const element of root2.querySelectorAll(`[${DATA_LIVE_ANNOUNCER_ATTR}], [${DATA_TOP_LAYER_ATTR}]`)){\n            visibleNodes.add(element);\n        }\n        const acceptNode = (node)=>{\n            if (visibleNodes.has(node) || node.parentElement && hiddenNodes.has(node.parentElement) && node.parentElement.getAttribute(\"role\") !== \"row\") {\n                return NodeFilter.FILTER_REJECT;\n            }\n            for (const target of visibleNodes){\n                if (node.contains(target)) {\n                    return NodeFilter.FILTER_SKIP;\n                }\n            }\n            return NodeFilter.FILTER_ACCEPT;\n        };\n        const walker = document.createTreeWalker(root2, NodeFilter.SHOW_ELEMENT, {\n            acceptNode\n        });\n        const acceptRoot = acceptNode(root2);\n        if (acceptRoot === NodeFilter.FILTER_ACCEPT) {\n            hide2(root2);\n        }\n        if (acceptRoot !== NodeFilter.FILTER_REJECT) {\n            let node = walker.nextNode();\n            while(node != null){\n                hide2(node);\n                node = walker.nextNode();\n            }\n        }\n    };\n    const hide2 = (node)=>{\n        const refCount = refCountMap.get(node) ?? 0;\n        if (node.getAttribute(\"aria-hidden\") === \"true\" && refCount === 0) {\n            return;\n        }\n        if (refCount === 0) {\n            node.setAttribute(\"aria-hidden\", \"true\");\n        }\n        hiddenNodes.add(node);\n        refCountMap.set(node, refCount + 1);\n    };\n    if (observerStack.length) {\n        observerStack[observerStack.length - 1].disconnect();\n    }\n    walk(root);\n    const observer = new MutationObserver((changes)=>{\n        for (const change of changes){\n            if (change.type !== \"childList\" || change.addedNodes.length === 0) {\n                continue;\n            }\n            if (![\n                ...visibleNodes,\n                ...hiddenNodes\n            ].some((node)=>node.contains(change.target))) {\n                for (const node of change.removedNodes){\n                    if (node instanceof Element) {\n                        visibleNodes.delete(node);\n                        hiddenNodes.delete(node);\n                    }\n                }\n                for (const node of change.addedNodes){\n                    if ((node instanceof HTMLElement || node instanceof SVGElement) && (node.dataset.liveAnnouncer === \"true\" || node.dataset.reactAriaTopLayer === \"true\")) {\n                        visibleNodes.add(node);\n                    } else if (node instanceof Element) {\n                        walk(node);\n                    }\n                }\n            }\n        }\n    });\n    observer.observe(root, {\n        childList: true,\n        subtree: true\n    });\n    const observerWrapper = {\n        observe () {\n            observer.observe(root, {\n                childList: true,\n                subtree: true\n            });\n        },\n        disconnect () {\n            observer.disconnect();\n        }\n    };\n    observerStack.push(observerWrapper);\n    return ()=>{\n        observer.disconnect();\n        for (const node of hiddenNodes){\n            const count = refCountMap.get(node);\n            if (count == null) {\n                return;\n            }\n            if (count === 1) {\n                node.removeAttribute(\"aria-hidden\");\n                refCountMap.delete(node);\n            } else {\n                refCountMap.set(node, count - 1);\n            }\n        }\n        if (observerWrapper === observerStack[observerStack.length - 1]) {\n            observerStack.pop();\n            if (observerStack.length) {\n                observerStack[observerStack.length - 1].observe();\n            }\n        } else {\n            observerStack.splice(observerStack.indexOf(observerWrapper), 1);\n        }\n    };\n}\nvar POINTER_DOWN_OUTSIDE_EVENT = \"interactOutside.pointerDownOutside\";\nvar FOCUS_OUTSIDE_EVENT = \"interactOutside.focusOutside\";\nfunction createInteractOutside(props, ref) {\n    let pointerDownTimeoutId;\n    let clickHandler = noop3;\n    const ownerDocument = ()=>getDocument(ref());\n    const onPointerDownOutside = (e2)=>props.onPointerDownOutside?.(e2);\n    const onFocusOutside = (e2)=>props.onFocusOutside?.(e2);\n    const onInteractOutside = (e2)=>props.onInteractOutside?.(e2);\n    const isEventOutside = (e2)=>{\n        const target = e2.target;\n        if (!(target instanceof HTMLElement)) {\n            return false;\n        }\n        if (target.closest(`[${DATA_TOP_LAYER_ATTR}]`)) {\n            return false;\n        }\n        if (!contains(ownerDocument(), target)) {\n            return false;\n        }\n        if (contains(ref(), target)) {\n            return false;\n        }\n        return !props.shouldExcludeElement?.(target);\n    };\n    const onPointerDown = (e2)=>{\n        function handler() {\n            const container = ref();\n            const target = e2.target;\n            if (!container || !target || !isEventOutside(e2)) {\n                return;\n            }\n            const handler2 = composeEventHandlers([\n                onPointerDownOutside,\n                onInteractOutside\n            ]);\n            target.addEventListener(POINTER_DOWN_OUTSIDE_EVENT, handler2, {\n                once: true\n            });\n            const pointerDownOutsideEvent = new CustomEvent(POINTER_DOWN_OUTSIDE_EVENT, {\n                bubbles: false,\n                cancelable: true,\n                detail: {\n                    originalEvent: e2,\n                    isContextMenu: e2.button === 2 || isCtrlKey(e2) && e2.button === 0\n                }\n            });\n            target.dispatchEvent(pointerDownOutsideEvent);\n        }\n        if (e2.pointerType === \"touch\") {\n            ownerDocument().removeEventListener(\"click\", handler);\n            clickHandler = handler;\n            ownerDocument().addEventListener(\"click\", handler, {\n                once: true\n            });\n        } else {\n            handler();\n        }\n    };\n    const onFocusIn = (e2)=>{\n        const container = ref();\n        const target = e2.target;\n        if (!container || !target || !isEventOutside(e2)) {\n            return;\n        }\n        const handler = composeEventHandlers([\n            onFocusOutside,\n            onInteractOutside\n        ]);\n        target.addEventListener(FOCUS_OUTSIDE_EVENT, handler, {\n            once: true\n        });\n        const focusOutsideEvent = new CustomEvent(FOCUS_OUTSIDE_EVENT, {\n            bubbles: false,\n            cancelable: true,\n            detail: {\n                originalEvent: e2,\n                isContextMenu: false\n            }\n        });\n        target.dispatchEvent(focusOutsideEvent);\n    };\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.isServer) {\n            return;\n        }\n        if (access(props.isDisabled)) {\n            return;\n        }\n        pointerDownTimeoutId = window.setTimeout(()=>{\n            ownerDocument().addEventListener(\"pointerdown\", onPointerDown, true);\n        }, 0);\n        ownerDocument().addEventListener(\"focusin\", onFocusIn, true);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            window.clearTimeout(pointerDownTimeoutId);\n            ownerDocument().removeEventListener(\"click\", clickHandler);\n            ownerDocument().removeEventListener(\"pointerdown\", onPointerDown, true);\n            ownerDocument().removeEventListener(\"focusin\", onFocusIn, true);\n        });\n    });\n}\nfunction createPresence(present) {\n    const [node, setNode] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    let styles = {};\n    let prevPresent = present();\n    let prevAnimationName = \"none\";\n    const [state2, send] = createStateMachine(present() ? \"mounted\" : \"unmounted\", {\n        mounted: {\n            UNMOUNT: \"unmounted\",\n            ANIMATION_OUT: \"unmountSuspended\"\n        },\n        unmountSuspended: {\n            MOUNT: \"mounted\",\n            ANIMATION_END: \"unmounted\"\n        },\n        unmounted: {\n            MOUNT: \"mounted\"\n        }\n    });\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)((0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.on)(state2, (state3)=>{\n        const currentAnimationName = getAnimationName(styles);\n        prevAnimationName = state3 === \"mounted\" ? currentAnimationName : \"none\";\n    }));\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)((0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.on)(present, (present2)=>{\n        if (prevPresent === present2) {\n            return;\n        }\n        const currentAnimationName = getAnimationName(styles);\n        if (present2) {\n            send(\"MOUNT\");\n        } else if (styles?.display === \"none\") {\n            send(\"UNMOUNT\");\n        } else {\n            const isAnimating = prevAnimationName !== currentAnimationName;\n            if (prevPresent && isAnimating) {\n                send(\"ANIMATION_OUT\");\n            } else {\n                send(\"UNMOUNT\");\n            }\n        }\n        prevPresent = present2;\n    }));\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)((0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.on)(node, (node2)=>{\n        if (node2) {\n            const handleAnimationEnd = (event)=>{\n                const currentAnimationName = getAnimationName(styles);\n                const isCurrentAnimation = currentAnimationName.includes(event.animationName);\n                if (event.target === node2 && isCurrentAnimation) {\n                    send(\"ANIMATION_END\");\n                }\n            };\n            const handleAnimationStart = (event)=>{\n                if (event.target === node2) {\n                    prevAnimationName = getAnimationName(styles);\n                }\n            };\n            node2.addEventListener(\"animationstart\", handleAnimationStart);\n            node2.addEventListener(\"animationcancel\", handleAnimationEnd);\n            node2.addEventListener(\"animationend\", handleAnimationEnd);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n                node2.removeEventListener(\"animationstart\", handleAnimationStart);\n                node2.removeEventListener(\"animationcancel\", handleAnimationEnd);\n                node2.removeEventListener(\"animationend\", handleAnimationEnd);\n            });\n        } else {\n            send(\"ANIMATION_END\");\n        }\n    }));\n    return {\n        isPresent: ()=>[\n                \"mounted\",\n                \"unmountSuspended\"\n            ].includes(state2()),\n        setRef: (el)=>{\n            if (el) {\n                styles = getComputedStyle(el);\n            }\n            setNode(el);\n        }\n    };\n}\nfunction getAnimationName(styles) {\n    return styles?.animationName || \"none\";\n}\nfunction createStateMachine(initialState, machine) {\n    const reduce2 = (state3, event)=>{\n        const nextState = machine[state3][event];\n        return nextState ?? state3;\n    };\n    const [state2, setState2] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(initialState);\n    const send = (event)=>{\n        setState2((prev)=>reduce2(prev, event));\n    };\n    return [\n        state2,\n        send\n    ];\n}\nvar SCROLL_LOCK_IDENTIFIER = \"data-kb-scroll-lock\";\nfunction assignStyle(element, style2) {\n    if (!element) {\n        return ()=>{};\n    }\n    const previousStyle = element.style.cssText;\n    Object.assign(element.style, style2);\n    return ()=>{\n        element.style.cssText = previousStyle;\n    };\n}\nfunction setCSSProperty(element, property, value) {\n    if (!element) {\n        return ()=>{};\n    }\n    const previousValue = element.style.getPropertyValue(property);\n    element.style.setProperty(property, value);\n    return ()=>{\n        if (previousValue) {\n            element.style.setProperty(property, previousValue);\n        } else {\n            element.style.removeProperty(property);\n        }\n    };\n}\nfunction getPaddingProperty(documentElement) {\n    const documentLeft = documentElement.getBoundingClientRect().left;\n    const scrollbarX = Math.round(documentLeft) + documentElement.scrollLeft;\n    return scrollbarX ? \"paddingLeft\" : \"paddingRight\";\n}\nfunction createPreventScroll(props) {\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.isServer) {\n            return;\n        }\n        if (!access(props.ownerRef) || access(props.isDisabled)) {\n            return;\n        }\n        const doc = getDocument(access(props.ownerRef));\n        const win = getWindow(access(props.ownerRef));\n        const { documentElement, body } = doc;\n        const alreadyLocked = body.hasAttribute(SCROLL_LOCK_IDENTIFIER);\n        if (alreadyLocked) {\n            return;\n        }\n        body.setAttribute(SCROLL_LOCK_IDENTIFIER, \"\");\n        const scrollbarWidth = win.innerWidth - documentElement.clientWidth;\n        const setScrollbarWidthProperty = ()=>{\n            return setCSSProperty(documentElement, \"--scrollbar-width\", `${scrollbarWidth}px`);\n        };\n        const paddingProperty = getPaddingProperty(documentElement);\n        const setStyle = ()=>{\n            return assignStyle(body, {\n                overflow: \"hidden\",\n                [paddingProperty]: `${scrollbarWidth}px`\n            });\n        };\n        const setIOSStyle = ()=>{\n            const { scrollX, scrollY, visualViewport } = win;\n            const offsetLeft = visualViewport?.offsetLeft ?? 0;\n            const offsetTop = visualViewport?.offsetTop ?? 0;\n            const restoreStyle = assignStyle(body, {\n                position: \"fixed\",\n                overflow: \"hidden\",\n                top: `${-(scrollY - Math.floor(offsetTop))}px`,\n                left: `${-(scrollX - Math.floor(offsetLeft))}px`,\n                right: \"0\",\n                [paddingProperty]: `${scrollbarWidth}px`\n            });\n            return ()=>{\n                restoreStyle();\n                win.scrollTo(scrollX, scrollY);\n            };\n        };\n        const cleanup = chain([\n            setScrollbarWidthProperty(),\n            isIOS() ? setIOSStyle() : setStyle()\n        ]);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            cleanup();\n            body.removeAttribute(SCROLL_LOCK_IDENTIFIER);\n        });\n    });\n}\nfunction createRegisterId(setter) {\n    return (id)=>{\n        setter(id);\n        return ()=>setter(void 0);\n    };\n}\nfunction createTagName(ref, fallback) {\n    const [tagName, setTagName] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(stringOrUndefined(fallback?.()));\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        setTagName(ref()?.tagName.toLowerCase() || stringOrUndefined(fallback?.()));\n    });\n    return tagName;\n}\nfunction stringOrUndefined(value) {\n    return isString(value) ? value : void 0;\n}\nfunction createToggleState(props = {}) {\n    const [isSelected, _setIsSelected] = createControllableBooleanSignal({\n        value: ()=>access(props.isSelected),\n        defaultValue: ()=>!!access(props.defaultIsSelected),\n        onChange: (value)=>props.onSelectedChange?.(value)\n    });\n    const setIsSelected = (value)=>{\n        if (!access(props.isReadOnly) && !access(props.isDisabled)) {\n            _setIsSelected(value);\n        }\n    };\n    const toggle = ()=>{\n        if (!access(props.isReadOnly) && !access(props.isDisabled)) {\n            _setIsSelected(!isSelected());\n        }\n    };\n    return {\n        isSelected,\n        setIsSelected,\n        toggle\n    };\n}\nvar FORM_CONTROL_PROP_NAMES = [\n    \"id\",\n    \"name\",\n    \"validationState\",\n    \"required\",\n    \"disabled\",\n    \"readOnly\"\n];\nfunction createFormControl(props) {\n    const defaultId = `form-control-${(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueId)()}`;\n    props = mergeDefaultProps({\n        id: defaultId\n    }, props);\n    const [labelId, setLabelId] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [fieldId, setFieldId] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [descriptionId, setDescriptionId] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [errorMessageId, setErrorMessageId] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const getAriaLabelledBy = (fieldId2, fieldAriaLabel, fieldAriaLabelledBy)=>{\n        const hasAriaLabelledBy = fieldAriaLabelledBy != null || labelId() != null;\n        return [\n            fieldAriaLabelledBy,\n            labelId(),\n            // If there is both an aria-label and aria-labelledby, add the field itself has an aria-labelledby\n            hasAriaLabelledBy && fieldAriaLabel != null ? fieldId2 : void 0\n        ].filter(Boolean).join(\" \") || void 0;\n    };\n    const getAriaDescribedBy = (fieldAriaDescribedBy)=>{\n        return [\n            descriptionId(),\n            // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA.\n            // See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268\n            errorMessageId(),\n            fieldAriaDescribedBy\n        ].filter(Boolean).join(\" \") || void 0;\n    };\n    const dataset = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>({\n            \"data-valid\": access(props.validationState) === \"valid\" ? \"\" : void 0,\n            \"data-invalid\": access(props.validationState) === \"invalid\" ? \"\" : void 0,\n            \"data-required\": access(props.required) ? \"\" : void 0,\n            \"data-disabled\": access(props.disabled) ? \"\" : void 0,\n            \"data-readonly\": access(props.readOnly) ? \"\" : void 0\n        }));\n    const formControlContext = {\n        name: ()=>access(props.name) ?? access(props.id),\n        dataset,\n        validationState: ()=>access(props.validationState),\n        isRequired: ()=>access(props.required),\n        isDisabled: ()=>access(props.disabled),\n        isReadOnly: ()=>access(props.readOnly),\n        labelId,\n        fieldId,\n        descriptionId,\n        errorMessageId,\n        getAriaLabelledBy,\n        getAriaDescribedBy,\n        generateId: createGenerateId(()=>access(props.id)),\n        registerLabel: createRegisterId(setLabelId),\n        registerField: createRegisterId(setFieldId),\n        registerDescription: createRegisterId(setDescriptionId),\n        registerErrorMessage: createRegisterId(setErrorMessageId)\n    };\n    return {\n        formControlContext\n    };\n}\nvar FormControlContext = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useFormControlContext() {\n    const context = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(FormControlContext);\n    if (context === void 0) {\n        throw new Error(\"[kobalte]: `useFormControlContext` must be used within a `FormControlContext.Provider` component\");\n    }\n    return context;\n}\nfunction Polymorphic(props) {\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"asChild\",\n        \"as\",\n        \"children\"\n    ]);\n    if (!local.asChild) {\n        return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Dynamic, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n            get component () {\n                return local.as;\n            }\n        }, others, {\n            get children () {\n                return local.children;\n            }\n        }));\n    }\n    const resolvedChildren = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.children)(()=>local.children);\n    if (isAs(resolvedChildren())) {\n        const combinedProps = combineProps2(others, resolvedChildren()?.props ?? {});\n        return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Dynamic, combinedProps);\n    }\n    if (isArray(resolvedChildren())) {\n        const newElement = resolvedChildren().find(isAs);\n        if (newElement) {\n            const newChildren = ()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.For, {\n                    get each () {\n                        return resolvedChildren();\n                    },\n                    children: (child)=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                            when: child === newElement,\n                            fallback: child,\n                            get children () {\n                                return newElement.props.children;\n                            }\n                        })\n                });\n            const combinedProps = combineProps2(others, newElement?.props ?? {});\n            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Dynamic, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)(combinedProps, {\n                children: newChildren\n            }));\n        }\n    }\n    throw new Error(\"[kobalte]: Component is expected to render `asChild` but no children `As` component was found.\");\n}\nvar AS_COMPONENT_SYMBOL = Symbol(\"$$KobalteAsComponent\");\nfunction isAs(component) {\n    return component?.[AS_COMPONENT_SYMBOL] === true;\n}\nfunction combineProps2(baseProps, overrideProps) {\n    return combineProps([\n        baseProps,\n        overrideProps\n    ], {\n        reverseEventHandlers: true\n    });\n}\nfunction FormControlDescription(props) {\n    const context = useFormControlContext();\n    props = mergeDefaultProps({\n        id: context.generateId(\"description\")\n    }, props);\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(context.registerDescription(props.id)));\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"div\"\n    }, ()=>context.dataset(), props));\n}\nfunction FormControlErrorMessage(props) {\n    const context = useFormControlContext();\n    props = mergeDefaultProps({\n        id: context.generateId(\"error-message\")\n    }, props);\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"forceMount\"\n    ]);\n    const isInvalid = ()=>context.validationState() === \"invalid\";\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (!isInvalid()) {\n            return;\n        }\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(context.registerErrorMessage(others.id));\n    });\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n        get when () {\n            return local.forceMount || isInvalid();\n        },\n        get children () {\n            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                as: \"div\"\n            }, ()=>context.dataset(), others));\n        }\n    });\n}\nfunction FormControlLabel(props) {\n    let ref;\n    const context = useFormControlContext();\n    props = mergeDefaultProps({\n        id: context.generateId(\"label\")\n    }, props);\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"ref\"\n    ]);\n    const tagName = createTagName(()=>ref, ()=>\"label\");\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(context.registerLabel(others.id)));\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"label\",\n        ref (r$) {\n            const _ref$ = mergeRefs((el)=>ref = el, local.ref);\n            typeof _ref$ === \"function\" && _ref$(r$);\n        },\n        get [\"for\"] () {\n            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>tagName() === \"label\")() ? context.fieldId() : void 0;\n        }\n    }, ()=>context.dataset(), others));\n}\nvar RTL_SCRIPTS = /* @__PURE__ */ new Set([\n    \"Avst\",\n    \"Arab\",\n    \"Armi\",\n    \"Syrc\",\n    \"Samr\",\n    \"Mand\",\n    \"Thaa\",\n    \"Mend\",\n    \"Nkoo\",\n    \"Adlm\",\n    \"Rohg\",\n    \"Hebr\"\n]);\nvar RTL_LANGS = /* @__PURE__ */ new Set([\n    \"ae\",\n    \"ar\",\n    \"arc\",\n    \"bcc\",\n    \"bqi\",\n    \"ckb\",\n    \"dv\",\n    \"fa\",\n    \"glk\",\n    \"he\",\n    \"ku\",\n    \"mzn\",\n    \"nqo\",\n    \"pnb\",\n    \"ps\",\n    \"sd\",\n    \"ug\",\n    \"ur\",\n    \"yi\"\n]);\nfunction isRTL2(locale) {\n    if (Intl.Locale) {\n        const script = new Intl.Locale(locale).maximize().script ?? \"\";\n        return RTL_SCRIPTS.has(script);\n    }\n    const lang = locale.split(\"-\")[0];\n    return RTL_LANGS.has(lang);\n}\nfunction getReadingDirection(locale) {\n    return isRTL2(locale) ? \"rtl\" : \"ltr\";\n}\nfunction getDefaultLocale() {\n    let locale = // @ts-ignore\n    typeof navigator !== \"undefined\" && (navigator.language || navigator.userLanguage) || \"en-US\";\n    try {\n        Intl.DateTimeFormat.supportedLocalesOf([\n            locale\n        ]);\n    } catch (_err) {\n        locale = \"en-US\";\n    }\n    return {\n        locale,\n        direction: getReadingDirection(locale)\n    };\n}\nvar currentLocale = getDefaultLocale();\nvar listeners = /* @__PURE__ */ new Set();\nfunction updateLocale() {\n    currentLocale = getDefaultLocale();\n    for (const listener of listeners){\n        listener(currentLocale);\n    }\n}\nfunction createDefaultLocale() {\n    const defaultSSRLocale = {\n        locale: \"en-US\",\n        direction: \"ltr\"\n    };\n    const [defaultClientLocale, setDefaultClientLocale] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(currentLocale);\n    const defaultLocale = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.isServer ? defaultSSRLocale : defaultClientLocale());\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onMount)(()=>{\n        if (listeners.size === 0) {\n            window.addEventListener(\"languagechange\", updateLocale);\n        }\n        listeners.add(setDefaultClientLocale);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            listeners.delete(setDefaultClientLocale);\n            if (listeners.size === 0) {\n                window.removeEventListener(\"languagechange\", updateLocale);\n            }\n        });\n    });\n    return {\n        locale: ()=>defaultLocale().locale,\n        direction: ()=>defaultLocale().direction\n    };\n}\nvar I18nContext = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useLocale() {\n    const defaultLocale = createDefaultLocale();\n    const context = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(I18nContext);\n    return context || defaultLocale;\n}\nvar cache$1 = /* @__PURE__ */ new Map();\nfunction createCollator(options) {\n    const { locale } = useLocale();\n    const cacheKey = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return locale() + (options ? Object.entries(options).sort((a2, b2)=>a2[0] < b2[0] ? -1 : 1).join() : \"\");\n    });\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const key = cacheKey();\n        let collator;\n        if (cache$1.has(key)) {\n            collator = cache$1.get(key);\n        }\n        if (!collator) {\n            collator = new Intl.Collator(locale(), options);\n            cache$1.set(key, collator);\n        }\n        return collator;\n    });\n}\nvar Selection = class _Selection extends Set {\n    constructor(keys2, anchorKey, currentKey){\n        super(keys2);\n        if (keys2 instanceof _Selection) {\n            this.anchorKey = anchorKey || keys2.anchorKey;\n            this.currentKey = currentKey || keys2.currentKey;\n        } else {\n            this.anchorKey = anchorKey;\n            this.currentKey = currentKey;\n        }\n    }\n};\nfunction createControllableSelectionSignal(props) {\n    const [_value, setValue] = createControllableSignal(props);\n    const value = ()=>_value() ?? new Selection();\n    return [\n        value,\n        setValue\n    ];\n}\nfunction isNonContiguousSelectionModifier(e2) {\n    return isAppleDevice() ? e2.altKey : e2.ctrlKey;\n}\nfunction isCtrlKeyPressed(e2) {\n    if (isMac()) {\n        return e2.metaKey;\n    }\n    return e2.ctrlKey;\n}\nfunction convertSelection(selection) {\n    return new Selection(selection);\n}\nfunction isSameSelection(setA, setB) {\n    if (setA.size !== setB.size) {\n        return false;\n    }\n    for (const item of setA){\n        if (!setB.has(item)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction createMultipleSelectionState(props) {\n    props = mergeDefaultProps({\n        selectionMode: \"none\",\n        selectionBehavior: \"toggle\"\n    }, props);\n    const [isFocused, setFocused] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(false);\n    const [focusedKey, setFocusedKey] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const selectedKeysProp = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const selection = access(props.selectedKeys);\n        if (selection != null) {\n            return convertSelection(selection);\n        }\n        return selection;\n    });\n    const defaultSelectedKeys = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const defaultSelection = access(props.defaultSelectedKeys);\n        if (defaultSelection != null) {\n            return convertSelection(defaultSelection);\n        }\n        return new Selection();\n    });\n    const [selectedKeys, _setSelectedKeys] = createControllableSelectionSignal({\n        value: selectedKeysProp,\n        defaultValue: defaultSelectedKeys,\n        onChange: (value)=>props.onSelectionChange?.(value)\n    });\n    const [selectionBehavior, setSelectionBehavior] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(access(props.selectionBehavior));\n    const selectionMode = ()=>access(props.selectionMode);\n    const disallowEmptySelection = ()=>access(props.disallowEmptySelection) ?? false;\n    const setSelectedKeys = (keys2)=>{\n        if (access(props.allowDuplicateSelectionEvents) || !isSameSelection(keys2, selectedKeys())) {\n            _setSelectedKeys(keys2);\n        }\n    };\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        const selection = selectedKeys();\n        if (access(props.selectionBehavior) === \"replace\" && selectionBehavior() === \"toggle\" && typeof selection === \"object\" && selection.size === 0) {\n            setSelectionBehavior(\"replace\");\n        }\n    });\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        setSelectionBehavior(access(props.selectionBehavior) ?? \"toggle\");\n    });\n    return {\n        selectionMode,\n        disallowEmptySelection,\n        selectionBehavior,\n        setSelectionBehavior,\n        isFocused,\n        setFocused,\n        focusedKey,\n        setFocusedKey,\n        selectedKeys,\n        setSelectedKeys\n    };\n}\nfunction createTypeSelect(props) {\n    const [search, setSearch] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(\"\");\n    const [timeoutId, setTimeoutId] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(-1);\n    const onKeyDown = (e2)=>{\n        if (access(props.isDisabled)) {\n            return;\n        }\n        const delegate = access(props.keyboardDelegate);\n        const manager = access(props.selectionManager);\n        if (!delegate.getKeyForSearch) {\n            return;\n        }\n        const character = getStringForKey(e2.key);\n        if (!character || e2.ctrlKey || e2.metaKey) {\n            return;\n        }\n        if (character === \" \" && search().trim().length > 0) {\n            e2.preventDefault();\n            e2.stopPropagation();\n        }\n        let newSearch = setSearch((prev)=>prev += character);\n        let key = delegate.getKeyForSearch(newSearch, manager.focusedKey()) ?? delegate.getKeyForSearch(newSearch);\n        if (key == null && isAllSameLetter(newSearch)) {\n            newSearch = newSearch[0];\n            key = delegate.getKeyForSearch(newSearch, manager.focusedKey()) ?? delegate.getKeyForSearch(newSearch);\n        }\n        if (key != null) {\n            manager.setFocusedKey(key);\n            props.onTypeSelect?.(key);\n        }\n        clearTimeout(timeoutId());\n        setTimeoutId(window.setTimeout(()=>setSearch(\"\"), 500));\n    };\n    return {\n        typeSelectHandlers: {\n            onKeyDown\n        }\n    };\n}\nfunction getStringForKey(key) {\n    if (key.length === 1 || !/^[A-Z]/i.test(key)) {\n        return key;\n    }\n    return \"\";\n}\nfunction isAllSameLetter(search) {\n    return search.split(\"\").every((letter)=>letter === search[0]);\n}\nfunction createSelectableCollection(props, ref, scrollRef) {\n    const defaultProps = {\n        selectOnFocus: ()=>access(props.selectionManager).selectionBehavior() === \"replace\"\n    };\n    props = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)(defaultProps, props);\n    const finalScrollRef = ()=>scrollRef?.() ?? ref();\n    const { direction } = useLocale();\n    let scrollPos = {\n        top: 0,\n        left: 0\n    };\n    createEventListener(()=>!access(props.isVirtualized) ? finalScrollRef() : void 0, \"scroll\", ()=>{\n        const scrollEl = finalScrollRef();\n        if (!scrollEl) {\n            return;\n        }\n        scrollPos = {\n            top: scrollEl.scrollTop,\n            left: scrollEl.scrollLeft\n        };\n    });\n    const { typeSelectHandlers } = createTypeSelect({\n        isDisabled: ()=>access(props.disallowTypeAhead),\n        keyboardDelegate: ()=>access(props.keyboardDelegate),\n        selectionManager: ()=>access(props.selectionManager)\n    });\n    const onKeyDown = (e2)=>{\n        callHandler(e2, typeSelectHandlers.onKeyDown);\n        if (e2.altKey && e2.key === \"Tab\") {\n            e2.preventDefault();\n        }\n        const refEl = ref();\n        if (!refEl?.contains(e2.target)) {\n            return;\n        }\n        const manager = access(props.selectionManager);\n        const selectOnFocus = access(props.selectOnFocus);\n        const navigateToKey = (key)=>{\n            if (key != null) {\n                manager.setFocusedKey(key);\n                if (e2.shiftKey && manager.selectionMode() === \"multiple\") {\n                    manager.extendSelection(key);\n                } else if (selectOnFocus && !isNonContiguousSelectionModifier(e2)) {\n                    manager.replaceSelection(key);\n                }\n            }\n        };\n        const delegate = access(props.keyboardDelegate);\n        const shouldFocusWrap = access(props.shouldFocusWrap);\n        const focusedKey = manager.focusedKey();\n        switch(e2.key){\n            case \"ArrowDown\":\n                {\n                    if (delegate.getKeyBelow) {\n                        e2.preventDefault();\n                        let nextKey;\n                        if (focusedKey != null) {\n                            nextKey = delegate.getKeyBelow(focusedKey);\n                        } else {\n                            nextKey = delegate.getFirstKey?.();\n                        }\n                        if (nextKey == null && shouldFocusWrap) {\n                            nextKey = delegate.getFirstKey?.(focusedKey);\n                        }\n                        navigateToKey(nextKey);\n                    }\n                    break;\n                }\n            case \"ArrowUp\":\n                {\n                    if (delegate.getKeyAbove) {\n                        e2.preventDefault();\n                        let nextKey;\n                        if (focusedKey != null) {\n                            nextKey = delegate.getKeyAbove(focusedKey);\n                        } else {\n                            nextKey = delegate.getLastKey?.();\n                        }\n                        if (nextKey == null && shouldFocusWrap) {\n                            nextKey = delegate.getLastKey?.(focusedKey);\n                        }\n                        navigateToKey(nextKey);\n                    }\n                    break;\n                }\n            case \"ArrowLeft\":\n                {\n                    if (delegate.getKeyLeftOf) {\n                        e2.preventDefault();\n                        const isRTL3 = direction() === \"rtl\";\n                        let nextKey;\n                        if (focusedKey != null) {\n                            nextKey = delegate.getKeyLeftOf(focusedKey);\n                        } else {\n                            nextKey = isRTL3 ? delegate.getFirstKey?.() : delegate.getLastKey?.();\n                        }\n                        navigateToKey(nextKey);\n                    }\n                    break;\n                }\n            case \"ArrowRight\":\n                {\n                    if (delegate.getKeyRightOf) {\n                        e2.preventDefault();\n                        const isRTL3 = direction() === \"rtl\";\n                        let nextKey;\n                        if (focusedKey != null) {\n                            nextKey = delegate.getKeyRightOf(focusedKey);\n                        } else {\n                            nextKey = isRTL3 ? delegate.getLastKey?.() : delegate.getFirstKey?.();\n                        }\n                        navigateToKey(nextKey);\n                    }\n                    break;\n                }\n            case \"Home\":\n                if (delegate.getFirstKey) {\n                    e2.preventDefault();\n                    const firstKey = delegate.getFirstKey(focusedKey, isCtrlKeyPressed(e2));\n                    if (firstKey != null) {\n                        manager.setFocusedKey(firstKey);\n                        if (isCtrlKeyPressed(e2) && e2.shiftKey && manager.selectionMode() === \"multiple\") {\n                            manager.extendSelection(firstKey);\n                        } else if (selectOnFocus) {\n                            manager.replaceSelection(firstKey);\n                        }\n                    }\n                }\n                break;\n            case \"End\":\n                if (delegate.getLastKey) {\n                    e2.preventDefault();\n                    const lastKey = delegate.getLastKey(focusedKey, isCtrlKeyPressed(e2));\n                    if (lastKey != null) {\n                        manager.setFocusedKey(lastKey);\n                        if (isCtrlKeyPressed(e2) && e2.shiftKey && manager.selectionMode() === \"multiple\") {\n                            manager.extendSelection(lastKey);\n                        } else if (selectOnFocus) {\n                            manager.replaceSelection(lastKey);\n                        }\n                    }\n                }\n                break;\n            case \"PageDown\":\n                if (delegate.getKeyPageBelow && focusedKey != null) {\n                    e2.preventDefault();\n                    const nextKey = delegate.getKeyPageBelow(focusedKey);\n                    navigateToKey(nextKey);\n                }\n                break;\n            case \"PageUp\":\n                if (delegate.getKeyPageAbove && focusedKey != null) {\n                    e2.preventDefault();\n                    const nextKey = delegate.getKeyPageAbove(focusedKey);\n                    navigateToKey(nextKey);\n                }\n                break;\n            case \"a\":\n                if (isCtrlKeyPressed(e2) && manager.selectionMode() === \"multiple\" && access(props.disallowSelectAll) !== true) {\n                    e2.preventDefault();\n                    manager.selectAll();\n                }\n                break;\n            case \"Escape\":\n                if (!e2.defaultPrevented) {\n                    e2.preventDefault();\n                    if (!access(props.disallowEmptySelection)) {\n                        manager.clearSelection();\n                    }\n                }\n                break;\n            case \"Tab\":\n                {\n                    if (!access(props.allowsTabNavigation)) {\n                        if (e2.shiftKey) {\n                            refEl.focus();\n                        } else {\n                            const walker = getFocusableTreeWalker(refEl, {\n                                tabbable: true\n                            });\n                            let next;\n                            let last;\n                            do {\n                                last = walker.lastChild();\n                                if (last) {\n                                    next = last;\n                                }\n                            }while (last);\n                            if (next && !next.contains(document.activeElement)) {\n                                focusWithoutScrolling(next);\n                            }\n                        }\n                        break;\n                    }\n                }\n        }\n    };\n    const onFocusIn = (e2)=>{\n        const manager = access(props.selectionManager);\n        const delegate = access(props.keyboardDelegate);\n        const selectOnFocus = access(props.selectOnFocus);\n        if (manager.isFocused()) {\n            if (!e2.currentTarget.contains(e2.target)) {\n                manager.setFocused(false);\n            }\n            return;\n        }\n        if (!e2.currentTarget.contains(e2.target)) {\n            return;\n        }\n        manager.setFocused(true);\n        if (manager.focusedKey() == null) {\n            const navigateToFirstKey = (key)=>{\n                if (key == null) {\n                    return;\n                }\n                manager.setFocusedKey(key);\n                if (selectOnFocus) {\n                    manager.replaceSelection(key);\n                }\n            };\n            const relatedTarget = e2.relatedTarget;\n            if (relatedTarget && e2.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING) {\n                navigateToFirstKey(manager.lastSelectedKey() ?? delegate.getLastKey?.());\n            } else {\n                navigateToFirstKey(manager.firstSelectedKey() ?? delegate.getFirstKey?.());\n            }\n        } else if (!access(props.isVirtualized)) {\n            const scrollEl = finalScrollRef();\n            if (scrollEl) {\n                scrollEl.scrollTop = scrollPos.top;\n                scrollEl.scrollLeft = scrollPos.left;\n                const element = scrollEl.querySelector(`[data-key=\"${manager.focusedKey()}\"]`);\n                if (element) {\n                    focusWithoutScrolling(element);\n                    scrollIntoView(scrollEl, element);\n                }\n            }\n        }\n    };\n    const onFocusOut = (e2)=>{\n        const manager = access(props.selectionManager);\n        if (!e2.currentTarget.contains(e2.relatedTarget)) {\n            manager.setFocused(false);\n        }\n    };\n    const onMouseDown = (e2)=>{\n        if (finalScrollRef() === e2.target) {\n            e2.preventDefault();\n        }\n    };\n    const tryAutoFocus = ()=>{\n        const autoFocus = access(props.autoFocus);\n        if (!autoFocus) {\n            return;\n        }\n        const manager = access(props.selectionManager);\n        const delegate = access(props.keyboardDelegate);\n        let focusedKey;\n        if (autoFocus === \"first\") {\n            focusedKey = delegate.getFirstKey?.();\n        }\n        if (autoFocus === \"last\") {\n            focusedKey = delegate.getLastKey?.();\n        }\n        const selectedKeys = manager.selectedKeys();\n        if (selectedKeys.size) {\n            focusedKey = selectedKeys.values().next().value;\n        }\n        manager.setFocused(true);\n        manager.setFocusedKey(focusedKey);\n        const refEl = ref();\n        if (refEl && focusedKey == null && !access(props.shouldUseVirtualFocus)) {\n            focusWithoutScrolling(refEl);\n        }\n    };\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onMount)(()=>{\n        if (props.deferAutoFocus) {\n            setTimeout(tryAutoFocus, 0);\n        } else {\n            tryAutoFocus();\n        }\n    });\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)((0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.on)([\n        finalScrollRef,\n        ()=>access(props.isVirtualized),\n        ()=>access(props.selectionManager).focusedKey()\n    ], (newValue)=>{\n        const [scrollEl, isVirtualized, focusedKey] = newValue;\n        if (isVirtualized) {\n            focusedKey && props.scrollToKey?.(focusedKey);\n        } else {\n            if (focusedKey && scrollEl) {\n                const element = scrollEl.querySelector(`[data-key=\"${focusedKey}\"]`);\n                if (element) {\n                    scrollIntoView(scrollEl, element);\n                }\n            }\n        }\n    }));\n    const tabIndex = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        if (access(props.shouldUseVirtualFocus)) {\n            return void 0;\n        }\n        return access(props.selectionManager).focusedKey() == null ? 0 : -1;\n    });\n    return {\n        tabIndex,\n        onKeyDown,\n        onMouseDown,\n        onFocusIn,\n        onFocusOut\n    };\n}\nfunction createSelectableItem(props, ref) {\n    const manager = ()=>access(props.selectionManager);\n    const key = ()=>access(props.key);\n    const shouldUseVirtualFocus = ()=>access(props.shouldUseVirtualFocus);\n    const onSelect = (e2)=>{\n        if (manager().selectionMode() === \"none\") {\n            return;\n        }\n        if (manager().selectionMode() === \"single\") {\n            if (manager().isSelected(key()) && !manager().disallowEmptySelection()) {\n                manager().toggleSelection(key());\n            } else {\n                manager().replaceSelection(key());\n            }\n        } else if (e2 && e2.shiftKey) {\n            manager().extendSelection(key());\n        } else if (manager().selectionBehavior() === \"toggle\" || isCtrlKeyPressed(e2) || \"pointerType\" in e2 && e2.pointerType === \"touch\") {\n            manager().toggleSelection(key());\n        } else {\n            manager().replaceSelection(key());\n        }\n    };\n    const isSelected = ()=>manager().isSelected(key());\n    const isDisabled = ()=>access(props.disabled) || manager().isDisabled(key());\n    const allowsSelection = ()=>!isDisabled() && manager().canSelectItem(key());\n    let pointerDownType = null;\n    const onPointerDown = (e2)=>{\n        if (!allowsSelection()) {\n            return;\n        }\n        pointerDownType = e2.pointerType;\n        if (e2.pointerType === \"mouse\" && e2.button === 0 && !access(props.shouldSelectOnPressUp)) {\n            onSelect(e2);\n        }\n    };\n    const onPointerUp = (e2)=>{\n        if (!allowsSelection()) {\n            return;\n        }\n        if (e2.pointerType === \"mouse\" && e2.button === 0 && access(props.shouldSelectOnPressUp) && access(props.allowsDifferentPressOrigin)) {\n            onSelect(e2);\n        }\n    };\n    const onClick = (e2)=>{\n        if (!allowsSelection()) {\n            return;\n        }\n        if (access(props.shouldSelectOnPressUp) && !access(props.allowsDifferentPressOrigin) || pointerDownType !== \"mouse\") {\n            onSelect(e2);\n        }\n    };\n    const onKeyDown = (e2)=>{\n        if (!allowsSelection() || ![\n            \"Enter\",\n            \" \"\n        ].includes(e2.key)) {\n            return;\n        }\n        if (isNonContiguousSelectionModifier(e2)) {\n            manager().toggleSelection(key());\n        } else {\n            onSelect(e2);\n        }\n    };\n    const onMouseDown = (e2)=>{\n        if (isDisabled()) {\n            e2.preventDefault();\n        }\n    };\n    const onFocus = (e2)=>{\n        const refEl = ref();\n        if (shouldUseVirtualFocus() || isDisabled() || !refEl) {\n            return;\n        }\n        if (e2.target === refEl) {\n            manager().setFocusedKey(key());\n        }\n    };\n    const tabIndex = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        if (shouldUseVirtualFocus() || isDisabled()) {\n            return void 0;\n        }\n        return key() === manager().focusedKey() ? 0 : -1;\n    });\n    const dataKey = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return access(props.virtualized) ? void 0 : key();\n    });\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)((0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.on)([\n        ref,\n        key,\n        shouldUseVirtualFocus,\n        ()=>manager().focusedKey(),\n        ()=>manager().isFocused()\n    ], ([refEl, key2, shouldUseVirtualFocus2, focusedKey, isFocused])=>{\n        if (refEl && key2 === focusedKey && isFocused && !shouldUseVirtualFocus2 && document.activeElement !== refEl) {\n            if (props.focus) {\n                props.focus();\n            } else {\n                focusWithoutScrolling(refEl);\n            }\n        }\n    }));\n    return {\n        isSelected,\n        isDisabled,\n        allowsSelection,\n        tabIndex,\n        dataKey,\n        onPointerDown,\n        onPointerUp,\n        onClick,\n        onKeyDown,\n        onMouseDown,\n        onFocus\n    };\n}\nvar SelectionManager = class {\n    constructor(collection, state2){\n        this.collection = collection;\n        this.state = state2;\n    }\n    /** The type of selection that is allowed in the collection. */ selectionMode() {\n        return this.state.selectionMode();\n    }\n    /** Whether the collection allows empty selection. */ disallowEmptySelection() {\n        return this.state.disallowEmptySelection();\n    }\n    /** The selection behavior for the collection. */ selectionBehavior() {\n        return this.state.selectionBehavior();\n    }\n    /** Sets the selection behavior for the collection. */ setSelectionBehavior(selectionBehavior) {\n        this.state.setSelectionBehavior(selectionBehavior);\n    }\n    /** Whether the collection is currently focused. */ isFocused() {\n        return this.state.isFocused();\n    }\n    /** Sets whether the collection is focused. */ setFocused(isFocused) {\n        this.state.setFocused(isFocused);\n    }\n    /** The current focused key in the collection. */ focusedKey() {\n        return this.state.focusedKey();\n    }\n    /** Sets the focused key. */ setFocusedKey(key) {\n        if (key == null || this.collection().getItem(key)) {\n            this.state.setFocusedKey(key);\n        }\n    }\n    /** The currently selected keys in the collection. */ selectedKeys() {\n        return this.state.selectedKeys();\n    }\n    /** Returns whether a key is selected. */ isSelected(key) {\n        if (this.state.selectionMode() === \"none\") {\n            return false;\n        }\n        const retrievedKey = this.getKey(key);\n        if (retrievedKey == null) {\n            return false;\n        }\n        return this.state.selectedKeys().has(retrievedKey);\n    }\n    /** Whether the selection is empty. */ isEmpty() {\n        return this.state.selectedKeys().size === 0;\n    }\n    /** Whether all items in the collection are selected. */ isSelectAll() {\n        if (this.isEmpty()) {\n            return false;\n        }\n        const selectedKeys = this.state.selectedKeys();\n        return this.getAllSelectableKeys().every((k)=>selectedKeys.has(k));\n    }\n    firstSelectedKey() {\n        let first;\n        for (const key of this.state.selectedKeys()){\n            const item = this.collection().getItem(key);\n            const isItemBeforeFirst = item?.index != null && first?.index != null && item.index < first.index;\n            if (!first || isItemBeforeFirst) {\n                first = item;\n            }\n        }\n        return first?.key;\n    }\n    lastSelectedKey() {\n        let last;\n        for (const key of this.state.selectedKeys()){\n            const item = this.collection().getItem(key);\n            const isItemAfterLast = item?.index != null && last?.index != null && item.index > last.index;\n            if (!last || isItemAfterLast) {\n                last = item;\n            }\n        }\n        return last?.key;\n    }\n    /** Extends the selection to the given key. */ extendSelection(toKey) {\n        if (this.selectionMode() === \"none\") {\n            return;\n        }\n        if (this.selectionMode() === \"single\") {\n            this.replaceSelection(toKey);\n            return;\n        }\n        const retrievedToKey = this.getKey(toKey);\n        if (retrievedToKey == null) {\n            return;\n        }\n        const selectedKeys = this.state.selectedKeys();\n        const anchorKey = selectedKeys.anchorKey || retrievedToKey;\n        const selection = new Selection(selectedKeys, anchorKey, retrievedToKey);\n        for (const key of this.getKeyRange(anchorKey, selectedKeys.currentKey || retrievedToKey)){\n            selection.delete(key);\n        }\n        for (const key of this.getKeyRange(retrievedToKey, anchorKey)){\n            if (this.canSelectItem(key)) {\n                selection.add(key);\n            }\n        }\n        this.state.setSelectedKeys(selection);\n    }\n    getKeyRange(from, to) {\n        const fromItem = this.collection().getItem(from);\n        const toItem = this.collection().getItem(to);\n        if (fromItem && toItem) {\n            if (fromItem.index != null && toItem.index != null && fromItem.index <= toItem.index) {\n                return this.getKeyRangeInternal(from, to);\n            }\n            return this.getKeyRangeInternal(to, from);\n        }\n        return [];\n    }\n    getKeyRangeInternal(from, to) {\n        const keys2 = [];\n        let key = from;\n        while(key != null){\n            const item = this.collection().getItem(key);\n            if (item && item.type === \"item\") {\n                keys2.push(key);\n            }\n            if (key === to) {\n                return keys2;\n            }\n            key = this.collection().getKeyAfter(key);\n        }\n        return [];\n    }\n    getKey(key) {\n        const item = this.collection().getItem(key);\n        if (!item) {\n            return key;\n        }\n        if (!item || item.type !== \"item\") {\n            return null;\n        }\n        return item.key;\n    }\n    /** Toggles whether the given key is selected. */ toggleSelection(key) {\n        if (this.selectionMode() === \"none\") {\n            return;\n        }\n        if (this.selectionMode() === \"single\" && !this.isSelected(key)) {\n            this.replaceSelection(key);\n            return;\n        }\n        const retrievedKey = this.getKey(key);\n        if (retrievedKey == null) {\n            return;\n        }\n        const keys2 = new Selection(this.state.selectedKeys());\n        if (keys2.has(retrievedKey)) {\n            keys2.delete(retrievedKey);\n        } else if (this.canSelectItem(retrievedKey)) {\n            keys2.add(retrievedKey);\n            keys2.anchorKey = retrievedKey;\n            keys2.currentKey = retrievedKey;\n        }\n        if (this.disallowEmptySelection() && keys2.size === 0) {\n            return;\n        }\n        this.state.setSelectedKeys(keys2);\n    }\n    /** Replaces the selection with only the given key. */ replaceSelection(key) {\n        if (this.selectionMode() === \"none\") {\n            return;\n        }\n        const retrievedKey = this.getKey(key);\n        if (retrievedKey == null) {\n            return;\n        }\n        const selection = this.canSelectItem(retrievedKey) ? new Selection([\n            retrievedKey\n        ], retrievedKey, retrievedKey) : new Selection();\n        this.state.setSelectedKeys(selection);\n    }\n    /** Replaces the selection with the given keys. */ setSelectedKeys(keys2) {\n        if (this.selectionMode() === \"none\") {\n            return;\n        }\n        const selection = new Selection();\n        for (const key of keys2){\n            const retrievedKey = this.getKey(key);\n            if (retrievedKey != null) {\n                selection.add(retrievedKey);\n                if (this.selectionMode() === \"single\") {\n                    break;\n                }\n            }\n        }\n        this.state.setSelectedKeys(selection);\n    }\n    /** Selects all items in the collection. */ selectAll() {\n        if (this.selectionMode() === \"multiple\") {\n            this.state.setSelectedKeys(new Set(this.getAllSelectableKeys()));\n        }\n    }\n    /**\n   * Removes all keys from the selection.\n   */ clearSelection() {\n        const selectedKeys = this.state.selectedKeys();\n        if (!this.disallowEmptySelection() && selectedKeys.size > 0) {\n            this.state.setSelectedKeys(new Selection());\n        }\n    }\n    /**\n   * Toggles between select all and an empty selection.\n   */ toggleSelectAll() {\n        if (this.isSelectAll()) {\n            this.clearSelection();\n        } else {\n            this.selectAll();\n        }\n    }\n    select(key, e2) {\n        if (this.selectionMode() === \"none\") {\n            return;\n        }\n        if (this.selectionMode() === \"single\") {\n            if (this.isSelected(key) && !this.disallowEmptySelection()) {\n                this.toggleSelection(key);\n            } else {\n                this.replaceSelection(key);\n            }\n        } else if (this.selectionBehavior() === \"toggle\" || e2 && e2.pointerType === \"touch\") {\n            this.toggleSelection(key);\n        } else {\n            this.replaceSelection(key);\n        }\n    }\n    /** Returns whether the current selection is equal to the given selection. */ isSelectionEqual(selection) {\n        if (selection === this.state.selectedKeys()) {\n            return true;\n        }\n        const selectedKeys = this.selectedKeys();\n        if (selection.size !== selectedKeys.size) {\n            return false;\n        }\n        for (const key of selection){\n            if (!selectedKeys.has(key)) {\n                return false;\n            }\n        }\n        for (const key of selectedKeys){\n            if (!selection.has(key)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    canSelectItem(key) {\n        if (this.state.selectionMode() === \"none\") {\n            return false;\n        }\n        const item = this.collection().getItem(key);\n        return item != null && !item.disabled;\n    }\n    isDisabled(key) {\n        const item = this.collection().getItem(key);\n        return !item || item.disabled;\n    }\n    getAllSelectableKeys() {\n        const keys2 = [];\n        const addKeys = (key)=>{\n            while(key != null){\n                if (this.canSelectItem(key)) {\n                    const item = this.collection().getItem(key);\n                    if (!item) {\n                        continue;\n                    }\n                    if (item.type === \"item\") {\n                        keys2.push(key);\n                    }\n                }\n                key = this.collection().getKeyAfter(key);\n            }\n        };\n        addKeys(this.collection().getFirstKey());\n        return keys2;\n    }\n};\nvar ListCollection = class {\n    constructor(nodes){\n        this.keyMap = /* @__PURE__ */ new Map();\n        this.iterable = nodes;\n        for (const node of nodes){\n            this.keyMap.set(node.key, node);\n        }\n        if (this.keyMap.size === 0) {\n            return;\n        }\n        let last;\n        let index = 0;\n        for (const [key, node] of this.keyMap){\n            if (last) {\n                last.nextKey = key;\n                node.prevKey = last.key;\n            } else {\n                this.firstKey = key;\n                node.prevKey = void 0;\n            }\n            if (node.type === \"item\") {\n                node.index = index++;\n            }\n            last = node;\n            last.nextKey = void 0;\n        }\n        this.lastKey = last.key;\n    }\n    *[Symbol.iterator]() {\n        yield* this.iterable;\n    }\n    getSize() {\n        return this.keyMap.size;\n    }\n    getKeys() {\n        return this.keyMap.keys();\n    }\n    getKeyBefore(key) {\n        return this.keyMap.get(key)?.prevKey;\n    }\n    getKeyAfter(key) {\n        return this.keyMap.get(key)?.nextKey;\n    }\n    getFirstKey() {\n        return this.firstKey;\n    }\n    getLastKey() {\n        return this.lastKey;\n    }\n    getItem(key) {\n        return this.keyMap.get(key);\n    }\n    at(idx) {\n        const keys2 = [\n            ...this.getKeys()\n        ];\n        return this.getItem(keys2[idx]);\n    }\n};\nfunction createListState(props) {\n    const selectionState = createMultipleSelectionState(props);\n    const factory = (nodes)=>{\n        return props.filter ? new ListCollection(props.filter(nodes)) : new ListCollection(nodes);\n    };\n    const collection = createCollection({\n        dataSource: ()=>access(props.dataSource),\n        getKey: ()=>access(props.getKey),\n        getTextValue: ()=>access(props.getTextValue),\n        getDisabled: ()=>access(props.getDisabled),\n        getSectionChildren: ()=>access(props.getSectionChildren),\n        factory\n    }, [\n        ()=>props.filter\n    ]);\n    const selectionManager = new SelectionManager(collection, selectionState);\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComputed)(()=>{\n        const focusedKey = selectionState.focusedKey();\n        if (focusedKey != null && !collection().getItem(focusedKey)) {\n            selectionState.setFocusedKey(void 0);\n        }\n    });\n    return {\n        collection,\n        selectionManager: ()=>selectionManager\n    };\n}\nvar ListKeyboardDelegate = class {\n    constructor(collection, ref, collator){\n        this.collection = collection;\n        this.ref = ref;\n        this.collator = collator;\n    }\n    getKeyBelow(key) {\n        let keyAfter = this.collection().getKeyAfter(key);\n        while(keyAfter != null){\n            const item = this.collection().getItem(keyAfter);\n            if (item && item.type === \"item\" && !item.disabled) {\n                return keyAfter;\n            }\n            keyAfter = this.collection().getKeyAfter(keyAfter);\n        }\n    }\n    getKeyAbove(key) {\n        let keyBefore = this.collection().getKeyBefore(key);\n        while(keyBefore != null){\n            const item = this.collection().getItem(keyBefore);\n            if (item && item.type === \"item\" && !item.disabled) {\n                return keyBefore;\n            }\n            keyBefore = this.collection().getKeyBefore(keyBefore);\n        }\n    }\n    getFirstKey() {\n        let key = this.collection().getFirstKey();\n        while(key != null){\n            const item = this.collection().getItem(key);\n            if (item && item.type === \"item\" && !item.disabled) {\n                return key;\n            }\n            key = this.collection().getKeyAfter(key);\n        }\n    }\n    getLastKey() {\n        let key = this.collection().getLastKey();\n        while(key != null){\n            const item = this.collection().getItem(key);\n            if (item && item.type === \"item\" && !item.disabled) {\n                return key;\n            }\n            key = this.collection().getKeyBefore(key);\n        }\n    }\n    getItem(key) {\n        return this.ref?.()?.querySelector(`[data-key=\"${key}\"]`) ?? null;\n    }\n    // TODO: not working correctly\n    getKeyPageAbove(key) {\n        const menu = this.ref?.();\n        let item = this.getItem(key);\n        if (!menu || !item) {\n            return;\n        }\n        const pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);\n        let keyAbove = key;\n        while(keyAbove && item && item.offsetTop > pageY){\n            keyAbove = this.getKeyAbove(keyAbove);\n            item = keyAbove != null ? this.getItem(keyAbove) : null;\n        }\n        return keyAbove;\n    }\n    // TODO: not working correctly\n    getKeyPageBelow(key) {\n        const menu = this.ref?.();\n        let item = this.getItem(key);\n        if (!menu || !item) {\n            return;\n        }\n        const pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);\n        let keyBelow = key;\n        while(keyBelow && item && item.offsetTop < pageY){\n            keyBelow = this.getKeyBelow(keyBelow);\n            item = keyBelow != null ? this.getItem(keyBelow) : null;\n        }\n        return keyBelow;\n    }\n    getKeyForSearch(search, fromKey) {\n        const collator = this.collator?.();\n        if (!collator) {\n            return;\n        }\n        let key = fromKey != null ? this.getKeyBelow(fromKey) : this.getFirstKey();\n        while(key != null){\n            const item = this.collection().getItem(key);\n            if (item) {\n                const substring = item.textValue.slice(0, search.length);\n                if (item.textValue && collator.compare(substring, search) === 0) {\n                    return key;\n                }\n            }\n            key = this.getKeyBelow(key);\n        }\n    }\n};\nfunction createSelectableList(props, ref, scrollRef) {\n    const collator = createCollator({\n        usage: \"search\",\n        sensitivity: \"base\"\n    });\n    const delegate = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const keyboardDelegate = access(props.keyboardDelegate);\n        if (keyboardDelegate) {\n            return keyboardDelegate;\n        }\n        return new ListKeyboardDelegate(props.collection, ref, collator);\n    });\n    return createSelectableCollection({\n        selectionManager: ()=>access(props.selectionManager),\n        keyboardDelegate: delegate,\n        autoFocus: ()=>access(props.autoFocus),\n        deferAutoFocus: ()=>access(props.deferAutoFocus),\n        shouldFocusWrap: ()=>access(props.shouldFocusWrap),\n        disallowEmptySelection: ()=>access(props.disallowEmptySelection),\n        selectOnFocus: ()=>access(props.selectOnFocus),\n        disallowTypeAhead: ()=>access(props.disallowTypeAhead),\n        shouldUseVirtualFocus: ()=>access(props.shouldUseVirtualFocus),\n        allowsTabNavigation: ()=>access(props.allowsTabNavigation),\n        isVirtualized: ()=>access(props.isVirtualized),\n        scrollToKey: (key)=>access(props.scrollToKey)?.(key)\n    }, ref, scrollRef);\n}\ncreateStore({\n    toasts: []\n});\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nvar BUTTON_INPUT_TYPES = [\n    \"button\",\n    \"color\",\n    \"file\",\n    \"image\",\n    \"reset\",\n    \"submit\"\n];\nfunction isButton(element) {\n    const tagName = element.tagName.toLowerCase();\n    if (tagName === \"button\") {\n        return true;\n    }\n    if (tagName === \"input\" && element.type) {\n        return BUTTON_INPUT_TYPES.indexOf(element.type) !== -1;\n    }\n    return false;\n}\nfunction ButtonRoot(props) {\n    let ref;\n    props = mergeDefaultProps({\n        type: \"button\"\n    }, props);\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"ref\",\n        \"type\",\n        \"disabled\"\n    ]);\n    const tagName = createTagName(()=>ref, ()=>\"button\");\n    const isNativeButton = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const elementTagName = tagName();\n        if (elementTagName == null) {\n            return false;\n        }\n        return isButton({\n            tagName: elementTagName,\n            type: local.type\n        });\n    });\n    const isNativeInput = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return tagName() === \"input\";\n    });\n    const isNativeLink = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return tagName() === \"a\" && ref?.getAttribute(\"href\") != null;\n    });\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"button\",\n        ref (r$) {\n            const _ref$ = mergeRefs((el)=>ref = el, local.ref);\n            typeof _ref$ === \"function\" && _ref$(r$);\n        },\n        get type () {\n            return isNativeButton() || isNativeInput() ? local.type : void 0;\n        },\n        get role () {\n            return !isNativeButton() && !isNativeLink() ? \"button\" : void 0;\n        },\n        get tabIndex () {\n            return !isNativeButton() && !isNativeLink() && !local.disabled ? 0 : void 0;\n        },\n        get disabled () {\n            return isNativeButton() || isNativeInput() ? local.disabled : void 0;\n        },\n        get [\"aria-disabled\"] () {\n            return !isNativeButton() && !isNativeInput() && local.disabled ? true : void 0;\n        },\n        get [\"data-disabled\"] () {\n            return local.disabled ? \"\" : void 0;\n        }\n    }, others));\n}\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nvar DomCollectionContext = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useOptionalDomCollectionContext() {\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(DomCollectionContext);\n}\nfunction useDomCollectionContext() {\n    const context = useOptionalDomCollectionContext();\n    if (context === void 0) {\n        throw new Error(\"[kobalte]: `useDomCollectionContext` must be used within a `DomCollectionProvider` component\");\n    }\n    return context;\n}\nfunction isElementPreceding(a2, b2) {\n    return Boolean(b2.compareDocumentPosition(a2) & Node.DOCUMENT_POSITION_PRECEDING);\n}\nfunction findDOMIndex(items, item) {\n    const itemEl = item.ref();\n    if (!itemEl) {\n        return -1;\n    }\n    let length = items.length;\n    if (!length) {\n        return -1;\n    }\n    while(length--){\n        const currentItemEl = items[length]?.ref();\n        if (!currentItemEl) {\n            continue;\n        }\n        if (isElementPreceding(currentItemEl, itemEl)) {\n            return length + 1;\n        }\n    }\n    return 0;\n}\nfunction sortBasedOnDOMPosition(items) {\n    const pairs = items.map((item, index)=>[\n            index,\n            item\n        ]);\n    let isOrderDifferent = false;\n    pairs.sort(([indexA, a2], [indexB, b2])=>{\n        const elementA = a2.ref();\n        const elementB = b2.ref();\n        if (elementA === elementB) {\n            return 0;\n        }\n        if (!elementA || !elementB) {\n            return 0;\n        }\n        if (isElementPreceding(elementA, elementB)) {\n            if (indexA > indexB) {\n                isOrderDifferent = true;\n            }\n            return -1;\n        }\n        if (indexA < indexB) {\n            isOrderDifferent = true;\n        }\n        return 1;\n    });\n    if (isOrderDifferent) {\n        return pairs.map(([_, item])=>item);\n    }\n    return items;\n}\nfunction setItemsBasedOnDOMPosition(items, setItems) {\n    const sortedItems = sortBasedOnDOMPosition(items);\n    if (items !== sortedItems) {\n        setItems(sortedItems);\n    }\n}\nfunction getCommonParent(items) {\n    const firstItem = items[0];\n    const lastItemEl = items[items.length - 1]?.ref();\n    let parentEl = firstItem?.ref()?.parentElement;\n    while(parentEl){\n        if (lastItemEl && parentEl.contains(lastItemEl)) {\n            return parentEl;\n        }\n        parentEl = parentEl.parentElement;\n    }\n    return getDocument(parentEl).body;\n}\nfunction createTimeoutObserver(items, setItems) {\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        const timeout = setTimeout(()=>{\n            setItemsBasedOnDOMPosition(items(), setItems);\n        });\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>clearTimeout(timeout));\n    });\n}\nfunction createSortBasedOnDOMPosition(items, setItems) {\n    if (typeof IntersectionObserver !== \"function\") {\n        createTimeoutObserver(items, setItems);\n        return;\n    }\n    let previousItems = [];\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        const callback = ()=>{\n            const hasPreviousItems = !!previousItems.length;\n            previousItems = items();\n            if (!hasPreviousItems) {\n                return;\n            }\n            setItemsBasedOnDOMPosition(items(), setItems);\n        };\n        const root = getCommonParent(items());\n        const observer = new IntersectionObserver(callback, {\n            root\n        });\n        items().forEach((item)=>{\n            const itemEl = item.ref();\n            if (itemEl) {\n                observer.observe(itemEl);\n            }\n        });\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>observer.disconnect());\n    });\n}\nfunction createDomCollection(props = {}) {\n    const [items, setItems] = createControllableArraySignal({\n        value: ()=>access(props.items),\n        onChange: (value)=>props.onItemsChange?.(value)\n    });\n    createSortBasedOnDOMPosition(items, setItems);\n    const registerItem = (item)=>{\n        setItems((prevItems)=>{\n            const index = findDOMIndex(prevItems, item);\n            return addItemToArray(prevItems, item, index);\n        });\n        return ()=>{\n            setItems((prevItems)=>{\n                const nextItems = prevItems.filter((prevItem)=>prevItem.ref() !== item.ref());\n                if (prevItems.length === nextItems.length) {\n                    return prevItems;\n                }\n                return nextItems;\n            });\n        };\n    };\n    const DomCollectionProvider = (props2)=>{\n        return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(DomCollectionContext.Provider, {\n            value: {\n                registerItem\n            },\n            get children () {\n                return props2.children;\n            }\n        });\n    };\n    return {\n        DomCollectionProvider\n    };\n}\nfunction createDomCollectionItem(props) {\n    const context = useDomCollectionContext();\n    props = mergeDefaultProps({\n        shouldRegisterItem: true\n    }, props);\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (!props.shouldRegisterItem) {\n            return;\n        }\n        const unregister = context.registerItem(props.getItem());\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(unregister);\n    });\n}\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nvar DismissableLayerContext = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useOptionalDismissableLayerContext() {\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(DismissableLayerContext);\n}\nfunction DismissableLayer(props) {\n    let ref;\n    const parentContext = useOptionalDismissableLayerContext();\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"ref\",\n        \"disableOutsidePointerEvents\",\n        \"excludedElements\",\n        \"onEscapeKeyDown\",\n        \"onPointerDownOutside\",\n        \"onFocusOutside\",\n        \"onInteractOutside\",\n        \"onDismiss\",\n        \"bypassTopMostLayerCheck\"\n    ]);\n    const nestedLayers = /* @__PURE__ */ new Set([]);\n    const registerNestedLayer = (element)=>{\n        nestedLayers.add(element);\n        const parentUnregister = parentContext?.registerNestedLayer(element);\n        return ()=>{\n            nestedLayers.delete(element);\n            parentUnregister?.();\n        };\n    };\n    const shouldExcludeElement = (element)=>{\n        if (!ref) {\n            return false;\n        }\n        return local.excludedElements?.some((node)=>contains(node(), element)) || [\n            ...nestedLayers\n        ].some((layer)=>contains(layer, element));\n    };\n    const onPointerDownOutside = (e2)=>{\n        if (!ref || layerStack.isBelowPointerBlockingLayer(ref)) {\n            return;\n        }\n        if (!local.bypassTopMostLayerCheck && !layerStack.isTopMostLayer(ref)) {\n            return;\n        }\n        local.onPointerDownOutside?.(e2);\n        local.onInteractOutside?.(e2);\n        if (!e2.defaultPrevented) {\n            local.onDismiss?.();\n        }\n    };\n    const onFocusOutside = (e2)=>{\n        local.onFocusOutside?.(e2);\n        local.onInteractOutside?.(e2);\n        if (!e2.defaultPrevented) {\n            local.onDismiss?.();\n        }\n    };\n    createInteractOutside({\n        shouldExcludeElement,\n        onPointerDownOutside,\n        onFocusOutside\n    }, ()=>ref);\n    createEscapeKeyDown({\n        ownerDocument: ()=>getDocument(ref),\n        onEscapeKeyDown: (e2)=>{\n            if (!ref || !layerStack.isTopMostLayer(ref)) {\n                return;\n            }\n            local.onEscapeKeyDown?.(e2);\n            if (!e2.defaultPrevented && local.onDismiss) {\n                e2.preventDefault();\n                local.onDismiss();\n            }\n        }\n    });\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onMount)(()=>{\n        if (!ref) {\n            return;\n        }\n        layerStack.addLayer({\n            node: ref,\n            isPointerBlocking: local.disableOutsidePointerEvents,\n            dismiss: local.onDismiss\n        });\n        const unregisterFromParentLayer = parentContext?.registerNestedLayer(ref);\n        layerStack.assignPointerEventToLayers();\n        layerStack.disableBodyPointerEvents(ref);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            if (!ref) {\n                return;\n            }\n            layerStack.removeLayer(ref);\n            unregisterFromParentLayer?.();\n            layerStack.assignPointerEventToLayers();\n            layerStack.restoreBodyPointerEvents(ref);\n        });\n    });\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)((0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.on)([\n        ()=>ref,\n        ()=>local.disableOutsidePointerEvents\n    ], ([ref2, disableOutsidePointerEvents])=>{\n        if (!ref2) {\n            return;\n        }\n        const layer = layerStack.find(ref2);\n        if (layer && layer.isPointerBlocking !== disableOutsidePointerEvents) {\n            layer.isPointerBlocking = disableOutsidePointerEvents;\n            layerStack.assignPointerEventToLayers();\n        }\n        if (disableOutsidePointerEvents) {\n            layerStack.disableBodyPointerEvents(ref2);\n        }\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            layerStack.restoreBodyPointerEvents(ref2);\n        });\n    }, {\n        defer: true\n    }));\n    const context = {\n        registerNestedLayer\n    };\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(DismissableLayerContext.Provider, {\n        value: context,\n        get children () {\n            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                as: \"div\",\n                ref (r$) {\n                    const _ref$ = mergeRefs((el)=>ref = el, local.ref);\n                    typeof _ref$ === \"function\" && _ref$(r$);\n                }\n            }, others));\n        }\n    });\n}\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nvar PopperContext = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction usePopperContext() {\n    const context = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(PopperContext);\n    if (context === void 0) {\n        throw new Error(\"[kobalte]: `usePopperContext` must be used within a `Popper` component\");\n    }\n    return context;\n}\nvar _tmpl$$f = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg display=\"block\" viewBox=\"0 0 30 30\"><g><path fill=\"none\" d=\"M23,27.8c1.1,1.2,3.4,2.2,5,2.2h2H0h2c1.7,0,3.9-1,5-2.2l6.6-7.2c0.7-0.8,2-0.8,2.7,0L23,27.8L23,27.8z\"></path><path stroke=\"none\" d=\"M23,27.8c1.1,1.2,3.4,2.2,5,2.2h2H0h2c1.7,0,3.9-1,5-2.2l6.6-7.2c0.7-0.8,2-0.8,2.7,0L23,27.8L23,27.8z\">`);\nvar DEFAULT_SIZE = 30;\nvar HALF_DEFAULT_SIZE = DEFAULT_SIZE / 2;\nvar ROTATION_DEG = {\n    top: 180,\n    right: -90,\n    bottom: 0,\n    left: 90\n};\nfunction PopperArrow(props) {\n    const context = usePopperContext();\n    props = mergeDefaultProps({\n        size: DEFAULT_SIZE\n    }, props);\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"ref\",\n        \"style\",\n        \"children\",\n        \"size\"\n    ]);\n    const dir = ()=>context.currentPlacement().split(\"-\")[0];\n    const contentStyle = createComputedStyle(context.contentRef);\n    const fill = ()=>contentStyle()?.getPropertyValue(\"background-color\") || \"none\";\n    const stroke = ()=>contentStyle()?.getPropertyValue(`border-${dir()}-color`) || \"none\";\n    const borderWidth = ()=>contentStyle()?.getPropertyValue(`border-${dir()}-width`) || \"0px\";\n    const strokeWidth = ()=>{\n        return parseInt(borderWidth()) * 2 * (DEFAULT_SIZE / local.size);\n    };\n    const rotate = ()=>{\n        return `rotate(${ROTATION_DEG[dir()]} ${HALF_DEFAULT_SIZE} ${HALF_DEFAULT_SIZE})`;\n    };\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"div\",\n        ref (r$) {\n            const _ref$ = mergeRefs(context.setArrowRef, local.ref);\n            typeof _ref$ === \"function\" && _ref$(r$);\n        },\n        \"aria-hidden\": \"true\",\n        get style () {\n            return {\n                // server side rendering\n                position: \"absolute\",\n                \"font-size\": `${local.size}px`,\n                width: \"1em\",\n                height: \"1em\",\n                \"pointer-events\": \"none\",\n                fill: fill(),\n                stroke: stroke(),\n                \"stroke-width\": strokeWidth(),\n                ...local.style\n            };\n        }\n    }, others, {\n        get children () {\n            const _el$ = _tmpl$$f(), _el$2 = _el$.firstChild, _el$3 = _el$2.firstChild;\n            _el$3.nextSibling;\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$2, \"transform\", rotate()));\n            return _el$;\n        }\n    }));\n}\nfunction createComputedStyle(element) {\n    const [style2, setStyle] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        const el = element();\n        el && setStyle(getWindow(el).getComputedStyle(el));\n    });\n    return style2;\n}\nfunction PopperPositioner(props) {\n    const context = usePopperContext();\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"ref\",\n        \"style\"\n    ]);\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"div\",\n        ref (r$) {\n            const _ref$ = mergeRefs(context.setPositionerRef, local.ref);\n            typeof _ref$ === \"function\" && _ref$(r$);\n        },\n        \"data-popper-positioner\": \"\",\n        get style () {\n            return {\n                position: \"absolute\",\n                top: 0,\n                left: 0,\n                \"min-width\": \"max-content\",\n                ...local.style\n            };\n        }\n    }, others));\n}\nfunction createDOMRect(anchorRect) {\n    const { x = 0, y = 0, width = 0, height = 0 } = anchorRect ?? {};\n    if (typeof DOMRect === \"function\") {\n        return new DOMRect(x, y, width, height);\n    }\n    const rect = {\n        x,\n        y,\n        width,\n        height,\n        top: y,\n        right: x + width,\n        bottom: y + height,\n        left: x\n    };\n    return {\n        ...rect,\n        toJSON: ()=>rect\n    };\n}\nfunction getAnchorElement(anchor, getAnchorRect) {\n    const contextElement = anchor;\n    return {\n        contextElement,\n        getBoundingClientRect: ()=>{\n            const anchorRect = getAnchorRect(anchor);\n            if (anchorRect) {\n                return createDOMRect(anchorRect);\n            }\n            if (anchor) {\n                return anchor.getBoundingClientRect();\n            }\n            return createDOMRect();\n        }\n    };\n}\nfunction isValidPlacement(flip2) {\n    return /^(?:top|bottom|left|right)(?:-(?:start|end))?$/.test(flip2);\n}\nvar REVERSE_BASE_PLACEMENT = {\n    top: \"bottom\",\n    right: \"left\",\n    bottom: \"top\",\n    left: \"right\"\n};\nfunction getTransformOrigin(placement, readingDirection) {\n    const [basePlacement, alignment] = placement.split(\"-\");\n    const reversePlacement = REVERSE_BASE_PLACEMENT[basePlacement];\n    if (!alignment) {\n        return `${reversePlacement} center`;\n    }\n    if (basePlacement === \"left\" || basePlacement === \"right\") {\n        return `${reversePlacement} ${alignment === \"start\" ? \"top\" : \"bottom\"}`;\n    }\n    if (alignment === \"start\") {\n        return `${reversePlacement} ${readingDirection === \"rtl\" ? \"right\" : \"left\"}`;\n    }\n    return `${reversePlacement} ${readingDirection === \"rtl\" ? \"left\" : \"right\"}`;\n}\nfunction PopperRoot(props) {\n    props = mergeDefaultProps({\n        getAnchorRect: (anchor)=>anchor?.getBoundingClientRect(),\n        placement: \"bottom\",\n        gutter: 0,\n        shift: 0,\n        flip: true,\n        slide: true,\n        overlap: false,\n        sameWidth: false,\n        fitViewport: false,\n        hideWhenDetached: false,\n        detachedPadding: 0,\n        arrowPadding: 4,\n        overflowPadding: 8\n    }, props);\n    const [positionerRef, setPositionerRef] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [arrowRef, setArrowRef] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [currentPlacement, setCurrentPlacement] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(props.placement);\n    const anchorRef = ()=>getAnchorElement(props.anchorRef(), props.getAnchorRect);\n    const { direction } = useLocale();\n    async function updatePosition() {\n        const referenceEl = anchorRef();\n        const floatingEl = positionerRef();\n        const arrowEl = arrowRef();\n        if (!referenceEl || !floatingEl) {\n            return;\n        }\n        const arrowOffset = (arrowEl?.clientHeight || 0) / 2;\n        const finalGutter = typeof props.gutter === \"number\" ? props.gutter + arrowOffset : props.gutter ?? arrowOffset;\n        floatingEl.style.setProperty(\"--kb-popper-content-overflow-padding\", `${props.overflowPadding}px`);\n        referenceEl.getBoundingClientRect();\n        const middleware = [\n            // https://floating-ui.com/docs/offset\n            offset(({ placement })=>{\n                const hasAlignment = !!placement.split(\"-\")[1];\n                return {\n                    mainAxis: finalGutter,\n                    crossAxis: !hasAlignment ? props.shift : void 0,\n                    alignmentAxis: props.shift\n                };\n            })\n        ];\n        if (props.flip !== false) {\n            const fallbackPlacements = typeof props.flip === \"string\" ? props.flip.split(\" \") : void 0;\n            if (fallbackPlacements !== void 0 && !fallbackPlacements.every(isValidPlacement)) {\n                throw new Error(\"`flip` expects a spaced-delimited list of placements\");\n            }\n            middleware.push(flip({\n                padding: props.overflowPadding,\n                fallbackPlacements\n            }));\n        }\n        if (props.slide || props.overlap) {\n            middleware.push(shift({\n                mainAxis: props.slide,\n                crossAxis: props.overlap,\n                padding: props.overflowPadding\n            }));\n        }\n        middleware.push(size({\n            padding: props.overflowPadding,\n            apply ({ availableWidth, availableHeight, rects }) {\n                const referenceWidth = Math.round(rects.reference.width);\n                availableWidth = Math.floor(availableWidth);\n                availableHeight = Math.floor(availableHeight);\n                floatingEl.style.setProperty(\"--kb-popper-anchor-width\", `${referenceWidth}px`);\n                floatingEl.style.setProperty(\"--kb-popper-content-available-width\", `${availableWidth}px`);\n                floatingEl.style.setProperty(\"--kb-popper-content-available-height\", `${availableHeight}px`);\n                if (props.sameWidth) {\n                    floatingEl.style.width = `${referenceWidth}px`;\n                }\n                if (props.fitViewport) {\n                    floatingEl.style.maxWidth = `${availableWidth}px`;\n                    floatingEl.style.maxHeight = `${availableHeight}px`;\n                }\n            }\n        }));\n        if (props.hideWhenDetached) {\n            middleware.push(hide({\n                padding: props.detachedPadding\n            }));\n        }\n        if (arrowEl) {\n            middleware.push(arrow({\n                element: arrowEl,\n                padding: props.arrowPadding\n            }));\n        }\n        const pos = await computePosition2(referenceEl, floatingEl, {\n            placement: props.placement,\n            strategy: \"absolute\",\n            middleware,\n            platform: {\n                ...platform,\n                isRTL: ()=>direction() === \"rtl\"\n            }\n        });\n        setCurrentPlacement(pos.placement);\n        props.onCurrentPlacementChange?.(pos.placement);\n        if (!floatingEl) {\n            return;\n        }\n        floatingEl.style.setProperty(\"--kb-popper-content-transform-origin\", getTransformOrigin(pos.placement, direction()));\n        const x = Math.round(pos.x);\n        const y = Math.round(pos.y);\n        let visibility;\n        if (props.hideWhenDetached) {\n            visibility = pos.middlewareData.hide?.referenceHidden ? \"hidden\" : \"visible\";\n        }\n        Object.assign(floatingEl.style, {\n            top: \"0\",\n            left: \"0\",\n            transform: `translate3d(${x}px, ${y}px, 0)`,\n            visibility\n        });\n        if (arrowEl && pos.middlewareData.arrow) {\n            const { x: arrowX, y: arrowY } = pos.middlewareData.arrow;\n            const dir = pos.placement.split(\"-\")[0];\n            Object.assign(arrowEl.style, {\n                left: arrowX != null ? `${arrowX}px` : \"\",\n                top: arrowY != null ? `${arrowY}px` : \"\",\n                [dir]: \"100%\"\n            });\n        }\n    }\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        const referenceEl = anchorRef();\n        const floatingEl = positionerRef();\n        if (!referenceEl || !floatingEl) {\n            return;\n        }\n        const cleanupAutoUpdate = autoUpdate(referenceEl, floatingEl, updatePosition, {\n            // JSDOM doesn't support ResizeObserver\n            elementResize: typeof ResizeObserver === \"function\"\n        });\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(cleanupAutoUpdate);\n    });\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        const positioner = positionerRef();\n        const content = props.contentRef();\n        if (!positioner || !content) {\n            return;\n        }\n        queueMicrotask(()=>{\n            positioner.style.zIndex = getComputedStyle(content).zIndex;\n        });\n    });\n    const context = {\n        currentPlacement,\n        contentRef: ()=>props.contentRef(),\n        setPositionerRef,\n        setArrowRef\n    };\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(PopperContext.Provider, {\n        value: context,\n        get children () {\n            return props.children;\n        }\n    });\n}\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nvar MenuContext = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useOptionalMenuContext() {\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(MenuContext);\n}\nfunction useMenuContext() {\n    const context = useOptionalMenuContext();\n    if (context === void 0) {\n        throw new Error(\"[kobalte]: `useMenuContext` must be used within a `Menu` component\");\n    }\n    return context;\n}\nvar MenuRootContext = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useMenuRootContext() {\n    const context = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(MenuRootContext);\n    if (context === void 0) {\n        throw new Error(\"[kobalte]: `useMenuRootContext` must be used within a `MenuRoot` component\");\n    }\n    return context;\n}\nfunction getPointerGraceArea(placement, event, contentEl) {\n    const basePlacement = placement.split(\"-\")[0];\n    const contentRect = contentEl.getBoundingClientRect();\n    const polygon = [];\n    const pointerX = event.clientX;\n    const pointerY = event.clientY;\n    switch(basePlacement){\n        case \"top\":\n            polygon.push([\n                pointerX,\n                pointerY + 5\n            ]);\n            polygon.push([\n                contentRect.left,\n                contentRect.bottom\n            ]);\n            polygon.push([\n                contentRect.left,\n                contentRect.top\n            ]);\n            polygon.push([\n                contentRect.right,\n                contentRect.top\n            ]);\n            polygon.push([\n                contentRect.right,\n                contentRect.bottom\n            ]);\n            break;\n        case \"right\":\n            polygon.push([\n                pointerX - 5,\n                pointerY\n            ]);\n            polygon.push([\n                contentRect.left,\n                contentRect.top\n            ]);\n            polygon.push([\n                contentRect.right,\n                contentRect.top\n            ]);\n            polygon.push([\n                contentRect.right,\n                contentRect.bottom\n            ]);\n            polygon.push([\n                contentRect.left,\n                contentRect.bottom\n            ]);\n            break;\n        case \"bottom\":\n            polygon.push([\n                pointerX,\n                pointerY - 5\n            ]);\n            polygon.push([\n                contentRect.right,\n                contentRect.top\n            ]);\n            polygon.push([\n                contentRect.right,\n                contentRect.bottom\n            ]);\n            polygon.push([\n                contentRect.left,\n                contentRect.bottom\n            ]);\n            polygon.push([\n                contentRect.left,\n                contentRect.top\n            ]);\n            break;\n        case \"left\":\n            polygon.push([\n                pointerX + 5,\n                pointerY\n            ]);\n            polygon.push([\n                contentRect.right,\n                contentRect.bottom\n            ]);\n            polygon.push([\n                contentRect.left,\n                contentRect.bottom\n            ]);\n            polygon.push([\n                contentRect.left,\n                contentRect.top\n            ]);\n            polygon.push([\n                contentRect.right,\n                contentRect.top\n            ]);\n            break;\n    }\n    return polygon;\n}\nfunction isPointerInGraceArea(event, area) {\n    if (!area) {\n        return false;\n    }\n    return isPointInPolygon([\n        event.clientX,\n        event.clientY\n    ], area);\n}\nfunction Menu(props) {\n    const rootContext = useMenuRootContext();\n    const parentDomCollectionContext = useOptionalDomCollectionContext();\n    const parentMenuContext = useOptionalMenuContext();\n    props = mergeDefaultProps({\n        placement: \"bottom-start\"\n    }, props);\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"open\",\n        \"defaultOpen\",\n        \"onOpenChange\"\n    ]);\n    let pointerGraceTimeoutId = 0;\n    let pointerGraceIntent = null;\n    let pointerDir = \"right\";\n    const [triggerId, setTriggerId] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [contentId, setContentId] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [triggerRef, setTriggerRef] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [contentRef, setContentRef] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [focusStrategy, setFocusStrategy] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(true);\n    const [currentPlacement, setCurrentPlacement] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(others.placement);\n    const [nestedMenus, setNestedMenus] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)([]);\n    const [items, setItems] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)([]);\n    const { DomCollectionProvider } = createDomCollection({\n        items,\n        onItemsChange: setItems\n    });\n    const disclosureState = createDisclosureState({\n        open: ()=>local.open,\n        defaultOpen: ()=>local.defaultOpen,\n        onOpenChange: (isOpen)=>local.onOpenChange?.(isOpen)\n    });\n    const contentPresence = createPresence(()=>rootContext.forceMount() || disclosureState.isOpen());\n    const listState = createListState({\n        selectionMode: \"none\",\n        dataSource: items\n    });\n    const open = (focusStrategy2)=>{\n        setFocusStrategy(focusStrategy2);\n        disclosureState.open();\n    };\n    const close = (recursively = false)=>{\n        disclosureState.close();\n        if (recursively && parentMenuContext) {\n            parentMenuContext.close(true);\n        }\n    };\n    const toggle = (focusStrategy2)=>{\n        setFocusStrategy(focusStrategy2);\n        disclosureState.toggle();\n    };\n    const focusContent = ()=>{\n        const content = contentRef();\n        if (content) {\n            focusWithoutScrolling(content);\n            listState.selectionManager().setFocused(true);\n            listState.selectionManager().setFocusedKey(void 0);\n        }\n    };\n    const registerNestedMenu = (element)=>{\n        setNestedMenus((prev)=>[\n                ...prev,\n                element\n            ]);\n        const parentUnregister = parentMenuContext?.registerNestedMenu(element);\n        return ()=>{\n            setNestedMenus((prev)=>removeItemFromArray(prev, element));\n            parentUnregister?.();\n        };\n    };\n    const isPointerMovingToSubmenu = (e2)=>{\n        const isMovingTowards = pointerDir === pointerGraceIntent?.side;\n        return isMovingTowards && isPointerInGraceArea(e2, pointerGraceIntent?.area);\n    };\n    const onItemEnter = (e2)=>{\n        if (isPointerMovingToSubmenu(e2)) {\n            e2.preventDefault();\n        }\n    };\n    const onItemLeave = (e2)=>{\n        if (isPointerMovingToSubmenu(e2)) {\n            return;\n        }\n        focusContent();\n    };\n    const onTriggerLeave = (e2)=>{\n        if (isPointerMovingToSubmenu(e2)) {\n            e2.preventDefault();\n        }\n    };\n    createHideOutside({\n        isDisabled: ()=>{\n            return !(parentMenuContext == null && disclosureState.isOpen() && rootContext.isModal());\n        },\n        targets: ()=>[\n                contentRef(),\n                ...nestedMenus()\n            ].filter(Boolean)\n    });\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        const contentEl = contentRef();\n        if (!contentEl || !parentMenuContext) {\n            return;\n        }\n        const parentUnregister = parentMenuContext.registerNestedMenu(contentEl);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            parentUnregister();\n        });\n    });\n    const dataset = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>({\n            \"data-expanded\": disclosureState.isOpen() ? \"\" : void 0,\n            \"data-closed\": !disclosureState.isOpen() ? \"\" : void 0\n        }));\n    const context = {\n        dataset,\n        isOpen: disclosureState.isOpen,\n        contentPresence,\n        currentPlacement,\n        pointerGraceTimeoutId: ()=>pointerGraceTimeoutId,\n        autoFocus: focusStrategy,\n        listState: ()=>listState,\n        parentMenuContext: ()=>parentMenuContext,\n        triggerRef,\n        contentRef,\n        triggerId,\n        contentId,\n        setTriggerRef,\n        setContentRef,\n        open,\n        close,\n        toggle,\n        focusContent,\n        onItemEnter,\n        onItemLeave,\n        onTriggerLeave,\n        setPointerDir: (dir)=>pointerDir = dir,\n        setPointerGraceTimeoutId: (id)=>pointerGraceTimeoutId = id,\n        setPointerGraceIntent: (intent)=>pointerGraceIntent = intent,\n        registerNestedMenu,\n        registerItemToParentDomCollection: parentDomCollectionContext?.registerItem,\n        registerTriggerId: createRegisterId(setTriggerId),\n        registerContentId: createRegisterId(setContentId)\n    };\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(DomCollectionProvider, {\n        get children () {\n            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuContext.Provider, {\n                value: context,\n                get children () {\n                    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(PopperRoot, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                        anchorRef: triggerRef,\n                        contentRef,\n                        onCurrentPlacementChange: setCurrentPlacement\n                    }, others));\n                }\n            });\n        }\n    });\n}\nvar MenuItemContext = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useMenuItemContext() {\n    const context = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(MenuItemContext);\n    if (context === void 0) {\n        throw new Error(\"[kobalte]: `useMenuItemContext` must be used within a `Menu.Item` component\");\n    }\n    return context;\n}\nfunction MenuItemBase(props) {\n    let ref;\n    const rootContext = useMenuRootContext();\n    const menuContext = useMenuContext();\n    props = mergeDefaultProps({\n        id: rootContext.generateId(`item-${(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueId)()}`)\n    }, props);\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"ref\",\n        \"textValue\",\n        \"disabled\",\n        \"closeOnSelect\",\n        \"checked\",\n        \"indeterminate\",\n        \"onSelect\",\n        \"onPointerMove\",\n        \"onPointerLeave\",\n        \"onPointerDown\",\n        \"onPointerUp\",\n        \"onClick\",\n        \"onKeyDown\",\n        \"onMouseDown\",\n        \"onFocus\"\n    ]);\n    const [labelId, setLabelId] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [descriptionId, setDescriptionId] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [labelRef, setLabelRef] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const selectionManager = ()=>menuContext.listState().selectionManager();\n    const key = ()=>others.id;\n    const isHighlighted = ()=>selectionManager().focusedKey() === key();\n    const onSelect = ()=>{\n        local.onSelect?.();\n        if (local.closeOnSelect) {\n            menuContext.close(true);\n        }\n    };\n    createDomCollectionItem({\n        getItem: ()=>({\n                ref: ()=>ref,\n                type: \"item\",\n                key: key(),\n                textValue: local.textValue ?? labelRef()?.textContent ?? ref?.textContent ?? \"\",\n                disabled: local.disabled ?? false\n            })\n    });\n    const selectableItem = createSelectableItem({\n        key,\n        selectionManager,\n        shouldSelectOnPressUp: true,\n        allowsDifferentPressOrigin: true,\n        disabled: ()=>local.disabled\n    }, ()=>ref);\n    const onPointerMove = (e2)=>{\n        callHandler(e2, local.onPointerMove);\n        if (e2.pointerType !== \"mouse\") {\n            return;\n        }\n        if (local.disabled) {\n            menuContext.onItemLeave(e2);\n        } else {\n            menuContext.onItemEnter(e2);\n            if (!e2.defaultPrevented) {\n                focusWithoutScrolling(e2.currentTarget);\n                menuContext.listState().selectionManager().setFocused(true);\n                menuContext.listState().selectionManager().setFocusedKey(key());\n            }\n        }\n    };\n    const onPointerLeave = (e2)=>{\n        callHandler(e2, local.onPointerLeave);\n        if (e2.pointerType !== \"mouse\") {\n            return;\n        }\n        menuContext.onItemLeave(e2);\n    };\n    const onPointerUp = (e2)=>{\n        callHandler(e2, local.onPointerUp);\n        if (!local.disabled && e2.button === 0) {\n            onSelect();\n        }\n    };\n    const onKeyDown = (e2)=>{\n        callHandler(e2, local.onKeyDown);\n        if (e2.repeat) {\n            return;\n        }\n        if (local.disabled) {\n            return;\n        }\n        switch(e2.key){\n            case \"Enter\":\n            case \" \":\n                onSelect();\n                break;\n        }\n    };\n    const ariaChecked = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        if (local.indeterminate) {\n            return \"mixed\";\n        }\n        if (local.checked == null) {\n            return void 0;\n        }\n        return local.checked;\n    });\n    const dataset = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>({\n            \"data-indeterminate\": local.indeterminate ? \"\" : void 0,\n            \"data-checked\": local.checked && !local.indeterminate ? \"\" : void 0,\n            \"data-disabled\": local.disabled ? \"\" : void 0,\n            \"data-highlighted\": isHighlighted() ? \"\" : void 0\n        }));\n    const context = {\n        isChecked: ()=>local.checked,\n        dataset,\n        setLabelRef,\n        generateId: createGenerateId(()=>others.id),\n        registerLabel: createRegisterId(setLabelId),\n        registerDescription: createRegisterId(setDescriptionId)\n    };\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuItemContext.Provider, {\n        value: context,\n        get children () {\n            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                as: \"div\",\n                ref (r$) {\n                    const _ref$ = mergeRefs((el)=>ref = el, local.ref);\n                    typeof _ref$ === \"function\" && _ref$(r$);\n                },\n                get tabIndex () {\n                    return selectableItem.tabIndex();\n                },\n                get [\"aria-checked\"] () {\n                    return ariaChecked();\n                },\n                get [\"aria-disabled\"] () {\n                    return local.disabled;\n                },\n                get [\"aria-labelledby\"] () {\n                    return labelId();\n                },\n                get [\"aria-describedby\"] () {\n                    return descriptionId();\n                },\n                get [\"data-key\"] () {\n                    return selectableItem.dataKey();\n                },\n                get onPointerDown () {\n                    return composeEventHandlers([\n                        local.onPointerDown,\n                        selectableItem.onPointerDown\n                    ]);\n                },\n                get onPointerUp () {\n                    return composeEventHandlers([\n                        onPointerUp,\n                        selectableItem.onPointerUp\n                    ]);\n                },\n                get onClick () {\n                    return composeEventHandlers([\n                        local.onClick,\n                        selectableItem.onClick\n                    ]);\n                },\n                get onKeyDown () {\n                    return composeEventHandlers([\n                        onKeyDown,\n                        selectableItem.onKeyDown\n                    ]);\n                },\n                get onMouseDown () {\n                    return composeEventHandlers([\n                        local.onMouseDown,\n                        selectableItem.onMouseDown\n                    ]);\n                },\n                get onFocus () {\n                    return composeEventHandlers([\n                        local.onFocus,\n                        selectableItem.onFocus\n                    ]);\n                },\n                onPointerMove,\n                onPointerLeave\n            }, dataset, others));\n        }\n    });\n}\nfunction MenuCheckboxItem(props) {\n    props = mergeDefaultProps({\n        closeOnSelect: false\n    }, props);\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"checked\",\n        \"defaultChecked\",\n        \"onChange\",\n        \"onSelect\"\n    ]);\n    const state2 = createToggleState({\n        isSelected: ()=>local.checked,\n        defaultIsSelected: ()=>local.defaultChecked,\n        onSelectedChange: (checked)=>local.onChange?.(checked),\n        isDisabled: ()=>others.disabled\n    });\n    const onSelect = ()=>{\n        local.onSelect?.();\n        state2.toggle();\n    };\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuItemBase, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        role: \"menuitemcheckbox\",\n        get checked () {\n            return state2.isSelected();\n        },\n        onSelect\n    }, others));\n}\nfunction MenuContentBase(props) {\n    let ref;\n    const rootContext = useMenuRootContext();\n    const context = useMenuContext();\n    props = mergeDefaultProps({\n        id: rootContext.generateId(`content-${(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueId)()}`)\n    }, props);\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"ref\",\n        \"id\",\n        \"style\",\n        \"onOpenAutoFocus\",\n        \"onCloseAutoFocus\",\n        \"onEscapeKeyDown\",\n        \"onFocusOutside\",\n        \"onPointerEnter\",\n        \"onPointerMove\",\n        \"onKeyDown\",\n        \"onMouseDown\",\n        \"onFocusIn\",\n        \"onFocusOut\"\n    ]);\n    let lastPointerX = 0;\n    const isRootModalContent = ()=>{\n        return context.parentMenuContext() == null && rootContext.isModal();\n    };\n    const selectableList = createSelectableList({\n        selectionManager: context.listState().selectionManager,\n        collection: context.listState().collection,\n        autoFocus: context.autoFocus,\n        deferAutoFocus: true,\n        // ensure all menu items are mounted and collection is not empty before trying to autofocus.\n        shouldFocusWrap: true,\n        disallowTypeAhead: ()=>!context.listState().selectionManager().isFocused()\n    }, ()=>ref);\n    createFocusScope({\n        trapFocus: ()=>isRootModalContent() && context.isOpen(),\n        onMountAutoFocus: local.onOpenAutoFocus,\n        onUnmountAutoFocus: local.onCloseAutoFocus\n    }, ()=>ref);\n    const onKeyDown = (e2)=>{\n        if (!contains(e2.currentTarget, e2.target)) {\n            return;\n        }\n        if (e2.key === \"Tab\" && context.isOpen()) {\n            e2.preventDefault();\n        }\n    };\n    const onEscapeKeyDown = (e2)=>{\n        local.onEscapeKeyDown?.(e2);\n        context.close(true);\n    };\n    const onFocusOutside = (e2)=>{\n        local.onFocusOutside?.(e2);\n        if (rootContext.isModal()) {\n            e2.preventDefault();\n        }\n    };\n    const onPointerEnter = (e2)=>{\n        callHandler(e2, local.onPointerEnter);\n        if (!context.isOpen()) {\n            return;\n        }\n        context.parentMenuContext()?.listState().selectionManager().setFocused(false);\n        context.parentMenuContext()?.listState().selectionManager().setFocusedKey(void 0);\n    };\n    const onPointerMove = (e2)=>{\n        callHandler(e2, local.onPointerMove);\n        if (e2.pointerType !== \"mouse\") {\n            return;\n        }\n        const target = e2.target;\n        const pointerXHasChanged = lastPointerX !== e2.clientX;\n        if (contains(e2.currentTarget, target) && pointerXHasChanged) {\n            context.setPointerDir(e2.clientX > lastPointerX ? \"right\" : \"left\");\n            lastPointerX = e2.clientX;\n        }\n    };\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(context.registerContentId(local.id)));\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n        get when () {\n            return context.contentPresence.isPresent();\n        },\n        get children () {\n            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(PopperPositioner, {\n                get children () {\n                    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(DismissableLayer, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                        ref (r$) {\n                            const _ref$ = mergeRefs((el)=>{\n                                context.setContentRef(el);\n                                context.contentPresence.setRef(el);\n                                ref = el;\n                            }, local.ref);\n                            typeof _ref$ === \"function\" && _ref$(r$);\n                        },\n                        role: \"menu\",\n                        get id () {\n                            return local.id;\n                        },\n                        get tabIndex () {\n                            return selectableList.tabIndex();\n                        },\n                        get disableOutsidePointerEvents () {\n                            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>!!isRootModalContent())() && context.isOpen();\n                        },\n                        get excludedElements () {\n                            return [\n                                context.triggerRef\n                            ];\n                        },\n                        bypassTopMostLayerCheck: true,\n                        get style () {\n                            return {\n                                \"--kb-menu-content-transform-origin\": \"var(--kb-popper-content-transform-origin)\",\n                                position: \"relative\",\n                                ...local.style\n                            };\n                        },\n                        get [\"aria-labelledby\"] () {\n                            return context.triggerId();\n                        },\n                        onEscapeKeyDown,\n                        onFocusOutside,\n                        get onDismiss () {\n                            return context.close;\n                        },\n                        get onKeyDown () {\n                            return composeEventHandlers([\n                                local.onKeyDown,\n                                selectableList.onKeyDown,\n                                onKeyDown\n                            ]);\n                        },\n                        get onMouseDown () {\n                            return composeEventHandlers([\n                                local.onMouseDown,\n                                selectableList.onMouseDown\n                            ]);\n                        },\n                        get onFocusIn () {\n                            return composeEventHandlers([\n                                local.onFocusIn,\n                                selectableList.onFocusIn\n                            ]);\n                        },\n                        get onFocusOut () {\n                            return composeEventHandlers([\n                                local.onFocusOut,\n                                selectableList.onFocusOut\n                            ]);\n                        },\n                        onPointerEnter,\n                        onPointerMove\n                    }, ()=>context.dataset(), others));\n                }\n            });\n        }\n    });\n}\nfunction MenuContent(props) {\n    let ref;\n    const rootContext = useMenuRootContext();\n    const context = useMenuContext();\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"ref\"\n    ]);\n    createPreventScroll({\n        ownerRef: ()=>ref,\n        isDisabled: ()=>!(context.isOpen() && (rootContext.isModal() || rootContext.preventScroll()))\n    });\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuContentBase, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        ref (r$) {\n            const _ref$ = mergeRefs((el)=>ref = el, local.ref);\n            typeof _ref$ === \"function\" && _ref$(r$);\n        }\n    }, others));\n}\nvar MenuGroupContext = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useMenuGroupContext() {\n    const context = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(MenuGroupContext);\n    if (context === void 0) {\n        throw new Error(\"[kobalte]: `useMenuGroupContext` must be used within a `Menu.Group` component\");\n    }\n    return context;\n}\nfunction MenuGroup(props) {\n    const rootContext = useMenuRootContext();\n    props = mergeDefaultProps({\n        id: rootContext.generateId(`group-${(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueId)()}`)\n    }, props);\n    const [labelId, setLabelId] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const context = {\n        generateId: createGenerateId(()=>props.id),\n        registerLabelId: createRegisterId(setLabelId)\n    };\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuGroupContext.Provider, {\n        value: context,\n        get children () {\n            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                as: \"div\",\n                role: \"group\",\n                get [\"aria-labelledby\"] () {\n                    return labelId();\n                }\n            }, props));\n        }\n    });\n}\nfunction MenuGroupLabel(props) {\n    const context = useMenuGroupContext();\n    props = mergeDefaultProps({\n        id: context.generateId(\"label\")\n    }, props);\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"id\"\n    ]);\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(context.registerLabelId(local.id)));\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"span\",\n        get id () {\n            return local.id;\n        },\n        \"aria-hidden\": \"true\"\n    }, others));\n}\nfunction MenuIcon(props) {\n    const context = useMenuContext();\n    props = mergeDefaultProps({\n        children: \"▼\"\n    }, props);\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"span\",\n        \"aria-hidden\": \"true\"\n    }, ()=>context.dataset(), props));\n}\nfunction MenuItem(props) {\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuItemBase, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        role: \"menuitem\",\n        closeOnSelect: true\n    }, props));\n}\nfunction MenuItemDescription(props) {\n    const context = useMenuItemContext();\n    props = mergeDefaultProps({\n        id: context.generateId(\"description\")\n    }, props);\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"id\"\n    ]);\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(context.registerDescription(local.id)));\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"div\",\n        get id () {\n            return local.id;\n        }\n    }, ()=>context.dataset(), others));\n}\nfunction MenuItemIndicator(props) {\n    const context = useMenuItemContext();\n    props = mergeDefaultProps({\n        id: context.generateId(\"indicator\")\n    }, props);\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"forceMount\"\n    ]);\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n        get when () {\n            return local.forceMount || context.isChecked();\n        },\n        get children () {\n            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                as: \"div\"\n            }, ()=>context.dataset(), others));\n        }\n    });\n}\nfunction MenuItemLabel(props) {\n    const context = useMenuItemContext();\n    props = mergeDefaultProps({\n        id: context.generateId(\"label\")\n    }, props);\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"ref\",\n        \"id\"\n    ]);\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(context.registerLabel(local.id)));\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"div\",\n        ref (r$) {\n            const _ref$ = mergeRefs(context.setLabelRef, local.ref);\n            typeof _ref$ === \"function\" && _ref$(r$);\n        },\n        get id () {\n            return local.id;\n        }\n    }, ()=>context.dataset(), others));\n}\nfunction MenuPortal(props) {\n    const context = useMenuContext();\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n        get when () {\n            return context.contentPresence.isPresent();\n        },\n        get children () {\n            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Portal, props);\n        }\n    });\n}\nvar MenuRadioGroupContext = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useMenuRadioGroupContext() {\n    const context = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(MenuRadioGroupContext);\n    if (context === void 0) {\n        throw new Error(\"[kobalte]: `useMenuRadioGroupContext` must be used within a `Menu.RadioGroup` component\");\n    }\n    return context;\n}\nfunction MenuRadioGroup(props) {\n    const rootContext = useMenuRootContext();\n    const defaultId = rootContext.generateId(`radiogroup-${(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueId)()}`);\n    props = mergeDefaultProps({\n        id: defaultId\n    }, props);\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"value\",\n        \"defaultValue\",\n        \"onChange\",\n        \"disabled\"\n    ]);\n    const [selected, setSelected] = createControllableSignal({\n        value: ()=>local.value,\n        defaultValue: ()=>local.defaultValue,\n        onChange: (value)=>local.onChange?.(value)\n    });\n    const context = {\n        isDisabled: ()=>local.disabled,\n        isSelectedValue: (value)=>value === selected(),\n        setSelectedValue: setSelected\n    };\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuRadioGroupContext.Provider, {\n        value: context,\n        get children () {\n            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuGroup, others);\n        }\n    });\n}\nfunction MenuRadioItem(props) {\n    const context = useMenuRadioGroupContext();\n    props = mergeDefaultProps({\n        closeOnSelect: false\n    }, props);\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"value\",\n        \"onSelect\"\n    ]);\n    const onSelect = ()=>{\n        local.onSelect?.();\n        context.setSelectedValue(local.value);\n    };\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuItemBase, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        role: \"menuitemradio\",\n        get checked () {\n            return context.isSelectedValue(local.value);\n        },\n        onSelect\n    }, others));\n}\nfunction MenuRoot(props) {\n    const defaultId = `menu-${(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueId)()}`;\n    props = mergeDefaultProps({\n        id: defaultId,\n        modal: true,\n        preventScroll: false\n    }, props);\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"id\",\n        \"modal\",\n        \"preventScroll\",\n        \"forceMount\",\n        \"open\",\n        \"defaultOpen\",\n        \"onOpenChange\"\n    ]);\n    const disclosureState = createDisclosureState({\n        open: ()=>local.open,\n        defaultOpen: ()=>local.defaultOpen,\n        onOpenChange: (isOpen)=>local.onOpenChange?.(isOpen)\n    });\n    const context = {\n        isModal: ()=>local.modal ?? true,\n        preventScroll: ()=>local.preventScroll ?? false,\n        forceMount: ()=>local.forceMount ?? false,\n        generateId: createGenerateId(()=>local.id)\n    };\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuRootContext.Provider, {\n        value: context,\n        get children () {\n            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Menu, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                get open () {\n                    return disclosureState.isOpen();\n                },\n                get onOpenChange () {\n                    return disclosureState.setIsOpen;\n                }\n            }, others));\n        }\n    });\n}\nfunction MenuSub(props) {\n    const { direction } = useLocale();\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Menu, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        get placement () {\n            return direction() === \"rtl\" ? \"left-start\" : \"right-start\";\n        },\n        flip: true\n    }, props));\n}\nvar SUB_CLOSE_KEYS = {\n    ltr: [\n        \"ArrowLeft\"\n    ],\n    rtl: [\n        \"ArrowRight\"\n    ]\n};\nfunction MenuSubContent(props) {\n    const context = useMenuContext();\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"onFocusOutside\",\n        \"onKeyDown\",\n        \"onFocusOut\"\n    ]);\n    const { direction } = useLocale();\n    const onOpenAutoFocus = (e2)=>{\n        e2.preventDefault();\n    };\n    const onCloseAutoFocus = (e2)=>{\n        e2.preventDefault();\n    };\n    const onFocusOutside = (e2)=>{\n        local.onFocusOutside?.(e2);\n        const target = e2.target;\n        if (!contains(context.triggerRef(), target)) {\n            context.close();\n        }\n    };\n    const onKeyDown = (e2)=>{\n        callHandler(e2, local.onKeyDown);\n        const isKeyDownInside = contains(e2.currentTarget, e2.target);\n        const isCloseKey = SUB_CLOSE_KEYS[direction()].includes(e2.key);\n        const isSubMenu = context.parentMenuContext() != null;\n        if (isKeyDownInside && isCloseKey && isSubMenu) {\n            context.close();\n            focusWithoutScrolling(context.triggerRef());\n        }\n    };\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuContentBase, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        onOpenAutoFocus,\n        onCloseAutoFocus,\n        onFocusOutside,\n        onKeyDown\n    }, others));\n}\nvar SELECTION_KEYS = [\n    \"Enter\",\n    \" \"\n];\nvar SUB_OPEN_KEYS = {\n    ltr: [\n        ...SELECTION_KEYS,\n        \"ArrowRight\"\n    ],\n    rtl: [\n        ...SELECTION_KEYS,\n        \"ArrowLeft\"\n    ]\n};\nfunction MenuSubTrigger(props) {\n    let ref;\n    const rootContext = useMenuRootContext();\n    const context = useMenuContext();\n    props = mergeDefaultProps({\n        id: rootContext.generateId(`sub-trigger-${(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueId)()}`)\n    }, props);\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"ref\",\n        \"id\",\n        \"textValue\",\n        \"disabled\",\n        \"onPointerMove\",\n        \"onPointerLeave\",\n        \"onPointerDown\",\n        \"onPointerUp\",\n        \"onClick\",\n        \"onKeyDown\",\n        \"onMouseDown\",\n        \"onFocus\"\n    ]);\n    let openTimeoutId = null;\n    const clearOpenTimeout = ()=>{\n        if (_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.isServer) {\n            return;\n        }\n        if (openTimeoutId) {\n            window.clearTimeout(openTimeoutId);\n        }\n        openTimeoutId = null;\n    };\n    const { direction } = useLocale();\n    const key = ()=>local.id;\n    const parentSelectionManager = ()=>{\n        const parentMenuContext = context.parentMenuContext();\n        if (parentMenuContext == null) {\n            throw new Error(\"[kobalte]: `Menu.SubTrigger` must be used within a `Menu.Sub` component\");\n        }\n        return parentMenuContext.listState().selectionManager();\n    };\n    const collection = ()=>context.listState().collection();\n    const isHighlighted = ()=>parentSelectionManager().focusedKey() === key();\n    const selectableItem = createSelectableItem({\n        key,\n        selectionManager: parentSelectionManager,\n        shouldSelectOnPressUp: true,\n        allowsDifferentPressOrigin: true,\n        disabled: ()=>local.disabled\n    }, ()=>ref);\n    const onClick = (e2)=>{\n        callHandler(e2, local.onClick);\n        if (!context.isOpen() && !local.disabled) {\n            context.open(true);\n        }\n    };\n    const onPointerMove = (e2)=>{\n        callHandler(e2, local.onPointerMove);\n        if (e2.pointerType !== \"mouse\") {\n            return;\n        }\n        const parentMenuContext = context.parentMenuContext();\n        parentMenuContext?.onItemEnter(e2);\n        if (e2.defaultPrevented) {\n            return;\n        }\n        if (local.disabled) {\n            parentMenuContext?.onItemLeave(e2);\n            return;\n        }\n        if (!context.isOpen() && !openTimeoutId) {\n            context.parentMenuContext()?.setPointerGraceIntent(null);\n            openTimeoutId = window.setTimeout(()=>{\n                context.open(false);\n                clearOpenTimeout();\n            }, 100);\n        }\n        parentMenuContext?.onItemEnter(e2);\n        if (!e2.defaultPrevented) {\n            if (context.listState().selectionManager().isFocused()) {\n                context.listState().selectionManager().setFocused(false);\n                context.listState().selectionManager().setFocusedKey(void 0);\n            }\n            focusWithoutScrolling(e2.currentTarget);\n            parentMenuContext?.listState().selectionManager().setFocused(true);\n            parentMenuContext?.listState().selectionManager().setFocusedKey(key());\n        }\n    };\n    const onPointerLeave = (e2)=>{\n        callHandler(e2, local.onPointerLeave);\n        if (e2.pointerType !== \"mouse\") {\n            return;\n        }\n        clearOpenTimeout();\n        const parentMenuContext = context.parentMenuContext();\n        const contentEl = context.contentRef();\n        if (contentEl) {\n            parentMenuContext?.setPointerGraceIntent({\n                area: getPointerGraceArea(context.currentPlacement(), e2, contentEl),\n                // Safe because sub menu always open \"left\" or \"right\".\n                side: context.currentPlacement().split(\"-\")[0]\n            });\n            window.clearTimeout(parentMenuContext?.pointerGraceTimeoutId());\n            const pointerGraceTimeoutId = window.setTimeout(()=>{\n                parentMenuContext?.setPointerGraceIntent(null);\n            }, 300);\n            parentMenuContext?.setPointerGraceTimeoutId(pointerGraceTimeoutId);\n        } else {\n            parentMenuContext?.onTriggerLeave(e2);\n            if (e2.defaultPrevented) {\n                return;\n            }\n            parentMenuContext?.setPointerGraceIntent(null);\n        }\n        parentMenuContext?.onItemLeave(e2);\n    };\n    const onKeyDown = (e2)=>{\n        callHandler(e2, local.onKeyDown);\n        if (e2.repeat) {\n            return;\n        }\n        if (local.disabled) {\n            return;\n        }\n        if (SUB_OPEN_KEYS[direction()].includes(e2.key)) {\n            e2.stopPropagation();\n            e2.preventDefault();\n            parentSelectionManager().setFocused(false);\n            parentSelectionManager().setFocusedKey(void 0);\n            if (!context.isOpen()) {\n                context.open(\"first\");\n            }\n            context.focusContent();\n            context.listState().selectionManager().setFocused(true);\n            context.listState().selectionManager().setFocusedKey(collection().getFirstKey());\n        }\n    };\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (context.registerItemToParentDomCollection == null) {\n            throw new Error(\"[kobalte]: `Menu.SubTrigger` must be used within a `Menu.Sub` component\");\n        }\n        const unregister = context.registerItemToParentDomCollection({\n            ref: ()=>ref,\n            type: \"item\",\n            key: key(),\n            textValue: local.textValue ?? ref?.textContent ?? \"\",\n            disabled: local.disabled ?? false\n        });\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(unregister);\n    });\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)((0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.on)(()=>context.parentMenuContext()?.pointerGraceTimeoutId(), (pointerGraceTimer)=>{\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            window.clearTimeout(pointerGraceTimer);\n            context.parentMenuContext()?.setPointerGraceIntent(null);\n        });\n    }));\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(context.registerTriggerId(local.id)));\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n        clearOpenTimeout();\n    });\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"div\",\n        ref (r$) {\n            const _ref$ = mergeRefs((el)=>{\n                context.setTriggerRef(el);\n                ref = el;\n            }, local.ref);\n            typeof _ref$ === \"function\" && _ref$(r$);\n        },\n        get id () {\n            return local.id;\n        },\n        role: \"menuitem\",\n        get tabIndex () {\n            return selectableItem.tabIndex();\n        },\n        \"aria-haspopup\": \"true\",\n        get [\"aria-expanded\"] () {\n            return context.isOpen();\n        },\n        get [\"aria-controls\"] () {\n            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>!!context.isOpen())() ? context.contentId() : void 0;\n        },\n        get [\"aria-disabled\"] () {\n            return local.disabled;\n        },\n        get [\"data-key\"] () {\n            return selectableItem.dataKey();\n        },\n        get [\"data-highlighted\"] () {\n            return isHighlighted() ? \"\" : void 0;\n        },\n        get [\"data-disabled\"] () {\n            return local.disabled ? \"\" : void 0;\n        },\n        get onPointerDown () {\n            return composeEventHandlers([\n                local.onPointerDown,\n                selectableItem.onPointerDown\n            ]);\n        },\n        get onPointerUp () {\n            return composeEventHandlers([\n                local.onPointerUp,\n                selectableItem.onPointerUp\n            ]);\n        },\n        get onClick () {\n            return composeEventHandlers([\n                onClick,\n                selectableItem.onClick\n            ]);\n        },\n        get onKeyDown () {\n            return composeEventHandlers([\n                onKeyDown,\n                selectableItem.onKeyDown\n            ]);\n        },\n        get onMouseDown () {\n            return composeEventHandlers([\n                local.onMouseDown,\n                selectableItem.onMouseDown\n            ]);\n        },\n        get onFocus () {\n            return composeEventHandlers([\n                local.onFocus,\n                selectableItem.onFocus\n            ]);\n        },\n        onPointerMove,\n        onPointerLeave\n    }, ()=>context.dataset(), others));\n}\nfunction MenuTrigger(props) {\n    const rootContext = useMenuRootContext();\n    const context = useMenuContext();\n    props = mergeDefaultProps({\n        id: rootContext.generateId(\"trigger\")\n    }, props);\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"ref\",\n        \"id\",\n        \"disabled\",\n        \"onPointerDown\",\n        \"onClick\",\n        \"onKeyDown\"\n    ]);\n    const onPointerDown = (e2)=>{\n        callHandler(e2, local.onPointerDown);\n        e2.currentTarget.dataset.pointerType = e2.pointerType;\n        if (!local.disabled && e2.pointerType !== \"touch\" && e2.button === 0) {\n            context.toggle(true);\n        }\n    };\n    const onClick = (e2)=>{\n        callHandler(e2, local.onClick);\n        if (!local.disabled && e2.currentTarget.dataset.pointerType === \"touch\") {\n            context.toggle(true);\n        }\n    };\n    const onKeyDown = (e2)=>{\n        callHandler(e2, local.onKeyDown);\n        if (local.disabled) {\n            return;\n        }\n        switch(e2.key){\n            case \"Enter\":\n            case \" \":\n            case \"ArrowDown\":\n                e2.stopPropagation();\n                e2.preventDefault();\n                context.toggle(\"first\");\n                break;\n            case \"ArrowUp\":\n                e2.stopPropagation();\n                e2.preventDefault();\n                context.toggle(\"last\");\n                break;\n        }\n    };\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(context.registerTriggerId(local.id)));\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ButtonRoot, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        ref (r$) {\n            const _ref$ = mergeRefs(context.setTriggerRef, local.ref);\n            typeof _ref$ === \"function\" && _ref$(r$);\n        },\n        get id () {\n            return local.id;\n        },\n        get disabled () {\n            return local.disabled;\n        },\n        \"aria-haspopup\": \"true\",\n        get [\"aria-expanded\"] () {\n            return context.isOpen();\n        },\n        get [\"aria-controls\"] () {\n            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>!!context.isOpen())() ? context.contentId() : void 0;\n        },\n        onPointerDown,\n        onClick,\n        onKeyDown\n    }, ()=>context.dataset(), others));\n}\nfunction SeparatorRoot(props) {\n    let ref;\n    props = mergeDefaultProps({\n        orientation: \"horizontal\"\n    }, props);\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"ref\",\n        \"orientation\"\n    ]);\n    const tagName = createTagName(()=>ref, ()=>\"hr\");\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"hr\",\n        ref (r$) {\n            const _ref$ = mergeRefs((el)=>ref = el, local.ref);\n            typeof _ref$ === \"function\" && _ref$(r$);\n        },\n        get role () {\n            return tagName() !== \"hr\" ? \"separator\" : void 0;\n        },\n        get [\"aria-orientation\"] () {\n            return local.orientation === \"vertical\" ? \"vertical\" : void 0;\n        },\n        get [\"data-orientation\"] () {\n            return local.orientation;\n        }\n    }, others));\n}\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nnew $d6fd23bc337660df$export$64839e615120df17({\n    ach: {\n        year: \"mwaka\",\n        month: \"dwe\",\n        day: \"nino\"\n    },\n    af: {\n        year: \"jjjj\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    am: {\n        year: \"ዓዓዓዓ\",\n        month: \"ሚሜ\",\n        day: \"ቀቀ\"\n    },\n    an: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    ar: {\n        year: \"سنة\",\n        month: \"شهر\",\n        day: \"يوم\"\n    },\n    ast: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    az: {\n        year: \"iiii\",\n        month: \"aa\",\n        day: \"gg\"\n    },\n    be: {\n        year: \"гггг\",\n        month: \"мм\",\n        day: \"дд\"\n    },\n    bg: {\n        year: \"гггг\",\n        month: \"мм\",\n        day: \"дд\"\n    },\n    bn: {\n        year: \"yyyy\",\n        month: \"মিমি\",\n        day: \"dd\"\n    },\n    br: {\n        year: \"bbbb\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    bs: {\n        year: \"gggg\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    ca: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    cak: {\n        year: \"jjjj\",\n        month: \"ii\",\n        day: \"q'q'\"\n    },\n    ckb: {\n        year: \"ساڵ\",\n        month: \"مانگ\",\n        day: \"ڕۆژ\"\n    },\n    cs: {\n        year: \"rrrr\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    cy: {\n        year: \"bbbb\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    da: {\n        year: \"\\xe5\\xe5\\xe5\\xe5\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    de: {\n        year: \"jjjj\",\n        month: \"mm\",\n        day: \"tt\"\n    },\n    dsb: {\n        year: \"llll\",\n        month: \"mm\",\n        day: \"źź\"\n    },\n    el: {\n        year: \"εεεε\",\n        month: \"μμ\",\n        day: \"ηη\"\n    },\n    en: {\n        year: \"yyyy\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    eo: {\n        year: \"jjjj\",\n        month: \"mm\",\n        day: \"tt\"\n    },\n    es: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    et: {\n        year: \"aaaa\",\n        month: \"kk\",\n        day: \"pp\"\n    },\n    eu: {\n        year: \"uuuu\",\n        month: \"hh\",\n        day: \"ee\"\n    },\n    fa: {\n        year: \"سال\",\n        month: \"ماه\",\n        day: \"روز\"\n    },\n    ff: {\n        year: \"hhhh\",\n        month: \"ll\",\n        day: \"\\xf1\\xf1\"\n    },\n    fi: {\n        year: \"vvvv\",\n        month: \"kk\",\n        day: \"pp\"\n    },\n    fr: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"jj\"\n    },\n    fy: {\n        year: \"jjjj\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    ga: {\n        year: \"bbbb\",\n        month: \"mm\",\n        day: \"ll\"\n    },\n    gd: {\n        year: \"bbbb\",\n        month: \"mm\",\n        day: \"ll\"\n    },\n    gl: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    he: {\n        year: \"שנה\",\n        month: \"חודש\",\n        day: \"יום\"\n    },\n    hr: {\n        year: \"gggg\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    hsb: {\n        year: \"llll\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    hu: {\n        year: \"\\xe9\\xe9\\xe9\\xe9\",\n        month: \"hh\",\n        day: \"nn\"\n    },\n    ia: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    id: {\n        year: \"tttt\",\n        month: \"bb\",\n        day: \"hh\"\n    },\n    it: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"gg\"\n    },\n    ja: {\n        year: \" 年 \",\n        month: \"月\",\n        day: \"日\"\n    },\n    ka: {\n        year: \"წწწწ\",\n        month: \"თთ\",\n        day: \"რრ\"\n    },\n    kk: {\n        year: \"жжжж\",\n        month: \"аа\",\n        day: \"кк\"\n    },\n    kn: {\n        year: \"ವವವವ\",\n        month: \"ಮಿಮೀ\",\n        day: \"ದಿದಿ\"\n    },\n    ko: {\n        year: \"연도\",\n        month: \"월\",\n        day: \"일\"\n    },\n    lb: {\n        year: \"jjjj\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    lo: {\n        year: \"ປປປປ\",\n        month: \"ດດ\",\n        day: \"ວວ\"\n    },\n    lt: {\n        year: \"mmmm\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    lv: {\n        year: \"gggg\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    meh: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    ml: {\n        year: \"വർഷം\",\n        month: \"മാസം\",\n        day: \"തീയതി\"\n    },\n    ms: {\n        year: \"tttt\",\n        month: \"mm\",\n        day: \"hh\"\n    },\n    nl: {\n        year: \"jjjj\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    nn: {\n        year: \"\\xe5\\xe5\\xe5\\xe5\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    no: {\n        year: \"\\xe5\\xe5\\xe5\\xe5\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    oc: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"jj\"\n    },\n    pl: {\n        year: \"rrrr\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    pt: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    rm: {\n        year: \"oooo\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    ro: {\n        year: \"aaaa\",\n        month: \"ll\",\n        day: \"zz\"\n    },\n    ru: {\n        year: \"гггг\",\n        month: \"мм\",\n        day: \"дд\"\n    },\n    sc: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    scn: {\n        year: \"aaaa\",\n        month: \"mm\",\n        day: \"jj\"\n    },\n    sk: {\n        year: \"rrrr\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    sl: {\n        year: \"llll\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    sr: {\n        year: \"гггг\",\n        month: \"мм\",\n        day: \"дд\"\n    },\n    sv: {\n        year: \"\\xe5\\xe5\\xe5\\xe5\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    szl: {\n        year: \"rrrr\",\n        month: \"mm\",\n        day: \"dd\"\n    },\n    tg: {\n        year: \"сссс\",\n        month: \"мм\",\n        day: \"рр\"\n    },\n    th: {\n        year: \"ปปปป\",\n        month: \"ดด\",\n        day: \"วว\"\n    },\n    tr: {\n        year: \"yyyy\",\n        month: \"aa\",\n        day: \"gg\"\n    },\n    uk: {\n        year: \"рррр\",\n        month: \"мм\",\n        day: \"дд\"\n    },\n    \"zh-CN\": {\n        year: \"年\",\n        month: \"月\",\n        day: \"日\"\n    },\n    \"zh-TW\": {\n        year: \"年\",\n        month: \"月\",\n        day: \"日\"\n    }\n}, \"en\");\nfunction DropdownMenuContent(props) {\n    const rootContext = useMenuRootContext();\n    const context = useMenuContext();\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"onCloseAutoFocus\",\n        \"onInteractOutside\"\n    ]);\n    let hasInteractedOutside = false;\n    const onCloseAutoFocus = (e2)=>{\n        local.onCloseAutoFocus?.(e2);\n        if (!hasInteractedOutside) {\n            focusWithoutScrolling(context.triggerRef());\n        }\n        hasInteractedOutside = false;\n        e2.preventDefault();\n    };\n    const onInteractOutside = (e2)=>{\n        local.onInteractOutside?.(e2);\n        if (!rootContext.isModal() || e2.detail.isContextMenu) {\n            hasInteractedOutside = true;\n        }\n    };\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuContent, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        onCloseAutoFocus,\n        onInteractOutside\n    }, others));\n}\nfunction DropdownMenuRoot(props) {\n    const defaultId = `dropdownmenu-${(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueId)()}`;\n    props = mergeDefaultProps({\n        id: defaultId\n    }, props);\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MenuRoot, props);\n}\nvar index$f = /* @__PURE__ */ Object.freeze({\n    __proto__: null,\n    Arrow: PopperArrow,\n    CheckboxItem: MenuCheckboxItem,\n    Content: DropdownMenuContent,\n    Group: MenuGroup,\n    GroupLabel: MenuGroupLabel,\n    Icon: MenuIcon,\n    Item: MenuItem,\n    ItemDescription: MenuItemDescription,\n    ItemIndicator: MenuItemIndicator,\n    ItemLabel: MenuItemLabel,\n    Portal: MenuPortal,\n    RadioGroup: MenuRadioGroup,\n    RadioItem: MenuRadioItem,\n    Root: DropdownMenuRoot,\n    Separator: SeparatorRoot,\n    Sub: MenuSub,\n    SubContent: MenuSubContent,\n    SubTrigger: MenuSubTrigger,\n    Trigger: MenuTrigger\n});\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nvar RadioGroupContext = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useRadioGroupContext() {\n    const context = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(RadioGroupContext);\n    if (context === void 0) {\n        throw new Error(\"[kobalte]: `useRadioGroupContext` must be used within a `RadioGroup` component\");\n    }\n    return context;\n}\nvar RadioGroupItemContext = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\nfunction useRadioGroupItemContext() {\n    const context = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(RadioGroupItemContext);\n    if (context === void 0) {\n        throw new Error(\"[kobalte]: `useRadioGroupItemContext` must be used within a `RadioGroup.Item` component\");\n    }\n    return context;\n}\nfunction RadioGroupItem(props) {\n    const formControlContext = useFormControlContext();\n    const radioGroupContext = useRadioGroupContext();\n    const defaultId = `${formControlContext.generateId(\"item\")}-${(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueId)()}`;\n    props = mergeDefaultProps({\n        id: defaultId\n    }, props);\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"value\",\n        \"disabled\",\n        \"onPointerDown\"\n    ]);\n    const [inputId, setInputId] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [labelId, setLabelId] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [descriptionId, setDescriptionId] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [inputRef, setInputRef] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)();\n    const [isFocused, setIsFocused] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(false);\n    const isSelected = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return radioGroupContext.isSelectedValue(local.value);\n    });\n    const isDisabled = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return local.disabled || formControlContext.isDisabled() || false;\n    });\n    const onPointerDown = (e2)=>{\n        callHandler(e2, local.onPointerDown);\n        if (isFocused()) {\n            e2.preventDefault();\n        }\n    };\n    const dataset = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>({\n            ...formControlContext.dataset(),\n            \"data-disabled\": isDisabled() ? \"\" : void 0,\n            \"data-checked\": isSelected() ? \"\" : void 0\n        }));\n    const context = {\n        value: ()=>local.value,\n        dataset,\n        isSelected,\n        isDisabled,\n        inputId,\n        labelId,\n        descriptionId,\n        inputRef,\n        select: ()=>radioGroupContext.setSelectedValue(local.value),\n        generateId: createGenerateId(()=>others.id),\n        registerInput: createRegisterId(setInputId),\n        registerLabel: createRegisterId(setLabelId),\n        registerDescription: createRegisterId(setDescriptionId),\n        setIsFocused,\n        setInputRef\n    };\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(RadioGroupItemContext.Provider, {\n        value: context,\n        get children () {\n            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                as: \"div\",\n                role: \"group\",\n                onPointerDown\n            }, dataset, others));\n        }\n    });\n}\nfunction RadioGroupItemControl(props) {\n    const context = useRadioGroupItemContext();\n    props = mergeDefaultProps({\n        id: context.generateId(\"control\")\n    }, props);\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"onClick\",\n        \"onKeyDown\"\n    ]);\n    const onClick = (e2)=>{\n        callHandler(e2, local.onClick);\n        context.select();\n        context.inputRef()?.focus();\n    };\n    const onKeyDown = (e2)=>{\n        callHandler(e2, local.onKeyDown);\n        if (e2.key === EventKey.Space) {\n            context.select();\n            context.inputRef()?.focus();\n        }\n    };\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"div\",\n        onClick,\n        onKeyDown\n    }, ()=>context.dataset(), others));\n}\nfunction RadioGroupItemDescription(props) {\n    const context = useRadioGroupItemContext();\n    props = mergeDefaultProps({\n        id: context.generateId(\"description\")\n    }, props);\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(context.registerDescription(props.id)));\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"div\"\n    }, ()=>context.dataset(), props));\n}\nfunction RadioGroupItemIndicator(props) {\n    const context = useRadioGroupItemContext();\n    props = mergeDefaultProps({\n        id: context.generateId(\"indicator\")\n    }, props);\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"ref\",\n        \"forceMount\"\n    ]);\n    const presence = createPresence(()=>local.forceMount || context.isSelected());\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n        get when () {\n            return presence.isPresent();\n        },\n        get children () {\n            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                as: \"div\",\n                ref (r$) {\n                    const _ref$ = mergeRefs(presence.setRef, local.ref);\n                    typeof _ref$ === \"function\" && _ref$(r$);\n                }\n            }, ()=>context.dataset(), others));\n        }\n    });\n}\nvar _tmpl$$7 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<input type=\"radio\">`);\nfunction RadioGroupItemInput(props) {\n    const formControlContext = useFormControlContext();\n    const radioGroupContext = useRadioGroupContext();\n    const radioContext = useRadioGroupItemContext();\n    props = mergeDefaultProps({\n        id: radioContext.generateId(\"input\")\n    }, props);\n    const [local, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"ref\",\n        \"style\",\n        \"aria-labelledby\",\n        \"aria-describedby\",\n        \"onChange\",\n        \"onFocus\",\n        \"onBlur\"\n    ]);\n    const ariaLabelledBy = ()=>{\n        return [\n            local[\"aria-labelledby\"],\n            radioContext.labelId(),\n            // If there is both an aria-label and aria-labelledby, add the input itself has an aria-labelledby\n            local[\"aria-labelledby\"] != null && others[\"aria-label\"] != null ? others.id : void 0\n        ].filter(Boolean).join(\" \") || void 0;\n    };\n    const ariaDescribedBy = ()=>{\n        return [\n            local[\"aria-describedby\"],\n            radioContext.descriptionId(),\n            radioGroupContext.ariaDescribedBy()\n        ].filter(Boolean).join(\" \") || void 0;\n    };\n    const onChange = (e2)=>{\n        callHandler(e2, local.onChange);\n        e2.stopPropagation();\n        radioGroupContext.setSelectedValue(radioContext.value());\n        const target = e2.target;\n        target.checked = radioContext.isSelected();\n    };\n    const onFocus = (e2)=>{\n        callHandler(e2, local.onFocus);\n        radioContext.setIsFocused(true);\n    };\n    const onBlur = (e2)=>{\n        callHandler(e2, local.onBlur);\n        radioContext.setIsFocused(false);\n    };\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(radioContext.registerInput(others.id)));\n    return (()=>{\n        const _el$ = _tmpl$$7();\n        _el$.addEventListener(\"blur\", onBlur);\n        _el$.addEventListener(\"focus\", onFocus);\n        _el$.addEventListener(\"change\", onChange);\n        const _ref$ = mergeRefs(radioContext.setInputRef, local.ref);\n        typeof _ref$ === \"function\" && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.use)(_ref$, _el$);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.spread)(_el$, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n            get name () {\n                return formControlContext.name();\n            },\n            get value () {\n                return radioContext.value();\n            },\n            get checked () {\n                return radioContext.isSelected();\n            },\n            get required () {\n                return formControlContext.isRequired();\n            },\n            get disabled () {\n                return radioContext.isDisabled();\n            },\n            get readonly () {\n                return formControlContext.isReadOnly();\n            },\n            get style () {\n                return {\n                    ...visuallyHiddenStyles,\n                    ...local.style\n                };\n            },\n            get [\"aria-labelledby\"] () {\n                return ariaLabelledBy();\n            },\n            get [\"aria-describedby\"] () {\n                return ariaDescribedBy();\n            }\n        }, ()=>radioContext.dataset(), others), false, false);\n        return _el$;\n    })();\n}\nvar _tmpl$$6 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<label>`);\nfunction RadioGroupItemLabel(props) {\n    const context = useRadioGroupItemContext();\n    props = mergeDefaultProps({\n        id: context.generateId(\"label\")\n    }, props);\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(context.registerLabel(props.id)));\n    return (()=>{\n        const _el$ = _tmpl$$6();\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.spread)(_el$, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n            get [\"for\"] () {\n                return context.inputId();\n            }\n        }, ()=>context.dataset(), props), false, false);\n        return _el$;\n    })();\n}\nfunction RadioGroupLabel(props) {\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(FormControlLabel, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n        as: \"span\"\n    }, props));\n}\nfunction RadioGroupRoot(props) {\n    let ref;\n    const defaultId = `radiogroup-${(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueId)()}`;\n    props = mergeDefaultProps({\n        id: defaultId,\n        orientation: \"vertical\"\n    }, props);\n    const [local, formControlProps, others] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"ref\",\n        \"value\",\n        \"defaultValue\",\n        \"onChange\",\n        \"orientation\",\n        \"aria-labelledby\",\n        \"aria-describedby\"\n    ], FORM_CONTROL_PROP_NAMES);\n    const [selected, setSelected] = createControllableSignal({\n        value: ()=>local.value,\n        defaultValue: ()=>local.defaultValue,\n        onChange: (value)=>local.onChange?.(value)\n    });\n    const { formControlContext } = createFormControl(formControlProps);\n    createFormResetListener(()=>ref, ()=>setSelected(local.defaultValue ?? \"\"));\n    const ariaLabelledBy = ()=>{\n        return formControlContext.getAriaLabelledBy(access(formControlProps.id), others[\"aria-label\"], local[\"aria-labelledby\"]);\n    };\n    const ariaDescribedBy = ()=>{\n        return formControlContext.getAriaDescribedBy(local[\"aria-describedby\"]);\n    };\n    const isSelectedValue = (value)=>{\n        return value === selected();\n    };\n    const context = {\n        ariaDescribedBy,\n        isSelectedValue,\n        setSelectedValue: (value)=>{\n            if (formControlContext.isReadOnly() || formControlContext.isDisabled()) {\n                return;\n            }\n            setSelected(value);\n            ref?.querySelectorAll(\"[type='radio']\").forEach((el)=>{\n                const radio = el;\n                radio.checked = isSelectedValue(radio.value);\n            });\n        }\n    };\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(FormControlContext.Provider, {\n        value: formControlContext,\n        get children () {\n            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(RadioGroupContext.Provider, {\n                value: context,\n                get children () {\n                    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Polymorphic, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                        as: \"div\",\n                        ref (r$) {\n                            const _ref$ = mergeRefs((el)=>ref = el, local.ref);\n                            typeof _ref$ === \"function\" && _ref$(r$);\n                        },\n                        role: \"radiogroup\",\n                        get id () {\n                            return access(formControlProps.id);\n                        },\n                        get [\"aria-invalid\"] () {\n                            return formControlContext.validationState() === \"invalid\" || void 0;\n                        },\n                        get [\"aria-required\"] () {\n                            return formControlContext.isRequired() || void 0;\n                        },\n                        get [\"aria-disabled\"] () {\n                            return formControlContext.isDisabled() || void 0;\n                        },\n                        get [\"aria-readonly\"] () {\n                            return formControlContext.isReadOnly() || void 0;\n                        },\n                        get [\"aria-orientation\"] () {\n                            return local.orientation;\n                        },\n                        get [\"aria-labelledby\"] () {\n                            return ariaLabelledBy();\n                        },\n                        get [\"aria-describedby\"] () {\n                            return ariaDescribedBy();\n                        }\n                    }, ()=>formControlContext.dataset(), others));\n                }\n            });\n        }\n    });\n}\nvar index$9 = /* @__PURE__ */ Object.freeze({\n    __proto__: null,\n    Description: FormControlDescription,\n    ErrorMessage: FormControlErrorMessage,\n    Item: RadioGroupItem,\n    ItemControl: RadioGroupItemControl,\n    ItemDescription: RadioGroupItemDescription,\n    ItemIndicator: RadioGroupItemIndicator,\n    ItemInput: RadioGroupItemInput,\n    ItemLabel: RadioGroupItemLabel,\n    Label: RadioGroupLabel,\n    Root: RadioGroupRoot\n});\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.delegateEvents)([\n    \"focusin\",\n    \"focusout\",\n    \"pointermove\"\n]);\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.delegateEvents)([\n    \"keydown\",\n    \"pointerdown\",\n    \"pointermove\",\n    \"pointerup\"\n]);\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)();\n// src/theme.ts\nvar ShadowVariants = {\n    xs: \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n    sm: \"0 1px 3px 0 color, 0 1px 2px -1px color\",\n    md: \"0 4px 6px -1px color, 0 2px 4px -2px color\",\n    lg: \"0 10px 15px -3px color, 0 4px 6px -4px color\",\n    xl: \"0 20px 25px -5px color, 0 8px 10px -6px color\",\n    \"2xl\": \"0 25px 50px -12px color\",\n    inner: \"inset 0 2px 4px 0 color\",\n    none: \"none\"\n};\nvar getShadow = (variant, color = \"\")=>{\n    return ShadowVariants[variant].replace(/color/g, color);\n};\nvar Shadow = {\n    xs: (color = \"rgb(0 0 0 / 0.1)\")=>getShadow(\"xs\", color),\n    sm: (color = \"rgb(0 0 0 / 0.1)\")=>getShadow(\"sm\", color),\n    md: (color = \"rgb(0 0 0 / 0.1)\")=>getShadow(\"md\", color),\n    lg: (color = \"rgb(0 0 0 / 0.1)\")=>getShadow(\"lg\", color),\n    xl: (color = \"rgb(0 0 0 / 0.1)\")=>getShadow(\"xl\", color),\n    \"2xl\": (color = \"rgb(0 0 0 / 0.25)\")=>getShadow(\"2xl\", color),\n    inner: (color = \"rgb(0 0 0 / 0.05)\")=>getShadow(\"inner\", color),\n    none: ()=>getShadow(\"none\")\n};\nvar tokens = {\n    colors: {\n        inherit: \"inherit\",\n        current: \"currentColor\",\n        transparent: \"transparent\",\n        black: \"#000000\",\n        white: \"#ffffff\",\n        neutral: {\n            50: \"#f9fafb\",\n            100: \"#f2f4f7\",\n            200: \"#eaecf0\",\n            300: \"#d0d5dd\",\n            400: \"#98a2b3\",\n            500: \"#667085\",\n            600: \"#475467\",\n            700: \"#344054\",\n            800: \"#1d2939\",\n            900: \"#101828\"\n        },\n        darkGray: {\n            50: \"#525c7a\",\n            100: \"#49536e\",\n            200: \"#414962\",\n            300: \"#394056\",\n            400: \"#313749\",\n            500: \"#292e3d\",\n            600: \"#212530\",\n            700: \"#191c24\",\n            800: \"#111318\",\n            900: \"#0b0d10\"\n        },\n        gray: {\n            50: \"#f9fafb\",\n            100: \"#f2f4f7\",\n            200: \"#eaecf0\",\n            300: \"#d0d5dd\",\n            400: \"#98a2b3\",\n            500: \"#667085\",\n            600: \"#475467\",\n            700: \"#344054\",\n            800: \"#1d2939\",\n            900: \"#101828\"\n        },\n        blue: {\n            25: \"#F5FAFF\",\n            50: \"#EFF8FF\",\n            100: \"#D1E9FF\",\n            200: \"#B2DDFF\",\n            300: \"#84CAFF\",\n            400: \"#53B1FD\",\n            500: \"#2E90FA\",\n            600: \"#1570EF\",\n            700: \"#175CD3\",\n            800: \"#1849A9\",\n            900: \"#194185\"\n        },\n        green: {\n            25: \"#F6FEF9\",\n            50: \"#ECFDF3\",\n            100: \"#D1FADF\",\n            200: \"#A6F4C5\",\n            300: \"#6CE9A6\",\n            400: \"#32D583\",\n            500: \"#12B76A\",\n            600: \"#039855\",\n            700: \"#027A48\",\n            800: \"#05603A\",\n            900: \"#054F31\"\n        },\n        red: {\n            50: \"#fef2f2\",\n            100: \"#fee2e2\",\n            200: \"#fecaca\",\n            300: \"#fca5a5\",\n            400: \"#f87171\",\n            500: \"#ef4444\",\n            600: \"#dc2626\",\n            700: \"#b91c1c\",\n            800: \"#991b1b\",\n            900: \"#7f1d1d\",\n            950: \"#450a0a\"\n        },\n        yellow: {\n            25: \"#FFFCF5\",\n            50: \"#FFFAEB\",\n            100: \"#FEF0C7\",\n            200: \"#FEDF89\",\n            300: \"#FEC84B\",\n            400: \"#FDB022\",\n            500: \"#F79009\",\n            600: \"#DC6803\",\n            700: \"#B54708\",\n            800: \"#93370D\",\n            900: \"#7A2E0E\"\n        },\n        purple: {\n            25: \"#FAFAFF\",\n            50: \"#F4F3FF\",\n            100: \"#EBE9FE\",\n            200: \"#D9D6FE\",\n            300: \"#BDB4FE\",\n            400: \"#9B8AFB\",\n            500: \"#7A5AF8\",\n            600: \"#6938EF\",\n            700: \"#5925DC\",\n            800: \"#4A1FB8\",\n            900: \"#3E1C96\"\n        },\n        teal: {\n            25: \"#F6FEFC\",\n            50: \"#F0FDF9\",\n            100: \"#CCFBEF\",\n            200: \"#99F6E0\",\n            300: \"#5FE9D0\",\n            400: \"#2ED3B7\",\n            500: \"#15B79E\",\n            600: \"#0E9384\",\n            700: \"#107569\",\n            800: \"#125D56\",\n            900: \"#134E48\"\n        },\n        pink: {\n            25: \"#fdf2f8\",\n            50: \"#fce7f3\",\n            100: \"#fbcfe8\",\n            200: \"#f9a8d4\",\n            300: \"#f472b6\",\n            400: \"#ec4899\",\n            500: \"#db2777\",\n            600: \"#be185d\",\n            700: \"#9d174d\",\n            800: \"#831843\",\n            900: \"#500724\"\n        },\n        cyan: {\n            25: \"#ecfeff\",\n            50: \"#cffafe\",\n            100: \"#a5f3fc\",\n            200: \"#67e8f9\",\n            300: \"#22d3ee\",\n            400: \"#06b6d4\",\n            500: \"#0891b2\",\n            600: \"#0e7490\",\n            700: \"#155e75\",\n            800: \"#164e63\",\n            900: \"#083344\"\n        }\n    },\n    alpha: {\n        100: \"ff\",\n        90: \"e5\",\n        80: \"cc\",\n        70: \"b3\",\n        60: \"99\",\n        50: \"80\",\n        40: \"66\",\n        30: \"4d\",\n        20: \"33\",\n        10: \"1a\",\n        0: \"00\"\n    },\n    font: {\n        size: {\n            \"2xs\": \"calc(var(--tsqd-font-size) * 0.625)\",\n            xs: \"calc(var(--tsqd-font-size) * 0.75)\",\n            sm: \"calc(var(--tsqd-font-size) * 0.875)\",\n            md: \"var(--tsqd-font-size)\",\n            lg: \"calc(var(--tsqd-font-size) * 1.125)\",\n            xl: \"calc(var(--tsqd-font-size) * 1.25)\",\n            \"2xl\": \"calc(var(--tsqd-font-size) * 1.5)\",\n            \"3xl\": \"calc(var(--tsqd-font-size) * 1.875)\",\n            \"4xl\": \"calc(var(--tsqd-font-size) * 2.25)\",\n            \"5xl\": \"calc(var(--tsqd-font-size) * 3)\",\n            \"6xl\": \"calc(var(--tsqd-font-size) * 3.75)\",\n            \"7xl\": \"calc(var(--tsqd-font-size) * 4.5)\",\n            \"8xl\": \"calc(var(--tsqd-font-size) * 6)\",\n            \"9xl\": \"calc(var(--tsqd-font-size) * 8)\"\n        },\n        lineHeight: {\n            xs: \"calc(var(--tsqd-font-size) * 1)\",\n            sm: \"calc(var(--tsqd-font-size) * 1.25)\",\n            md: \"calc(var(--tsqd-font-size) * 1.5)\",\n            lg: \"calc(var(--tsqd-font-size) * 1.75)\",\n            xl: \"calc(var(--tsqd-font-size) * 2)\",\n            \"2xl\": \"calc(var(--tsqd-font-size) * 2.25)\",\n            \"3xl\": \"calc(var(--tsqd-font-size) * 2.5)\",\n            \"4xl\": \"calc(var(--tsqd-font-size) * 2.75)\",\n            \"5xl\": \"calc(var(--tsqd-font-size) * 3)\",\n            \"6xl\": \"calc(var(--tsqd-font-size) * 3.25)\",\n            \"7xl\": \"calc(var(--tsqd-font-size) * 3.5)\",\n            \"8xl\": \"calc(var(--tsqd-font-size) * 3.75)\",\n            \"9xl\": \"calc(var(--tsqd-font-size) * 4)\"\n        },\n        weight: {\n            thin: \"100\",\n            extralight: \"200\",\n            light: \"300\",\n            normal: \"400\",\n            medium: \"500\",\n            semibold: \"600\",\n            bold: \"700\",\n            extrabold: \"800\",\n            black: \"900\"\n        }\n    },\n    breakpoints: {\n        xs: \"320px\",\n        sm: \"640px\",\n        md: \"768px\",\n        lg: \"1024px\",\n        xl: \"1280px\",\n        \"2xl\": \"1536px\"\n    },\n    border: {\n        radius: {\n            none: \"0px\",\n            xs: \"calc(var(--tsqd-font-size) * 0.125)\",\n            sm: \"calc(var(--tsqd-font-size) * 0.25)\",\n            md: \"calc(var(--tsqd-font-size) * 0.375)\",\n            lg: \"calc(var(--tsqd-font-size) * 0.5)\",\n            xl: \"calc(var(--tsqd-font-size) * 0.75)\",\n            \"2xl\": \"calc(var(--tsqd-font-size) * 1)\",\n            \"3xl\": \"calc(var(--tsqd-font-size) * 1.5)\",\n            full: \"9999px\"\n        }\n    },\n    size: {\n        0: \"0px\",\n        0.25: \"calc(var(--tsqd-font-size) * 0.0625)\",\n        0.5: \"calc(var(--tsqd-font-size) * 0.125)\",\n        1: \"calc(var(--tsqd-font-size) * 0.25)\",\n        1.5: \"calc(var(--tsqd-font-size) * 0.375)\",\n        2: \"calc(var(--tsqd-font-size) * 0.5)\",\n        2.5: \"calc(var(--tsqd-font-size) * 0.625)\",\n        3: \"calc(var(--tsqd-font-size) * 0.75)\",\n        3.5: \"calc(var(--tsqd-font-size) * 0.875)\",\n        4: \"calc(var(--tsqd-font-size) * 1)\",\n        4.5: \"calc(var(--tsqd-font-size) * 1.125)\",\n        5: \"calc(var(--tsqd-font-size) * 1.25)\",\n        5.5: \"calc(var(--tsqd-font-size) * 1.375)\",\n        6: \"calc(var(--tsqd-font-size) * 1.5)\",\n        6.5: \"calc(var(--tsqd-font-size) * 1.625)\",\n        7: \"calc(var(--tsqd-font-size) * 1.75)\",\n        8: \"calc(var(--tsqd-font-size) * 2)\",\n        9: \"calc(var(--tsqd-font-size) * 2.25)\",\n        10: \"calc(var(--tsqd-font-size) * 2.5)\",\n        11: \"calc(var(--tsqd-font-size) * 2.75)\",\n        12: \"calc(var(--tsqd-font-size) * 3)\",\n        14: \"calc(var(--tsqd-font-size) * 3.5)\",\n        16: \"calc(var(--tsqd-font-size) * 4)\",\n        20: \"calc(var(--tsqd-font-size) * 5)\",\n        24: \"calc(var(--tsqd-font-size) * 6)\",\n        28: \"calc(var(--tsqd-font-size) * 7)\",\n        32: \"calc(var(--tsqd-font-size) * 8)\",\n        36: \"calc(var(--tsqd-font-size) * 9)\",\n        40: \"calc(var(--tsqd-font-size) * 10)\",\n        44: \"calc(var(--tsqd-font-size) * 11)\",\n        48: \"calc(var(--tsqd-font-size) * 12)\",\n        52: \"calc(var(--tsqd-font-size) * 13)\",\n        56: \"calc(var(--tsqd-font-size) * 14)\",\n        60: \"calc(var(--tsqd-font-size) * 15)\",\n        64: \"calc(var(--tsqd-font-size) * 16)\",\n        72: \"calc(var(--tsqd-font-size) * 18)\",\n        80: \"calc(var(--tsqd-font-size) * 20)\",\n        96: \"calc(var(--tsqd-font-size) * 24)\"\n    },\n    shadow: Shadow,\n    zIndices: {\n        hide: -1,\n        auto: \"auto\",\n        base: 0,\n        docked: 10,\n        dropdown: 1e3,\n        sticky: 1100,\n        banner: 1200,\n        overlay: 1300,\n        modal: 1400,\n        popover: 1500,\n        skipLink: 1600,\n        toast: 1700,\n        tooltip: 1800\n    }\n};\n// src/icons/index.tsx\nvar _tmpl$ = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=14 height=14 viewBox=\"0 0 14 14\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M13 13L9.00007 9M10.3333 5.66667C10.3333 8.244 8.244 10.3333 5.66667 10.3333C3.08934 10.3333 1 8.244 1 5.66667C1 3.08934 3.08934 1 5.66667 1C8.244 1 10.3333 3.08934 10.3333 5.66667Z\"stroke=currentColor stroke-width=1.66667 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$2 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=24 height=24 viewBox=\"0 0 24 24\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M9 3H15M3 6H21M19 6L18.2987 16.5193C18.1935 18.0975 18.1409 18.8867 17.8 19.485C17.4999 20.0118 17.0472 20.4353 16.5017 20.6997C15.882 21 15.0911 21 13.5093 21H10.4907C8.90891 21 8.11803 21 7.49834 20.6997C6.95276 20.4353 6.50009 20.0118 6.19998 19.485C5.85911 18.8867 5.8065 18.0975 5.70129 16.5193L5 6M10 10.5V15.5M14 10.5V15.5\"stroke=currentColor stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$3 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=10 height=6 viewBox=\"0 0 10 6\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M1 1L5 5L9 1\"stroke=currentColor stroke-width=1.66667 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$4 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=12 height=12 viewBox=\"0 0 16 16\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M8 13.3333V2.66667M8 2.66667L4 6.66667M8 2.66667L12 6.66667\"stroke=currentColor stroke-width=1.66667 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$5 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=12 height=12 viewBox=\"0 0 16 16\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M8 2.66667V13.3333M8 13.3333L4 9.33333M8 13.3333L12 9.33333\"stroke=currentColor stroke-width=1.66667 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$6 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg viewBox=\"0 0 24 24\"height=12 width=12 fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M12 2v2m0 16v2M4 12H2m4.314-5.686L4.9 4.9m12.786 1.414L19.1 4.9M6.314 17.69 4.9 19.104m12.786-1.414 1.414 1.414M22 12h-2m-3 0a5 5 0 1 1-10 0 5 5 0 0 1 10 0Z\"stroke=currentColor stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$7 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg viewBox=\"0 0 24 24\"height=12 width=12 fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M22 15.844a10.424 10.424 0 0 1-4.306.925c-5.779 0-10.463-4.684-10.463-10.462 0-1.536.33-2.994.925-4.307A10.464 10.464 0 0 0 2 11.538C2 17.316 6.684 22 12.462 22c4.243 0 7.896-2.526 9.538-6.156Z\"stroke=currentColor stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$8 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg viewBox=\"0 0 24 24\"height=12 width=12 fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M8 21h8m-4-4v4m-5.2-4h10.4c1.68 0 2.52 0 3.162-.327a3 3 0 0 0 1.311-1.311C22 14.72 22 13.88 22 12.2V7.8c0-1.68 0-2.52-.327-3.162a3 3 0 0 0-1.311-1.311C19.72 3 18.88 3 17.2 3H6.8c-1.68 0-2.52 0-3.162.327a3 3 0 0 0-1.311 1.311C2 5.28 2 6.12 2 7.8v4.4c0 1.68 0 2.52.327 3.162a3 3 0 0 0 1.311 1.311C4.28 17 5.12 17 6.8 17Z\"stroke=currentColor stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$9 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg stroke=currentColor fill=currentColor stroke-width=0 viewBox=\"0 0 24 24\"height=1em width=1em xmlns=http://www.w3.org/2000/svg><path fill=none d=\"M0 0h24v24H0z\"></path><path d=\"M1 9l2 2c4.97-4.97 13.03-4.97 18 0l2-2C16.93 2.93 7.08 2.93 1 9zm8 8l3 3 3-3a4.237 4.237 0 00-6 0zm-4-4l2 2a7.074 7.074 0 0110 0l2-2C15.14 9.14 8.87 9.14 5 13z\">`);\nvar _tmpl$10 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg stroke-width=0 viewBox=\"0 0 24 24\"height=1em width=1em xmlns=http://www.w3.org/2000/svg><path fill=none d=\"M24 .01c0-.01 0-.01 0 0L0 0v24h24V.01zM0 0h24v24H0V0zm0 0h24v24H0V0z\"></path><path d=\"M22.99 9C19.15 5.16 13.8 3.76 8.84 4.78l2.52 2.52c3.47-.17 6.99 1.05 9.63 3.7l2-2zm-4 4a9.793 9.793 0 00-4.49-2.56l3.53 3.53.96-.97zM2 3.05L5.07 6.1C3.6 6.82 2.22 7.78 1 9l1.99 2c1.24-1.24 2.67-2.16 4.2-2.77l2.24 2.24A9.684 9.684 0 005 13v.01L6.99 15a7.042 7.042 0 014.92-2.06L18.98 20l1.27-1.26L3.29 1.79 2 3.05zM9 17l3 3 3-3a4.237 4.237 0 00-6 0z\">`);\nvar _tmpl$11 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=24 height=24 viewBox=\"0 0 24 24\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M9.3951 19.3711L9.97955 20.6856C10.1533 21.0768 10.4368 21.4093 10.7958 21.6426C11.1547 21.8759 11.5737 22.0001 12.0018 22C12.4299 22.0001 12.8488 21.8759 13.2078 21.6426C13.5667 21.4093 13.8503 21.0768 14.024 20.6856L14.6084 19.3711C14.8165 18.9047 15.1664 18.5159 15.6084 18.26C16.0532 18.0034 16.5678 17.8941 17.0784 17.9478L18.5084 18.1C18.9341 18.145 19.3637 18.0656 19.7451 17.8713C20.1265 17.6771 20.4434 17.3763 20.6573 17.0056C20.8715 16.635 20.9735 16.2103 20.9511 15.7829C20.9286 15.3555 20.7825 14.9438 20.5307 14.5978L19.684 13.4344C19.3825 13.0171 19.2214 12.5148 19.224 12C19.2239 11.4866 19.3865 10.9864 19.6884 10.5711L20.5351 9.40778C20.787 9.06175 20.933 8.65007 20.9555 8.22267C20.978 7.79528 20.8759 7.37054 20.6618 7C20.4479 6.62923 20.131 6.32849 19.7496 6.13423C19.3681 5.93997 18.9386 5.86053 18.5129 5.90556L17.0829 6.05778C16.5722 6.11141 16.0577 6.00212 15.6129 5.74556C15.17 5.48825 14.82 5.09736 14.6129 4.62889L14.024 3.31444C13.8503 2.92317 13.5667 2.59072 13.2078 2.3574C12.8488 2.12408 12.4299 1.99993 12.0018 2C11.5737 1.99993 11.1547 2.12408 10.7958 2.3574C10.4368 2.59072 10.1533 2.92317 9.97955 3.31444L9.3951 4.62889C9.18803 5.09736 8.83798 5.48825 8.3951 5.74556C7.95032 6.00212 7.43577 6.11141 6.9251 6.05778L5.49066 5.90556C5.06499 5.86053 4.6354 5.93997 4.25397 6.13423C3.87255 6.32849 3.55567 6.62923 3.34177 7C3.12759 7.37054 3.02555 7.79528 3.04804 8.22267C3.07052 8.65007 3.21656 9.06175 3.46844 9.40778L4.3151 10.5711C4.61704 10.9864 4.77964 11.4866 4.77955 12C4.77964 12.5134 4.61704 13.0137 4.3151 13.4289L3.46844 14.5922C3.21656 14.9382 3.07052 15.3499 3.04804 15.7773C3.02555 16.2047 3.12759 16.6295 3.34177 17C3.55589 17.3706 3.8728 17.6712 4.25417 17.8654C4.63554 18.0596 5.06502 18.1392 5.49066 18.0944L6.92066 17.9422C7.43133 17.8886 7.94587 17.9979 8.39066 18.2544C8.83519 18.511 9.18687 18.902 9.3951 19.3711Z\"stroke=currentColor stroke-width=2 stroke-linecap=round stroke-linejoin=round></path><path d=\"M12 15C13.6568 15 15 13.6569 15 12C15 10.3431 13.6568 9 12 9C10.3431 9 8.99998 10.3431 8.99998 12C8.99998 13.6569 10.3431 15 12 15Z\"stroke=currentColor stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$12 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=24 height=24 viewBox=\"0 0 24 24\"fill=none xmlns=http://www.w3.org/2000/svg><path class=copier d=\"M8 8V5.2C8 4.0799 8 3.51984 8.21799 3.09202C8.40973 2.71569 8.71569 2.40973 9.09202 2.21799C9.51984 2 10.0799 2 11.2 2H18.8C19.9201 2 20.4802 2 20.908 2.21799C21.2843 2.40973 21.5903 2.71569 21.782 3.09202C22 3.51984 22 4.0799 22 5.2V12.8C22 13.9201 22 14.4802 21.782 14.908C21.5903 15.2843 21.2843 15.5903 20.908 15.782C20.4802 16 19.9201 16 18.8 16H16M5.2 22H12.8C13.9201 22 14.4802 22 14.908 21.782C15.2843 21.5903 15.5903 21.2843 15.782 20.908C16 20.4802 16 19.9201 16 18.8V11.2C16 10.0799 16 9.51984 15.782 9.09202C15.5903 8.71569 15.2843 8.40973 14.908 8.21799C14.4802 8 13.9201 8 12.8 8H5.2C4.0799 8 3.51984 8 3.09202 8.21799C2.71569 8.40973 2.40973 8.71569 2.21799 9.09202C2 9.51984 2 10.0799 2 11.2V18.8C2 19.9201 2 20.4802 2.21799 20.908C2.40973 21.2843 2.71569 21.5903 3.09202 21.782C3.51984 22 4.07989 22 5.2 22Z\"stroke-width=2 stroke-linecap=round stroke-linejoin=round stroke=currentColor>`);\nvar _tmpl$13 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=24 height=24 viewBox=\"0 0 24 24\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M7.5 12L10.5 15L16.5 9M7.8 21H16.2C17.8802 21 18.7202 21 19.362 20.673C19.9265 20.3854 20.3854 19.9265 20.673 19.362C21 18.7202 21 17.8802 21 16.2V7.8C21 6.11984 21 5.27976 20.673 4.63803C20.3854 4.07354 19.9265 3.6146 19.362 3.32698C18.7202 3 17.8802 3 16.2 3H7.8C6.11984 3 5.27976 3 4.63803 3.32698C4.07354 3.6146 3.6146 4.07354 3.32698 4.63803C3 5.27976 3 6.11984 3 7.8V16.2C3 17.8802 3 18.7202 3.32698 19.362C3.6146 19.9265 4.07354 20.3854 4.63803 20.673C5.27976 21 6.11984 21 7.8 21Z\"stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$14 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=24 height=24 viewBox=\"0 0 24 24\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M9 9L15 15M15 9L9 15M7.8 21H16.2C17.8802 21 18.7202 21 19.362 20.673C19.9265 20.3854 20.3854 19.9265 20.673 19.362C21 18.7202 21 17.8802 21 16.2V7.8C21 6.11984 21 5.27976 20.673 4.63803C20.3854 4.07354 19.9265 3.6146 19.362 3.32698C18.7202 3 17.8802 3 16.2 3H7.8C6.11984 3 5.27976 3 4.63803 3.32698C4.07354 3.6146 3.6146 4.07354 3.32698 4.63803C3 5.27976 3 6.11984 3 7.8V16.2C3 17.8802 3 18.7202 3.32698 19.362C3.6146 19.9265 4.07354 20.3854 4.63803 20.673C5.27976 21 6.11984 21 7.8 21Z\"stroke=#F04438 stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$15 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=24 height=24 viewBox=\"0 0 24 24\"fill=none stroke=currentColor stroke-width=2 xmlns=http://www.w3.org/2000/svg><rect class=list width=20 height=20 y=2 x=2 rx=2></rect><line class=list-item y1=7 y2=7 x1=6 x2=18></line><line class=list-item y2=12 y1=12 x1=6 x2=18></line><line class=list-item y1=17 y2=17 x1=6 x2=18>`);\nvar _tmpl$16 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg viewBox=\"0 0 24 24\"height=20 width=20 fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M3 7.8c0-1.68 0-2.52.327-3.162a3 3 0 0 1 1.311-1.311C5.28 3 6.12 3 7.8 3h8.4c1.68 0 2.52 0 3.162.327a3 3 0 0 1 1.311 1.311C21 5.28 21 6.12 21 7.8v8.4c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C18.72 21 17.88 21 16.2 21H7.8c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C3 18.72 3 17.88 3 16.2V7.8Z\"stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$17 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=14 height=14 viewBox=\"0 0 24 24\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M7.5 12L10.5 15L16.5 9M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12Z\"stroke=currentColor stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$18 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=14 height=14 viewBox=\"0 0 24 24\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M12 2V6M12 18V22M6 12H2M22 12H18M19.0784 19.0784L16.25 16.25M19.0784 4.99994L16.25 7.82837M4.92157 19.0784L7.75 16.25M4.92157 4.99994L7.75 7.82837\"stroke=currentColor stroke-width=2 stroke-linecap=round stroke-linejoin=round></path><animateTransform attributeName=transform attributeType=XML type=rotate from=0 to=360 dur=2s repeatCount=indefinite>`);\nvar _tmpl$19 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=14 height=14 viewBox=\"0 0 24 24\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M15 9L9 15M9 9L15 15M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12Z\"stroke=currentColor stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$20 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg width=14 height=14 viewBox=\"0 0 24 24\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M9.5 15V9M14.5 15V9M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12Z\"stroke=currentColor stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$21 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<svg version=1.0 viewBox=\"0 0 633 633\"><linearGradient x1=-666.45 x2=-666.45 y1=163.28 y2=163.99 gradientTransform=\"matrix(633 0 0 633 422177 -103358)\"gradientUnits=userSpaceOnUse><stop stop-color=#6BDAFF offset=0></stop><stop stop-color=#F9FFB5 offset=.32></stop><stop stop-color=#FFA770 offset=.71></stop><stop stop-color=#FF7373 offset=1></stop></linearGradient><circle cx=316.5 cy=316.5 r=316.5></circle><defs><filter x=-137.5 y=412 width=454 height=396.9 filterUnits=userSpaceOnUse><feColorMatrix values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0\"></feColorMatrix></filter></defs><mask x=-137.5 y=412 width=454 height=396.9 maskUnits=userSpaceOnUse><g><circle cx=316.5 cy=316.5 r=316.5 fill=#fff></circle></g></mask><g><ellipse cx=89.5 cy=610.5 rx=214.5 ry=186 fill=#015064 stroke=#00CFE2 stroke-width=25></ellipse></g><defs><filter x=316.5 y=412 width=454 height=396.9 filterUnits=userSpaceOnUse><feColorMatrix values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0\"></feColorMatrix></filter></defs><mask x=316.5 y=412 width=454 height=396.9 maskUnits=userSpaceOnUse><g><circle cx=316.5 cy=316.5 r=316.5 fill=#fff></circle></g></mask><g><ellipse cx=543.5 cy=610.5 rx=214.5 ry=186 fill=#015064 stroke=#00CFE2 stroke-width=25></ellipse></g><defs><filter x=-137.5 y=450 width=454 height=396.9 filterUnits=userSpaceOnUse><feColorMatrix values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0\"></feColorMatrix></filter></defs><mask x=-137.5 y=450 width=454 height=396.9 maskUnits=userSpaceOnUse><g><circle cx=316.5 cy=316.5 r=316.5 fill=#fff></circle></g></mask><g><ellipse cx=89.5 cy=648.5 rx=214.5 ry=186 fill=#015064 stroke=#00A8B8 stroke-width=25></ellipse></g><defs><filter x=316.5 y=450 width=454 height=396.9 filterUnits=userSpaceOnUse><feColorMatrix values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0\"></feColorMatrix></filter></defs><mask x=316.5 y=450 width=454 height=396.9 maskUnits=userSpaceOnUse><g><circle cx=316.5 cy=316.5 r=316.5 fill=#fff></circle></g></mask><g><ellipse cx=543.5 cy=648.5 rx=214.5 ry=186 fill=#015064 stroke=#00A8B8 stroke-width=25></ellipse></g><defs><filter x=-137.5 y=486 width=454 height=396.9 filterUnits=userSpaceOnUse><feColorMatrix values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0\"></feColorMatrix></filter></defs><mask x=-137.5 y=486 width=454 height=396.9 maskUnits=userSpaceOnUse><g><circle cx=316.5 cy=316.5 r=316.5 fill=#fff></circle></g></mask><g><ellipse cx=89.5 cy=684.5 rx=214.5 ry=186 fill=#015064 stroke=#007782 stroke-width=25></ellipse></g><defs><filter x=316.5 y=486 width=454 height=396.9 filterUnits=userSpaceOnUse><feColorMatrix values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0\"></feColorMatrix></filter></defs><mask x=316.5 y=486 width=454 height=396.9 maskUnits=userSpaceOnUse><g><circle cx=316.5 cy=316.5 r=316.5 fill=#fff></circle></g></mask><g><ellipse cx=543.5 cy=684.5 rx=214.5 ry=186 fill=#015064 stroke=#007782 stroke-width=25></ellipse></g><defs><filter x=272.2 y=308 width=176.9 height=129.3 filterUnits=userSpaceOnUse><feColorMatrix values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0\"></feColorMatrix></filter></defs><mask x=272.2 y=308 width=176.9 height=129.3 maskUnits=userSpaceOnUse><g><circle cx=316.5 cy=316.5 r=316.5 fill=#fff></circle></g></mask><g><line x1=436 x2=431 y1=403.2 y2=431.8 fill=none stroke=#000 stroke-linecap=round stroke-linejoin=bevel stroke-width=11></line><line x1=291 x2=280 y1=341.5 y2=403.5 fill=none stroke=#000 stroke-linecap=round stroke-linejoin=bevel stroke-width=11></line><line x1=332.9 x2=328.6 y1=384.1 y2=411.2 fill=none stroke=#000 stroke-linecap=round stroke-linejoin=bevel stroke-width=11></line><linearGradient x1=-670.75 x2=-671.59 y1=164.4 y2=164.49 gradientTransform=\"matrix(-184.16 -32.472 -11.461 64.997 -121359 -32126)\"gradientUnits=userSpaceOnUse><stop stop-color=#EE2700 offset=0></stop><stop stop-color=#FF008E offset=1></stop></linearGradient><path d=\"m344.1 363 97.7 17.2c5.8 2.1 8.2 6.1 7.1 12.1s-4.7 9.2-11 9.9l-106-18.7-57.5-59.2c-3.2-4.8-2.9-9.1 0.8-12.8s8.3-4.4 13.7-2.1l55.2 53.6z\"clip-rule=evenodd fill-rule=evenodd></path><line x1=428.2 x2=429.1 y1=384.5 y2=378 fill=none stroke=#fff stroke-linecap=round stroke-linejoin=bevel stroke-width=7></line><line x1=395.2 x2=396.1 y1=379.5 y2=373 fill=none stroke=#fff stroke-linecap=round stroke-linejoin=bevel stroke-width=7></line><line x1=362.2 x2=363.1 y1=373.5 y2=367.4 fill=none stroke=#fff stroke-linecap=round stroke-linejoin=bevel stroke-width=7></line><line x1=324.2 x2=328.4 y1=351.3 y2=347.4 fill=none stroke=#fff stroke-linecap=round stroke-linejoin=bevel stroke-width=7></line><line x1=303.2 x2=307.4 y1=331.3 y2=327.4 fill=none stroke=#fff stroke-linecap=round stroke-linejoin=bevel stroke-width=7></line></g><defs><filter x=73.2 y=113.8 width=280.6 height=317.4 filterUnits=userSpaceOnUse><feColorMatrix values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0\"></feColorMatrix></filter></defs><mask x=73.2 y=113.8 width=280.6 height=317.4 maskUnits=userSpaceOnUse><g><circle cx=316.5 cy=316.5 r=316.5 fill=#fff></circle></g></mask><g><linearGradient x1=-672.16 x2=-672.16 y1=165.03 y2=166.03 gradientTransform=\"matrix(-100.18 48.861 97.976 200.88 -83342 -93.059)\"gradientUnits=userSpaceOnUse><stop stop-color=#A17500 offset=0></stop><stop stop-color=#5D2100 offset=1></stop></linearGradient><path d=\"m192.3 203c8.1 37.3 14 73.6 17.8 109.1 3.8 35.4 2.8 75.1-3 119.2l61.2-16.7c-15.6-59-25.2-97.9-28.6-116.6s-10.8-51.9-22.1-99.6l-25.3 4.6\"clip-rule=evenodd fill-rule=evenodd></path><g stroke=#2F8A00><linearGradient x1=-660.23 x2=-660.23 y1=166.72 y2=167.72 gradientTransform=\"matrix(92.683 4.8573 -2.0259 38.657 61680 -3088.6)\"gradientUnits=userSpaceOnUse><stop stop-color=#2F8A00 offset=0></stop><stop stop-color=#90FF57 offset=1></stop></linearGradient><path d=\"m195 183.9s-12.6-22.1-36.5-29.9c-15.9-5.2-34.4-1.5-55.5 11.1 15.9 14.3 29.5 22.6 40.7 24.9 16.8 3.6 51.3-6.1 51.3-6.1z\"clip-rule=evenodd fill-rule=evenodd stroke-width=13></path><linearGradient x1=-661.36 x2=-661.36 y1=164.18 y2=165.18 gradientTransform=\"matrix(110 5.7648 -6.3599 121.35 73933 -15933)\"gradientUnits=userSpaceOnUse><stop stop-color=#2F8A00 offset=0></stop><stop stop-color=#90FF57 offset=1></stop></linearGradient><path d=\"m194.9 184.5s-47.5-8.5-83.2 15.7c-23.8 16.2-34.3 49.3-31.6 99.4 30.3-27.8 52.1-48.5 65.2-61.9 19.8-20.2 49.6-53.2 49.6-53.2z\"clip-rule=evenodd fill-rule=evenodd stroke-width=13></path><linearGradient x1=-656.79 x2=-656.79 y1=165.15 y2=166.15 gradientTransform=\"matrix(62.954 3.2993 -3.5023 66.828 42156 -8754.1)\"gradientUnits=userSpaceOnUse><stop stop-color=#2F8A00 offset=0></stop><stop stop-color=#90FF57 offset=1></stop></linearGradient><path d=\"m195 183.9c-0.8-21.9 6-38 20.6-48.2s29.8-15.4 45.5-15.3c-6.1 21.4-14.5 35.8-25.2 43.4s-24.4 14.2-40.9 20.1z\"clip-rule=evenodd fill-rule=evenodd stroke-width=13></path><linearGradient x1=-663.07 x2=-663.07 y1=165.44 y2=166.44 gradientTransform=\"matrix(152.47 7.9907 -3.0936 59.029 101884 -4318.7)\"gradientUnits=userSpaceOnUse><stop stop-color=#2F8A00 offset=0></stop><stop stop-color=#90FF57 offset=1></stop></linearGradient><path d=\"m194.9 184.5c31.9-30 64.1-39.7 96.7-29s50.8 30.4 54.6 59.1c-35.2-5.5-60.4-9.6-75.8-12.1-15.3-2.6-40.5-8.6-75.5-18z\"clip-rule=evenodd fill-rule=evenodd stroke-width=13></path><linearGradient x1=-662.57 x2=-662.57 y1=164.44 y2=165.44 gradientTransform=\"matrix(136.46 7.1517 -5.2163 99.533 91536 -11442)\"gradientUnits=userSpaceOnUse><stop stop-color=#2F8A00 offset=0></stop><stop stop-color=#90FF57 offset=1></stop></linearGradient><path d=\"m194.9 184.5c35.8-7.6 65.6-0.2 89.2 22s37.7 49 42.3 80.3c-39.8-9.7-68.3-23.8-85.5-42.4s-32.5-38.5-46-59.9z\"clip-rule=evenodd fill-rule=evenodd stroke-width=13></path><linearGradient x1=-656.43 x2=-656.43 y1=163.86 y2=164.86 gradientTransform=\"matrix(60.866 3.1899 -8.7773 167.48 41560 -25168)\"gradientUnits=userSpaceOnUse><stop stop-color=#2F8A00 offset=0></stop><stop stop-color=#90FF57 offset=1></stop></linearGradient><path d=\"m194.9 184.5c-33.6 13.8-53.6 35.7-60.1 65.6s-3.6 63.1 8.7 99.6c27.4-40.3 43.2-69.6 47.4-88s5.6-44.1 4-77.2z\"clip-rule=evenodd fill-rule=evenodd stroke-width=13></path><path d=\"m196.5 182.3c-14.8 21.6-25.1 41.4-30.8 59.4s-9.5 33-11.1 45.1\"fill=none stroke-linecap=round stroke-width=8></path><path d=\"m194.9 185.7c-24.4 1.7-43.8 9-58.1 21.8s-24.7 25.4-31.3 37.8\"fill=none stroke-linecap=round stroke-width=8></path><path d=\"m204.5 176.4c29.7-6.7 52-8.4 67-5.1s26.9 8.6 35.8 15.9\"fill=none stroke-linecap=round stroke-width=8></path><path d=\"m196.5 181.4c20.3 9.9 38.2 20.5 53.9 31.9s27.4 22.1 35.1 32\"fill=none stroke-linecap=round stroke-width=8></path></g></g><defs><filter x=50.5 y=399 width=532 height=633 filterUnits=userSpaceOnUse><feColorMatrix values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0\"></feColorMatrix></filter></defs><mask x=50.5 y=399 width=532 height=633 maskUnits=userSpaceOnUse><g><circle cx=316.5 cy=316.5 r=316.5 fill=#fff></circle></g></mask><g><linearGradient x1=-666.06 x2=-666.23 y1=163.36 y2=163.75 gradientTransform=\"matrix(532 0 0 633 354760 -102959)\"gradientUnits=userSpaceOnUse><stop stop-color=#FFF400 offset=0></stop><stop stop-color=#3C8700 offset=1></stop></linearGradient><ellipse cx=316.5 cy=715.5 rx=266 ry=316.5></ellipse></g><defs><filter x=391 y=-24 width=288 height=283 filterUnits=userSpaceOnUse><feColorMatrix values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0\"></feColorMatrix></filter></defs><mask x=391 y=-24 width=288 height=283 maskUnits=userSpaceOnUse><g><circle cx=316.5 cy=316.5 r=316.5 fill=#fff></circle></g></mask><g><linearGradient x1=-664.56 x2=-664.56 y1=163.79 y2=164.79 gradientTransform=\"matrix(227 0 0 227 151421 -37204)\"gradientUnits=userSpaceOnUse><stop stop-color=#FFDF00 offset=0></stop><stop stop-color=#FF9D00 offset=1></stop></linearGradient><circle cx=565.5 cy=89.5 r=113.5></circle><linearGradient x1=-644.5 x2=-645.77 y1=342 y2=342 gradientTransform=\"matrix(30 0 0 1 19770 -253)\"gradientUnits=userSpaceOnUse><stop stop-color=#FFA400 offset=0></stop><stop stop-color=#FF5E00 offset=1></stop></linearGradient><line x1=427 x2=397 y1=89 y2=89 fill=none stroke-linecap=round stroke-linejoin=bevel stroke-width=12></line><linearGradient x1=-641.56 x2=-642.83 y1=196.02 y2=196.07 gradientTransform=\"matrix(26.5 0 0 5.5 17439 -1025.5)\"gradientUnits=userSpaceOnUse><stop stop-color=#FFA400 offset=0></stop><stop stop-color=#FF5E00 offset=1></stop></linearGradient><line x1=430.5 x2=404 y1=55.5 y2=50 fill=none stroke-linecap=round stroke-linejoin=bevel stroke-width=12></line><linearGradient x1=-643.73 x2=-645 y1=185.83 y2=185.9 gradientTransform=\"matrix(29 0 0 8 19107 -1361)\"gradientUnits=userSpaceOnUse><stop stop-color=#FFA400 offset=0></stop><stop stop-color=#FF5E00 offset=1></stop></linearGradient><line x1=431 x2=402 y1=122 y2=130 fill=none stroke-linecap=round stroke-linejoin=bevel stroke-width=12></line><linearGradient x1=-638.94 x2=-640.22 y1=177.09 y2=177.39 gradientTransform=\"matrix(24 0 0 13 15783 -2145)\"gradientUnits=userSpaceOnUse><stop stop-color=#FFA400 offset=0></stop><stop stop-color=#FF5E00 offset=1></stop></linearGradient><line x1=442 x2=418 y1=153 y2=166 fill=none stroke-linecap=round stroke-linejoin=bevel stroke-width=12></line><linearGradient x1=-633.42 x2=-634.7 y1=172.41 y2=173.31 gradientTransform=\"matrix(20 0 0 19 13137 -3096)\"gradientUnits=userSpaceOnUse><stop stop-color=#FFA400 offset=0></stop><stop stop-color=#FF5E00 offset=1></stop></linearGradient><line x1=464 x2=444 y1=180 y2=199 fill=none stroke-linecap=round stroke-linejoin=bevel stroke-width=12></line><linearGradient x1=-619.05 x2=-619.52 y1=170.82 y2=171.82 gradientTransform=\"matrix(13.83 0 0 22.85 9050 -3703.4)\"gradientUnits=userSpaceOnUse><stop stop-color=#FFA400 offset=0></stop><stop stop-color=#FF5E00 offset=1></stop></linearGradient><line x1=491.4 x2=477.5 y1=203 y2=225.9 fill=none stroke-linecap=round stroke-linejoin=bevel stroke-width=12></line><linearGradient x1=-578.5 x2=-578.63 y1=170.31 y2=171.31 gradientTransform=\"matrix(7.5 0 0 24.5 4860 -3953)\"gradientUnits=userSpaceOnUse><stop stop-color=#FFA400 offset=0></stop><stop stop-color=#FF5E00 offset=1></stop></linearGradient><line x1=524.5 x2=517 y1=219.5 y2=244 fill=none stroke-linecap=round stroke-linejoin=bevel stroke-width=12></line><linearGradient x1=666.5 x2=666.5 y1=170.31 y2=171.31 gradientTransform=\"matrix(.5 0 0 24.5 231.5 -3944)\"gradientUnits=userSpaceOnUse><stop stop-color=#FFA400 offset=0></stop><stop stop-color=#FF5E00 offset=1></stop></linearGradient><line x1=564.5 x2=565 y1=228.5 y2=253 fill=none stroke-linecap=round stroke-linejoin=bevel stroke-width=12>`);\nfunction Search() {\n    return _tmpl$();\n}\nfunction Trash() {\n    return _tmpl$2();\n}\nfunction ChevronDown() {\n    return _tmpl$3();\n}\nfunction ArrowUp() {\n    return _tmpl$4();\n}\nfunction ArrowDown() {\n    return _tmpl$5();\n}\nfunction ArrowLeft() {\n    return (()=>{\n        const _el$6 = _tmpl$5();\n        _el$6.style.setProperty(\"transform\", \"rotate(90deg)\");\n        return _el$6;\n    })();\n}\nfunction ArrowRight() {\n    return (()=>{\n        const _el$7 = _tmpl$5();\n        _el$7.style.setProperty(\"transform\", \"rotate(-90deg)\");\n        return _el$7;\n    })();\n}\nfunction Sun() {\n    return _tmpl$6();\n}\nfunction Moon() {\n    return _tmpl$7();\n}\nfunction Monitor() {\n    return _tmpl$8();\n}\nfunction Wifi() {\n    return _tmpl$9();\n}\nfunction Offline() {\n    return _tmpl$10();\n}\nfunction Settings() {\n    return _tmpl$11();\n}\nfunction Copier() {\n    return _tmpl$12();\n}\nfunction CopiedCopier(props) {\n    return (()=>{\n        const _el$15 = _tmpl$13(), _el$16 = _el$15.firstChild;\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$16, \"stroke\", props.theme === \"dark\" ? \"#12B76A\" : \"#027A48\"));\n        return _el$15;\n    })();\n}\nfunction ErrorCopier() {\n    return _tmpl$14();\n}\nfunction List() {\n    return _tmpl$15();\n}\nfunction Check(props) {\n    return [\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n            get when () {\n                return props.checked;\n            },\n            get children () {\n                const _el$19 = _tmpl$13(), _el$20 = _el$19.firstChild;\n                (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$20, \"stroke\", props.theme === \"dark\" ? \"#9B8AFB\" : \"#6938EF\"));\n                return _el$19;\n            }\n        }),\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n            get when () {\n                return !props.checked;\n            },\n            get children () {\n                const _el$21 = _tmpl$16(), _el$22 = _el$21.firstChild;\n                (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$22, \"stroke\", props.theme === \"dark\" ? \"#9B8AFB\" : \"#6938EF\"));\n                return _el$21;\n            }\n        })\n    ];\n}\nfunction CheckCircle() {\n    return _tmpl$17();\n}\nfunction LoadingCircle() {\n    return _tmpl$18();\n}\nfunction XCircle() {\n    return _tmpl$19();\n}\nfunction PauseCircle() {\n    return _tmpl$20();\n}\nfunction TanstackLogo() {\n    const id = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createUniqueId)();\n    return (()=>{\n        const _el$27 = _tmpl$21(), _el$28 = _el$27.firstChild, _el$29 = _el$28.nextSibling, _el$30 = _el$29.nextSibling, _el$31 = _el$30.firstChild, _el$32 = _el$30.nextSibling, _el$33 = _el$32.firstChild, _el$34 = _el$32.nextSibling, _el$35 = _el$34.nextSibling, _el$36 = _el$35.firstChild, _el$37 = _el$35.nextSibling, _el$38 = _el$37.firstChild, _el$39 = _el$37.nextSibling, _el$40 = _el$39.nextSibling, _el$41 = _el$40.firstChild, _el$42 = _el$40.nextSibling, _el$43 = _el$42.firstChild, _el$44 = _el$42.nextSibling, _el$45 = _el$44.nextSibling, _el$46 = _el$45.firstChild, _el$47 = _el$45.nextSibling, _el$48 = _el$47.firstChild, _el$49 = _el$47.nextSibling, _el$50 = _el$49.nextSibling, _el$51 = _el$50.firstChild, _el$52 = _el$50.nextSibling, _el$53 = _el$52.firstChild, _el$54 = _el$52.nextSibling, _el$55 = _el$54.nextSibling, _el$56 = _el$55.firstChild, _el$57 = _el$55.nextSibling, _el$58 = _el$57.firstChild, _el$59 = _el$57.nextSibling, _el$60 = _el$59.nextSibling, _el$61 = _el$60.firstChild, _el$62 = _el$60.nextSibling, _el$63 = _el$62.firstChild, _el$64 = _el$62.nextSibling, _el$65 = _el$64.firstChild, _el$66 = _el$65.nextSibling, _el$67 = _el$66.nextSibling, _el$68 = _el$67.nextSibling, _el$69 = _el$68.nextSibling, _el$70 = _el$64.nextSibling, _el$71 = _el$70.firstChild, _el$72 = _el$70.nextSibling, _el$73 = _el$72.firstChild, _el$74 = _el$72.nextSibling, _el$75 = _el$74.firstChild, _el$76 = _el$75.nextSibling, _el$77 = _el$76.nextSibling, _el$78 = _el$77.firstChild, _el$79 = _el$78.nextSibling, _el$80 = _el$79.nextSibling, _el$81 = _el$80.nextSibling, _el$82 = _el$81.nextSibling, _el$83 = _el$82.nextSibling, _el$84 = _el$83.nextSibling, _el$85 = _el$84.nextSibling, _el$86 = _el$85.nextSibling, _el$87 = _el$86.nextSibling, _el$88 = _el$87.nextSibling, _el$89 = _el$88.nextSibling, _el$90 = _el$74.nextSibling, _el$91 = _el$90.firstChild, _el$92 = _el$90.nextSibling, _el$93 = _el$92.firstChild, _el$94 = _el$92.nextSibling, _el$95 = _el$94.firstChild, _el$96 = _el$95.nextSibling, _el$97 = _el$94.nextSibling, _el$98 = _el$97.firstChild, _el$99 = _el$97.nextSibling, _el$100 = _el$99.firstChild, _el$101 = _el$99.nextSibling, _el$102 = _el$101.firstChild, _el$103 = _el$102.nextSibling, _el$104 = _el$103.nextSibling, _el$105 = _el$104.nextSibling, _el$106 = _el$105.nextSibling, _el$107 = _el$106.nextSibling, _el$108 = _el$107.nextSibling, _el$109 = _el$108.nextSibling, _el$110 = _el$109.nextSibling, _el$111 = _el$110.nextSibling, _el$112 = _el$111.nextSibling, _el$113 = _el$112.nextSibling, _el$114 = _el$113.nextSibling, _el$115 = _el$114.nextSibling, _el$116 = _el$115.nextSibling, _el$117 = _el$116.nextSibling, _el$118 = _el$117.nextSibling, _el$119 = _el$118.nextSibling;\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$28, \"id\", `a-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$29, \"fill\", `url(#a-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$31, \"id\", `am-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$32, \"id\", `b-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$33, \"filter\", `url(#am-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$34, \"mask\", `url(#b-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$36, \"id\", `ah-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$37, \"id\", `k-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$38, \"filter\", `url(#ah-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$39, \"mask\", `url(#k-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$41, \"id\", `ae-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$42, \"id\", `j-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$43, \"filter\", `url(#ae-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$44, \"mask\", `url(#j-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$46, \"id\", `ai-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$47, \"id\", `i-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$48, \"filter\", `url(#ai-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$49, \"mask\", `url(#i-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$51, \"id\", `aj-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$52, \"id\", `h-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$53, \"filter\", `url(#aj-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$54, \"mask\", `url(#h-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$56, \"id\", `ag-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$57, \"id\", `g-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$58, \"filter\", `url(#ag-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$59, \"mask\", `url(#g-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$61, \"id\", `af-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$62, \"id\", `f-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$63, \"filter\", `url(#af-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$64, \"mask\", `url(#f-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$68, \"id\", `m-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$69, \"fill\", `url(#m-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$71, \"id\", `ak-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$72, \"id\", `e-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$73, \"filter\", `url(#ak-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$74, \"mask\", `url(#e-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$75, \"id\", `n-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$76, \"fill\", `url(#n-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$78, \"id\", `r-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$79, \"fill\", `url(#r-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$80, \"id\", `s-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$81, \"fill\", `url(#s-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$82, \"id\", `q-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$83, \"fill\", `url(#q-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$84, \"id\", `p-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$85, \"fill\", `url(#p-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$86, \"id\", `o-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$87, \"fill\", `url(#o-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$88, \"id\", `l-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$89, \"fill\", `url(#l-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$91, \"id\", `al-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$92, \"id\", `d-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$93, \"filter\", `url(#al-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$94, \"mask\", `url(#d-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$95, \"id\", `u-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$96, \"fill\", `url(#u-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$98, \"id\", `ad-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$99, \"id\", `c-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$100, \"filter\", `url(#ad-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$101, \"mask\", `url(#c-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$102, \"id\", `t-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$103, \"fill\", `url(#t-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$104, \"id\", `v-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$105, \"stroke\", `url(#v-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$106, \"id\", `aa-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$107, \"stroke\", `url(#aa-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$108, \"id\", `w-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$109, \"stroke\", `url(#w-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$110, \"id\", `ac-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$111, \"stroke\", `url(#ac-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$112, \"id\", `ab-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$113, \"stroke\", `url(#ab-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$114, \"id\", `y-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$115, \"stroke\", `url(#y-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$116, \"id\", `x-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$117, \"stroke\", `url(#x-${id})`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$118, \"id\", `z-${id}`);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$119, \"stroke\", `url(#z-${id})`);\n        return _el$27;\n    })();\n}\n// src/Context.ts\nvar QueryDevtoolsContext = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    client: void 0,\n    onlineManager: void 0,\n    queryFlavor: \"\",\n    version: \"\"\n});\nfunction useQueryDevtoolsContext() {\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(QueryDevtoolsContext);\n}\nvar ThemeContext = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createContext)(()=>\"dark\");\nfunction useTheme() {\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.useContext)(ThemeContext);\n}\n// src/Explorer.tsx\nvar _tmpl$22 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span><svg width=16 height=16 viewBox=\"0 0 16 16\"fill=none xmlns=http://www.w3.org/2000/svg><path d=\"M6 12L10 8L6 4\"stroke-width=2 stroke-linecap=round stroke-linejoin=round>`);\nvar _tmpl$23 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<button title=\"Copy object to clipboard\">`);\nvar _tmpl$32 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<button title=\"Remove all items\"aria-label=\"Remove all items\">`);\nvar _tmpl$42 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<button title=\"Delete item\"aria-label=\"Delete item\">`);\nvar _tmpl$52 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<button title=\"Toggle value\"aria-label=\"Toggle value\">`);\nvar _tmpl$62 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div>`);\nvar _tmpl$72 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div><button> <span></span> <span> `);\nvar _tmpl$82 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<input>`);\nvar _tmpl$92 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>`);\nvar _tmpl$102 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div><span>:`);\nvar _tmpl$112 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div><div><button> [<!>...<!>]`);\nfunction chunkArray(array, size2) {\n    if (size2 < 1) return [];\n    let i2 = 0;\n    const result = [];\n    while(i2 < array.length){\n        result.push(array.slice(i2, i2 + size2));\n        i2 = i2 + size2;\n    }\n    return result;\n}\nvar Expander = (props)=>{\n    const theme = useTheme();\n    const styles = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles : lightStyles;\n    });\n    return (()=>{\n        const _el$ = _tmpl$22();\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$, clsx(styles().expander, u`\n          transform: rotate(${props.expanded ? 90 : 0}deg);\n        `, props.expanded && u`\n            & svg {\n              top: -1px;\n            }\n          `)));\n        return _el$;\n    })();\n};\nvar CopyButton = (props)=>{\n    const theme = useTheme();\n    const styles = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles : lightStyles;\n    });\n    const [copyState, setCopyState] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(\"NoCopy\");\n    return (()=>{\n        const _el$2 = _tmpl$23();\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.addEventListener)(_el$2, \"click\", copyState() === \"NoCopy\" ? ()=>{\n            navigator.clipboard.writeText((0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.stringify)(props.value)).then(()=>{\n                setCopyState(\"SuccessCopy\");\n                setTimeout(()=>{\n                    setCopyState(\"NoCopy\");\n                }, 1500);\n            }, (err)=>{\n                console.error(\"Failed to copy: \", err);\n                setCopyState(\"ErrorCopy\");\n                setTimeout(()=>{\n                    setCopyState(\"NoCopy\");\n                }, 1500);\n            });\n        } : void 0, true);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$2, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Switch, {\n            get children () {\n                return [\n                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Match, {\n                        get when () {\n                            return copyState() === \"NoCopy\";\n                        },\n                        get children () {\n                            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Copier, {});\n                        }\n                    }),\n                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Match, {\n                        get when () {\n                            return copyState() === \"SuccessCopy\";\n                        },\n                        get children () {\n                            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(CopiedCopier, {\n                                get theme () {\n                                    return theme();\n                                }\n                            });\n                        }\n                    }),\n                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Match, {\n                        get when () {\n                            return copyState() === \"ErrorCopy\";\n                        },\n                        get children () {\n                            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ErrorCopier, {});\n                        }\n                    })\n                ];\n            }\n        }));\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n            const _v$ = styles().actionButton, _v$2 = `${copyState() === \"NoCopy\" ? \"Copy object to clipboard\" : copyState() === \"SuccessCopy\" ? \"Object copied to clipboard\" : \"Error copying object to clipboard\"}`;\n            _v$ !== _p$._v$ && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$2, _p$._v$ = _v$);\n            _v$2 !== _p$._v$2 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$2, \"aria-label\", _p$._v$2 = _v$2);\n            return _p$;\n        }, {\n            _v$: void 0,\n            _v$2: void 0\n        });\n        return _el$2;\n    })();\n};\nvar ClearArrayButton = (props)=>{\n    const theme = useTheme();\n    const styles = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles : lightStyles;\n    });\n    const queryClient = useQueryDevtoolsContext().client;\n    return (()=>{\n        const _el$3 = _tmpl$32();\n        _el$3.$$click = ()=>{\n            const oldData = props.activeQuery.state.data;\n            const newData = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.updateNestedDataByPath)(oldData, props.dataPath, []);\n            queryClient.setQueryData(props.activeQuery.queryKey, newData);\n        };\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$3, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(List, {}));\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$3, styles().actionButton));\n        return _el$3;\n    })();\n};\nvar DeleteItemButton = (props)=>{\n    const theme = useTheme();\n    const styles = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles : lightStyles;\n    });\n    const queryClient = useQueryDevtoolsContext().client;\n    return (()=>{\n        const _el$4 = _tmpl$42();\n        _el$4.$$click = ()=>{\n            const oldData = props.activeQuery.state.data;\n            const newData = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.deleteNestedDataByPath)(oldData, props.dataPath);\n            queryClient.setQueryData(props.activeQuery.queryKey, newData);\n        };\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$4, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Trash, {}));\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$4, clsx(styles().actionButton)));\n        return _el$4;\n    })();\n};\nvar ToggleValueButton = (props)=>{\n    const theme = useTheme();\n    const styles = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles : lightStyles;\n    });\n    const queryClient = useQueryDevtoolsContext().client;\n    return (()=>{\n        const _el$5 = _tmpl$52();\n        _el$5.$$click = ()=>{\n            const oldData = props.activeQuery.state.data;\n            const newData = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.updateNestedDataByPath)(oldData, props.dataPath, !props.value);\n            queryClient.setQueryData(props.activeQuery.queryKey, newData);\n        };\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$5, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Check, {\n            get theme () {\n                return theme();\n            },\n            get checked () {\n                return props.value;\n            }\n        }));\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$5, clsx(styles().actionButton, u`\n          width: ${tokens.size[3.5]};\n          height: ${tokens.size[3.5]};\n        `)));\n        return _el$5;\n    })();\n};\nfunction isIterable(x) {\n    return Symbol.iterator in x;\n}\nfunction Explorer(props) {\n    const theme = useTheme();\n    const styles = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles : lightStyles;\n    });\n    const queryClient = useQueryDevtoolsContext().client;\n    const [expanded, setExpanded] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)((props.defaultExpanded || []).includes(props.label));\n    const toggleExpanded = ()=>setExpanded((old)=>!old);\n    const [expandedPages, setExpandedPages] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)([]);\n    const subEntries = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        if (Array.isArray(props.value)) {\n            return props.value.map((d, i2)=>({\n                    label: i2.toString(),\n                    value: d\n                }));\n        } else if (props.value !== null && typeof props.value === \"object\" && isIterable(props.value) && typeof props.value[Symbol.iterator] === \"function\") {\n            if (props.value instanceof Map) {\n                return Array.from(props.value, ([key, val])=>({\n                        label: key,\n                        value: val\n                    }));\n            }\n            return Array.from(props.value, (val, i2)=>({\n                    label: i2.toString(),\n                    value: val\n                }));\n        } else if (typeof props.value === \"object\" && props.value !== null) {\n            return Object.entries(props.value).map(([key, val])=>({\n                    label: key,\n                    value: val\n                }));\n        }\n        return [];\n    });\n    const type = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        if (Array.isArray(props.value)) {\n            return \"array\";\n        } else if (props.value !== null && typeof props.value === \"object\" && isIterable(props.value) && typeof props.value[Symbol.iterator] === \"function\") {\n            return \"Iterable\";\n        } else if (typeof props.value === \"object\" && props.value !== null) {\n            return \"object\";\n        }\n        return typeof props.value;\n    });\n    const subEntryPages = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>chunkArray(subEntries(), 100));\n    const currentDataPath = props.dataPath ?? [];\n    return (()=>{\n        const _el$6 = _tmpl$62();\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$6, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n            get when () {\n                return subEntryPages().length;\n            },\n            get children () {\n                return [\n                    (()=>{\n                        const _el$7 = _tmpl$72(), _el$8 = _el$7.firstChild, _el$9 = _el$8.firstChild, _el$10 = _el$9.nextSibling, _el$11 = _el$10.nextSibling, _el$12 = _el$11.nextSibling, _el$13 = _el$12.firstChild;\n                        _el$8.$$click = ()=>toggleExpanded();\n                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$8, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Expander, {\n                            get expanded () {\n                                return expanded();\n                            }\n                        }), _el$9);\n                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$10, ()=>props.label);\n                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$12, ()=>String(type()).toLowerCase() === \"iterable\" ? \"(Iterable) \" : \"\", _el$13);\n                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$12, ()=>subEntries().length, _el$13);\n                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$12, ()=>subEntries().length > 1 ? `items` : `item`, null);\n                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$7, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                            get when () {\n                                return props.editable;\n                            },\n                            get children () {\n                                const _el$14 = _tmpl$62();\n                                (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$14, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(CopyButton, {\n                                    get value () {\n                                        return props.value;\n                                    }\n                                }), null);\n                                (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$14, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                                    get when () {\n                                        return props.itemsDeletable && props.activeQuery !== void 0;\n                                    },\n                                    get children () {\n                                        return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(DeleteItemButton, {\n                                            get activeQuery () {\n                                                return props.activeQuery;\n                                            },\n                                            dataPath: currentDataPath\n                                        });\n                                    }\n                                }), null);\n                                (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$14, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                                    get when () {\n                                        return type() === \"array\" && props.activeQuery !== void 0;\n                                    },\n                                    get children () {\n                                        return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ClearArrayButton, {\n                                            get activeQuery () {\n                                                return props.activeQuery;\n                                            },\n                                            dataPath: currentDataPath\n                                        });\n                                    }\n                                }), null);\n                                (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$14, styles().actions));\n                                return _el$14;\n                            }\n                        }), null);\n                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n                            const _v$3 = styles().expanderButtonContainer, _v$4 = styles().expanderButton, _v$5 = styles().info;\n                            _v$3 !== _p$._v$3 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$7, _p$._v$3 = _v$3);\n                            _v$4 !== _p$._v$4 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$8, _p$._v$4 = _v$4);\n                            _v$5 !== _p$._v$5 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$12, _p$._v$5 = _v$5);\n                            return _p$;\n                        }, {\n                            _v$3: void 0,\n                            _v$4: void 0,\n                            _v$5: void 0\n                        });\n                        return _el$7;\n                    })(),\n                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                        get when () {\n                            return expanded();\n                        },\n                        get children () {\n                            return [\n                                (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                                    get when () {\n                                        return subEntryPages().length === 1;\n                                    },\n                                    get children () {\n                                        const _el$15 = _tmpl$62();\n                                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$15, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Key, {\n                                            get each () {\n                                                return subEntries();\n                                            },\n                                            by: (item)=>item.label,\n                                            children: (entry)=>{\n                                                return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Explorer, {\n                                                    get defaultExpanded () {\n                                                        return props.defaultExpanded;\n                                                    },\n                                                    get label () {\n                                                        return entry().label;\n                                                    },\n                                                    get value () {\n                                                        return entry().value;\n                                                    },\n                                                    get editable () {\n                                                        return props.editable;\n                                                    },\n                                                    get dataPath () {\n                                                        return [\n                                                            ...currentDataPath,\n                                                            entry().label\n                                                        ];\n                                                    },\n                                                    get activeQuery () {\n                                                        return props.activeQuery;\n                                                    },\n                                                    get itemsDeletable () {\n                                                        return type() === \"array\" || type() === \"Iterable\" || type() === \"object\";\n                                                    }\n                                                });\n                                            }\n                                        }));\n                                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$15, styles().subEntry));\n                                        return _el$15;\n                                    }\n                                }),\n                                (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                                    get when () {\n                                        return subEntryPages().length > 1;\n                                    },\n                                    get children () {\n                                        const _el$16 = _tmpl$62();\n                                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$16, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Index, {\n                                            get each () {\n                                                return subEntryPages();\n                                            },\n                                            children: (entries2, index)=>(()=>{\n                                                    const _el$22 = _tmpl$112(), _el$23 = _el$22.firstChild, _el$24 = _el$23.firstChild, _el$25 = _el$24.firstChild, _el$29 = _el$25.nextSibling, _el$27 = _el$29.nextSibling, _el$30 = _el$27.nextSibling;\n                                                    _el$30.nextSibling;\n                                                    _el$24.$$click = ()=>setExpandedPages((old)=>old.includes(index) ? old.filter((d)=>d !== index) : [\n                                                                ...old,\n                                                                index\n                                                            ]);\n                                                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$24, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Expander, {\n                                                        get expanded () {\n                                                            return expandedPages().includes(index);\n                                                        }\n                                                    }), _el$25);\n                                                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$24, index * 100, _el$29);\n                                                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$24, index * 100 + 100 - 1, _el$30);\n                                                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$23, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                                                        get when () {\n                                                            return expandedPages().includes(index);\n                                                        },\n                                                        get children () {\n                                                            const _el$31 = _tmpl$62();\n                                                            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$31, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Key, {\n                                                                get each () {\n                                                                    return entries2();\n                                                                },\n                                                                by: (entry)=>entry.label,\n                                                                children: (entry)=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Explorer, {\n                                                                        get defaultExpanded () {\n                                                                            return props.defaultExpanded;\n                                                                        },\n                                                                        get label () {\n                                                                            return entry().label;\n                                                                        },\n                                                                        get value () {\n                                                                            return entry().value;\n                                                                        },\n                                                                        get editable () {\n                                                                            return props.editable;\n                                                                        },\n                                                                        get dataPath () {\n                                                                            return [\n                                                                                ...currentDataPath,\n                                                                                entry().label\n                                                                            ];\n                                                                        },\n                                                                        get activeQuery () {\n                                                                            return props.activeQuery;\n                                                                        }\n                                                                    })\n                                                            }));\n                                                            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$31, styles().subEntry));\n                                                            return _el$31;\n                                                        }\n                                                    }), null);\n                                                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n                                                        const _v$10 = styles().entry, _v$11 = styles().expanderButton;\n                                                        _v$10 !== _p$._v$10 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$23, _p$._v$10 = _v$10);\n                                                        _v$11 !== _p$._v$11 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$24, _p$._v$11 = _v$11);\n                                                        return _p$;\n                                                    }, {\n                                                        _v$10: void 0,\n                                                        _v$11: void 0\n                                                    });\n                                                    return _el$22;\n                                                })()\n                                        }));\n                                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$16, styles().subEntry));\n                                        return _el$16;\n                                    }\n                                })\n                            ];\n                        }\n                    })\n                ];\n            }\n        }), null);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$6, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n            get when () {\n                return subEntryPages().length === 0;\n            },\n            get children () {\n                const _el$17 = _tmpl$102(), _el$18 = _el$17.firstChild, _el$19 = _el$18.firstChild;\n                (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$18, ()=>props.label, _el$19);\n                (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$17, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                    get when () {\n                        return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>!!(props.editable && props.activeQuery !== void 0))() && (type() === \"string\" || type() === \"number\" || type() === \"boolean\");\n                    },\n                    get fallback () {\n                        return (()=>{\n                            const _el$32 = _tmpl$92();\n                            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$32, ()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.displayValue)(props.value));\n                            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$32, styles().value));\n                            return _el$32;\n                        })();\n                    },\n                    get children () {\n                        return [\n                            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                                get when () {\n                                    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>!!(props.editable && props.activeQuery !== void 0))() && (type() === \"string\" || type() === \"number\");\n                                },\n                                get children () {\n                                    const _el$20 = _tmpl$82();\n                                    _el$20.addEventListener(\"change\", (changeEvent)=>{\n                                        const oldData = props.activeQuery.state.data;\n                                        const newData = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.updateNestedDataByPath)(oldData, currentDataPath, type() === \"number\" ? changeEvent.target.valueAsNumber : changeEvent.target.value);\n                                        queryClient.setQueryData(props.activeQuery.queryKey, newData);\n                                    });\n                                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n                                        const _v$6 = type() === \"number\" ? \"number\" : \"text\", _v$7 = clsx(styles().value, styles().editableInput);\n                                        _v$6 !== _p$._v$6 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$20, \"type\", _p$._v$6 = _v$6);\n                                        _v$7 !== _p$._v$7 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$20, _p$._v$7 = _v$7);\n                                        return _p$;\n                                    }, {\n                                        _v$6: void 0,\n                                        _v$7: void 0\n                                    });\n                                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>_el$20.value = props.value);\n                                    return _el$20;\n                                }\n                            }),\n                            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                                get when () {\n                                    return type() === \"boolean\";\n                                },\n                                get children () {\n                                    const _el$21 = _tmpl$92();\n                                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$21, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ToggleValueButton, {\n                                        get activeQuery () {\n                                            return props.activeQuery;\n                                        },\n                                        dataPath: currentDataPath,\n                                        get value () {\n                                            return props.value;\n                                        }\n                                    }), null);\n                                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$21, ()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.displayValue)(props.value), null);\n                                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$21, clsx(styles().value, styles().actions, styles().editableInput)));\n                                    return _el$21;\n                                }\n                            })\n                        ];\n                    }\n                }), null);\n                (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$17, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                    get when () {\n                        return props.editable && props.itemsDeletable && props.activeQuery !== void 0;\n                    },\n                    get children () {\n                        return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(DeleteItemButton, {\n                            get activeQuery () {\n                                return props.activeQuery;\n                            },\n                            dataPath: currentDataPath\n                        });\n                    }\n                }), null);\n                (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n                    const _v$8 = styles().row, _v$9 = styles().label;\n                    _v$8 !== _p$._v$8 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$17, _p$._v$8 = _v$8);\n                    _v$9 !== _p$._v$9 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$18, _p$._v$9 = _v$9);\n                    return _p$;\n                }, {\n                    _v$8: void 0,\n                    _v$9: void 0\n                });\n                return _el$17;\n            }\n        }), null);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$6, styles().entry));\n        return _el$6;\n    })();\n}\nvar stylesFactory = (theme)=>{\n    const { colors, font, size: size2, border } = tokens;\n    const t2 = (light, dark)=>theme === \"light\" ? light : dark;\n    return {\n        entry: u`\n      & * {\n        font-size: ${font.size.xs};\n        font-family: 'Menlo', 'Fira Code', monospace;\n      }\n      position: relative;\n      outline: none;\n      word-break: break-word;\n    `,\n        subEntry: u`\n      margin: 0 0 0 0.5em;\n      padding-left: 0.75em;\n      border-left: 2px solid ${t2(colors.gray[300], colors.darkGray[400])};\n      /* outline: 1px solid ${colors.teal[400]}; */\n    `,\n        expander: u`\n      & path {\n        stroke: ${colors.gray[400]};\n      }\n      & svg {\n        width: ${size2[3]};\n        height: ${size2[3]};\n      }\n      display: inline-flex;\n      align-items: center;\n      transition: all 0.1s ease;\n      /* outline: 1px solid ${colors.blue[400]}; */\n    `,\n        expanderButtonContainer: u`\n      display: flex;\n      align-items: center;\n      line-height: ${size2[4]};\n      min-height: ${size2[4]};\n      gap: ${size2[2]};\n    `,\n        expanderButton: u`\n      cursor: pointer;\n      color: inherit;\n      font: inherit;\n      outline: inherit;\n      height: ${size2[5]};\n      background: transparent;\n      border: none;\n      padding: 0;\n      display: inline-flex;\n      align-items: center;\n      gap: ${size2[1]};\n      position: relative;\n      /* outline: 1px solid ${colors.green[400]}; */\n\n      &:focus-visible {\n        border-radius: ${border.radius.xs};\n        outline: 2px solid ${colors.blue[800]};\n      }\n\n      & svg {\n        position: relative;\n        left: 1px;\n      }\n    `,\n        info: u`\n      color: ${t2(colors.gray[500], colors.gray[500])};\n      font-size: ${font.size.xs};\n      margin-left: ${size2[1]};\n      /* outline: 1px solid ${colors.yellow[400]}; */\n    `,\n        label: u`\n      color: ${t2(colors.gray[700], colors.gray[300])};\n      white-space: nowrap;\n    `,\n        value: u`\n      color: ${t2(colors.purple[600], colors.purple[400])};\n      flex-grow: 1;\n    `,\n        actions: u`\n      display: inline-flex;\n      gap: ${size2[2]};\n      align-items: center;\n    `,\n        row: u`\n      display: inline-flex;\n      gap: ${size2[2]};\n      width: 100%;\n      margin: ${size2[0.25]} 0px;\n      line-height: ${size2[4.5]};\n      align-items: center;\n    `,\n        editableInput: u`\n      border: none;\n      padding: ${size2[0.5]} ${size2[1]} ${size2[0.5]} ${size2[1.5]};\n      flex-grow: 1;\n      border-radius: ${border.radius.xs};\n      background-color: ${t2(colors.gray[200], colors.darkGray[500])};\n\n      &:hover {\n        background-color: ${t2(colors.gray[300], colors.darkGray[600])};\n      }\n    `,\n        actionButton: u`\n      background-color: transparent;\n      color: ${t2(colors.gray[500], colors.gray[500])};\n      border: none;\n      display: inline-flex;\n      padding: 0px;\n      align-items: center;\n      justify-content: center;\n      cursor: pointer;\n      width: ${size2[3]};\n      height: ${size2[3]};\n      position: relative;\n      z-index: 1;\n\n      &:hover svg {\n        color: ${t2(colors.gray[600], colors.gray[400])};\n      }\n\n      &:focus-visible {\n        border-radius: ${border.radius.xs};\n        outline: 2px solid ${colors.blue[800]};\n        outline-offset: 2px;\n      }\n    `\n    };\n};\nvar lightStyles = stylesFactory(\"light\");\nvar darkStyles = stylesFactory(\"dark\");\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.delegateEvents)([\n    \"click\"\n]);\n// src/Devtools.tsx\nvar _tmpl$24 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div><div aria-hidden=true></div><button aria-label=\"Open Tanstack query devtools\">`);\nvar _tmpl$25 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div>`);\nvar _tmpl$33 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<aside aria-label=\"Tanstack query devtools\"><div></div><button aria-label=\"Close tanstack query devtools\">`);\nvar _tmpl$43 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<select>`);\nvar _tmpl$53 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>Asc`);\nvar _tmpl$63 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>Desc`);\nvar _tmpl$73 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div>Settings`);\nvar _tmpl$83 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>Position`);\nvar _tmpl$93 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>Top`);\nvar _tmpl$103 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>Bottom`);\nvar _tmpl$113 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>Left`);\nvar _tmpl$122 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>Right`);\nvar _tmpl$132 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>Theme`);\nvar _tmpl$142 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>Light`);\nvar _tmpl$152 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>Dark`);\nvar _tmpl$162 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>System`);\nvar _tmpl$172 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div><div class=tsqd-queries-container>`);\nvar _tmpl$182 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div><div class=tsqd-mutations-container>`);\nvar _tmpl$192 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div><div><div><button aria-label=\"Close Tanstack query devtools\"><span>TANSTACK</span><span> v</span></button></div></div><div><div><div><input aria-label=\"Filter queries by query key\"type=text placeholder=Filter class=tsqd-query-filter-textfield></div><div></div><button class=tsqd-query-filter-sort-order-btn></button></div><div><button aria-label=\"Clear query cache\"></button><button>`);\nvar _tmpl$202 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<option>Sort by `);\nvar _tmpl$212 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div class=tsqd-query-disabled-indicator>disabled`);\nvar _tmpl$222 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<button><div></div><code class=tsqd-query-hash>`);\nvar _tmpl$232 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div role=tooltip id=tsqd-status-tooltip>`);\nvar _tmpl$242 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<span>`);\nvar _tmpl$252 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<button><span></span><span>`);\nvar _tmpl$26 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<button><span></span> Error`);\nvar _tmpl$27 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div><span></span>Trigger Error<select><option value=\"\"disabled selected>`);\nvar _tmpl$28 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div><div>Query Details</div><div><div class=tsqd-query-details-summary><pre><code></code></pre><span></span></div><div class=tsqd-query-details-observers-count><span>Observers:</span><span></span></div><div class=tsqd-query-details-last-updated><span>Last Updated:</span><span></span></div></div><div>Actions</div><div><button><span></span>Refetch</button><button><span></span>Invalidate</button><button><span></span>Reset</button><button><span></span>Remove</button><button><span></span> Loading</button></div><div>Data Explorer</div><div class=\"tsqd-query-details-explorer-container tsqd-query-details-data-explorer\"></div><div>Query Explorer</div><div class=\"tsqd-query-details-explorer-container tsqd-query-details-query-explorer\">`);\nvar _tmpl$29 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<option>`);\nvar _tmpl$30 = /* @__PURE__ */ (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.template)(`<div><div>Mutation Details</div><div><div class=tsqd-query-details-summary><pre><code></code></pre><span></span></div><div class=tsqd-query-details-last-updated><span>Submitted At:</span><span></span></div></div><div>Variables Details</div><div class=\"tsqd-query-details-explorer-container tsqd-query-details-query-explorer\"></div><div>Context Details</div><div class=\"tsqd-query-details-explorer-container tsqd-query-details-query-explorer\"></div><div>Data Explorer</div><div class=\"tsqd-query-details-explorer-container tsqd-query-details-query-explorer\"></div><div>Mutations Explorer</div><div class=\"tsqd-query-details-explorer-container tsqd-query-details-query-explorer\">`);\nvar firstBreakpoint = 1024;\nvar secondBreakpoint = 796;\nvar thirdBreakpoint = 700;\nvar BUTTON_POSITION = \"bottom-right\";\nvar POSITION = \"bottom\";\nvar THEME_PREFERENCE = \"system\";\nvar INITIAL_IS_OPEN = false;\nvar DEFAULT_HEIGHT = 500;\nvar DEFAULT_WIDTH = 500;\nvar DEFAULT_SORT_FN_NAME = Object.keys(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.sortFns)[0];\nvar DEFAULT_SORT_ORDER = 1;\nvar DEFAULT_MUTATION_SORT_FN_NAME = Object.keys(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mutationSortFns)[0];\nvar [selectedQueryHash, setSelectedQueryHash] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(null);\nvar [selectedMutationId, setSelectedMutationId] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(null);\nvar [panelWidth, setPanelWidth] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(0);\nvar DevtoolsComponent = (props)=>{\n    const [localStore, setLocalStore] = createLocalStorage({\n        prefix: \"TanstackQueryDevtools\"\n    });\n    const colorScheme = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.getPreferredColorScheme)();\n    const theme = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const preference = localStore.theme_preference || THEME_PREFERENCE;\n        if (preference !== \"system\") return preference;\n        return colorScheme();\n    });\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryDevtoolsContext.Provider, {\n        value: props,\n        get children () {\n            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ThemeContext.Provider, {\n                value: theme,\n                get children () {\n                    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Devtools, {\n                        localStore,\n                        setLocalStore\n                    });\n                }\n            });\n        }\n    });\n};\nvar Devtools_default = DevtoolsComponent;\nvar Devtools = (props)=>{\n    const theme = useTheme();\n    const styles = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles2 : lightStyles2;\n    });\n    const buttonPosition = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return useQueryDevtoolsContext().buttonPosition || BUTTON_POSITION;\n    });\n    const isOpen = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return props.localStore.open === \"true\" ? true : props.localStore.open === \"false\" ? false : useQueryDevtoolsContext().initialIsOpen || INITIAL_IS_OPEN;\n    });\n    const position = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return props.localStore.position || useQueryDevtoolsContext().position || POSITION;\n    });\n    let transitionsContainerRef;\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        const root = transitionsContainerRef.parentElement;\n        const height = props.localStore.height || DEFAULT_HEIGHT;\n        const width = props.localStore.width || DEFAULT_WIDTH;\n        const panelPosition = position();\n        root.style.setProperty(\"--tsqd-panel-height\", `${panelPosition === \"top\" ? \"-\" : \"\"}${height}px`);\n        root.style.setProperty(\"--tsqd-panel-width\", `${panelPosition === \"left\" ? \"-\" : \"\"}${width}px`);\n    });\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onMount)(()=>{\n        const onFocus = ()=>{\n            const root = transitionsContainerRef.parentElement;\n            const fontSize = getComputedStyle(root).fontSize;\n            root.style.setProperty(\"--tsqd-font-size\", fontSize);\n        };\n        onFocus();\n        window.addEventListener(\"focus\", onFocus);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            window.removeEventListener(\"focus\", onFocus);\n        });\n    });\n    return (()=>{\n        const _el$ = _tmpl$25();\n        const _ref$ = transitionsContainerRef;\n        typeof _ref$ === \"function\" ? (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.use)(_ref$, _el$) : transitionsContainerRef = _el$;\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(TransitionGroup, {\n            name: \"tsqd-panel-transition\",\n            get children () {\n                return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                    get when () {\n                        return isOpen();\n                    },\n                    get children () {\n                        return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(DevtoolsPanel, {\n                            get localStore () {\n                                return props.localStore;\n                            },\n                            get setLocalStore () {\n                                return props.setLocalStore;\n                            }\n                        });\n                    }\n                });\n            }\n        }), null);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(TransitionGroup, {\n            name: \"tsqd-button-transition\",\n            get children () {\n                return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                    get when () {\n                        return !isOpen();\n                    },\n                    get children () {\n                        const _el$2 = _tmpl$24(), _el$3 = _el$2.firstChild, _el$4 = _el$3.nextSibling;\n                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$3, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(TanstackLogo, {}));\n                        _el$4.$$click = ()=>props.setLocalStore(\"open\", \"true\");\n                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$4, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(TanstackLogo, {}));\n                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$2, clsx(styles().devtoolsBtn, styles()[`devtoolsBtn-position-${buttonPosition()}`])));\n                        return _el$2;\n                    }\n                });\n            }\n        }), null);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$, clsx(u`\n          & .tsqd-panel-transition-exit-active,\n          & .tsqd-panel-transition-enter-active {\n            transition:\n              opacity 0.3s,\n              transform 0.3s;\n          }\n\n          & .tsqd-panel-transition-exit-to,\n          & .tsqd-panel-transition-enter {\n            ${position() === \"top\" || position() === \"bottom\" ? `transform: translateY(var(--tsqd-panel-height));` : `transform: translateX(var(--tsqd-panel-width));`}\n          }\n\n          & .tsqd-button-transition-exit-active,\n          & .tsqd-button-transition-enter-active {\n            transition:\n              opacity 0.3s,\n              transform 0.3s;\n          }\n\n          & .tsqd-button-transition-exit-to,\n          & .tsqd-button-transition-enter {\n            transform: ${buttonPosition() === \"top-left\" ? `translateX(-72px);` : buttonPosition() === \"top-right\" ? `translateX(72px);` : `translateY(72px);`};\n          }\n        `, \"tsqd-transitions-container\")));\n        return _el$;\n    })();\n};\nvar DevtoolsPanel = (props)=>{\n    const theme = useTheme();\n    const styles = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles2 : lightStyles2;\n    });\n    const [isResizing, setIsResizing] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(false);\n    const position = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>props.localStore.position || useQueryDevtoolsContext().position || POSITION);\n    const handleDragStart = (event)=>{\n        const panelElement = event.currentTarget.parentElement;\n        if (!panelElement) return;\n        setIsResizing(true);\n        const { height, width } = panelElement.getBoundingClientRect();\n        const startX = event.clientX;\n        const startY = event.clientY;\n        let newSize = 0;\n        const minHeight = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.convertRemToPixels)(3.5);\n        const minWidth = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.convertRemToPixels)(12);\n        const runDrag = (moveEvent)=>{\n            moveEvent.preventDefault();\n            if (position() === \"left\" || position() === \"right\") {\n                const valToAdd = position() === \"right\" ? startX - moveEvent.clientX : moveEvent.clientX - startX;\n                newSize = Math.round(width + valToAdd);\n                if (newSize < minWidth) {\n                    newSize = minWidth;\n                }\n                props.setLocalStore(\"width\", String(Math.round(newSize)));\n                const newWidth = panelElement.getBoundingClientRect().width;\n                if (Number(props.localStore.width) < newWidth) {\n                    props.setLocalStore(\"width\", String(newWidth));\n                }\n            } else {\n                const valToAdd = position() === \"bottom\" ? startY - moveEvent.clientY : moveEvent.clientY - startY;\n                newSize = Math.round(height + valToAdd);\n                if (newSize < minHeight) {\n                    newSize = minHeight;\n                    setSelectedQueryHash(null);\n                }\n                props.setLocalStore(\"height\", String(Math.round(newSize)));\n            }\n        };\n        const unsub = ()=>{\n            if (isResizing()) {\n                setIsResizing(false);\n            }\n            document.removeEventListener(\"mousemove\", runDrag, false);\n            document.removeEventListener(\"mouseUp\", unsub, false);\n        };\n        document.addEventListener(\"mousemove\", runDrag, false);\n        document.addEventListener(\"mouseup\", unsub, false);\n    };\n    let panelRef;\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onMount)(()=>{\n        createResizeObserver(panelRef, ({ width }, el)=>{\n            if (el === panelRef) {\n                setPanelWidth(width);\n            }\n        });\n    });\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        const rootContainer = panelRef.parentElement?.parentElement?.parentElement;\n        if (!rootContainer) return;\n        const currentPosition = props.localStore.position || POSITION;\n        const styleProp = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.getSidedProp)(\"padding\", currentPosition);\n        const isVertical = props.localStore.position === \"left\" || props.localStore.position === \"right\";\n        const previousPaddings = (({ padding, paddingTop, paddingBottom, paddingLeft, paddingRight })=>({\n                padding,\n                paddingTop,\n                paddingBottom,\n                paddingLeft,\n                paddingRight\n            }))(rootContainer.style);\n        rootContainer.style[styleProp] = `${isVertical ? props.localStore.width : props.localStore.height}px`;\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n            Object.entries(previousPaddings).forEach(([property, previousValue])=>{\n                rootContainer.style[property] = previousValue;\n            });\n        });\n    });\n    const getPanelDynamicStyles = ()=>{\n        const { colors } = tokens;\n        const t2 = (light, dark)=>theme() === \"dark\" ? dark : light;\n        if (panelWidth() < secondBreakpoint) {\n            return u`\n        flex-direction: column;\n        background-color: ${t2(colors.gray[300], colors.gray[600])};\n      `;\n        }\n        return u`\n      flex-direction: row;\n      background-color: ${t2(colors.gray[200], colors.darkGray[900])};\n    `;\n    };\n    return (()=>{\n        const _el$5 = _tmpl$33(), _el$6 = _el$5.firstChild, _el$7 = _el$6.nextSibling;\n        const _ref$2 = panelRef;\n        typeof _ref$2 === \"function\" ? (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.use)(_ref$2, _el$5) : panelRef = _el$5;\n        _el$6.$$mousedown = handleDragStart;\n        _el$7.$$click = ()=>props.setLocalStore(\"open\", \"false\");\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$7, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ChevronDown, {}));\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$5, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ContentView, {\n            get localStore () {\n                return props.localStore;\n            },\n            get setLocalStore () {\n                return props.setLocalStore;\n            }\n        }), null);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n            const _v$ = clsx(styles().panel, styles()[`panel-position-${position()}`], getPanelDynamicStyles(), {\n                [u`\n            min-width: min-content;\n          `]: panelWidth() < thirdBreakpoint && (position() === \"right\" || position() === \"left\")\n            }, \"tsqd-main-panel\"), _v$2 = position() === \"bottom\" || position() === \"top\" ? `${props.localStore.height || DEFAULT_HEIGHT}px` : \"auto\", _v$3 = position() === \"right\" || position() === \"left\" ? `${props.localStore.width || DEFAULT_WIDTH}px` : \"auto\", _v$4 = clsx(styles().dragHandle, styles()[`dragHandle-position-${position()}`], \"tsqd-drag-handle\"), _v$5 = clsx(styles().closeBtn, styles()[`closeBtn-position-${position()}`], \"tsqd-minimize-btn\");\n            _v$ !== _p$._v$ && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$5, _p$._v$ = _v$);\n            _v$2 !== _p$._v$2 && ((_p$._v$2 = _v$2) != null ? _el$5.style.setProperty(\"height\", _v$2) : _el$5.style.removeProperty(\"height\"));\n            _v$3 !== _p$._v$3 && ((_p$._v$3 = _v$3) != null ? _el$5.style.setProperty(\"width\", _v$3) : _el$5.style.removeProperty(\"width\"));\n            _v$4 !== _p$._v$4 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$6, _p$._v$4 = _v$4);\n            _v$5 !== _p$._v$5 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$7, _p$._v$5 = _v$5);\n            return _p$;\n        }, {\n            _v$: void 0,\n            _v$2: void 0,\n            _v$3: void 0,\n            _v$4: void 0,\n            _v$5: void 0\n        });\n        return _el$5;\n    })();\n};\nvar ContentView = (props)=>{\n    setupQueryCacheSubscription();\n    setupMutationCacheSubscription();\n    let containerRef;\n    const theme = useTheme();\n    const styles = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles2 : lightStyles2;\n    });\n    const [selectedView, setSelectedView] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(\"queries\");\n    const sort = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>props.localStore.sort || DEFAULT_SORT_FN_NAME);\n    const sortOrder = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>Number(props.localStore.sortOrder) || DEFAULT_SORT_ORDER);\n    const mutationSort = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>props.localStore.mutationSort || DEFAULT_MUTATION_SORT_FN_NAME);\n    const mutationSortOrder = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>Number(props.localStore.mutationSortOrder) || DEFAULT_SORT_ORDER);\n    const [offline, setOffline] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(false);\n    const sortFn = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.sortFns[sort()]);\n    const mutationSortFn = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mutationSortFns[mutationSort()]);\n    const onlineManager = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>useQueryDevtoolsContext().onlineManager);\n    const query_cache = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return useQueryDevtoolsContext().client.getQueryCache();\n    });\n    const mutation_cache = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return useQueryDevtoolsContext().client.getMutationCache();\n    });\n    const queryCount = createSubscribeToQueryCacheBatcher((queryCache)=>{\n        return queryCache().getAll().length;\n    }, false);\n    const queries = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)((0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.on)(()=>[\n            queryCount(),\n            props.localStore.filter,\n            sort(),\n            sortOrder()\n        ], ()=>{\n        const curr = query_cache().getAll();\n        const filtered = props.localStore.filter ? curr.filter((item)=>rankItem(item.queryHash, props.localStore.filter || \"\").passed) : [\n            ...curr\n        ];\n        const sorted = sortFn() ? filtered.sort((a2, b2)=>sortFn()(a2, b2) * sortOrder()) : filtered;\n        return sorted;\n    }));\n    const mutationCount = createSubscribeToMutationCacheBatcher((mutationCache)=>{\n        return mutationCache().getAll().length;\n    }, false);\n    const mutations = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)((0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.on)(()=>[\n            mutationCount(),\n            props.localStore.mutationFilter,\n            mutationSort(),\n            mutationSortOrder()\n        ], ()=>{\n        const curr = mutation_cache().getAll();\n        const filtered = props.localStore.mutationFilter ? curr.filter((item)=>{\n            const value = `${item.options.mutationKey ? JSON.stringify(item.options.mutationKey) + \" - \" : \"\"}${new Date(item.state.submittedAt).toLocaleString()}`;\n            return rankItem(value, props.localStore.mutationFilter || \"\").passed;\n        }) : [\n            ...curr\n        ];\n        const sorted = mutationSortFn() ? filtered.sort((a2, b2)=>mutationSortFn()(a2, b2) * mutationSortOrder()) : filtered;\n        return sorted;\n    }));\n    const setDevtoolsPosition = (pos)=>{\n        props.setLocalStore(\"position\", pos);\n    };\n    const setComputedVariables = (el)=>{\n        const computedStyle = getComputedStyle(containerRef);\n        const variable = computedStyle.getPropertyValue(\"--tsqd-font-size\");\n        el.style.setProperty(\"--tsqd-font-size\", variable);\n    };\n    return [\n        (()=>{\n            const _el$8 = _tmpl$192(), _el$9 = _el$8.firstChild, _el$10 = _el$9.firstChild, _el$11 = _el$10.firstChild, _el$12 = _el$11.firstChild, _el$13 = _el$12.nextSibling, _el$14 = _el$13.firstChild, _el$15 = _el$9.nextSibling, _el$16 = _el$15.firstChild, _el$17 = _el$16.firstChild, _el$18 = _el$17.firstChild, _el$19 = _el$17.nextSibling, _el$22 = _el$19.nextSibling, _el$25 = _el$16.nextSibling, _el$26 = _el$25.firstChild, _el$27 = _el$26.nextSibling;\n            const _ref$3 = containerRef;\n            typeof _ref$3 === \"function\" ? (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.use)(_ref$3, _el$8) : containerRef = _el$8;\n            _el$11.$$click = ()=>props.setLocalStore(\"open\", \"false\");\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$13, ()=>useQueryDevtoolsContext().queryFlavor, _el$14);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$13, ()=>useQueryDevtoolsContext().version, null);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$10, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$9.Root, {\n                get [\"class\"] () {\n                    return clsx(styles().viewToggle);\n                },\n                get value () {\n                    return selectedView();\n                },\n                onChange: (value)=>{\n                    setSelectedView(value);\n                    setSelectedQueryHash(null);\n                    setSelectedMutationId(null);\n                },\n                get children () {\n                    return [\n                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$9.Item, {\n                            value: \"queries\",\n                            \"class\": \"tsqd-radio-toggle\",\n                            get children () {\n                                return [\n                                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$9.ItemInput, {}),\n                                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$9.ItemControl, {\n                                        get children () {\n                                            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$9.ItemIndicator, {});\n                                        }\n                                    }),\n                                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$9.ItemLabel, {\n                                        title: \"Toggle Queries View\",\n                                        children: \"Queries\"\n                                    })\n                                ];\n                            }\n                        }),\n                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$9.Item, {\n                            value: \"mutations\",\n                            \"class\": \"tsqd-radio-toggle\",\n                            get children () {\n                                return [\n                                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$9.ItemInput, {}),\n                                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$9.ItemControl, {\n                                        get children () {\n                                            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$9.ItemIndicator, {});\n                                        }\n                                    }),\n                                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$9.ItemLabel, {\n                                        title: \"Toggle Mutations View\",\n                                        children: \"Mutations\"\n                                    })\n                                ];\n                            }\n                        })\n                    ];\n                }\n            }), null);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$9, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return selectedView() === \"queries\";\n                },\n                get children () {\n                    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryStatusCount, {});\n                }\n            }), null);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$9, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return selectedView() === \"mutations\";\n                },\n                get children () {\n                    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MutationStatusCount, {});\n                }\n            }), null);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$17, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Search, {}), _el$18);\n            _el$18.$$input = (e2)=>{\n                if (selectedView() === \"queries\") {\n                    props.setLocalStore(\"filter\", e2.currentTarget.value);\n                } else {\n                    props.setLocalStore(\"mutationFilter\", e2.currentTarget.value);\n                }\n            };\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$19, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return selectedView() === \"queries\";\n                },\n                get children () {\n                    const _el$20 = _tmpl$43();\n                    _el$20.addEventListener(\"change\", (e2)=>{\n                        props.setLocalStore(\"sort\", e2.currentTarget.value);\n                    });\n                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$20, ()=>Object.keys(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.sortFns).map((key)=>(()=>{\n                                const _el$42 = _tmpl$202();\n                                _el$42.firstChild;\n                                _el$42.value = key;\n                                (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$42, key, null);\n                                return _el$42;\n                            })()));\n                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>_el$20.value = sort());\n                    return _el$20;\n                }\n            }), null);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$19, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return selectedView() === \"mutations\";\n                },\n                get children () {\n                    const _el$21 = _tmpl$43();\n                    _el$21.addEventListener(\"change\", (e2)=>{\n                        props.setLocalStore(\"mutationSort\", e2.currentTarget.value);\n                    });\n                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$21, ()=>Object.keys(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mutationSortFns).map((key)=>(()=>{\n                                const _el$44 = _tmpl$202();\n                                _el$44.firstChild;\n                                _el$44.value = key;\n                                (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$44, key, null);\n                                return _el$44;\n                            })()));\n                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>_el$21.value = mutationSort());\n                    return _el$21;\n                }\n            }), null);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$19, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ChevronDown, {}), null);\n            _el$22.$$click = ()=>{\n                if (selectedView() === \"queries\") {\n                    props.setLocalStore(\"sortOrder\", String(sortOrder() * -1));\n                } else {\n                    props.setLocalStore(\"mutationSortOrder\", String(mutationSortOrder() * -1));\n                }\n            };\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$22, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return (selectedView() === \"queries\" ? sortOrder() : mutationSortOrder()) === 1;\n                },\n                get children () {\n                    return [\n                        _tmpl$53(),\n                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ArrowUp, {})\n                    ];\n                }\n            }), null);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$22, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return (selectedView() === \"queries\" ? sortOrder() : mutationSortOrder()) === -1;\n                },\n                get children () {\n                    return [\n                        _tmpl$63(),\n                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ArrowDown, {})\n                    ];\n                }\n            }), null);\n            _el$26.$$click = ()=>{\n                if (selectedView() === \"queries\") {\n                    query_cache().clear();\n                } else {\n                    mutation_cache().clear();\n                }\n            };\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$26, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Trash, {}));\n            _el$27.$$click = ()=>{\n                if (offline()) {\n                    onlineManager().setOnline(true);\n                    setOffline(false);\n                } else {\n                    onlineManager().setOnline(false);\n                    setOffline(true);\n                }\n            };\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$27, (()=>{\n                const _c$ = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>!!offline());\n                return ()=>_c$() ? (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Offline, {}) : (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Wifi, {});\n            })());\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$25, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$f.Root, {\n                gutter: 4,\n                get children () {\n                    return [\n                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$f.Trigger, {\n                            get [\"class\"] () {\n                                return clsx(styles().actionsBtn, \"tsqd-actions-btn\", \"tsqd-action-settings\");\n                            },\n                            get children () {\n                                return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Settings, {});\n                            }\n                        }),\n                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$f.Portal, {\n                            ref: (el)=>setComputedVariables(el),\n                            get children () {\n                                return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$f.Content, {\n                                    get [\"class\"] () {\n                                        return clsx(styles().settingsMenu, \"tsqd-settings-menu\");\n                                    },\n                                    get children () {\n                                        return [\n                                            (()=>{\n                                                const _el$28 = _tmpl$73();\n                                                (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$28, clsx(styles().settingsMenuHeader, \"tsqd-settings-menu-header\")));\n                                                return _el$28;\n                                            })(),\n                                            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$f.Sub, {\n                                                overlap: true,\n                                                gutter: 8,\n                                                shift: -4,\n                                                get children () {\n                                                    return [\n                                                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$f.SubTrigger, {\n                                                            get [\"class\"] () {\n                                                                return clsx(styles().settingsSubTrigger, \"tsqd-settings-menu-sub-trigger\", \"tsqd-settings-menu-sub-trigger-position\");\n                                                            },\n                                                            get children () {\n                                                                return [\n                                                                    _tmpl$83(),\n                                                                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ChevronDown, {})\n                                                                ];\n                                                            }\n                                                        }),\n                                                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$f.Portal, {\n                                                            ref: (el)=>setComputedVariables(el),\n                                                            get children () {\n                                                                return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$f.SubContent, {\n                                                                    get [\"class\"] () {\n                                                                        return clsx(styles().settingsMenu, \"tsqd-settings-submenu\");\n                                                                    },\n                                                                    get children () {\n                                                                        return [\n                                                                            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$f.Item, {\n                                                                                onSelect: ()=>{\n                                                                                    setDevtoolsPosition(\"top\");\n                                                                                },\n                                                                                as: \"button\",\n                                                                                get [\"class\"] () {\n                                                                                    return clsx(styles().settingsSubButton, \"tsqd-settings-menu-position-btn\", \"tsqd-settings-menu-position-btn-top\");\n                                                                                },\n                                                                                get children () {\n                                                                                    return [\n                                                                                        _tmpl$93(),\n                                                                                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ArrowUp, {})\n                                                                                    ];\n                                                                                }\n                                                                            }),\n                                                                            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$f.Item, {\n                                                                                onSelect: ()=>{\n                                                                                    setDevtoolsPosition(\"bottom\");\n                                                                                },\n                                                                                as: \"button\",\n                                                                                get [\"class\"] () {\n                                                                                    return clsx(styles().settingsSubButton, \"tsqd-settings-menu-position-btn\", \"tsqd-settings-menu-position-btn-bottom\");\n                                                                                },\n                                                                                get children () {\n                                                                                    return [\n                                                                                        _tmpl$103(),\n                                                                                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ArrowDown, {})\n                                                                                    ];\n                                                                                }\n                                                                            }),\n                                                                            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$f.Item, {\n                                                                                onSelect: ()=>{\n                                                                                    setDevtoolsPosition(\"left\");\n                                                                                },\n                                                                                as: \"button\",\n                                                                                get [\"class\"] () {\n                                                                                    return clsx(styles().settingsSubButton, \"tsqd-settings-menu-position-btn\", \"tsqd-settings-menu-position-btn-left\");\n                                                                                },\n                                                                                get children () {\n                                                                                    return [\n                                                                                        _tmpl$113(),\n                                                                                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ArrowLeft, {})\n                                                                                    ];\n                                                                                }\n                                                                            }),\n                                                                            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$f.Item, {\n                                                                                onSelect: ()=>{\n                                                                                    setDevtoolsPosition(\"right\");\n                                                                                },\n                                                                                as: \"button\",\n                                                                                get [\"class\"] () {\n                                                                                    return clsx(styles().settingsSubButton, \"tsqd-settings-menu-position-btn\", \"tsqd-settings-menu-position-btn-right\");\n                                                                                },\n                                                                                get children () {\n                                                                                    return [\n                                                                                        _tmpl$122(),\n                                                                                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ArrowRight, {})\n                                                                                    ];\n                                                                                }\n                                                                            })\n                                                                        ];\n                                                                    }\n                                                                });\n                                                            }\n                                                        })\n                                                    ];\n                                                }\n                                            }),\n                                            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$f.Sub, {\n                                                overlap: true,\n                                                gutter: 8,\n                                                shift: -4,\n                                                get children () {\n                                                    return [\n                                                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$f.SubTrigger, {\n                                                            get [\"class\"] () {\n                                                                return clsx(styles().settingsSubTrigger, \"tsqd-settings-menu-sub-trigger\", \"tsqd-settings-menu-sub-trigger-position\");\n                                                            },\n                                                            get children () {\n                                                                return [\n                                                                    _tmpl$132(),\n                                                                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ChevronDown, {})\n                                                                ];\n                                                            }\n                                                        }),\n                                                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$f.Portal, {\n                                                            ref: (el)=>setComputedVariables(el),\n                                                            get children () {\n                                                                return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$f.SubContent, {\n                                                                    get [\"class\"] () {\n                                                                        return clsx(styles().settingsMenu, \"tsqd-settings-submenu\");\n                                                                    },\n                                                                    get children () {\n                                                                        return [\n                                                                            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$f.Item, {\n                                                                                onSelect: ()=>{\n                                                                                    props.setLocalStore(\"theme_preference\", \"light\");\n                                                                                },\n                                                                                as: \"button\",\n                                                                                get [\"class\"] () {\n                                                                                    return clsx(styles().settingsSubButton, props.localStore.theme_preference === \"light\" && styles().themeSelectedButton, \"tsqd-settings-menu-position-btn\", \"tsqd-settings-menu-position-btn-top\");\n                                                                                },\n                                                                                get children () {\n                                                                                    return [\n                                                                                        _tmpl$142(),\n                                                                                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Sun, {})\n                                                                                    ];\n                                                                                }\n                                                                            }),\n                                                                            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$f.Item, {\n                                                                                onSelect: ()=>{\n                                                                                    props.setLocalStore(\"theme_preference\", \"dark\");\n                                                                                },\n                                                                                as: \"button\",\n                                                                                get [\"class\"] () {\n                                                                                    return clsx(styles().settingsSubButton, props.localStore.theme_preference === \"dark\" && styles().themeSelectedButton, \"tsqd-settings-menu-position-btn\", \"tsqd-settings-menu-position-btn-bottom\");\n                                                                                },\n                                                                                get children () {\n                                                                                    return [\n                                                                                        _tmpl$152(),\n                                                                                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Moon, {})\n                                                                                    ];\n                                                                                }\n                                                                            }),\n                                                                            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(index$f.Item, {\n                                                                                onSelect: ()=>{\n                                                                                    props.setLocalStore(\"theme_preference\", \"system\");\n                                                                                },\n                                                                                as: \"button\",\n                                                                                get [\"class\"] () {\n                                                                                    return clsx(styles().settingsSubButton, props.localStore.theme_preference === \"system\" && styles().themeSelectedButton, \"tsqd-settings-menu-position-btn\", \"tsqd-settings-menu-position-btn-left\");\n                                                                                },\n                                                                                get children () {\n                                                                                    return [\n                                                                                        _tmpl$162(),\n                                                                                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Monitor, {})\n                                                                                    ];\n                                                                                }\n                                                                            })\n                                                                        ];\n                                                                    }\n                                                                });\n                                                            }\n                                                        })\n                                                    ];\n                                                }\n                                            })\n                                        ];\n                                    }\n                                });\n                            }\n                        })\n                    ];\n                }\n            }), null);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$8, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return selectedView() === \"queries\";\n                },\n                get children () {\n                    const _el$38 = _tmpl$172(), _el$39 = _el$38.firstChild;\n                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$39, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Key, {\n                        by: (q)=>q.queryHash,\n                        get each () {\n                            return queries();\n                        },\n                        children: (query)=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryRow, {\n                                get query () {\n                                    return query();\n                                }\n                            })\n                    }));\n                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$38, clsx(styles().overflowQueryContainer, \"tsqd-queries-overflow-container\")));\n                    return _el$38;\n                }\n            }), null);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$8, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return selectedView() === \"mutations\";\n                },\n                get children () {\n                    const _el$40 = _tmpl$182(), _el$41 = _el$40.firstChild;\n                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$41, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Key, {\n                        by: (m)=>m.mutationId,\n                        get each () {\n                            return mutations();\n                        },\n                        children: (mutation)=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MutationRow, {\n                                get mutation () {\n                                    return mutation();\n                                }\n                            })\n                    }));\n                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$40, clsx(styles().overflowQueryContainer, \"tsqd-mutations-overflow-container\")));\n                    return _el$40;\n                }\n            }), null);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n                const _v$6 = clsx(styles().queriesContainer, panelWidth() < secondBreakpoint && (selectedQueryHash() || selectedMutationId()) && u`\n              height: 50%;\n              max-height: 50%;\n            `, panelWidth() < secondBreakpoint && !(selectedQueryHash() || selectedMutationId()) && u`\n              height: 100%;\n              max-height: 100%;\n            `, \"tsqd-queries-container\"), _v$7 = clsx(styles().row, \"tsqd-header\"), _v$8 = styles().logoAndToggleContainer, _v$9 = clsx(styles().logo, \"tsqd-text-logo-container\"), _v$10 = clsx(styles().tanstackLogo, \"tsqd-text-logo-tanstack\"), _v$11 = clsx(styles().queryFlavorLogo, \"tsqd-text-logo-query-flavor\"), _v$12 = clsx(styles().row, \"tsqd-filters-actions-container\"), _v$13 = clsx(styles().filtersContainer, \"tsqd-filters-container\"), _v$14 = clsx(styles().filterInput, \"tsqd-query-filter-textfield-container\"), _v$15 = clsx(styles().filterSelect, \"tsqd-query-filter-sort-container\"), _v$16 = `Sort order ${(selectedView() === \"queries\" ? sortOrder() : mutationSortOrder()) === -1 ? \"descending\" : \"ascending\"}`, _v$17 = (selectedView() === \"queries\" ? sortOrder() : mutationSortOrder()) === -1, _v$18 = clsx(styles().actionsContainer, \"tsqd-actions-container\"), _v$19 = clsx(styles().actionsBtn, \"tsqd-actions-btn\", \"tsqd-action-clear-cache\"), _v$20 = `Clear ${selectedView()} cache`, _v$21 = clsx(styles().actionsBtn, offline() && styles().actionsBtnOffline, \"tsqd-actions-btn\", \"tsqd-action-mock-offline-behavior\"), _v$22 = `${offline() ? \"Unset offline mocking behavior\" : \"Mock offline behavior\"}`, _v$23 = offline(), _v$24 = `${offline() ? \"Unset offline mocking behavior\" : \"Mock offline behavior\"}`;\n                _v$6 !== _p$._v$6 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$8, _p$._v$6 = _v$6);\n                _v$7 !== _p$._v$7 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$9, _p$._v$7 = _v$7);\n                _v$8 !== _p$._v$8 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$10, _p$._v$8 = _v$8);\n                _v$9 !== _p$._v$9 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$11, _p$._v$9 = _v$9);\n                _v$10 !== _p$._v$10 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$12, _p$._v$10 = _v$10);\n                _v$11 !== _p$._v$11 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$13, _p$._v$11 = _v$11);\n                _v$12 !== _p$._v$12 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$15, _p$._v$12 = _v$12);\n                _v$13 !== _p$._v$13 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$16, _p$._v$13 = _v$13);\n                _v$14 !== _p$._v$14 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$17, _p$._v$14 = _v$14);\n                _v$15 !== _p$._v$15 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$19, _p$._v$15 = _v$15);\n                _v$16 !== _p$._v$16 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$22, \"aria-label\", _p$._v$16 = _v$16);\n                _v$17 !== _p$._v$17 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$22, \"aria-pressed\", _p$._v$17 = _v$17);\n                _v$18 !== _p$._v$18 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$25, _p$._v$18 = _v$18);\n                _v$19 !== _p$._v$19 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$26, _p$._v$19 = _v$19);\n                _v$20 !== _p$._v$20 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$26, \"title\", _p$._v$20 = _v$20);\n                _v$21 !== _p$._v$21 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$27, _p$._v$21 = _v$21);\n                _v$22 !== _p$._v$22 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$27, \"aria-label\", _p$._v$22 = _v$22);\n                _v$23 !== _p$._v$23 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$27, \"aria-pressed\", _p$._v$23 = _v$23);\n                _v$24 !== _p$._v$24 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$27, \"title\", _p$._v$24 = _v$24);\n                return _p$;\n            }, {\n                _v$6: void 0,\n                _v$7: void 0,\n                _v$8: void 0,\n                _v$9: void 0,\n                _v$10: void 0,\n                _v$11: void 0,\n                _v$12: void 0,\n                _v$13: void 0,\n                _v$14: void 0,\n                _v$15: void 0,\n                _v$16: void 0,\n                _v$17: void 0,\n                _v$18: void 0,\n                _v$19: void 0,\n                _v$20: void 0,\n                _v$21: void 0,\n                _v$22: void 0,\n                _v$23: void 0,\n                _v$24: void 0\n            });\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>_el$18.value = selectedView() === \"queries\" ? props.localStore.filter || \"\" : props.localStore.mutationFilter || \"\");\n            return _el$8;\n        })(),\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n            get when () {\n                return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>selectedView() === \"queries\")() && selectedQueryHash();\n            },\n            get children () {\n                return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryDetails, {});\n            }\n        }),\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n            get when () {\n                return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>selectedView() === \"mutations\")() && selectedMutationId();\n            },\n            get children () {\n                return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(MutationDetails, {});\n            }\n        })\n    ];\n};\nvar QueryRow = (props)=>{\n    const theme = useTheme();\n    const styles = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles2 : lightStyles2;\n    });\n    const { colors, alpha } = tokens;\n    const t2 = (light, dark)=>theme() === \"dark\" ? dark : light;\n    const queryState = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().find({\n            queryKey: props.query.queryKey\n        })?.state, true, (e2)=>e2.query.queryHash === props.query.queryHash);\n    const isDisabled = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().find({\n            queryKey: props.query.queryKey\n        })?.isDisabled() ?? false, true, (e2)=>e2.query.queryHash === props.query.queryHash);\n    const isStale = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().find({\n            queryKey: props.query.queryKey\n        })?.isStale() ?? false, true, (e2)=>e2.query.queryHash === props.query.queryHash);\n    const observers = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().find({\n            queryKey: props.query.queryKey\n        })?.getObserversCount() ?? 0, true, (e2)=>e2.query.queryHash === props.query.queryHash);\n    const color = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.getQueryStatusColor)({\n            queryState: queryState(),\n            observerCount: observers(),\n            isStale: isStale()\n        }));\n    const getObserverCountColorStyles = ()=>{\n        if (color() === \"gray\") {\n            return u`\n        background-color: ${t2(colors[color()][200], colors[color()][700])};\n        color: ${t2(colors[color()][700], colors[color()][300])};\n      `;\n        }\n        return u`\n      background-color: ${t2(colors[color()][200] + alpha[80], colors[color()][900])};\n      color: ${t2(colors[color()][800], colors[color()][300])};\n    `;\n    };\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n        get when () {\n            return queryState();\n        },\n        get children () {\n            const _el$46 = _tmpl$222(), _el$47 = _el$46.firstChild, _el$48 = _el$47.nextSibling;\n            _el$46.$$click = ()=>setSelectedQueryHash(props.query.queryHash === selectedQueryHash() ? null : props.query.queryHash);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$47, observers);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$48, ()=>props.query.queryHash);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$46, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return isDisabled();\n                },\n                get children () {\n                    return _tmpl$212();\n                }\n            }), null);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n                const _v$25 = clsx(styles().queryRow, selectedQueryHash() === props.query.queryHash && styles().selectedQueryRow, \"tsqd-query-row\"), _v$26 = `Query key ${props.query.queryHash}`, _v$27 = clsx(getObserverCountColorStyles(), \"tsqd-query-observer-count\");\n                _v$25 !== _p$._v$25 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$46, _p$._v$25 = _v$25);\n                _v$26 !== _p$._v$26 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$46, \"aria-label\", _p$._v$26 = _v$26);\n                _v$27 !== _p$._v$27 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$47, _p$._v$27 = _v$27);\n                return _p$;\n            }, {\n                _v$25: void 0,\n                _v$26: void 0,\n                _v$27: void 0\n            });\n            return _el$46;\n        }\n    });\n};\nvar MutationRow = (props)=>{\n    const theme = useTheme();\n    const styles = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles2 : lightStyles2;\n    });\n    const { colors, alpha } = tokens;\n    const t2 = (light, dark)=>theme() === \"dark\" ? dark : light;\n    const mutationState = createSubscribeToMutationCacheBatcher((mutationCache)=>{\n        const mutations = mutationCache().getAll();\n        const mutation = mutations.find((m)=>m.mutationId === props.mutation.mutationId);\n        return mutation?.state;\n    });\n    const isPaused = createSubscribeToMutationCacheBatcher((mutationCache)=>{\n        const mutations = mutationCache().getAll();\n        const mutation = mutations.find((m)=>m.mutationId === props.mutation.mutationId);\n        if (!mutation) return false;\n        return mutation.state.isPaused;\n    });\n    const status = createSubscribeToMutationCacheBatcher((mutationCache)=>{\n        const mutations = mutationCache().getAll();\n        const mutation = mutations.find((m)=>m.mutationId === props.mutation.mutationId);\n        if (!mutation) return \"idle\";\n        return mutation.state.status;\n    });\n    const color = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.getMutationStatusColor)({\n            isPaused: isPaused(),\n            status: status()\n        }));\n    const getObserverCountColorStyles = ()=>{\n        if (color() === \"gray\") {\n            return u`\n        background-color: ${t2(colors[color()][200], colors[color()][700])};\n        color: ${t2(colors[color()][700], colors[color()][300])};\n      `;\n        }\n        return u`\n      background-color: ${t2(colors[color()][200] + alpha[80], colors[color()][900])};\n      color: ${t2(colors[color()][800], colors[color()][300])};\n    `;\n    };\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n        get when () {\n            return mutationState();\n        },\n        get children () {\n            const _el$50 = _tmpl$222(), _el$51 = _el$50.firstChild, _el$52 = _el$51.nextSibling;\n            _el$50.$$click = ()=>{\n                setSelectedMutationId(props.mutation.mutationId === selectedMutationId() ? null : props.mutation.mutationId);\n            };\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$51, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return color() === \"purple\";\n                },\n                get children () {\n                    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(PauseCircle, {});\n                }\n            }), null);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$51, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return color() === \"green\";\n                },\n                get children () {\n                    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(CheckCircle, {});\n                }\n            }), null);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$51, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return color() === \"red\";\n                },\n                get children () {\n                    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(XCircle, {});\n                }\n            }), null);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$51, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return color() === \"yellow\";\n                },\n                get children () {\n                    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(LoadingCircle, {});\n                }\n            }), null);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$52, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return props.mutation.options.mutationKey;\n                },\n                get children () {\n                    return [\n                        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>JSON.stringify(props.mutation.options.mutationKey)),\n                        \" -\",\n                        \" \"\n                    ];\n                }\n            }), null);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$52, ()=>new Date(props.mutation.state.submittedAt).toLocaleString(), null);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n                const _v$28 = clsx(styles().queryRow, selectedMutationId() === props.mutation.mutationId && styles().selectedQueryRow, \"tsqd-query-row\"), _v$29 = `Mutation submitted at ${new Date(props.mutation.state.submittedAt).toLocaleString()}`, _v$30 = clsx(getObserverCountColorStyles(), \"tsqd-query-observer-count\");\n                _v$28 !== _p$._v$28 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$50, _p$._v$28 = _v$28);\n                _v$29 !== _p$._v$29 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setAttribute)(_el$50, \"aria-label\", _p$._v$29 = _v$29);\n                _v$30 !== _p$._v$30 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$51, _p$._v$30 = _v$30);\n                return _p$;\n            }, {\n                _v$28: void 0,\n                _v$29: void 0,\n                _v$30: void 0\n            });\n            return _el$50;\n        }\n    });\n};\nvar QueryStatusCount = ()=>{\n    const stale = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().getAll().filter((q)=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.getQueryStatusLabel)(q) === \"stale\").length);\n    const fresh = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().getAll().filter((q)=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.getQueryStatusLabel)(q) === \"fresh\").length);\n    const fetching = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().getAll().filter((q)=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.getQueryStatusLabel)(q) === \"fetching\").length);\n    const paused = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().getAll().filter((q)=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.getQueryStatusLabel)(q) === \"paused\").length);\n    const inactive = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().getAll().filter((q)=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.getQueryStatusLabel)(q) === \"inactive\").length);\n    const theme = useTheme();\n    const styles = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles2 : lightStyles2;\n    });\n    return (()=>{\n        const _el$53 = _tmpl$25();\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$53, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryStatus, {\n            label: \"Fresh\",\n            color: \"green\",\n            get count () {\n                return fresh();\n            }\n        }), null);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$53, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryStatus, {\n            label: \"Fetching\",\n            color: \"blue\",\n            get count () {\n                return fetching();\n            }\n        }), null);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$53, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryStatus, {\n            label: \"Paused\",\n            color: \"purple\",\n            get count () {\n                return paused();\n            }\n        }), null);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$53, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryStatus, {\n            label: \"Stale\",\n            color: \"yellow\",\n            get count () {\n                return stale();\n            }\n        }), null);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$53, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryStatus, {\n            label: \"Inactive\",\n            color: \"gray\",\n            get count () {\n                return inactive();\n            }\n        }), null);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$53, clsx(styles().queryStatusContainer, \"tsqd-query-status-container\")));\n        return _el$53;\n    })();\n};\nvar MutationStatusCount = ()=>{\n    const success = createSubscribeToMutationCacheBatcher((mutationCache)=>mutationCache().getAll().filter((m)=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.getMutationStatusColor)({\n                isPaused: m.state.isPaused,\n                status: m.state.status\n            }) === \"green\").length);\n    const pending = createSubscribeToMutationCacheBatcher((mutationCache)=>mutationCache().getAll().filter((m)=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.getMutationStatusColor)({\n                isPaused: m.state.isPaused,\n                status: m.state.status\n            }) === \"yellow\").length);\n    const paused = createSubscribeToMutationCacheBatcher((mutationCache)=>mutationCache().getAll().filter((m)=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.getMutationStatusColor)({\n                isPaused: m.state.isPaused,\n                status: m.state.status\n            }) === \"purple\").length);\n    const error = createSubscribeToMutationCacheBatcher((mutationCache)=>mutationCache().getAll().filter((m)=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.getMutationStatusColor)({\n                isPaused: m.state.isPaused,\n                status: m.state.status\n            }) === \"red\").length);\n    const theme = useTheme();\n    const styles = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles2 : lightStyles2;\n    });\n    return (()=>{\n        const _el$54 = _tmpl$25();\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$54, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryStatus, {\n            label: \"Paused\",\n            color: \"purple\",\n            get count () {\n                return paused();\n            }\n        }), null);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$54, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryStatus, {\n            label: \"Pending\",\n            color: \"yellow\",\n            get count () {\n                return pending();\n            }\n        }), null);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$54, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryStatus, {\n            label: \"Success\",\n            color: \"green\",\n            get count () {\n                return success();\n            }\n        }), null);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$54, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(QueryStatus, {\n            label: \"Error\",\n            color: \"red\",\n            get count () {\n                return error();\n            }\n        }), null);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$54, clsx(styles().queryStatusContainer, \"tsqd-query-status-container\")));\n        return _el$54;\n    })();\n};\nvar QueryStatus = (props)=>{\n    const theme = useTheme();\n    const styles = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles2 : lightStyles2;\n    });\n    const { colors, alpha } = tokens;\n    const t2 = (light, dark)=>theme() === \"dark\" ? dark : light;\n    let tagRef;\n    const [mouseOver, setMouseOver] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(false);\n    const [focused, setFocused] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(false);\n    const showLabel = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        if (selectedQueryHash()) {\n            if (panelWidth() < firstBreakpoint && panelWidth() > secondBreakpoint) {\n                return false;\n            }\n        }\n        if (panelWidth() < thirdBreakpoint) {\n            return false;\n        }\n        return true;\n    });\n    return (()=>{\n        const _el$55 = _tmpl$252(), _el$57 = _el$55.firstChild, _el$59 = _el$57.nextSibling;\n        const _ref$4 = tagRef;\n        typeof _ref$4 === \"function\" ? (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.use)(_ref$4, _el$55) : tagRef = _el$55;\n        _el$55.addEventListener(\"mouseleave\", ()=>{\n            setMouseOver(false);\n            setFocused(false);\n        });\n        _el$55.addEventListener(\"mouseenter\", ()=>setMouseOver(true));\n        _el$55.addEventListener(\"blur\", ()=>setFocused(false));\n        _el$55.addEventListener(\"focus\", ()=>setFocused(true));\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.spread)(_el$55, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n            get disabled () {\n                return showLabel();\n            },\n            get [\"class\"] () {\n                return clsx(styles().queryStatusTag, !showLabel() && u`\n            cursor: pointer;\n            &:hover {\n              background: ${t2(colors.gray[200], colors.darkGray[400])}${alpha[80]};\n            }\n          `, \"tsqd-query-status-tag\", `tsqd-query-status-tag-${props.label.toLowerCase()}`);\n            }\n        }, ()=>mouseOver() || focused() ? {\n                \"aria-describedby\": \"tsqd-status-tooltip\"\n            } : {}), false, true);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$55, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n            get when () {\n                return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>!!!showLabel())() && (mouseOver() || focused());\n            },\n            get children () {\n                const _el$56 = _tmpl$232();\n                (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$56, ()=>props.label);\n                (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$56, clsx(styles().statusTooltip, \"tsqd-query-status-tooltip\")));\n                return _el$56;\n            }\n        }), _el$57);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$55, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n            get when () {\n                return showLabel();\n            },\n            get children () {\n                const _el$58 = _tmpl$242();\n                (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$58, ()=>props.label);\n                (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$58, clsx(styles().queryStatusTagLabel, \"tsqd-query-status-tag-label\")));\n                return _el$58;\n            }\n        }), _el$59);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$59, ()=>props.count);\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n            const _v$31 = clsx(u`\n            width: ${tokens.size[1.5]};\n            height: ${tokens.size[1.5]};\n            border-radius: ${tokens.border.radius.full};\n            background-color: ${tokens.colors[props.color][500]};\n          `, \"tsqd-query-status-tag-dot\"), _v$32 = clsx(styles().queryStatusCount, props.count > 0 && props.color !== \"gray\" && u`\n              background-color: ${t2(colors[props.color][100], colors[props.color][900])};\n              color: ${t2(colors[props.color][700], colors[props.color][300])};\n            `, \"tsqd-query-status-tag-count\");\n            _v$31 !== _p$._v$31 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$57, _p$._v$31 = _v$31);\n            _v$32 !== _p$._v$32 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$59, _p$._v$32 = _v$32);\n            return _p$;\n        }, {\n            _v$31: void 0,\n            _v$32: void 0\n        });\n        return _el$55;\n    })();\n};\nvar QueryDetails = ()=>{\n    const theme = useTheme();\n    const styles = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles2 : lightStyles2;\n    });\n    const { colors } = tokens;\n    const t2 = (light, dark)=>theme() === \"dark\" ? dark : light;\n    const queryClient = useQueryDevtoolsContext().client;\n    const [restoringLoading, setRestoringLoading] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(false);\n    const errorTypes = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return useQueryDevtoolsContext().errorTypes || [];\n    });\n    const activeQuery = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().getAll().find((query)=>query.queryHash === selectedQueryHash()), false);\n    const activeQueryFresh = createSubscribeToQueryCacheBatcher((queryCache)=>{\n        return queryCache().getAll().find((query)=>query.queryHash === selectedQueryHash());\n    }, false);\n    const activeQueryState = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().getAll().find((query)=>query.queryHash === selectedQueryHash())?.state, false);\n    const activeQueryStateData = createSubscribeToQueryCacheBatcher((queryCache)=>{\n        return queryCache().getAll().find((query)=>query.queryHash === selectedQueryHash())?.state.data;\n    }, false);\n    const statusLabel = createSubscribeToQueryCacheBatcher((queryCache)=>{\n        const query = queryCache().getAll().find((q)=>q.queryHash === selectedQueryHash());\n        if (!query) return \"inactive\";\n        return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.getQueryStatusLabel)(query);\n    });\n    const queryStatus = createSubscribeToQueryCacheBatcher((queryCache)=>{\n        const query = queryCache().getAll().find((q)=>q.queryHash === selectedQueryHash());\n        if (!query) return \"pending\";\n        return query.state.status;\n    });\n    const observerCount = createSubscribeToQueryCacheBatcher((queryCache)=>queryCache().getAll().find((query)=>query.queryHash === selectedQueryHash())?.getObserversCount() ?? 0);\n    const color = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.getQueryStatusColorByLabel)(statusLabel()));\n    const handleRefetch = ()=>{\n        const promise = activeQuery()?.fetch();\n        promise?.catch(()=>{});\n    };\n    const triggerError = (errorType)=>{\n        const error = errorType?.initializer(activeQuery()) ?? new Error(\"Unknown error from devtools\");\n        const __previousQueryOptions = activeQuery().options;\n        activeQuery().setState({\n            status: \"error\",\n            error,\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n            fetchMeta: {\n                ...activeQuery().state.fetchMeta,\n                __previousQueryOptions\n            }\n        });\n    };\n    const restoreQueryAfterLoadingOrError = ()=>{\n        activeQuery()?.fetch((activeQuery()?.state.fetchMeta).__previousQueryOptions, {\n            // Make sure this fetch will cancel the previous one\n            cancelRefetch: true\n        });\n    };\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        if (statusLabel() !== \"fetching\") {\n            setRestoringLoading(false);\n        }\n    });\n    const getQueryStatusColors = ()=>{\n        if (color() === \"gray\") {\n            return u`\n        background-color: ${t2(colors[color()][200], colors[color()][700])};\n        color: ${t2(colors[color()][700], colors[color()][300])};\n        border-color: ${t2(colors[color()][400], colors[color()][600])};\n      `;\n        }\n        return u`\n      background-color: ${t2(colors[color()][100], colors[color()][900])};\n      color: ${t2(colors[color()][700], colors[color()][300])};\n      border-color: ${t2(colors[color()][400], colors[color()][600])};\n    `;\n    };\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n        get when () {\n            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>!!activeQuery())() && activeQueryState();\n        },\n        get children () {\n            const _el$60 = _tmpl$28(), _el$61 = _el$60.firstChild, _el$62 = _el$61.nextSibling, _el$63 = _el$62.firstChild, _el$64 = _el$63.firstChild, _el$65 = _el$64.firstChild, _el$66 = _el$64.nextSibling, _el$67 = _el$63.nextSibling, _el$68 = _el$67.firstChild, _el$69 = _el$68.nextSibling, _el$70 = _el$67.nextSibling, _el$71 = _el$70.firstChild, _el$72 = _el$71.nextSibling, _el$73 = _el$62.nextSibling, _el$74 = _el$73.nextSibling, _el$75 = _el$74.firstChild, _el$76 = _el$75.firstChild, _el$77 = _el$75.nextSibling, _el$78 = _el$77.firstChild, _el$79 = _el$77.nextSibling, _el$80 = _el$79.firstChild, _el$81 = _el$79.nextSibling, _el$82 = _el$81.firstChild, _el$83 = _el$81.nextSibling, _el$84 = _el$83.firstChild, _el$85 = _el$84.nextSibling, _el$94 = _el$74.nextSibling, _el$95 = _el$94.nextSibling, _el$96 = _el$95.nextSibling, _el$97 = _el$96.nextSibling;\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$65, ()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.displayValue)(activeQuery().queryKey, true));\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$66, statusLabel);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$69, observerCount);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$72, ()=>new Date(activeQueryState().dataUpdatedAt).toLocaleTimeString());\n            _el$75.$$click = handleRefetch;\n            _el$77.$$click = ()=>queryClient.invalidateQueries(activeQuery());\n            _el$79.$$click = ()=>queryClient.resetQueries(activeQuery());\n            _el$81.$$click = ()=>{\n                queryClient.removeQueries(activeQuery());\n                setSelectedQueryHash(null);\n            };\n            _el$83.$$click = ()=>{\n                if (activeQuery()?.state.data === void 0) {\n                    setRestoringLoading(true);\n                    restoreQueryAfterLoadingOrError();\n                } else {\n                    const activeQueryVal = activeQuery();\n                    if (!activeQueryVal) return;\n                    const __previousQueryOptions = activeQueryVal.options;\n                    activeQueryVal.fetch({\n                        ...__previousQueryOptions,\n                        queryFn: ()=>{\n                            return new Promise(()=>{});\n                        },\n                        gcTime: -1\n                    });\n                    activeQueryVal.setState({\n                        data: void 0,\n                        status: \"pending\",\n                        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n                        fetchMeta: {\n                            ...activeQueryVal.state.fetchMeta,\n                            __previousQueryOptions\n                        }\n                    });\n                }\n            };\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$83, ()=>queryStatus() === \"pending\" ? \"Restore\" : \"Trigger\", _el$85);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$74, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return errorTypes().length === 0 || queryStatus() === \"error\";\n                },\n                get children () {\n                    const _el$86 = _tmpl$26(), _el$87 = _el$86.firstChild, _el$88 = _el$87.nextSibling;\n                    _el$86.$$click = ()=>{\n                        if (!activeQuery().state.error) {\n                            triggerError();\n                        } else {\n                            queryClient.resetQueries(activeQuery());\n                        }\n                    };\n                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$86, ()=>queryStatus() === \"error\" ? \"Restore\" : \"Trigger\", _el$88);\n                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n                        const _v$33 = clsx(u`\n                  color: ${t2(colors.red[500], colors.red[400])};\n                `, \"tsqd-query-details-actions-btn\", \"tsqd-query-details-action-error\"), _v$34 = queryStatus() === \"pending\", _v$35 = u`\n                  background-color: ${t2(colors.red[500], colors.red[400])};\n                `;\n                        _v$33 !== _p$._v$33 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$86, _p$._v$33 = _v$33);\n                        _v$34 !== _p$._v$34 && (_el$86.disabled = _p$._v$34 = _v$34);\n                        _v$35 !== _p$._v$35 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$87, _p$._v$35 = _v$35);\n                        return _p$;\n                    }, {\n                        _v$33: void 0,\n                        _v$34: void 0,\n                        _v$35: void 0\n                    });\n                    return _el$86;\n                }\n            }), null);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$74, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return !(errorTypes().length === 0 || queryStatus() === \"error\");\n                },\n                get children () {\n                    const _el$89 = _tmpl$27(), _el$90 = _el$89.firstChild, _el$91 = _el$90.nextSibling, _el$92 = _el$91.nextSibling;\n                    _el$92.firstChild;\n                    _el$92.addEventListener(\"change\", (e2)=>{\n                        const errorType = errorTypes().find((et)=>et.name === e2.currentTarget.value);\n                        triggerError(errorType);\n                    });\n                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$92, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.For, {\n                        get each () {\n                            return errorTypes();\n                        },\n                        children: (errorType)=>(()=>{\n                                const _el$98 = _tmpl$29();\n                                (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$98, ()=>errorType.name);\n                                (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)(()=>_el$98.value = errorType.name);\n                                return _el$98;\n                            })()\n                    }), null);\n                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$89, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(ChevronDown, {}), null);\n                    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n                        const _v$36 = clsx(styles().actionsSelect, \"tsqd-query-details-actions-btn\", \"tsqd-query-details-action-error-multiple\"), _v$37 = u`\n                  background-color: ${tokens.colors.red[400]};\n                `, _v$38 = queryStatus() === \"pending\";\n                        _v$36 !== _p$._v$36 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$89, _p$._v$36 = _v$36);\n                        _v$37 !== _p$._v$37 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$90, _p$._v$37 = _v$37);\n                        _v$38 !== _p$._v$38 && (_el$92.disabled = _p$._v$38 = _v$38);\n                        return _p$;\n                    }, {\n                        _v$36: void 0,\n                        _v$37: void 0,\n                        _v$38: void 0\n                    });\n                    return _el$89;\n                }\n            }), null);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$95, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Explorer, {\n                label: \"Data\",\n                defaultExpanded: [\n                    \"Data\"\n                ],\n                get value () {\n                    return activeQueryStateData();\n                },\n                editable: true,\n                get activeQuery () {\n                    return activeQuery();\n                }\n            }));\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$97, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Explorer, {\n                label: \"Query\",\n                defaultExpanded: [\n                    \"Query\",\n                    \"queryKey\"\n                ],\n                get value () {\n                    return activeQueryFresh();\n                }\n            }));\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n                const _v$39 = clsx(styles().detailsContainer, \"tsqd-query-details-container\"), _v$40 = clsx(styles().detailsHeader, \"tsqd-query-details-header\"), _v$41 = clsx(styles().detailsBody, \"tsqd-query-details-summary-container\"), _v$42 = clsx(styles().queryDetailsStatus, getQueryStatusColors()), _v$43 = clsx(styles().detailsHeader, \"tsqd-query-details-header\"), _v$44 = clsx(styles().actionsBody, \"tsqd-query-details-actions-container\"), _v$45 = clsx(u`\n                color: ${t2(colors.blue[600], colors.blue[400])};\n              `, \"tsqd-query-details-actions-btn\", \"tsqd-query-details-action-refetch\"), _v$46 = statusLabel() === \"fetching\", _v$47 = u`\n                background-color: ${t2(colors.blue[600], colors.blue[400])};\n              `, _v$48 = clsx(u`\n                color: ${t2(colors.yellow[600], colors.yellow[400])};\n              `, \"tsqd-query-details-actions-btn\", \"tsqd-query-details-action-invalidate\"), _v$49 = queryStatus() === \"pending\", _v$50 = u`\n                background-color: ${t2(colors.yellow[600], colors.yellow[400])};\n              `, _v$51 = clsx(u`\n                color: ${t2(colors.gray[600], colors.gray[300])};\n              `, \"tsqd-query-details-actions-btn\", \"tsqd-query-details-action-reset\"), _v$52 = queryStatus() === \"pending\", _v$53 = u`\n                background-color: ${t2(colors.gray[600], colors.gray[400])};\n              `, _v$54 = clsx(u`\n                color: ${t2(colors.pink[500], colors.pink[400])};\n              `, \"tsqd-query-details-actions-btn\", \"tsqd-query-details-action-remove\"), _v$55 = statusLabel() === \"fetching\", _v$56 = u`\n                background-color: ${t2(colors.pink[500], colors.pink[400])};\n              `, _v$57 = clsx(u`\n                color: ${t2(colors.cyan[500], colors.cyan[400])};\n              `, \"tsqd-query-details-actions-btn\", \"tsqd-query-details-action-loading\"), _v$58 = restoringLoading(), _v$59 = u`\n                background-color: ${t2(colors.cyan[500], colors.cyan[400])};\n              `, _v$60 = clsx(styles().detailsHeader, \"tsqd-query-details-header\"), _v$61 = tokens.size[2], _v$62 = clsx(styles().detailsHeader, \"tsqd-query-details-header\"), _v$63 = tokens.size[2];\n                _v$39 !== _p$._v$39 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$60, _p$._v$39 = _v$39);\n                _v$40 !== _p$._v$40 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$61, _p$._v$40 = _v$40);\n                _v$41 !== _p$._v$41 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$62, _p$._v$41 = _v$41);\n                _v$42 !== _p$._v$42 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$66, _p$._v$42 = _v$42);\n                _v$43 !== _p$._v$43 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$73, _p$._v$43 = _v$43);\n                _v$44 !== _p$._v$44 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$74, _p$._v$44 = _v$44);\n                _v$45 !== _p$._v$45 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$75, _p$._v$45 = _v$45);\n                _v$46 !== _p$._v$46 && (_el$75.disabled = _p$._v$46 = _v$46);\n                _v$47 !== _p$._v$47 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$76, _p$._v$47 = _v$47);\n                _v$48 !== _p$._v$48 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$77, _p$._v$48 = _v$48);\n                _v$49 !== _p$._v$49 && (_el$77.disabled = _p$._v$49 = _v$49);\n                _v$50 !== _p$._v$50 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$78, _p$._v$50 = _v$50);\n                _v$51 !== _p$._v$51 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$79, _p$._v$51 = _v$51);\n                _v$52 !== _p$._v$52 && (_el$79.disabled = _p$._v$52 = _v$52);\n                _v$53 !== _p$._v$53 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$80, _p$._v$53 = _v$53);\n                _v$54 !== _p$._v$54 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$81, _p$._v$54 = _v$54);\n                _v$55 !== _p$._v$55 && (_el$81.disabled = _p$._v$55 = _v$55);\n                _v$56 !== _p$._v$56 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$82, _p$._v$56 = _v$56);\n                _v$57 !== _p$._v$57 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$83, _p$._v$57 = _v$57);\n                _v$58 !== _p$._v$58 && (_el$83.disabled = _p$._v$58 = _v$58);\n                _v$59 !== _p$._v$59 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$84, _p$._v$59 = _v$59);\n                _v$60 !== _p$._v$60 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$94, _p$._v$60 = _v$60);\n                _v$61 !== _p$._v$61 && ((_p$._v$61 = _v$61) != null ? _el$95.style.setProperty(\"padding\", _v$61) : _el$95.style.removeProperty(\"padding\"));\n                _v$62 !== _p$._v$62 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$96, _p$._v$62 = _v$62);\n                _v$63 !== _p$._v$63 && ((_p$._v$63 = _v$63) != null ? _el$97.style.setProperty(\"padding\", _v$63) : _el$97.style.removeProperty(\"padding\"));\n                return _p$;\n            }, {\n                _v$39: void 0,\n                _v$40: void 0,\n                _v$41: void 0,\n                _v$42: void 0,\n                _v$43: void 0,\n                _v$44: void 0,\n                _v$45: void 0,\n                _v$46: void 0,\n                _v$47: void 0,\n                _v$48: void 0,\n                _v$49: void 0,\n                _v$50: void 0,\n                _v$51: void 0,\n                _v$52: void 0,\n                _v$53: void 0,\n                _v$54: void 0,\n                _v$55: void 0,\n                _v$56: void 0,\n                _v$57: void 0,\n                _v$58: void 0,\n                _v$59: void 0,\n                _v$60: void 0,\n                _v$61: void 0,\n                _v$62: void 0,\n                _v$63: void 0\n            });\n            return _el$60;\n        }\n    });\n};\nvar MutationDetails = ()=>{\n    const theme = useTheme();\n    const styles = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        return theme() === \"dark\" ? darkStyles2 : lightStyles2;\n    });\n    const { colors } = tokens;\n    const t2 = (light, dark)=>theme() === \"dark\" ? dark : light;\n    const isPaused = createSubscribeToMutationCacheBatcher((mutationCache)=>{\n        const mutations = mutationCache().getAll();\n        const mutation = mutations.find((m)=>m.mutationId === selectedMutationId());\n        if (!mutation) return false;\n        return mutation.state.isPaused;\n    });\n    const status = createSubscribeToMutationCacheBatcher((mutationCache)=>{\n        const mutations = mutationCache().getAll();\n        const mutation = mutations.find((m)=>m.mutationId === selectedMutationId());\n        if (!mutation) return \"idle\";\n        return mutation.state.status;\n    });\n    const color = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.getMutationStatusColor)({\n            isPaused: isPaused(),\n            status: status()\n        }));\n    const activeMutation = createSubscribeToMutationCacheBatcher((mutationCache)=>mutationCache().getAll().find((mutation)=>mutation.mutationId === selectedMutationId()), false);\n    const getQueryStatusColors = ()=>{\n        if (color() === \"gray\") {\n            return u`\n        background-color: ${t2(colors[color()][200], colors[color()][700])};\n        color: ${t2(colors[color()][700], colors[color()][300])};\n        border-color: ${t2(colors[color()][400], colors[color()][600])};\n      `;\n        }\n        return u`\n      background-color: ${t2(colors[color()][100], colors[color()][900])};\n      color: ${t2(colors[color()][700], colors[color()][300])};\n      border-color: ${t2(colors[color()][400], colors[color()][600])};\n    `;\n    };\n    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n        get when () {\n            return activeMutation();\n        },\n        get children () {\n            const _el$99 = _tmpl$30(), _el$100 = _el$99.firstChild, _el$101 = _el$100.nextSibling, _el$102 = _el$101.firstChild, _el$103 = _el$102.firstChild, _el$104 = _el$103.firstChild, _el$105 = _el$103.nextSibling, _el$106 = _el$102.nextSibling, _el$107 = _el$106.firstChild, _el$108 = _el$107.nextSibling, _el$109 = _el$101.nextSibling, _el$110 = _el$109.nextSibling, _el$111 = _el$110.nextSibling, _el$112 = _el$111.nextSibling, _el$113 = _el$112.nextSibling, _el$114 = _el$113.nextSibling, _el$115 = _el$114.nextSibling, _el$116 = _el$115.nextSibling;\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$104, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return activeMutation().options.mutationKey;\n                },\n                fallback: \"No mutationKey found\",\n                get children () {\n                    return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.displayValue)(activeMutation().options.mutationKey, true);\n                }\n            }));\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$105, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return color() === \"purple\";\n                },\n                children: \"pending\"\n            }), null);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$105, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.Show, {\n                get when () {\n                    return color() !== \"purple\";\n                },\n                get children () {\n                    return status();\n                }\n            }), null);\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$108, ()=>new Date(activeMutation().state.submittedAt).toLocaleTimeString());\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$110, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Explorer, {\n                label: \"Variables\",\n                defaultExpanded: [\n                    \"Variables\"\n                ],\n                get value () {\n                    return activeMutation().state.variables;\n                }\n            }));\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$112, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Explorer, {\n                label: \"Context\",\n                defaultExpanded: [\n                    \"Context\"\n                ],\n                get value () {\n                    return activeMutation().state.context;\n                }\n            }));\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$114, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Explorer, {\n                label: \"Data\",\n                defaultExpanded: [\n                    \"Data\"\n                ],\n                get value () {\n                    return activeMutation().state.data;\n                }\n            }));\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.insert)(_el$116, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Explorer, {\n                label: \"Mutation\",\n                defaultExpanded: [\n                    \"Mutation\"\n                ],\n                get value () {\n                    return activeMutation();\n                }\n            }));\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createRenderEffect)((_p$)=>{\n                const _v$64 = clsx(styles().detailsContainer, \"tsqd-query-details-container\"), _v$65 = clsx(styles().detailsHeader, \"tsqd-query-details-header\"), _v$66 = clsx(styles().detailsBody, \"tsqd-query-details-summary-container\"), _v$67 = clsx(styles().queryDetailsStatus, getQueryStatusColors()), _v$68 = clsx(styles().detailsHeader, \"tsqd-query-details-header\"), _v$69 = tokens.size[2], _v$70 = clsx(styles().detailsHeader, \"tsqd-query-details-header\"), _v$71 = tokens.size[2], _v$72 = clsx(styles().detailsHeader, \"tsqd-query-details-header\"), _v$73 = tokens.size[2], _v$74 = clsx(styles().detailsHeader, \"tsqd-query-details-header\"), _v$75 = tokens.size[2];\n                _v$64 !== _p$._v$64 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$99, _p$._v$64 = _v$64);\n                _v$65 !== _p$._v$65 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$100, _p$._v$65 = _v$65);\n                _v$66 !== _p$._v$66 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$101, _p$._v$66 = _v$66);\n                _v$67 !== _p$._v$67 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$105, _p$._v$67 = _v$67);\n                _v$68 !== _p$._v$68 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$109, _p$._v$68 = _v$68);\n                _v$69 !== _p$._v$69 && ((_p$._v$69 = _v$69) != null ? _el$110.style.setProperty(\"padding\", _v$69) : _el$110.style.removeProperty(\"padding\"));\n                _v$70 !== _p$._v$70 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$111, _p$._v$70 = _v$70);\n                _v$71 !== _p$._v$71 && ((_p$._v$71 = _v$71) != null ? _el$112.style.setProperty(\"padding\", _v$71) : _el$112.style.removeProperty(\"padding\"));\n                _v$72 !== _p$._v$72 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$113, _p$._v$72 = _v$72);\n                _v$73 !== _p$._v$73 && ((_p$._v$73 = _v$73) != null ? _el$114.style.setProperty(\"padding\", _v$73) : _el$114.style.removeProperty(\"padding\"));\n                _v$74 !== _p$._v$74 && (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.className)(_el$115, _p$._v$74 = _v$74);\n                _v$75 !== _p$._v$75 && ((_p$._v$75 = _v$75) != null ? _el$116.style.setProperty(\"padding\", _v$75) : _el$116.style.removeProperty(\"padding\"));\n                return _p$;\n            }, {\n                _v$64: void 0,\n                _v$65: void 0,\n                _v$66: void 0,\n                _v$67: void 0,\n                _v$68: void 0,\n                _v$69: void 0,\n                _v$70: void 0,\n                _v$71: void 0,\n                _v$72: void 0,\n                _v$73: void 0,\n                _v$74: void 0,\n                _v$75: void 0\n            });\n            return _el$99;\n        }\n    });\n};\nvar queryCacheMap = /* @__PURE__ */ new Map();\nvar setupQueryCacheSubscription = ()=>{\n    const queryCache = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const client = useQueryDevtoolsContext().client;\n        return client.getQueryCache();\n    });\n    const unsub = queryCache().subscribe((q)=>{\n        (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.batch)(()=>{\n            for (const [callback, value] of queryCacheMap.entries()){\n                if (!value.shouldUpdate(q)) continue;\n                value.setter(callback(queryCache));\n            }\n        });\n    });\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n        queryCacheMap.clear();\n        unsub();\n    });\n    return unsub;\n};\nvar createSubscribeToQueryCacheBatcher = (callback, equalityCheck = true, shouldUpdate = ()=>true)=>{\n    const queryCache = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const client = useQueryDevtoolsContext().client;\n        return client.getQueryCache();\n    });\n    const [value, setValue] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(callback(queryCache), !equalityCheck ? {\n        equals: false\n    } : void 0);\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        setValue(callback(queryCache));\n    });\n    queryCacheMap.set(callback, {\n        setter: setValue,\n        shouldUpdate\n    });\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n        queryCacheMap.delete(callback);\n    });\n    return value;\n};\nvar mutationCacheMap = /* @__PURE__ */ new Map();\nvar setupMutationCacheSubscription = ()=>{\n    const mutationCache = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const client = useQueryDevtoolsContext().client;\n        return client.getMutationCache();\n    });\n    const unsub = mutationCache().subscribe(()=>{\n        for (const [callback, setter] of mutationCacheMap.entries()){\n            queueMicrotask(()=>{\n                setter(callback(mutationCache));\n            });\n        }\n    });\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n        mutationCacheMap.clear();\n        unsub();\n    });\n    return unsub;\n};\nvar createSubscribeToMutationCacheBatcher = (callback, equalityCheck = true)=>{\n    const mutationCache = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createMemo)(()=>{\n        const client = useQueryDevtoolsContext().client;\n        return client.getMutationCache();\n    });\n    const [value, setValue] = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(callback(mutationCache), !equalityCheck ? {\n        equals: false\n    } : void 0);\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createEffect)(()=>{\n        setValue(callback(mutationCache));\n    });\n    mutationCacheMap.set(callback, setValue);\n    (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.onCleanup)(()=>{\n        mutationCacheMap.delete(callback);\n    });\n    return value;\n};\nvar stylesFactory2 = (theme)=>{\n    const { colors, font, size: size2, alpha, shadow, border } = tokens;\n    const t2 = (light, dark)=>theme === \"light\" ? light : dark;\n    return {\n        devtoolsBtn: u`\n      z-index: 100000;\n      position: fixed;\n      padding: 4px;\n      text-align: left;\n\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 9999px;\n      box-shadow: ${shadow.md()};\n      overflow: hidden;\n\n      & div {\n        position: absolute;\n        top: -8px;\n        left: -8px;\n        right: -8px;\n        bottom: -8px;\n        border-radius: 9999px;\n\n        & svg {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n        }\n        filter: blur(6px) saturate(1.2) contrast(1.1);\n      }\n\n      &:focus-within {\n        outline-offset: 2px;\n        outline: 3px solid ${colors.green[600]};\n      }\n\n      & button {\n        position: relative;\n        z-index: 1;\n        padding: 0;\n        border-radius: 9999px;\n        background-color: transparent;\n        border: none;\n        height: 40px;\n        display: flex;\n        width: 40px;\n        overflow: hidden;\n        cursor: pointer;\n        outline: none;\n        & svg {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n        }\n      }\n    `,\n        panel: u`\n      position: fixed;\n      z-index: 9999;\n      display: flex;\n      gap: ${tokens.size[0.5]};\n      & * {\n        box-sizing: border-box;\n        text-transform: none;\n      }\n\n      & *::-webkit-scrollbar {\n        width: 7px;\n      }\n\n      & *::-webkit-scrollbar-track {\n        background: transparent;\n      }\n\n      & *::-webkit-scrollbar-thumb {\n        background: ${t2(colors.gray[300], colors.darkGray[200])};\n      }\n\n      & *::-webkit-scrollbar-thumb:hover {\n        background: ${t2(colors.gray[400], colors.darkGray[300])};\n      }\n    `,\n        \"devtoolsBtn-position-bottom-right\": u`\n      bottom: 12px;\n      right: 12px;\n    `,\n        \"devtoolsBtn-position-bottom-left\": u`\n      bottom: 12px;\n      left: 12px;\n    `,\n        \"devtoolsBtn-position-top-left\": u`\n      top: 12px;\n      left: 12px;\n    `,\n        \"devtoolsBtn-position-top-right\": u`\n      top: 12px;\n      right: 12px;\n    `,\n        \"panel-position-top\": u`\n      top: 0;\n      right: 0;\n      left: 0;\n      max-height: 90%;\n      min-height: ${size2[14]};\n      border-bottom: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n    `,\n        \"panel-position-bottom\": u`\n      bottom: 0;\n      right: 0;\n      left: 0;\n      max-height: 90%;\n      min-height: ${size2[14]};\n      border-top: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n    `,\n        \"panel-position-right\": u`\n      bottom: 0;\n      right: 0;\n      top: 0;\n      border-left: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      max-width: 90%;\n    `,\n        \"panel-position-left\": u`\n      bottom: 0;\n      left: 0;\n      top: 0;\n      border-right: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      max-width: 90%;\n    `,\n        closeBtn: u`\n      position: absolute;\n      cursor: pointer;\n      z-index: 5;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      outline: none;\n      background-color: ${t2(colors.gray[50], colors.darkGray[700])};\n      &:hover {\n        background-color: ${t2(colors.gray[200], colors.darkGray[500])};\n      }\n      &:focus-visible {\n        outline: 2px solid ${colors.blue[600]};\n      }\n      & svg {\n        color: ${t2(colors.gray[600], colors.gray[400])};\n        width: ${size2[2]};\n        height: ${size2[2]};\n      }\n    `,\n        \"closeBtn-position-top\": u`\n      bottom: 0;\n      right: ${size2[2]};\n      transform: translate(0, 100%);\n      border-right: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-left: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-top: none;\n      border-bottom: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-radius: 0px 0px ${border.radius.sm} ${border.radius.sm};\n      padding: ${size2[0.5]} ${size2[1.5]} ${size2[1]} ${size2[1.5]};\n\n      &::after {\n        content: ' ';\n        position: absolute;\n        bottom: 100%;\n        left: -${size2[2.5]};\n        height: ${size2[1.5]};\n        width: calc(100% + ${size2[5]});\n      }\n\n      & svg {\n        transform: rotate(180deg);\n      }\n    `,\n        \"closeBtn-position-bottom\": u`\n      top: 0;\n      right: ${size2[2]};\n      transform: translate(0, -100%);\n      border-right: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-left: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-top: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-bottom: none;\n      border-radius: ${border.radius.sm} ${border.radius.sm} 0px 0px;\n      padding: ${size2[1]} ${size2[1.5]} ${size2[0.5]} ${size2[1.5]};\n\n      &::after {\n        content: ' ';\n        position: absolute;\n        top: 100%;\n        left: -${size2[2.5]};\n        height: ${size2[1.5]};\n        width: calc(100% + ${size2[5]});\n      }\n    `,\n        \"closeBtn-position-right\": u`\n      bottom: ${size2[2]};\n      left: 0;\n      transform: translate(-100%, 0);\n      border-right: none;\n      border-left: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-top: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-bottom: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-radius: ${border.radius.sm} 0px 0px ${border.radius.sm};\n      padding: ${size2[1.5]} ${size2[0.5]} ${size2[1.5]} ${size2[1]};\n\n      &::after {\n        content: ' ';\n        position: absolute;\n        left: 100%;\n        height: calc(100% + ${size2[5]});\n        width: ${size2[1.5]};\n      }\n\n      & svg {\n        transform: rotate(-90deg);\n      }\n    `,\n        \"closeBtn-position-left\": u`\n      bottom: ${size2[2]};\n      right: 0;\n      transform: translate(100%, 0);\n      border-left: none;\n      border-right: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-top: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-bottom: ${t2(colors.gray[400], colors.darkGray[300])} 1px solid;\n      border-radius: 0px ${border.radius.sm} ${border.radius.sm} 0px;\n      padding: ${size2[1.5]} ${size2[1]} ${size2[1.5]} ${size2[0.5]};\n\n      &::after {\n        content: ' ';\n        position: absolute;\n        right: 100%;\n        height: calc(100% + ${size2[5]});\n        width: ${size2[1.5]};\n      }\n\n      & svg {\n        transform: rotate(90deg);\n      }\n    `,\n        queriesContainer: u`\n      flex: 1 1 700px;\n      background-color: ${t2(colors.gray[50], colors.darkGray[700])};\n      display: flex;\n      flex-direction: column;\n      & * {\n        font-family: 'Inter', sans-serif;\n      }\n    `,\n        dragHandle: u`\n      position: absolute;\n      transition: background-color 0.125s ease;\n      &:hover {\n        background-color: ${colors.purple[400]}${t2(\"\", alpha[90])};\n      }\n      z-index: 4;\n    `,\n        \"dragHandle-position-top\": u`\n      bottom: 0;\n      width: 100%;\n      height: 3px;\n      cursor: ns-resize;\n    `,\n        \"dragHandle-position-bottom\": u`\n      top: 0;\n      width: 100%;\n      height: 3px;\n      cursor: ns-resize;\n    `,\n        \"dragHandle-position-right\": u`\n      left: 0;\n      width: 3px;\n      height: 100%;\n      cursor: ew-resize;\n    `,\n        \"dragHandle-position-left\": u`\n      right: 0;\n      width: 3px;\n      height: 100%;\n      cursor: ew-resize;\n    `,\n        row: u`\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: ${tokens.size[2]} ${tokens.size[2.5]};\n      gap: ${tokens.size[2.5]};\n      border-bottom: ${t2(colors.gray[300], colors.darkGray[500])} 1px solid;\n      align-items: center;\n      & > button {\n        padding: 0;\n        background: transparent;\n        border: none;\n        display: flex;\n        gap: ${size2[0.5]};\n        flex-direction: column;\n      }\n    `,\n        logoAndToggleContainer: u`\n      display: flex;\n      gap: ${tokens.size[3]};\n      align-items: center;\n    `,\n        logo: u`\n      cursor: pointer;\n      display: flex;\n      flex-direction: column;\n      background-color: transparent;\n      border: none;\n      gap: ${tokens.size[0.5]};\n      padding: 0px;\n      &:hover {\n        opacity: 0.7;\n      }\n      &:focus-visible {\n        outline-offset: 4px;\n        border-radius: ${border.radius.xs};\n        outline: 2px solid ${colors.blue[800]};\n      }\n    `,\n        tanstackLogo: u`\n      font-size: ${font.size.md};\n      font-weight: ${font.weight.bold};\n      line-height: ${font.lineHeight.xs};\n      white-space: nowrap;\n      color: ${t2(colors.gray[600], colors.gray[300])};\n    `,\n        queryFlavorLogo: u`\n      font-weight: ${font.weight.semibold};\n      font-size: ${font.size.xs};\n      background: linear-gradient(\n        to right,\n        ${t2(\"#ea4037, #ff9b11\", \"#dd524b, #e9a03b\")}\n      );\n      background-clip: text;\n      -webkit-background-clip: text;\n      line-height: 1;\n      -webkit-text-fill-color: transparent;\n      white-space: nowrap;\n    `,\n        queryStatusContainer: u`\n      display: flex;\n      gap: ${tokens.size[2]};\n      height: min-content;\n    `,\n        queryStatusTag: u`\n      display: flex;\n      gap: ${tokens.size[1.5]};\n      box-sizing: border-box;\n      height: ${tokens.size[6.5]};\n      background: ${t2(colors.gray[50], colors.darkGray[500])};\n      color: ${t2(colors.gray[700], colors.gray[300])};\n      border-radius: ${tokens.border.radius.sm};\n      font-size: ${font.size.sm};\n      padding: ${tokens.size[1]};\n      padding-left: ${tokens.size[1.5]};\n      align-items: center;\n      font-weight: ${font.weight.medium};\n      border: ${t2(\"1px solid \" + colors.gray[300], \"1px solid transparent\")};\n      user-select: none;\n      position: relative;\n      &:focus-visible {\n        outline-offset: 2px;\n        outline: 2px solid ${colors.blue[800]};\n      }\n    `,\n        queryStatusTagLabel: u`\n      font-size: ${font.size.xs};\n    `,\n        queryStatusCount: u`\n      font-size: ${font.size.xs};\n      padding: 0 5px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      color: ${t2(colors.gray[500], colors.gray[400])};\n      background-color: ${t2(colors.gray[200], colors.darkGray[300])};\n      border-radius: 2px;\n      font-variant-numeric: tabular-nums;\n      height: ${tokens.size[4.5]};\n    `,\n        statusTooltip: u`\n      position: absolute;\n      z-index: 1;\n      background-color: ${t2(colors.gray[50], colors.darkGray[500])};\n      top: 100%;\n      left: 50%;\n      transform: translate(-50%, calc(${tokens.size[2]}));\n      padding: ${tokens.size[0.5]} ${tokens.size[2]};\n      border-radius: ${tokens.border.radius.sm};\n      font-size: ${font.size.xs};\n      border: 1px solid ${t2(colors.gray[400], colors.gray[600])};\n      color: ${t2(colors[\"gray\"][600], colors[\"gray\"][300])};\n\n      &::before {\n        top: 0px;\n        content: ' ';\n        display: block;\n        left: 50%;\n        transform: translate(-50%, -100%);\n        position: absolute;\n        border-color: transparent transparent\n          ${t2(colors.gray[400], colors.gray[600])} transparent;\n        border-style: solid;\n        border-width: 7px;\n        /* transform: rotate(180deg); */\n      }\n\n      &::after {\n        top: 0px;\n        content: ' ';\n        display: block;\n        left: 50%;\n        transform: translate(-50%, calc(-100% + 2px));\n        position: absolute;\n        border-color: transparent transparent\n          ${t2(colors.gray[100], colors.darkGray[500])} transparent;\n        border-style: solid;\n        border-width: 7px;\n      }\n    `,\n        filtersContainer: u`\n      display: flex;\n      gap: ${tokens.size[2]};\n      & > button {\n        cursor: pointer;\n        padding: ${tokens.size[0.5]} ${tokens.size[2]};\n        padding-right: ${tokens.size[1.5]};\n        border-radius: ${tokens.border.radius.sm};\n        background-color: ${t2(colors.gray[100], colors.darkGray[400])};\n        border: 1px solid ${t2(colors.gray[300], colors.darkGray[200])};\n        color: ${t2(colors.gray[700], colors.gray[300])};\n        font-size: ${font.size.xs};\n        display: flex;\n        align-items: center;\n        line-height: ${font.lineHeight.sm};\n        gap: ${tokens.size[1.5]};\n        max-width: 160px;\n        &:focus-visible {\n          outline-offset: 2px;\n          border-radius: ${border.radius.xs};\n          outline: 2px solid ${colors.blue[800]};\n        }\n        & svg {\n          width: ${tokens.size[3]};\n          height: ${tokens.size[3]};\n          color: ${t2(colors.gray[500], colors.gray[400])};\n        }\n      }\n    `,\n        filterInput: u`\n      padding: ${size2[0.5]} ${size2[2]};\n      border-radius: ${tokens.border.radius.sm};\n      background-color: ${t2(colors.gray[100], colors.darkGray[400])};\n      display: flex;\n      box-sizing: content-box;\n      align-items: center;\n      gap: ${tokens.size[1.5]};\n      max-width: 160px;\n      min-width: 100px;\n      border: 1px solid ${t2(colors.gray[300], colors.darkGray[200])};\n      height: min-content;\n      color: ${t2(colors.gray[600], colors.gray[400])};\n      & > svg {\n        width: ${size2[3]};\n        height: ${size2[3]};\n      }\n      & input {\n        font-size: ${font.size.xs};\n        width: 100%;\n        background-color: ${t2(colors.gray[100], colors.darkGray[400])};\n        border: none;\n        padding: 0;\n        line-height: ${font.lineHeight.sm};\n        color: ${t2(colors.gray[700], colors.gray[300])};\n        &::placeholder {\n          color: ${t2(colors.gray[700], colors.gray[300])};\n        }\n        &:focus {\n          outline: none;\n        }\n      }\n\n      &:focus-within {\n        outline-offset: 2px;\n        border-radius: ${border.radius.xs};\n        outline: 2px solid ${colors.blue[800]};\n      }\n    `,\n        filterSelect: u`\n      padding: ${tokens.size[0.5]} ${tokens.size[2]};\n      border-radius: ${tokens.border.radius.sm};\n      background-color: ${t2(colors.gray[100], colors.darkGray[400])};\n      display: flex;\n      align-items: center;\n      gap: ${tokens.size[1.5]};\n      box-sizing: content-box;\n      max-width: 160px;\n      border: 1px solid ${t2(colors.gray[300], colors.darkGray[200])};\n      height: min-content;\n      & > svg {\n        color: ${t2(colors.gray[600], colors.gray[400])};\n        width: ${tokens.size[2]};\n        height: ${tokens.size[2]};\n      }\n      & > select {\n        appearance: none;\n        color: ${t2(colors.gray[700], colors.gray[300])};\n        min-width: 100px;\n        line-height: ${font.lineHeight.sm};\n        font-size: ${font.size.xs};\n        background-color: ${t2(colors.gray[100], colors.darkGray[400])};\n        border: none;\n        &:focus {\n          outline: none;\n        }\n      }\n      &:focus-within {\n        outline-offset: 2px;\n        border-radius: ${border.radius.xs};\n        outline: 2px solid ${colors.blue[800]};\n      }\n    `,\n        actionsContainer: u`\n      display: flex;\n      gap: ${tokens.size[2]};\n    `,\n        actionsBtn: u`\n      border-radius: ${tokens.border.radius.sm};\n      background-color: ${t2(colors.gray[100], colors.darkGray[400])};\n      border: 1px solid ${t2(colors.gray[300], colors.darkGray[200])};\n      width: ${tokens.size[6.5]};\n      height: ${tokens.size[6.5]};\n      justify-content: center;\n      display: flex;\n      align-items: center;\n      gap: ${tokens.size[1.5]};\n      max-width: 160px;\n      cursor: pointer;\n      padding: 0;\n      &:hover {\n        background-color: ${t2(colors.gray[200], colors.darkGray[500])};\n      }\n      & svg {\n        color: ${t2(colors.gray[700], colors.gray[300])};\n        width: ${tokens.size[3]};\n        height: ${tokens.size[3]};\n      }\n      &:focus-visible {\n        outline-offset: 2px;\n        border-radius: ${border.radius.xs};\n        outline: 2px solid ${colors.blue[800]};\n      }\n    `,\n        actionsBtnOffline: u`\n      & svg {\n        stroke: ${t2(colors.yellow[700], colors.yellow[500])};\n        fill: ${t2(colors.yellow[700], colors.yellow[500])};\n      }\n    `,\n        overflowQueryContainer: u`\n      flex: 1;\n      overflow-y: auto;\n      & > div {\n        display: flex;\n        flex-direction: column;\n      }\n    `,\n        queryRow: u`\n      display: flex;\n      align-items: center;\n      padding: 0;\n      border: none;\n      cursor: pointer;\n      color: ${t2(colors.gray[700], colors.gray[300])};\n      background-color: ${t2(colors.gray[50], colors.darkGray[700])};\n      line-height: 1;\n      &:focus {\n        outline: none;\n      }\n      &:focus-visible {\n        outline-offset: -2px;\n        border-radius: ${border.radius.xs};\n        outline: 2px solid ${colors.blue[800]};\n      }\n      &:hover .tsqd-query-hash {\n        background-color: ${t2(colors.gray[200], colors.darkGray[600])};\n      }\n\n      & .tsqd-query-observer-count {\n        padding: 0 ${tokens.size[1]};\n        user-select: none;\n        min-width: ${tokens.size[6.5]};\n        align-self: stretch;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: ${font.size.xs};\n        font-weight: ${font.weight.medium};\n        border-bottom-width: 1px;\n        border-bottom-style: solid;\n        border-bottom: 1px solid ${t2(colors.gray[300], colors.darkGray[700])};\n      }\n      & .tsqd-query-hash {\n        user-select: text;\n        font-size: ${font.size.xs};\n        display: flex;\n        align-items: center;\n        min-height: ${tokens.size[6]};\n        flex: 1;\n        padding: ${tokens.size[1]} ${tokens.size[2]};\n        font-family: 'Menlo', 'Fira Code', monospace;\n        border-bottom: 1px solid ${t2(colors.gray[300], colors.darkGray[400])};\n        text-align: left;\n        text-overflow: clip;\n        word-break: break-word;\n      }\n\n      & .tsqd-query-disabled-indicator {\n        align-self: stretch;\n        display: flex;\n        align-items: center;\n        padding: 0 ${tokens.size[2]};\n        color: ${t2(colors.gray[800], colors.gray[300])};\n        background-color: ${t2(colors.gray[300], colors.darkGray[600])};\n        border-bottom: 1px solid ${t2(colors.gray[300], colors.darkGray[400])};\n        font-size: ${font.size.xs};\n      }\n    `,\n        selectedQueryRow: u`\n      background-color: ${t2(colors.gray[200], colors.darkGray[500])};\n    `,\n        detailsContainer: u`\n      flex: 1 1 700px;\n      background-color: ${t2(colors.gray[50], colors.darkGray[700])};\n      color: ${t2(colors.gray[700], colors.gray[300])};\n      font-family: 'Inter', sans-serif;\n      display: flex;\n      flex-direction: column;\n      overflow-y: auto;\n      display: flex;\n      text-align: left;\n    `,\n        detailsHeader: u`\n      font-family: 'Inter', sans-serif;\n      position: sticky;\n      top: 0;\n      z-index: 2;\n      background-color: ${t2(colors.gray[200], colors.darkGray[600])};\n      padding: ${tokens.size[1.5]} ${tokens.size[2]};\n      font-weight: ${font.weight.medium};\n      font-size: ${font.size.xs};\n      line-height: ${font.lineHeight.xs};\n      text-align: left;\n    `,\n        detailsBody: u`\n      margin: ${tokens.size[1.5]} 0px ${tokens.size[2]} 0px;\n      & > div {\n        display: flex;\n        align-items: stretch;\n        padding: 0 ${tokens.size[2]};\n        line-height: ${font.lineHeight.sm};\n        justify-content: space-between;\n        & > span {\n          font-size: ${font.size.xs};\n        }\n        & > span:nth-child(2) {\n          font-variant-numeric: tabular-nums;\n        }\n      }\n\n      & > div:first-child {\n        margin-bottom: ${tokens.size[1.5]};\n      }\n\n      & code {\n        font-family: 'Menlo', 'Fira Code', monospace;\n        margin: 0;\n        font-size: ${font.size.xs};\n        line-height: ${font.lineHeight.xs};\n      }\n\n      & pre {\n        margin: 0;\n        display: flex;\n        align-items: center;\n      }\n    `,\n        queryDetailsStatus: u`\n      border: 1px solid ${colors.darkGray[200]};\n      border-radius: ${tokens.border.radius.sm};\n      font-weight: ${font.weight.medium};\n      padding: ${tokens.size[1]} ${tokens.size[2.5]};\n    `,\n        actionsBody: u`\n      flex-wrap: wrap;\n      margin: ${tokens.size[2]} 0px ${tokens.size[2]} 0px;\n      display: flex;\n      gap: ${tokens.size[2]};\n      padding: 0px ${tokens.size[2]};\n      & > button {\n        font-family: 'Inter', sans-serif;\n        font-size: ${font.size.xs};\n        padding: ${tokens.size[1]} ${tokens.size[2]};\n        display: flex;\n        border-radius: ${tokens.border.radius.sm};\n        background-color: ${t2(colors.gray[100], colors.darkGray[600])};\n        border: 1px solid ${t2(colors.gray[300], colors.darkGray[400])};\n        align-items: center;\n        gap: ${tokens.size[2]};\n        font-weight: ${font.weight.medium};\n        line-height: ${font.lineHeight.xs};\n        cursor: pointer;\n        &:focus-visible {\n          outline-offset: 2px;\n          border-radius: ${border.radius.xs};\n          outline: 2px solid ${colors.blue[800]};\n        }\n        &:hover {\n          background-color: ${t2(colors.gray[200], colors.darkGray[500])};\n        }\n\n        &:disabled {\n          opacity: 0.6;\n          cursor: not-allowed;\n        }\n\n        & > span {\n          width: ${size2[1.5]};\n          height: ${size2[1.5]};\n          border-radius: ${tokens.border.radius.full};\n        }\n      }\n    `,\n        actionsSelect: u`\n      font-size: ${font.size.xs};\n      padding: ${tokens.size[0.5]} ${tokens.size[2]};\n      display: flex;\n      border-radius: ${tokens.border.radius.sm};\n      overflow: hidden;\n      background-color: ${t2(colors.gray[100], colors.darkGray[600])};\n      border: 1px solid ${t2(colors.gray[300], colors.darkGray[400])};\n      align-items: center;\n      gap: ${tokens.size[2]};\n      font-weight: ${font.weight.medium};\n      line-height: ${font.lineHeight.sm};\n      color: ${t2(colors.red[500], colors.red[400])};\n      cursor: pointer;\n      position: relative;\n      &:hover {\n        background-color: ${t2(colors.gray[200], colors.darkGray[500])};\n      }\n      & > span {\n        width: ${size2[1.5]};\n        height: ${size2[1.5]};\n        border-radius: ${tokens.border.radius.full};\n      }\n      &:focus-within {\n        outline-offset: 2px;\n        border-radius: ${border.radius.xs};\n        outline: 2px solid ${colors.blue[800]};\n      }\n      & select {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        appearance: none;\n        background-color: transparent;\n        border: none;\n        color: transparent;\n        outline: none;\n      }\n\n      & svg path {\n        stroke: ${tokens.colors.red[400]};\n      }\n      & svg {\n        width: ${tokens.size[2]};\n        height: ${tokens.size[2]};\n      }\n    `,\n        settingsMenu: u`\n      display: flex;\n      & * {\n        font-family: 'Inter', sans-serif;\n      }\n      flex-direction: column;\n      gap: ${size2[0.5]};\n      border-radius: ${tokens.border.radius.sm};\n      border: 1px solid ${t2(colors.gray[300], colors.gray[700])};\n      background-color: ${t2(colors.gray[50], colors.darkGray[600])};\n      font-size: ${font.size.xs};\n      color: ${t2(colors.gray[700], colors.gray[300])};\n      z-index: 99999;\n      min-width: 120px;\n      padding: ${size2[0.5]};\n    `,\n        settingsSubTrigger: u`\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      border-radius: ${tokens.border.radius.xs};\n      padding: ${tokens.size[1]} ${tokens.size[1]};\n      cursor: pointer;\n      background-color: transparent;\n      border: none;\n      color: ${t2(colors.gray[700], colors.gray[300])};\n      & svg {\n        color: ${t2(colors.gray[600], colors.gray[400])};\n        transform: rotate(-90deg);\n        width: ${tokens.size[2]};\n        height: ${tokens.size[2]};\n      }\n      &:hover {\n        background-color: ${t2(colors.gray[200], colors.darkGray[500])};\n      }\n      &:focus-visible {\n        outline-offset: 2px;\n        outline: 2px solid ${colors.blue[800]};\n      }\n      &.data-disabled {\n        opacity: 0.6;\n        cursor: not-allowed;\n      }\n    `,\n        settingsMenuHeader: u`\n      padding: ${tokens.size[1]} ${tokens.size[1]};\n      font-weight: ${font.weight.medium};\n      border-bottom: 1px solid ${t2(colors.gray[300], colors.darkGray[400])};\n      color: ${t2(colors.gray[500], colors.gray[400])};\n      font-size: ${font.size[\"xs\"]};\n    `,\n        settingsSubButton: u`\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      color: ${t2(colors.gray[700], colors.gray[300])};\n      font-size: ${font.size[\"xs\"]};\n      border-radius: ${tokens.border.radius.xs};\n      padding: ${tokens.size[1]} ${tokens.size[1]};\n      cursor: pointer;\n      background-color: transparent;\n      border: none;\n      & svg {\n        color: ${t2(colors.gray[600], colors.gray[400])};\n      }\n      &:hover {\n        background-color: ${t2(colors.gray[200], colors.darkGray[500])};\n      }\n      &:focus-visible {\n        outline-offset: 2px;\n        outline: 2px solid ${colors.blue[800]};\n      }\n    `,\n        themeSelectedButton: u`\n      background-color: ${t2(colors.purple[100], colors.purple[900])};\n      color: ${t2(colors.purple[700], colors.purple[300])};\n      & svg {\n        color: ${t2(colors.purple[700], colors.purple[300])};\n      }\n      &:hover {\n        background-color: ${t2(colors.purple[100], colors.purple[900])};\n      }\n    `,\n        viewToggle: u`\n      border-radius: ${tokens.border.radius.sm};\n      background-color: ${t2(colors.gray[200], colors.darkGray[600])};\n      border: 1px solid ${t2(colors.gray[300], colors.darkGray[200])};\n      display: flex;\n      padding: 0;\n      font-size: ${font.size.xs};\n      color: ${t2(colors.gray[700], colors.gray[300])};\n      overflow: hidden;\n\n      &:has(:focus-visible) {\n        outline: 2px solid ${colors.blue[800]};\n      }\n\n      & .tsqd-radio-toggle {\n        opacity: 0.5;\n        display: flex;\n        & label {\n          display: flex;\n          align-items: center;\n          cursor: pointer;\n          line-height: ${font.lineHeight.md};\n        }\n\n        & label:hover {\n          background-color: ${t2(colors.gray[100], colors.darkGray[500])};\n        }\n      }\n\n      & > [data-checked] {\n        opacity: 1;\n        background-color: ${t2(colors.gray[100], colors.darkGray[400])};\n        & label:hover {\n          background-color: ${t2(colors.gray[100], colors.darkGray[400])};\n        }\n      }\n\n      & .tsqd-radio-toggle:first-child {\n        & label {\n          padding: 0 ${tokens.size[1.5]} 0 ${tokens.size[2]};\n        }\n        border-right: 1px solid ${t2(colors.gray[300], colors.darkGray[200])};\n      }\n\n      & .tsqd-radio-toggle:nth-child(2) {\n        & label {\n          padding: 0 ${tokens.size[2]} 0 ${tokens.size[1.5]};\n        }\n      }\n    `\n    };\n};\nvar lightStyles2 = stylesFactory2(\"light\");\nvar darkStyles2 = stylesFactory2(\"dark\");\n(0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.delegateEvents)([\n    \"click\",\n    \"mousedown\",\n    \"input\"\n]);\n/*! Bundled license information:\n\n@tanstack/match-sorter-utils/build/lib/index.mjs:\n  (**\n   * match-sorter-utils\n   *\n   * Copyright (c) TanStack\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE.md file in the root directory of this source tree.\n   *\n   * @license MIT\n   *)\n  (**\n   * @name match-sorter\n   * @license MIT license.\n   * @copyright (c) 2099 Kent C. Dodds\n   * @author Kent C. Dodds <me@kentcdodds.com> (https://kentcdodds.com)\n   *)\n\n@kobalte/utils/dist/index.js:\n  (*!\n   * Portions of this file are based on code from ariakit.\n   * MIT Licensed, Copyright (c) Diego Haz.\n   *\n   * Credits to the Ariakit team:\n   * https://github.com/ariakit/ariakit/blob/da142672eddefa99365773ced72171facc06fdcb/packages/ariakit-utils/src/array.ts\n   *)\n  (*!\n   * Original code by Chakra UI\n   * MIT Licensed, Copyright (c) 2019 Segun Adebayo.\n   *\n   * Credits to the Chakra UI team:\n   * https://github.com/chakra-ui/chakra-ui/blob/main/packages/utils/src/assertion.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/solidjs-community/solid-aria/blob/2c5f54feb5cfea514b1ee0a52d0416878f882351/packages/utils/src/createGlobalListeners.ts\n   *)\n  (*!\n   * Portions of this file are based on code from ariakit.\n   * MIT Licensed, Copyright (c) Diego Haz.\n   *\n   * Credits to the Ariakit team:\n   * https://github.com/ariakit/ariakit/blob/232bc79018ec20967fec1e097a9474aba3bb5be7/packages/ariakit-utils/src/dom.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/cf9ab24f3255be1530d0f584061a01aa1e8180e6/packages/@react-aria/utils/src/platform.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/a9dea8a3672179e6c38aafd1429daf44c7ea2ff6/packages/@react-aria/utils/src/focusWithoutScrolling.ts\n   *)\n  (*!\n   * Portions of this file are based on code from ariakit.\n   * MIT Licensed, Copyright (c) Diego Haz.\n   *\n   * Credits to the Ariakit team:\n   * https://github.com/ariakit/ariakit/blob/main/packages/ariakit-utils/src/focus.ts\n   *\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/main/packages/%40react-aria/focus/src/isElementVisible.ts\n   * https://github.com/adobe/react-spectrum/blob/8f2f2acb3d5850382ebe631f055f88c704aa7d17/packages/@react-aria/focus/src/FocusScope.tsx\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/f6e686fe9d3b983d48650980c1ecfdde320bc62f/packages/@react-aria/focus/src/FocusScope.tsx\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/a9dea8a3672179e6c38aafd1429daf44c7ea2ff6/packages/@react-aria/utils/src/getScrollParent.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/a9dea8a3672179e6c38aafd1429daf44c7ea2ff6/packages/@react-aria/utils/src/isVirtualEvent.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/ff3e690fffc6c54367b8057e28a0e5b9211f37b5/packages/@react-stately/utils/src/number.ts\n   *)\n  (*!\n   * Portions of this file are based on code from ariakit.\n   * MIT Licensed, Copyright (c) Diego Haz.\n   *\n   * Credits to the Ariakit team:\n   * https://github.com/ariakit/ariakit/blob/84e97943ad637a582c01c9b56d880cd95f595737/packages/ariakit/src/hovercard/__utils/polygon.ts\n   * https://github.com/ariakit/ariakit/blob/f2a96973de523d67e41eec983263936c489ef3e2/packages/ariakit/src/hovercard/__utils/debug-polygon.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/a9dea8a3672179e6c38aafd1429daf44c7ea2ff6/packages/@react-aria/utils/src/runAfterTransition.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/8f2f2acb3d5850382ebe631f055f88c704aa7d17/packages/@react-aria/utils/src/scrollIntoView.ts\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Original code by Chakra UI\n   * MIT Licensed, Copyright (c) 2019 Segun Adebayo.\n   *\n   * Credits to the Chakra UI team:\n   * https://github.com/chakra-ui/chakra-ui/blob/main/packages/color-mode/src/color-mode-context.ts\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Original code by Chakra UI\n   * MIT Licensed, Copyright (c) 2019 Segun Adebayo.\n   *\n   * Credits to the Chakra UI team:\n   * https://github.com/chakra-ui/chakra-ui/blob/main/packages/color-mode/src/storage-manager.ts\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Original code by Chakra UI\n   * MIT Licensed, Copyright (c) 2019 Segun Adebayo.\n   *\n   * Credits to the Chakra UI team:\n   * https://github.com/chakra-ui/chakra-ui/blob/main/packages/color-mode/src/color-mode.utils.ts\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/bfce84fee12a027d9cbc38b43e1747e3e4b4b169/packages/@react-stately/collections/src/useCollection.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/22cb32d329e66c60f55d4fc4025d1d44bb015d71/packages/@react-stately/collections/src/getItemCount.ts\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Portions of this file are based on code from radix-ui-primitives.\n   * MIT Licensed, Copyright (c) 2022 WorkOS.\n   *\n   * Credits to the Radix UI team:\n   * https://github.com/radix-ui/primitives/blob/81b25f4b40c54f72aeb106ca0e64e1e09655153e/packages/react/dismissable-layer/src/DismissableLayer.tsx\n   *\n   * Portions of this file are based on code from zag.\n   * MIT Licensed, Copyright (c) 2021 Chakra UI.\n   *\n   * Credits to the Chakra UI team:\n   * https://github.com/chakra-ui/zag/blob/d1dbf9e240803c9e3ed81ebef363739be4273de0/packages/utilities/dismissable/src/layer-stack.ts\n   *)\n  (*!\n   * Portions of this file are based on code from radix-ui-primitives.\n   * MIT Licensed, Copyright (c) 2022 WorkOS.\n   *\n   * Credits to the Radix UI team:\n   * https://github.com/radix-ui/primitives/blob/81b25f4b40c54f72aeb106ca0e64e1e09655153e/packages/react/focus-scope/src/FocusScope.tsx\n   *\n   * Portions of this file are based on code from zag.\n   * MIT Licensed, Copyright (c) 2021 Chakra UI.\n   *\n   * Credits to the Chakra UI team:\n   * https://github.com/chakra-ui/zag/blob/d1dbf9e240803c9e3ed81ebef363739be4273de0/packages/utilities/focus-scope/src/focus-on-child-unmount.ts\n   * https://github.com/chakra-ui/zag/blob/d1dbf9e240803c9e3ed81ebef363739be4273de0/packages/utilities/focus-scope/src/focus-containment.ts\n   *)\n  (*!\n   * Portions of this file are based on code from zag.\n   * MIT Licensed, Copyright (c) 2021 Chakra UI.\n   *\n   * Credits to the zag team:\n   * https://github.com/chakra-ui/zag/blob/c1e6c7689b22bf58741ded7cf224dd9baec2a046/packages/utilities/form-utils/src/form.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/15e101b74966bd5eb719c6529ce71ce57eaed430/packages/@react-aria/live-announcer/src/LiveAnnouncer.tsx\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * This file is based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/810579b671791f1593108f62cdc1893de3a220e3/packages/@react-aria/overlays/src/ariaHideOutside.ts\n   *)\n  (*!\n   * Portions of this file are based on code from radix-ui-primitives.\n   * MIT Licensed, Copyright (c) 2022 WorkOS.\n   *\n   * Credits to the Radix UI team:\n   * https://github.com/radix-ui/primitives/blob/81b25f4b40c54f72aeb106ca0e64e1e09655153e/packages/react/dismissable-layer/src/DismissableLayer.tsx\n   *\n   * Portions of this file are based on code from zag.\n   * MIT Licensed, Copyright (c) 2021 Chakra UI.\n   *\n   * Credits to the Chakra UI team:\n   * https://github.com/chakra-ui/zag/blob/d1dbf9e240803c9e3ed81ebef363739be4273de0/packages/utilities/interact-outside/src/index.ts\n   *)\n  (*!\n   * Portions of this file are based on code from radix-ui-primitives.\n   * MIT Licensed, Copyright (c) 2022 WorkOS.\n   *\n   * Credits to the Radix UI team:\n   * https://github.com/radix-ui/primitives/blob/21a7c97dc8efa79fecca36428eec49f187294085/packages/react/presence/src/Presence.tsx\n   * https://github.com/radix-ui/primitives/blob/21a7c97dc8efa79fecca36428eec49f187294085/packages/react/presence/src/useStateMachine.tsx\n   *)\n  (*!\n   * Portions of this file are based on code from floating-ui.\n   * MIT Licensed, Copyright (c) 2021 Floating UI contributors.\n   *\n   * Credits to the Floating UI contributors:\n   * https://github.com/floating-ui/floating-ui/blob/f7ce9420aa32c150eb45049f12cf3b5506715341/packages/react/src/components/FloatingOverlay.tsx\n   *\n   * Portions of this file are based on code from ariakit.\n   * MIT Licensed, Copyright (c) Diego Haz.\n   *\n   * Credits to the Ariakit team:\n   * https://github.com/ariakit/ariakit/blob/5d8a1f047fcadcf117073c70359663a3946b73bf/packages/ariakit/src/dialog/__utils/use-prevent-body-scroll.ts\n   *)\n  (*!\n   * Portions of this file are based on code from ariakit.\n   * MIT Licensed, Copyright (c) Diego Haz.\n   *\n   * Credits to the ariakit team:\n   * https://github.com/ariakit/ariakit/blob/8a13899ff807bbf39f3d89d2d5964042ba4d5287/packages/ariakit-react-utils/src/hooks.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/a13802d8be6f83af1450e56f7a88527b10d9cadf/packages/@react-stately/toggle/src/useToggleState.ts\n   *)\n  (*!\n   * Portions of this file are based on code from mantinedev.\n   * MIT Licensed, Copyright (c) 2021 Vitaly Rtishchev.\n   *\n   * Credits to the Mantinedev team:\n   * https://github.com/mantinedev/mantine/blob/8546c580fdcaa9653edc6f4813103349a96cfb09/src/mantine-core/src/Transition/get-transition-styles/get-transition-styles.ts\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Portions of this file are based on code from mantinedev.\n   * MIT Licensed, Copyright (c) 2021 Vitaly Rtishchev.\n   *\n   * Credits to the Mantinedev team:\n   * https://github.com/mantinedev/mantine/blob/8546c580fdcaa9653edc6f4813103349a96cfb09/src/mantine-core/src/Transition/use-transition.ts\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/70e7caf1946c423bc9aa9cb0e50dbdbe953d239b/packages/@react-aria/label/src/useField.ts\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/b35d5c02fe900badccd0cf1a8f23bb593419f238/packages/@react-aria/i18n/src/utils.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/b35d5c02fe900badccd0cf1a8f23bb593419f238/packages/@react-aria/i18n/src/useDefaultLocale.ts\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/b35d5c02fe900badccd0cf1a8f23bb593419f238/packages/@react-aria/i18n/src/useCollator.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/15e101b74966bd5eb719c6529ce71ce57eaed430/packages/@react-aria/i18n/src/useDateFormatter.ts\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/22cb32d329e66c60f55d4fc4025d1d44bb015d71/packages/@react-aria/i18n/src/useFilter.ts\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/23c3a91e7b87952f07da9da115188bd2abd99d77/packages/@react-aria/i18n/src/useMessageFormatter.ts\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/b35d5c02fe900badccd0cf1a8f23bb593419f238/packages/@react-aria/i18n/src/useNumberFormatter.ts\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/bfce84fee12a027d9cbc38b43e1747e3e4b4b169/packages/@react-stately/selection/src/Selection.ts\n   * https://github.com/adobe/react-spectrum/blob/bfce84fee12a027d9cbc38b43e1747e3e4b4b169/packages/@react-stately/selection/src/types.ts\n   * https://github.com/adobe/react-spectrum/blob/bfce84fee12a027d9cbc38b43e1747e3e4b4b169/packages/@react-types/shared/src/selection.d.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/8f2f2acb3d5850382ebe631f055f88c704aa7d17/packages/@react-aria/selection/src/utils.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/bfce84fee12a027d9cbc38b43e1747e3e4b4b169/packages/@react-stately/selection/src/useMultipleSelectionState.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/8f2f2acb3d5850382ebe631f055f88c704aa7d17/packages/@react-aria/selection/src/useTypeSelect.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/8f2f2acb3d5850382ebe631f055f88c704aa7d17/packages/@react-aria/selection/src/useSelectableCollection.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/8f2f2acb3d5850382ebe631f055f88c704aa7d17/packages/@react-aria/selection/src/useSelectableItem.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/bfce84fee12a027d9cbc38b43e1747e3e4b4b169/packages/@react-stately/selection/src/SelectionManager.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/bfce84fee12a027d9cbc38b43e1747e3e4b4b169/packages/@react-stately/list/src/ListCollection.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/bfce84fee12a027d9cbc38b43e1747e3e4b4b169/packages/@react-stately/list/src/useListState.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/8f2f2acb3d5850382ebe631f055f88c704aa7d17/packages/@react-aria/selection/src/ListKeyboardDelegate.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/8f2f2acb3d5850382ebe631f055f88c704aa7d17/packages/@react-aria/selection/src/useSelectableList.ts\n   *)\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/8f2f2acb3d5850382ebe631f055f88c704aa7d17/packages/@react-stately/list/src/useSingleSelectListState.ts\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Portions of this file are based on code from ariakit\n   * MIT Licensed, Copyright (c) Diego Haz.\n   *\n   * Credits to the ariakit team:\n   * https://github.com/hope-ui/hope-ui/blob/54125b130195f37161dbeeea0c21dc3b198bc3ac/packages/core/src/button/is-button.ts\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Portions of this file are based on code from ariakit.\n   * MIT Licensed, Copyright (c) Diego Haz.\n   *\n   * Credits to the Ariakit team:\n   * https://github.com/ariakit/ariakit/blob/da142672eddefa99365773ced72171facc06fdcb/packages/ariakit/src/collection/collection-state.ts\n   *)\n  (*!\n   * Portions of this file are based on code from ariakit.\n   * MIT Licensed, Copyright (c) Diego Haz.\n   *\n   * Credits to the Ariakit team:\n   * https://github.com/ariakit/ariakit/blob/da142672eddefa99365773ced72171facc06fdcb/packages/ariakit/src/collection/collection.tsx\n   * https://github.com/ariakit/ariakit/blob/da142672eddefa99365773ced72171facc06fdcb/packages/ariakit/src/collection/collection-state.ts\n   * https://github.com/ariakit/ariakit/blob/da142672eddefa99365773ced72171facc06fdcb/packages/ariakit/src/collection/collection-item.ts\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/0a1d0cd4e1b2f77eed7c0ea08fce8a04f8de6921/packages/@react-stately/calendar/src/utils.ts\n   *\n   * Portions of this file are based on code from zag, based on code from react-spectrum.\n   * MIT Licensed, Copyright (c) 2021 Chakra UI.\n   *\n   * Credits to the Chakra UI team:\n   * https://github.com/chakra-ui/zag/blob/main/packages/utilities/date-utils/src/pagination.ts\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Portions of this file are based on code from radix-ui-primitives.\n   * MIT Licensed, Copyright (c) 2022 WorkOS.\n   *\n   * Credits to the Radix UI team:\n   * https://github.com/radix-ui/primitives/blob/81b25f4b40c54f72aeb106ca0e64e1e09655153e/packages/react/menu/src/Menu.tsx\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/950d45db36e63851f411ed0dc6a5aad0af57da68/packages/@react-stately/datepicker/src/placeholders.ts\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/950d45db36e63851f411ed0dc6a5aad0af57da68/packages/@react-stately/datepicker/src/utils.ts\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/99ca82e87ba2d7fdd54f5b49326fd242320b4b51/packages/%40react-aria/datepicker/src/useDisplayNames.ts\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Portions of this file are based on code from ariakit.\n   * MIT Licensed, Copyright (c) Diego Haz.\n   *\n   * Credits to the Ariakit team:\n   * https://github.com/ariakit/ariakit/blob/84e97943ad637a582c01c9b56d880cd95f595737/packages/ariakit/src/hovercard/__utils/polygon.ts\n   * https://github.com/ariakit/ariakit/blob/f2a96973de523d67e41eec983263936c489ef3e2/packages/ariakit/src/hovercard/__utils/debug-polygon.ts\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/1ddcde7b4fef9af7f08e11bb78d71fe60bbcc64b/packages/@react-stately/slider/src/useSliderState.ts\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/blob/6b51339cca0b8344507d3c8e81e7ad05d6e75f9b/packages/@react-aria/tabs/src/TabsKeyboardDelegate.ts\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Portions of this file are based on code from react-spectrum.\n   * Apache License Version 2.0, Copyright 2020 Adobe.\n   *\n   * Credits to the React Spectrum team:\n   * https://github.com/adobe/react-spectrum/tree/main/packages/%40react-aria/toast/intl\n   *)\n\n@kobalte/core/dist/esm/index.js:\n  (*!\n   * Portions of this file are based on code from ariakit.\n   * MIT Licensed, Copyright (c) Diego Haz.\n   *\n   * Credits to the Ariakit team:\n   * https://github.com/ariakit/ariakit/blob/84e97943ad637a582c01c9b56d880cd95f595737/packages/ariakit/src/hovercard/__utils/polygon.ts\n   * https://github.com/ariakit/ariakit/blob/f2a96973de523d67e41eec983263936c489ef3e2/packages/ariakit/src/hovercard/__utils/debug-polygon.ts\n   *)\n*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWRldnRvb2xzL2J1aWxkL0RldnRvb2xzL0E2RFA3QktJLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWl0QjtBQUVqdEIsNEhBQTRIO0FBQzVILElBQUlxRCxlQUFlO0lBQ2pCQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLElBQVM7SUFDVEMsSUFBUztJQUNUQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxJQUFTO0lBQ1RDLElBQVM7SUFDVEMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsSUFBUztJQUNUQyxJQUFTO0lBQ1RDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsSUFBUztJQUNUQyxJQUFTO0lBQ1RDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxJQUFTO0lBQ1RDLElBQVM7SUFDVEMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsSUFBUztJQUNUQyxJQUFTO0lBQ1RDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxJQUFTO0lBQ1RDLElBQVM7SUFDVEMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLElBQVM7SUFDVEMsSUFBUztJQUNUQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLElBQVM7SUFDVEMsSUFBUztJQUNUQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxJQUFTO0lBQ1RDLElBQVM7SUFDVEMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLElBQVM7SUFDVEMsSUFBUztJQUNUQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLElBQVM7SUFDVEMsSUFBUztJQUNUQyxJQUFTO0lBQ1RDLElBQVM7SUFDVEMsSUFBUztJQUNUQyxJQUFTO0lBQ1RDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLElBQVM7SUFDVEMsSUFBUztJQUNUQyxJQUFjO0lBQ2RDLElBQWM7SUFDZEMsSUFBYztJQUNkQyxJQUFjO0lBQ2RDLElBQVM7SUFDVEMsSUFBUztJQUNUQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLElBQVM7SUFDVEMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsSUFBUztJQUNUQyxJQUFTO0lBQ1RDLElBQVM7SUFDVEMsSUFBUztJQUNUQyxJQUFTO0lBQ1RDLElBQVM7SUFDVEMsSUFBYztJQUNkQyxJQUFjO0lBQ2RDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxJQUFTO0lBQ1RDLElBQVM7SUFDVEMsSUFBUztJQUNUQyxJQUFTO0lBQ1RDLElBQVM7SUFDVEMsSUFBUztJQUNUQyxJQUFTO0lBQ1RDLElBQVM7SUFDVEMsSUFBUztJQUNUQyxJQUFTO0lBQ1RDLElBQVM7SUFDVEMsSUFBUztJQUNUQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsR0FBUTtJQUNSQyxHQUFRO0lBQ1JDLElBQWM7SUFDZEMsSUFBYztJQUNkQyxHQUFRO0lBQ1JDLEdBQVE7SUFDUkMsSUFBUztJQUNUQyxJQUFTO0lBQ1RDLElBQWM7SUFDZEMsSUFBYztJQUNkQyxJQUFTO0lBQ1RDLElBQVM7SUFDVEMsSUFBUztJQUNUQyxJQUFTO0lBQ1RDLElBQVM7SUFDVEMsSUFBUztJQUNUQyxJQUFTO0lBQ1RDLElBQVM7SUFD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Q1BDLEtBQUs7SUFDUDtJQUNBeUMsSUFBSTtRQUNGM0MsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLEtBQUs7SUFDUDtJQUNBMEMsSUFBSTtRQUNGNUMsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLEtBQUs7SUFDUDtJQUNBMkMsSUFBSTtRQUNGN0MsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLEtBQUs7SUFDUDtJQUNBNEMsSUFBSTtRQUNGOUMsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLEtBQUs7SUFDUDtJQUNBNkMsSUFBSTtRQUNGL0MsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLEtBQUs7SUFDUDtJQUNBOEMsSUFBSTtRQUNGaEQsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLEtBQUs7SUFDUDtJQUNBK0MsSUFBSTtRQUNGakQsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLEtBQUs7SUFDUDtJQUNBZ0QsS0FBSztRQUNIbEQsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLEtBQUs7SUFDUDtJQUNBaUQsSUFBSTtRQUNGbkQsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLEtBQUs7SUFDUDtJQUNBa0QsSUFBSTtRQUNGcEQsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLEtBQUs7SUFDUDtJQUNBbUQsSUFBSTtRQUNGckQsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLEtBQUs7SUFDUDtJQUNBb0QsSUFBSTtRQUNGdEQsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLEtBQUs7SUFDUDtJQUNBcUQsSUFBSTtRQUNGdkQsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLEtBQUs7SUFDUDtJQUNBc0QsSUFBSTtRQUNGeEQsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLEtBQUs7SUFDUDtJQUNBdUQsSUFBSTtRQUNGekQsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLEtBQUs7SUFDUDtJQUNBd0QsSUFBSTtRQUNGMUQsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLEtBQUs7SUFDUDtJQUNBeUQsSUFBSTtRQUNGM0QsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLEtBQUs7SUFDUDtJQUNBMEQsSUFBSTtRQUNGNUQs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Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdWpCQSxHQUV1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZV9jbGllbnQvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWRldnRvb2xzL2J1aWxkL0RldnRvb2xzL0E2RFA3QktJLmpzP2M4MDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgZGVsZWdhdGVFdmVudHMsIHNvcnRGbnMsIG11dGF0aW9uU29ydEZucywgY3JlYXRlU2lnbmFsLCAkUFJPWFksICRUUkFDSywgZ2V0TGlzdGVuZXIsIGJhdGNoLCBnZXRQcmVmZXJyZWRDb2xvclNjaGVtZSwgY3JlYXRlTWVtbywgY3JlYXRlQ29tcG9uZW50LCBjcmVhdGVFZmZlY3QsIG9uTW91bnQsIG9uQ2xlYW51cCwgdXNlLCBpbnNlcnQsIFNob3csIGNyZWF0ZVJlbmRlckVmZmVjdCwgY2xhc3NOYW1lLCBvbiwgc2V0QXR0cmlidXRlLCBnZXRRdWVyeVN0YXR1c0NvbG9yLCBnZXRNdXRhdGlvblN0YXR1c0NvbG9yLCBnZXRRdWVyeVN0YXR1c0xhYmVsLCBzcHJlYWQsIG1lcmdlUHJvcHMsIGdldFF1ZXJ5U3RhdHVzQ29sb3JCeUxhYmVsLCBkaXNwbGF5VmFsdWUsIEZvciwgaXNTZXJ2ZXIsIGNyZWF0ZVVuaXF1ZUlkLCB1c2VDb250ZXh0LCBJbmRleCwgdXBkYXRlTmVzdGVkRGF0YUJ5UGF0aCwgdGVtcGxhdGUsIGNvbnZlcnRSZW1Ub1BpeGVscywgZ2V0U2lkZWRQcm9wLCB1bnRyYWNrLCB1c2VUcmFuc2l0aW9uLCBjcmVhdGVSb290LCBzcGxpdFByb3BzLCBQb3J0YWwsIGFkZEV2ZW50TGlzdGVuZXIsIHN0cmluZ2lmeSwgU3dpdGNoLCBNYXRjaCwgZGVsZXRlTmVzdGVkRGF0YUJ5UGF0aCwgRHluYW1pYywgY2hpbGRyZW4sIGNyZWF0ZUNvbXB1dGVkLCBnZXRPd25lciwgREVWIH0gZnJvbSAnLi4vY2h1bmsvVUY3V1g2REIuanMnO1xuXG4vLyAuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhbnN0YWNrK21hdGNoLXNvcnRlci11dGlsc0A4LjguNC9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL21hdGNoLXNvcnRlci11dGlscy9idWlsZC9saWIvaW5kZXgubWpzXG52YXIgY2hhcmFjdGVyTWFwID0ge1xuICBcXHUwMEMwOiBcIkFcIixcbiAgXFx1MDBDMTogXCJBXCIsXG4gIFxcdTAwQzI6IFwiQVwiLFxuICBcXHUwMEMzOiBcIkFcIixcbiAgXFx1MDBDNDogXCJBXCIsXG4gIFxcdTAwQzU6IFwiQVwiLFxuICBcXHUxRUE0OiBcIkFcIixcbiAgXFx1MUVBRTogXCJBXCIsXG4gIFxcdTFFQjI6IFwiQVwiLFxuICBcXHUxRUI0OiBcIkFcIixcbiAgXFx1MUVCNjogXCJBXCIsXG4gIFxcdTAwQzY6IFwiQUVcIixcbiAgXFx1MUVBNjogXCJBXCIsXG4gIFxcdTFFQjA6IFwiQVwiLFxuICBcXHUwMjAyOiBcIkFcIixcbiAgXFx1MDBDNzogXCJDXCIsXG4gIFxcdTFFMDg6IFwiQ1wiLFxuICBcXHUwMEM4OiBcIkVcIixcbiAgXFx1MDBDOTogXCJFXCIsXG4gIFxcdTAwQ0E6IFwiRVwiLFxuICBcXHUwMENCOiBcIkVcIixcbiAgXFx1MUVCRTogXCJFXCIsXG4gIFxcdTFFMTY6IFwiRVwiLFxuICBcXHUxRUMwOiBcIkVcIixcbiAgXFx1MUUxNDogXCJFXCIsXG4gIFxcdTFFMUM6IFwiRVwiLFxuICBcXHUwMjA2OiBcIkVcIixcbiAgXFx1MDBDQzogXCJJXCIsXG4gIFxcdTAwQ0Q6IFwiSVwiLFxuICBcXHUwMENFOiBcIklcIixcbiAgXFx1MDBDRjogXCJJXCIsXG4gIFxcdTFFMkU6IFwiSVwiLFxuICBcXHUwMjBBOiBcIklcIixcbiAgXFx1MDBEMDogXCJEXCIsXG4gIFxcdTAwRDE6IFwiTlwiLFxuICBcXHUwMEQyOiBcIk9cIixcbiAgXFx1MDBEMzogXCJPXCIsXG4gIFxcdTAwRDQ6IFwiT1wiLFxuICBcXHUwMEQ1OiBcIk9cIixcbiAgXFx1MDBENjogXCJPXCIsXG4gIFxcdTAwRDg6IFwiT1wiLFxuICBcXHUxRUQwOiBcIk9cIixcbiAgXFx1MUU0QzogXCJPXCIsXG4gIFxcdTFFNTI6IFwiT1wiLFxuICBcXHUwMjBFOiBcIk9cIixcbiAgXFx1MDBEOTogXCJVXCIsXG4gIFxcdTAwREE6IFwiVVwiLFxuICBcXHUwMERCOiBcIlVcIixcbiAgXFx1MDBEQzogXCJVXCIsXG4gIFxcdTAwREQ6IFwiWVwiLFxuICBcXHUwMEUwOiBcImFcIixcbiAgXFx1MDBFMTogXCJhXCIsXG4gIFxcdTAwRTI6IFwiYVwiLFxuICBcXHUwMEUzOiBcImFcIixcbiAgXFx1MDBFNDogXCJhXCIsXG4gIFxcdTAwRTU6IFwiYVwiLFxuICBcXHUxRUE1OiBcImFcIixcbiAgXFx1MUVBRjogXCJhXCIsXG4gIFxcdTFFQjM6IFwiYVwiLFxuICBcXHUxRUI1OiBcImFcIixcbiAgXFx1MUVCNzogXCJhXCIsXG4gIFxcdTAwRTY6IFwiYWVcIixcbiAgXFx1MUVBNzogXCJhXCIsXG4gIFxcdTFFQjE6IFwiYVwiLFxuICBcXHUwMjAzOiBcImFcIixcbiAgXFx1MDBFNzogXCJjXCIsXG4gIFxcdTFFMDk6IFwiY1wiLFxuICBcXHUwMEU4OiBcImVcIixcbiAgXFx1MDBFOTogXCJlXCIsXG4gIFxcdTAwRUE6IFwiZVwiLFxuICBcXHUwMEVCOiBcImVcIixcbiAgXFx1MUVCRjogXCJlXCIsXG4gIFxcdTFFMTc6IFwiZVwiLFxuICBcXHUxRUMxOiBcImVcIixcbiAgXFx1MUUxNTogXCJlXCIsXG4gIFxcdTFFMUQ6IFwiZVwiLFxuICBcXHUwMjA3OiBcImVcIixcbiAgXFx1MDBFQzogXCJpXCIsXG4gIFxcdTAwRUQ6IFwiaVwiLFxuICBcXHUwMEVFOiBcImlcIixcbiAgXFx1MDBFRjogXCJpXCIsXG4gIFxcdTFFMkY6IFwiaVwiLFxuICBcXHUwMjBCOiBcImlcIixcbiAgXFx1MDBGMDogXCJkXCIsXG4gIFxcdTAwRjE6IFwiblwiLFxuICBcXHUwMEYyOiBcIm9cIixcbiAgXFx1MDBGMzogXCJvXCIsXG4gIFxcdTAwRjQ6IFwib1wiLFxuICBcXHUwMEY1OiBcIm9cIixcbiAgXFx1MDBGNjogXCJvXCIsXG4gIFxcdTAwRjg6IFwib1wiLFxuICBcXHUxRUQxOiBcIm9cIixcbiAgXFx1MUU0RDogXCJvXCIsXG4gIFxcdTFFNTM6IFwib1wiLFxuICBcXHUwMjBGOiBcIm9cIixcbiAgXFx1MDBGOTogXCJ1XCIsXG4gIFxcdTAwRkE6IFwidVwiLFxuICBcXHUwMEZCOiBcInVcIixcbiAgXFx1MDBGQzogXCJ1XCIsXG4gIFxcdTAwRkQ6IFwieVwiLFxuICBcXHUwMEZGOiBcInlcIixcbiAgXFx1MDEwMDogXCJBXCIsXG4gIFxcdTAxMDE6IFwiYVwiLFxuICBcXHUwMTAyOiBcIkFcIixcbiAgXFx1MDEwMzogXCJhXCIsXG4gIFxcdTAxMDQ6IFwiQVwiLFxuICBcXHUwMTA1OiBcImFcIixcbiAgXFx1MDEwNjogXCJDXCIsXG4gIFxcdTAxMDc6IFwiY1wiLFxuICBcXHUwMTA4OiBcIkNcIixcbiAgXFx1MDEwOTogXCJjXCIsXG4gIFxcdTAxMEE6IFwiQ1wiLFxuICBcXHUwMTBCOiBcImNcIixcbiAgXFx1MDEwQzogXCJDXCIsXG4gIFxcdTAxMEQ6IFwiY1wiLFxuICBDXFx1MDMwNjogXCJDXCIsXG4gIGNcXHUwMzA2OiBcImNcIixcbiAgXFx1MDEwRTogXCJEXCIsXG4gIFxcdTAxMEY6IFwiZFwiLFxuICBcXHUwMTEwOiBcIkRcIixcbiAgXFx1MDExMTogXCJkXCIsXG4gIFxcdTAxMTI6IFwiRVwiLFxuICBcXHUwMTEzOiBcImVcIixcbiAgXFx1MDExNDogXCJFXCIsXG4gIFxcdTAxMTU6IFwiZVwiLFxuICBcXHUwMTE2OiBcIkVcIixcbiAgXFx1MDExNzogXCJlXCIsXG4gIFxcdTAxMTg6IFwiRVwiLFxuICBcXHUwMTE5OiBcImVcIixcbiAgXFx1MDExQTogXCJFXCIsXG4gIFxcdTAxMUI6IFwiZVwiLFxuICBcXHUwMTFDOiBcIkdcIixcbiAgXFx1MDFGNDogXCJHXCIsXG4gIFxcdTAxMUQ6IFwiZ1wiLFxuICBcXHUwMUY1OiBcImdcIixcbiAgXFx1MDExRTogXCJHXCIsXG4gIFxcdTAxMUY6IFwiZ1wiLFxuICBcXHUwMTIwOiBcIkdcIixcbiAgXFx1MDEyMTogXCJnXCIsXG4gIFxcdTAxMjI6IFwiR1wiLFxuICBcXHUwMTIzOiBcImdcIixcbiAgXFx1MDEyNDogXCJIXCIsXG4gIFxcdTAxMjU6IFwiaFwiLFxuICBcXHUwMTI2OiBcIkhcIixcbiAgXFx1MDEyNzogXCJoXCIsXG4gIFxcdTFFMkE6IFwiSFwiLFxuICBcXHUxRTJCOiBcImhcIixcbiAgXFx1MDEyODogXCJJXCIsXG4gIFxcdTAxMjk6IFwiaVwiLFxuICBcXHUwMTJBOiBcIklcIixcbiAgXFx1MDEyQjogXCJpXCIsXG4gIFxcdTAxMkM6IFwiSVwiLFxuICBcXHUwMTJEOiBcImlcIixcbiAgXFx1MDEyRTogXCJJXCIsXG4gIFxcdTAxMkY6IFwiaVwiLFxuICBcXHUwMTMwOiBcIklcIixcbiAgXFx1MDEzMTogXCJpXCIsXG4gIFxcdTAxMzI6IFwiSUpcIixcbiAgXFx1MDEzMzogXCJpalwiLFxuICBcXHUwMTM0OiBcIkpcIixcbiAgXFx1MDEzNTogXCJqXCIsXG4gIFxcdTAxMzY6IFwiS1wiLFxuICBcXHUwMTM3OiBcImtcIixcbiAgXFx1MUUzMDogXCJLXCIsXG4gIFxcdTFFMzE6IFwia1wiLFxuICBLXFx1MDMwNjogXCJLXCIsXG4gIGtcXHUwMzA2OiBcImtcIixcbiAgXFx1MDEzOTogXCJMXCIsXG4gIFxcdTAxM0E6IFwibFwiLFxuICBcXHUwMTNCOiBcIkxcIixcbiAgXFx1MDEzQzogXCJsXCIsXG4gIFxcdTAxM0Q6IFwiTFwiLFxuICBcXHUwMTNFOiBcImxcIixcbiAgXFx1MDEzRjogXCJMXCIsXG4gIFxcdTAxNDA6IFwibFwiLFxuICBcXHUwMTQxOiBcImxcIixcbiAgXFx1MDE0MjogXCJsXCIsXG4gIFxcdTFFM0U6IFwiTVwiLFxuICBcXHUxRTNGOiBcIm1cIixcbiAgTVxcdTAzMDY6IFwiTVwiLFxuICBtXFx1MDMwNjogXCJtXCIsXG4gIFxcdTAxNDM6IFwiTlwiLFxuICBcXHUwMTQ0OiBcIm5cIixcbiAgXFx1MDE0NTogXCJOXCIsXG4gIFxcdTAxNDY6IFwiblwiLFxuICBcXHUwMTQ3OiBcIk5cIixcbiAgXFx1MDE0ODogXCJuXCIsXG4gIFxcdTAxNDk6IFwiblwiLFxuICBOXFx1MDMwNjogXCJOXCIsXG4gIG5cXHUwMzA2OiBcIm5cIixcbiAgXFx1MDE0QzogXCJPXCIsXG4gIFxcdTAxNEQ6IFwib1wiLFxuICBcXHUwMTRFOiBcIk9cIixcbiAgXFx1MDE0RjogXCJvXCIsXG4gIFxcdTAxNTA6IFwiT1wiLFxuICBcXHUwMTUxOiBcIm9cIixcbiAgXFx1MDE1MjogXCJPRVwiLFxuICBcXHUwMTUzOiBcIm9lXCIsXG4gIFBcXHUwMzA2OiBcIlBcIixcbiAgcFxcdTAzMDY6IFwicFwiLFxuICBcXHUwMTU0OiBcIlJcIixcbiAgXFx1MDE1NTogXCJyXCIsXG4gIFxcdTAxNTY6IFwiUlwiLFxuICBcXHUwMTU3OiBcInJcIixcbiAgXFx1MDE1ODogXCJSXCIsXG4gIFxcdTAxNTk6IFwiclwiLFxuICBSXFx1MDMwNjogXCJSXCIsXG4gIHJcXHUwMzA2OiBcInJcIixcbiAgXFx1MDIxMjogXCJSXCIsXG4gIFxcdTAyMTM6IFwiclwiLFxuICBcXHUwMTVBOiBcIlNcIixcbiAgXFx1MDE1QjogXCJzXCIsXG4gIFxcdTAxNUM6IFwiU1wiLFxuICBcXHUwMTVEOiBcInNcIixcbiAgXFx1MDE1RTogXCJTXCIsXG4gIFxcdTAyMTg6IFwiU1wiLFxuICBcXHUwMjE5OiBcInNcIixcbiAgXFx1MDE1RjogXCJzXCIsXG4gIFxcdTAxNjA6IFwiU1wiLFxuICBcXHUwMTYxOiBcInNcIixcbiAgXFx1MDE2MjogXCJUXCIsXG4gIFxcdTAxNjM6IFwidFwiLFxuICBcXHUwMjFCOiBcInRcIixcbiAgXFx1MDIxQTogXCJUXCIsXG4gIFxcdTAxNjQ6IFwiVFwiLFxuICBcXHUwMTY1OiBcInRcIixcbiAgXFx1MDE2NjogXCJUXCIsXG4gIFxcdTAxNjc6IFwidFwiLFxuICBUXFx1MDMwNjogXCJUXCIsXG4gIHRcXHUwMzA2OiBcInRcIixcbiAgXFx1MDE2ODogXCJVXCIsXG4gIFxcdTAxNjk6IFwidVwiLFxuICBcXHUwMTZBOiBcIlVcIixcbiAgXFx1MDE2QjogXCJ1XCIsXG4gIFxcdTAxNkM6IFwiVVwiLFxuICBcXHUwMTZEOiBcInVcIixcbiAgXFx1MDE2RTogXCJVXCIsXG4gIFxcdTAxNkY6IFwidVwiLFxuICBcXHUwMTcwOiBcIlVcIixcbiAgXFx1MDE3MTogXCJ1XCIsXG4gIFxcdTAxNzI6IFwiVVwiLFxuICBcXHUwMTczOiBcInVcIixcbiAgXFx1MDIxNjogXCJVXCIsXG4gIFxcdTAyMTc6IFwidVwiLFxuICBWXFx1MDMwNjogXCJWXCIsXG4gIHZcXHUwMzA2OiBcInZcIixcbiAgXFx1MDE3NDogXCJXXCIsXG4gIFxcdTAxNzU6IFwid1wiLFxuICBcXHUxRTgyOiBcIldcIixcbiAgXFx1MUU4MzogXCJ3XCIsXG4gIFhcXHUwMzA2OiBcIlhcIixcbiAgeFxcdTAzMDY6IFwieFwiLFxuICBcXHUwMTc2OiBcIllcIixcbiAgXFx1MDE3NzogXCJ5XCIsXG4gIFxcdTAxNzg6IFwiWVwiLFxuICBZXFx1MDMwNjogXCJZXCIsXG4gIHlcXHUwMzA2OiBcInlcIixcbiAgXFx1MDE3OTogXCJaXCIsXG4gIFxcdTAxN0E6IFwielwiLFxuICBcXHUwMTdCOiBcIlpcIixcbiAgXFx1MDE3QzogXCJ6XCIsXG4gIFxcdTAxN0Q6IFwiWlwiLFxuICBcXHUwMTdFOiBcInpcIixcbiAgXFx1MDE3RjogXCJzXCIsXG4gIFxcdTAxOTI6IFwiZlwiLFxuICBcXHUwMUEwOiBcIk9cIixcbiAgXFx1MDFBMTogXCJvXCIsXG4gIFxcdTAxQUY6IFwiVVwiLFxuICBcXHUwMUIwOiBcInVcIixcbiAgXFx1MDFDRDogXCJBXCIsXG4gIFxcdTAxQ0U6IFwiYVwiLFxuICBcXHUwMUNGOiBcIklcIixcbiAgXFx1MDFEMDogXCJpXCIsXG4gIFxcdTAxRDE6IFwiT1wiLFxuICBcXHUwMUQyOiBcIm9cIixcbiAgXFx1MDFEMzogXCJVXCIsXG4gIFxcdTAxRDQ6IFwidVwiLFxuICBcXHUwMUQ1OiBcIlVcIixcbiAgXFx1MDFENjogXCJ1XCIsXG4gIFxcdTAxRDc6IFwiVVwiLFxuICBcXHUwMUQ4OiBcInVcIixcbiAgXFx1MDFEOTogXCJVXCIsXG4gIFxcdTAxREE6IFwidVwiLFxuICBcXHUwMURCOiBcIlVcIixcbiAgXFx1MDFEQzogXCJ1XCIsXG4gIFxcdTFFRTg6IFwiVVwiLFxuICBcXHUxRUU5OiBcInVcIixcbiAgXFx1MUU3ODogXCJVXCIsXG4gIFxcdTFFNzk6IFwidVwiLFxuICBcXHUwMUZBOiBcIkFcIixcbiAgXFx1MDFGQjogXCJhXCIsXG4gIFxcdTAxRkM6IFwiQUVcIixcbiAgXFx1MDFGRDogXCJhZVwiLFxuICBcXHUwMUZFOiBcIk9cIixcbiAgXFx1MDFGRjogXCJvXCIsXG4gIFxcdTAwREU6IFwiVEhcIixcbiAgXFx1MDBGRTogXCJ0aFwiLFxuICBcXHUxRTU0OiBcIlBcIixcbiAgXFx1MUU1NTogXCJwXCIsXG4gIFxcdTFFNjQ6IFwiU1wiLFxuICBcXHUxRTY1OiBcInNcIixcbiAgWFxcdTAzMDE6IFwiWFwiLFxuICB4XFx1MDMwMTogXCJ4XCIsXG4gIFxcdTA0MDM6IFwiXFx1MDQxM1wiLFxuICBcXHUwNDUzOiBcIlxcdTA0MzNcIixcbiAgXFx1MDQwQzogXCJcXHUwNDFBXCIsXG4gIFxcdTA0NUM6IFwiXFx1MDQzQVwiLFxuICBBXFx1MDMwQjogXCJBXCIsXG4gIGFcXHUwMzBCOiBcImFcIixcbiAgRVxcdTAzMEI6IFwiRVwiLFxuICBlXFx1MDMwQjogXCJlXCIsXG4gIElcXHUwMzBCOiBcIklcIixcbiAgaVxcdTAzMEI6IFwiaVwiLFxuICBcXHUwMUY4OiBcIk5cIixcbiAgXFx1MDFGOTogXCJuXCIsXG4gIFxcdTFFRDI6IFwiT1wiLFxuICBcXHUxRUQzOiBcIm9cIixcbiAgXFx1MUU1MDogXCJPXCIsXG4gIFxcdTFFNTE6IFwib1wiLFxuICBcXHUxRUVBOiBcIlVcIixcbiAgXFx1MUVFQjogXCJ1XCIsXG4gIFxcdTFFODA6IFwiV1wiLFxuICBcXHUxRTgxOiBcIndcIixcbiAgXFx1MUVGMjogXCJZXCIsXG4gIFxcdTFFRjM6IFwieVwiLFxuICBcXHUwMjAwOiBcIkFcIixcbiAgXFx1MDIwMTogXCJhXCIsXG4gIFxcdTAyMDQ6IFwiRVwiLFxuICBcXHUwMjA1OiBcImVcIixcbiAgXFx1MDIwODogXCJJXCIsXG4gIFxcdTAyMDk6IFwiaVwiLFxuICBcXHUwMjBDOiBcIk9cIixcbiAgXFx1MDIwRDogXCJvXCIsXG4gIFxcdTAyMTA6IFwiUlwiLFxuICBcXHUwMjExOiBcInJcIixcbiAgXFx1MDIxNDogXCJVXCIsXG4gIFxcdTAyMTU6IFwidVwiLFxuICBCXFx1MDMwQzogXCJCXCIsXG4gIGJcXHUwMzBDOiBcImJcIixcbiAgXFx1MDEwQ1xcdTAzMjM6IFwiQ1wiLFxuICBcXHUwMTBEXFx1MDMyMzogXCJjXCIsXG4gIFxcdTAwQ0FcXHUwMzBDOiBcIkVcIixcbiAgXFx1MDBFQVxcdTAzMEM6IFwiZVwiLFxuICBGXFx1MDMwQzogXCJGXCIsXG4gIGZcXHUwMzBDOiBcImZcIixcbiAgXFx1MDFFNjogXCJHXCIsXG4gIFxcdTAxRTc6IFwiZ1wiLFxuICBcXHUwMjFFOiBcIkhcIixcbiAgXFx1MDIxRjogXCJoXCIsXG4gIEpcXHUwMzBDOiBcIkpcIixcbiAgXFx1MDFGMDogXCJqXCIsXG4gIFxcdTAxRTg6IFwiS1wiLFxuICBcXHUwMUU5OiBcImtcIixcbiAgTVxcdTAzMEM6IFwiTVwiLFxuICBtXFx1MDMwQzogXCJtXCIsXG4gIFBcXHUwMzBDOiBcIlBcIixcbiAgcFxcdTAzMEM6IFwicFwiLFxuICBRXFx1MDMwQzogXCJRXCIsXG4gIHFcXHUwMzBDOiBcInFcIixcbiAgXFx1MDE1OFxcdTAzMjk6IFwiUlwiLFxuICBcXHUwMTU5XFx1MDMyOTogXCJyXCIsXG4gIFxcdTFFNjY6IFwiU1wiLFxuICBcXHUxRTY3OiBcInNcIixcbiAgVlxcdTAzMEM6IFwiVlwiLFxuICB2XFx1MDMwQzogXCJ2XCIsXG4gIFdcXHUwMzBDOiBcIldcIixcbiAgd1xcdTAzMEM6IFwid1wiLFxuICBYXFx1MDMwQzogXCJYXCIsXG4gIHhcXHUwMzBDOiBcInhcIixcbiAgWVxcdTAzMEM6IFwiWVwiLFxuICB5XFx1MDMwQzogXCJ5XCIsXG4gIEFcXHUwMzI3OiBcIkFcIixcbiAgYVxcdTAzMjc6IFwiYVwiLFxuICBCXFx1MDMyNzogXCJCXCIsXG4gIGJcXHUwMzI3OiBcImJcIixcbiAgXFx1MUUxMDogXCJEXCIsXG4gIFxcdTFFMTE6IFwiZFwiLFxuICBcXHUwMjI4OiBcIkVcIixcbiAgXFx1MDIyOTogXCJlXCIsXG4gIFxcdTAxOTBcXHUwMzI3OiBcIkVcIixcbiAgXFx1MDI1QlxcdTAzMjc6IFwiZVwiLFxuICBcXHUxRTI4OiBcIkhcIixcbiAgXFx1MUUyOTogXCJoXCIsXG4gIElcXHUwMzI3OiBcIklcIixcbiAgaVxcdTAzMjc6IFwiaVwiLFxuICBcXHUwMTk3XFx1MDMyNzogXCJJXCIsXG4gIFxcdTAyNjhcXHUwMzI3OiBcImlcIixcbiAgTVxcdTAzMjc6IFwiTVwiLFxuICBtXFx1MDMyNzogXCJtXCIsXG4gIE9cXHUwMzI3OiBcIk9cIixcbiAgb1xcdTAzMjc6IFwib1wiLFxuICBRXFx1MDMyNzogXCJRXCIsXG4gIHFcXHUwMzI3OiBcInFcIixcbiAgVVxcdTAzMjc6IFwiVVwiLFxuICB1XFx1MDMyNzogXCJ1XCIsXG4gIFhcXHUwMzI3OiBcIlhcIixcbiAgeFxcdTAzMjc6IFwieFwiLFxuICBaXFx1MDMyNzogXCJaXCIsXG4gIHpcXHUwMzI3OiBcInpcIlxufTtcbnZhciBjaGFycyA9IE9iamVjdC5rZXlzKGNoYXJhY3Rlck1hcCkuam9pbihcInxcIik7XG52YXIgYWxsQWNjZW50cyA9IG5ldyBSZWdFeHAoY2hhcnMsIFwiZ1wiKTtcbmZ1bmN0aW9uIHJlbW92ZUFjY2VudHMoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShhbGxBY2NlbnRzLCAobWF0Y2gpID0+IHtcbiAgICByZXR1cm4gY2hhcmFjdGVyTWFwW21hdGNoXTtcbiAgfSk7XG59XG52YXIgcmFua2luZ3MgPSB7XG4gIENBU0VfU0VOU0lUSVZFX0VRVUFMOiA3LFxuICBFUVVBTDogNixcbiAgU1RBUlRTX1dJVEg6IDUsXG4gIFdPUkRfU1RBUlRTX1dJVEg6IDQsXG4gIENPTlRBSU5TOiAzLFxuICBBQ1JPTllNOiAyLFxuICBNQVRDSEVTOiAxLFxuICBOT19NQVRDSDogMFxufTtcbmZ1bmN0aW9uIHJhbmtJdGVtKGl0ZW0sIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciBfb3B0aW9ucyR0aHJlc2hvbGQ7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLnRocmVzaG9sZCA9IChfb3B0aW9ucyR0aHJlc2hvbGQgPSBvcHRpb25zLnRocmVzaG9sZCkgIT0gbnVsbCA/IF9vcHRpb25zJHRocmVzaG9sZCA6IHJhbmtpbmdzLk1BVENIRVM7XG4gIGlmICghb3B0aW9ucy5hY2Nlc3NvcnMpIHtcbiAgICBjb25zdCByYW5rID0gZ2V0TWF0Y2hSYW5raW5nKGl0ZW0sIHZhbHVlLCBvcHRpb25zKTtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gZW5kcyB1cCBiZWluZyBkdXBsaWNhdGUgb2YgJ2l0ZW0nIGluIG1hdGNoZXMgYnV0IGNvbnNpc3RlbnRcbiAgICAgIHJhbmtlZFZhbHVlOiBpdGVtLFxuICAgICAgcmFuayxcbiAgICAgIGFjY2Vzc29ySW5kZXg6IC0xLFxuICAgICAgYWNjZXNzb3JUaHJlc2hvbGQ6IG9wdGlvbnMudGhyZXNob2xkLFxuICAgICAgcGFzc2VkOiByYW5rID49IG9wdGlvbnMudGhyZXNob2xkXG4gICAgfTtcbiAgfVxuICBjb25zdCB2YWx1ZXNUb1JhbmsgPSBnZXRBbGxWYWx1ZXNUb1JhbmsoaXRlbSwgb3B0aW9ucy5hY2Nlc3NvcnMpO1xuICBjb25zdCByYW5raW5nSW5mbyA9IHtcbiAgICByYW5rZWRWYWx1ZTogaXRlbSxcbiAgICByYW5rOiByYW5raW5ncy5OT19NQVRDSCxcbiAgICBhY2Nlc3NvckluZGV4OiAtMSxcbiAgICBhY2Nlc3NvclRocmVzaG9sZDogb3B0aW9ucy50aHJlc2hvbGQsXG4gICAgcGFzc2VkOiBmYWxzZVxuICB9O1xuICBmb3IgKGxldCBpMiA9IDA7IGkyIDwgdmFsdWVzVG9SYW5rLmxlbmd0aDsgaTIrKykge1xuICAgIGNvbnN0IHJhbmtWYWx1ZSA9IHZhbHVlc1RvUmFua1tpMl07XG4gICAgbGV0IG5ld1JhbmsgPSBnZXRNYXRjaFJhbmtpbmcocmFua1ZhbHVlLml0ZW1WYWx1ZSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgIGNvbnN0IHtcbiAgICAgIG1pblJhbmtpbmcsXG4gICAgICBtYXhSYW5raW5nLFxuICAgICAgdGhyZXNob2xkID0gb3B0aW9ucy50aHJlc2hvbGRcbiAgICB9ID0gcmFua1ZhbHVlLmF0dHJpYnV0ZXM7XG4gICAgaWYgKG5ld1JhbmsgPCBtaW5SYW5raW5nICYmIG5ld1JhbmsgPj0gcmFua2luZ3MuTUFUQ0hFUykge1xuICAgICAgbmV3UmFuayA9IG1pblJhbmtpbmc7XG4gICAgfSBlbHNlIGlmIChuZXdSYW5rID4gbWF4UmFua2luZykge1xuICAgICAgbmV3UmFuayA9IG1heFJhbmtpbmc7XG4gICAgfVxuICAgIG5ld1JhbmsgPSBNYXRoLm1pbihuZXdSYW5rLCBtYXhSYW5raW5nKTtcbiAgICBpZiAobmV3UmFuayA+PSB0aHJlc2hvbGQgJiYgbmV3UmFuayA+IHJhbmtpbmdJbmZvLnJhbmspIHtcbiAgICAgIHJhbmtpbmdJbmZvLnJhbmsgPSBuZXdSYW5rO1xuICAgICAgcmFua2luZ0luZm8ucGFzc2VkID0gdHJ1ZTtcbiAgICAgIHJhbmtpbmdJbmZvLmFjY2Vzc29ySW5kZXggPSBpMjtcbiAgICAgIHJhbmtpbmdJbmZvLmFjY2Vzc29yVGhyZXNob2xkID0gdGhyZXNob2xkO1xuICAgICAgcmFua2luZ0luZm8ucmFua2VkVmFsdWUgPSByYW5rVmFsdWUuaXRlbVZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmFua2luZ0luZm87XG59XG5mdW5jdGlvbiBnZXRNYXRjaFJhbmtpbmcodGVzdFN0cmluZywgc3RyaW5nVG9SYW5rLCBvcHRpb25zKSB7XG4gIHRlc3RTdHJpbmcgPSBwcmVwYXJlVmFsdWVGb3JDb21wYXJpc29uKHRlc3RTdHJpbmcsIG9wdGlvbnMpO1xuICBzdHJpbmdUb1JhbmsgPSBwcmVwYXJlVmFsdWVGb3JDb21wYXJpc29uKHN0cmluZ1RvUmFuaywgb3B0aW9ucyk7XG4gIGlmIChzdHJpbmdUb1JhbmsubGVuZ3RoID4gdGVzdFN0cmluZy5sZW5ndGgpIHtcbiAgICByZXR1cm4gcmFua2luZ3MuTk9fTUFUQ0g7XG4gIH1cbiAgaWYgKHRlc3RTdHJpbmcgPT09IHN0cmluZ1RvUmFuaykge1xuICAgIHJldHVybiByYW5raW5ncy5DQVNFX1NFTlNJVElWRV9FUVVBTDtcbiAgfVxuICB0ZXN0U3RyaW5nID0gdGVzdFN0cmluZy50b0xvd2VyQ2FzZSgpO1xuICBzdHJpbmdUb1JhbmsgPSBzdHJpbmdUb1JhbmsudG9Mb3dlckNhc2UoKTtcbiAgaWYgKHRlc3RTdHJpbmcgPT09IHN0cmluZ1RvUmFuaykge1xuICAgIHJldHVybiByYW5raW5ncy5FUVVBTDtcbiAgfVxuICBpZiAodGVzdFN0cmluZy5zdGFydHNXaXRoKHN0cmluZ1RvUmFuaykpIHtcbiAgICByZXR1cm4gcmFua2luZ3MuU1RBUlRTX1dJVEg7XG4gIH1cbiAgaWYgKHRlc3RTdHJpbmcuaW5jbHVkZXMoYCAke3N0cmluZ1RvUmFua31gKSkge1xuICAgIHJldHVybiByYW5raW5ncy5XT1JEX1NUQVJUU19XSVRIO1xuICB9XG4gIGlmICh0ZXN0U3RyaW5nLmluY2x1ZGVzKHN0cmluZ1RvUmFuaykpIHtcbiAgICByZXR1cm4gcmFua2luZ3MuQ09OVEFJTlM7XG4gIH0gZWxzZSBpZiAoc3RyaW5nVG9SYW5rLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiByYW5raW5ncy5OT19NQVRDSDtcbiAgfVxuICBpZiAoZ2V0QWNyb255bSh0ZXN0U3RyaW5nKS5pbmNsdWRlcyhzdHJpbmdUb1JhbmspKSB7XG4gICAgcmV0dXJuIHJhbmtpbmdzLkFDUk9OWU07XG4gIH1cbiAgcmV0dXJuIGdldENsb3NlbmVzc1JhbmtpbmcodGVzdFN0cmluZywgc3RyaW5nVG9SYW5rKTtcbn1cbmZ1bmN0aW9uIGdldEFjcm9ueW0oc3RyaW5nKSB7XG4gIGxldCBhY3JvbnltID0gXCJcIjtcbiAgY29uc3Qgd29yZHNJblN0cmluZyA9IHN0cmluZy5zcGxpdChcIiBcIik7XG4gIHdvcmRzSW5TdHJpbmcuZm9yRWFjaCgod29yZEluU3RyaW5nKSA9PiB7XG4gICAgY29uc3Qgc3BsaXRCeUh5cGhlbldvcmRzID0gd29yZEluU3RyaW5nLnNwbGl0KFwiLVwiKTtcbiAgICBzcGxpdEJ5SHlwaGVuV29yZHMuZm9yRWFjaCgoc3BsaXRCeUh5cGhlbldvcmQpID0+IHtcbiAgICAgIGFjcm9ueW0gKz0gc3BsaXRCeUh5cGhlbldvcmQuc3Vic3RyKDAsIDEpO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIGFjcm9ueW07XG59XG5mdW5jdGlvbiBnZXRDbG9zZW5lc3NSYW5raW5nKHRlc3RTdHJpbmcsIHN0cmluZ1RvUmFuaykge1xuICBsZXQgbWF0Y2hpbmdJbk9yZGVyQ2hhckNvdW50ID0gMDtcbiAgbGV0IGNoYXJOdW1iZXIgPSAwO1xuICBmdW5jdGlvbiBmaW5kTWF0Y2hpbmdDaGFyYWN0ZXIobWF0Y2hDaGFyLCBzdHJpbmcsIGluZGV4KSB7XG4gICAgZm9yIChsZXQgaiA9IGluZGV4LCBKID0gc3RyaW5nLmxlbmd0aDsgaiA8IEo7IGorKykge1xuICAgICAgY29uc3Qgc3RyaW5nQ2hhciA9IHN0cmluZ1tqXTtcbiAgICAgIGlmIChzdHJpbmdDaGFyID09PSBtYXRjaENoYXIpIHtcbiAgICAgICAgbWF0Y2hpbmdJbk9yZGVyQ2hhckNvdW50ICs9IDE7XG4gICAgICAgIHJldHVybiBqICsgMTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIGZ1bmN0aW9uIGdldFJhbmtpbmcoc3ByZWFkMykge1xuICAgIGNvbnN0IHNwcmVhZFBlcmNlbnRhZ2UgPSAxIC8gc3ByZWFkMztcbiAgICBjb25zdCBpbk9yZGVyUGVyY2VudGFnZSA9IG1hdGNoaW5nSW5PcmRlckNoYXJDb3VudCAvIHN0cmluZ1RvUmFuay5sZW5ndGg7XG4gICAgY29uc3QgcmFua2luZyA9IHJhbmtpbmdzLk1BVENIRVMgKyBpbk9yZGVyUGVyY2VudGFnZSAqIHNwcmVhZFBlcmNlbnRhZ2U7XG4gICAgcmV0dXJuIHJhbmtpbmc7XG4gIH1cbiAgY29uc3QgZmlyc3RJbmRleCA9IGZpbmRNYXRjaGluZ0NoYXJhY3RlcihzdHJpbmdUb1JhbmtbMF0sIHRlc3RTdHJpbmcsIDApO1xuICBpZiAoZmlyc3RJbmRleCA8IDApIHtcbiAgICByZXR1cm4gcmFua2luZ3MuTk9fTUFUQ0g7XG4gIH1cbiAgY2hhck51bWJlciA9IGZpcnN0SW5kZXg7XG4gIGZvciAobGV0IGkyID0gMSwgSSA9IHN0cmluZ1RvUmFuay5sZW5ndGg7IGkyIDwgSTsgaTIrKykge1xuICAgIGNvbnN0IG1hdGNoQ2hhciA9IHN0cmluZ1RvUmFua1tpMl07XG4gICAgY2hhck51bWJlciA9IGZpbmRNYXRjaGluZ0NoYXJhY3RlcihtYXRjaENoYXIsIHRlc3RTdHJpbmcsIGNoYXJOdW1iZXIpO1xuICAgIGNvbnN0IGZvdW5kID0gY2hhck51bWJlciA+IC0xO1xuICAgIGlmICghZm91bmQpIHtcbiAgICAgIHJldHVybiByYW5raW5ncy5OT19NQVRDSDtcbiAgICB9XG4gIH1cbiAgY29uc3Qgc3ByZWFkMiA9IGNoYXJOdW1iZXIgLSBmaXJzdEluZGV4O1xuICByZXR1cm4gZ2V0UmFua2luZyhzcHJlYWQyKTtcbn1cbmZ1bmN0aW9uIHByZXBhcmVWYWx1ZUZvckNvbXBhcmlzb24odmFsdWUsIF9yZWYpIHtcbiAgbGV0IHtcbiAgICBrZWVwRGlhY3JpdGljc1xuICB9ID0gX3JlZjtcbiAgdmFsdWUgPSBgJHt2YWx1ZX1gO1xuICBpZiAoIWtlZXBEaWFjcml0aWNzKSB7XG4gICAgdmFsdWUgPSByZW1vdmVBY2NlbnRzKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBnZXRJdGVtVmFsdWVzKGl0ZW0sIGFjY2Vzc29yKSB7XG4gIGxldCBhY2Nlc3NvckZuID0gYWNjZXNzb3I7XG4gIGlmICh0eXBlb2YgYWNjZXNzb3IgPT09IFwib2JqZWN0XCIpIHtcbiAgICBhY2Nlc3NvckZuID0gYWNjZXNzb3IuYWNjZXNzb3I7XG4gIH1cbiAgY29uc3QgdmFsdWUgPSBhY2Nlc3NvckZuKGl0ZW0pO1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIFtTdHJpbmcodmFsdWUpXTtcbn1cbmZ1bmN0aW9uIGdldEFsbFZhbHVlc1RvUmFuayhpdGVtLCBhY2Nlc3NvcnMpIHtcbiAgY29uc3QgYWxsVmFsdWVzID0gW107XG4gIGZvciAobGV0IGogPSAwLCBKID0gYWNjZXNzb3JzLmxlbmd0aDsgaiA8IEo7IGorKykge1xuICAgIGNvbnN0IGFjY2Vzc29yID0gYWNjZXNzb3JzW2pdO1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBnZXRBY2Nlc3NvckF0dHJpYnV0ZXMoYWNjZXNzb3IpO1xuICAgIGNvbnN0IGl0ZW1WYWx1ZXMgPSBnZXRJdGVtVmFsdWVzKGl0ZW0sIGFjY2Vzc29yKTtcbiAgICBmb3IgKGxldCBpMiA9IDAsIEkgPSBpdGVtVmFsdWVzLmxlbmd0aDsgaTIgPCBJOyBpMisrKSB7XG4gICAgICBhbGxWYWx1ZXMucHVzaCh7XG4gICAgICAgIGl0ZW1WYWx1ZTogaXRlbVZhbHVlc1tpMl0sXG4gICAgICAgIGF0dHJpYnV0ZXNcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYWxsVmFsdWVzO1xufVxudmFyIGRlZmF1bHRLZXlBdHRyaWJ1dGVzID0ge1xuICBtYXhSYW5raW5nOiBJbmZpbml0eSxcbiAgbWluUmFua2luZzogLUluZmluaXR5XG59O1xuZnVuY3Rpb24gZ2V0QWNjZXNzb3JBdHRyaWJ1dGVzKGFjY2Vzc29yKSB7XG4gIGlmICh0eXBlb2YgYWNjZXNzb3IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBkZWZhdWx0S2V5QXR0cmlidXRlcztcbiAgfVxuICByZXR1cm4ge1xuICAgIC4uLmRlZmF1bHRLZXlBdHRyaWJ1dGVzLFxuICAgIC4uLmFjY2Vzc29yXG4gIH07XG59XG5cbi8vIC4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9nb29iZXJAMi4xLjEzX2Nzc3R5cGVAMy4xLjIvbm9kZV9tb2R1bGVzL2dvb2Jlci9kaXN0L2dvb2Jlci5tb2Rlcm4uanNcbnZhciBlID0geyBkYXRhOiBcIlwiIH07XG52YXIgdCA9ICh0MikgPT4gXCJvYmplY3RcIiA9PSB0eXBlb2Ygd2luZG93ID8gKCh0MiA/IHQyLnF1ZXJ5U2VsZWN0b3IoXCIjX2dvb2JlclwiKSA6IHdpbmRvdy5fZ29vYmVyKSB8fCBPYmplY3QuYXNzaWduKCh0MiB8fCBkb2N1bWVudC5oZWFkKS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIikpLCB7IGlubmVySFRNTDogXCIgXCIsIGlkOiBcIl9nb29iZXJcIiB9KSkuZmlyc3RDaGlsZCA6IHQyIHx8IGU7XG52YXIgbCA9IC8oPzooW1xcdTAwODAtXFx1RkZGRlxcdy0lQF0rKSAqOj8gKihbXns7XSs/KTt8KFteO317XSo/KSAqeyl8KH1cXHMqKS9nO1xudmFyIGEgPSAvXFwvXFwqW15dKj9cXCpcXC98ICArL2c7XG52YXIgbiA9IC9cXG4rL2c7XG52YXIgbyA9IChlMiwgdDIpID0+IHtcbiAgbGV0IHIyID0gXCJcIiwgbDIgPSBcIlwiLCBhMiA9IFwiXCI7XG4gIGZvciAobGV0IG4yIGluIGUyKSB7XG4gICAgbGV0IGMyID0gZTJbbjJdO1xuICAgIFwiQFwiID09IG4yWzBdID8gXCJpXCIgPT0gbjJbMV0gPyByMiA9IG4yICsgXCIgXCIgKyBjMiArIFwiO1wiIDogbDIgKz0gXCJmXCIgPT0gbjJbMV0gPyBvKGMyLCBuMikgOiBuMiArIFwie1wiICsgbyhjMiwgXCJrXCIgPT0gbjJbMV0gPyBcIlwiIDogdDIpICsgXCJ9XCIgOiBcIm9iamVjdFwiID09IHR5cGVvZiBjMiA/IGwyICs9IG8oYzIsIHQyID8gdDIucmVwbGFjZSgvKFteLF0pKy9nLCAoZTMpID0+IG4yLnJlcGxhY2UoLyheOi4qKXwoW14sXSkrL2csICh0MykgPT4gLyYvLnRlc3QodDMpID8gdDMucmVwbGFjZSgvJi9nLCBlMykgOiBlMyA/IGUzICsgXCIgXCIgKyB0MyA6IHQzKSkgOiBuMikgOiBudWxsICE9IGMyICYmIChuMiA9IC9eLS0vLnRlc3QobjIpID8gbjIgOiBuMi5yZXBsYWNlKC9bQS1aXS9nLCBcIi0kJlwiKS50b0xvd2VyQ2FzZSgpLCBhMiArPSBvLnAgPyBvLnAobjIsIGMyKSA6IG4yICsgXCI6XCIgKyBjMiArIFwiO1wiKTtcbiAgfVxuICByZXR1cm4gcjIgKyAodDIgJiYgYTIgPyB0MiArIFwie1wiICsgYTIgKyBcIn1cIiA6IGEyKSArIGwyO1xufTtcbnZhciBjID0ge307XG52YXIgcyA9IChlMikgPT4ge1xuICBpZiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgZTIpIHtcbiAgICBsZXQgdDIgPSBcIlwiO1xuICAgIGZvciAobGV0IHIyIGluIGUyKVxuICAgICAgdDIgKz0gcjIgKyBzKGUyW3IyXSk7XG4gICAgcmV0dXJuIHQyO1xuICB9XG4gIHJldHVybiBlMjtcbn07XG52YXIgaSA9IChlMiwgdDIsIHIyLCBpMiwgcDIpID0+IHtcbiAgbGV0IHUyID0gcyhlMiksIGQgPSBjW3UyXSB8fCAoY1t1Ml0gPSAoKGUzKSA9PiB7XG4gICAgbGV0IHQzID0gMCwgcjMgPSAxMTtcbiAgICBmb3IgKDsgdDMgPCBlMy5sZW5ndGg7IClcbiAgICAgIHIzID0gMTAxICogcjMgKyBlMy5jaGFyQ29kZUF0KHQzKyspID4+PiAwO1xuICAgIHJldHVybiBcImdvXCIgKyByMztcbiAgfSkodTIpKTtcbiAgaWYgKCFjW2RdKSB7XG4gICAgbGV0IHQzID0gdTIgIT09IGUyID8gZTIgOiAoKGUzKSA9PiB7XG4gICAgICBsZXQgdDQsIHIzLCBvMiA9IFt7fV07XG4gICAgICBmb3IgKDsgdDQgPSBsLmV4ZWMoZTMucmVwbGFjZShhLCBcIlwiKSk7IClcbiAgICAgICAgdDRbNF0gPyBvMi5zaGlmdCgpIDogdDRbM10gPyAocjMgPSB0NFszXS5yZXBsYWNlKG4sIFwiIFwiKS50cmltKCksIG8yLnVuc2hpZnQobzJbMF1bcjNdID0gbzJbMF1bcjNdIHx8IHt9KSkgOiBvMlswXVt0NFsxXV0gPSB0NFsyXS5yZXBsYWNlKG4sIFwiIFwiKS50cmltKCk7XG4gICAgICByZXR1cm4gbzJbMF07XG4gICAgfSkoZTIpO1xuICAgIGNbZF0gPSBvKHAyID8geyBbXCJAa2V5ZnJhbWVzIFwiICsgZF06IHQzIH0gOiB0MywgcjIgPyBcIlwiIDogXCIuXCIgKyBkKTtcbiAgfVxuICBsZXQgZiA9IHIyICYmIGMuZyA/IGMuZyA6IG51bGw7XG4gIHJldHVybiByMiAmJiAoYy5nID0gY1tkXSksICgoZTMsIHQzLCByMywgbDIpID0+IHtcbiAgICBsMiA/IHQzLmRhdGEgPSB0My5kYXRhLnJlcGxhY2UobDIsIGUzKSA6IC0xID09PSB0My5kYXRhLmluZGV4T2YoZTMpICYmICh0My5kYXRhID0gcjMgPyBlMyArIHQzLmRhdGEgOiB0My5kYXRhICsgZTMpO1xuICB9KShjW2RdLCB0MiwgaTIsIGYpLCBkO1xufTtcbnZhciBwID0gKGUyLCB0MiwgcjIpID0+IGUyLnJlZHVjZSgoZTMsIGwyLCBhMikgPT4ge1xuICBsZXQgbjIgPSB0MlthMl07XG4gIGlmIChuMiAmJiBuMi5jYWxsKSB7XG4gICAgbGV0IGU0ID0gbjIocjIpLCB0MyA9IGU0ICYmIGU0LnByb3BzICYmIGU0LnByb3BzLmNsYXNzTmFtZSB8fCAvXmdvLy50ZXN0KGU0KSAmJiBlNDtcbiAgICBuMiA9IHQzID8gXCIuXCIgKyB0MyA6IGU0ICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIGU0ID8gZTQucHJvcHMgPyBcIlwiIDogbyhlNCwgXCJcIikgOiBmYWxzZSA9PT0gZTQgPyBcIlwiIDogZTQ7XG4gIH1cbiAgcmV0dXJuIGUzICsgbDIgKyAobnVsbCA9PSBuMiA/IFwiXCIgOiBuMik7XG59LCBcIlwiKTtcbmZ1bmN0aW9uIHUoZTIpIHtcbiAgbGV0IHIyID0gdGhpcyB8fCB7fSwgbDIgPSBlMi5jYWxsID8gZTIocjIucCkgOiBlMjtcbiAgcmV0dXJuIGkobDIudW5zaGlmdCA/IGwyLnJhdyA/IHAobDIsIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwgcjIucCkgOiBsMi5yZWR1Y2UoKGUzLCB0MikgPT4gT2JqZWN0LmFzc2lnbihlMywgdDIgJiYgdDIuY2FsbCA/IHQyKHIyLnApIDogdDIpLCB7fSkgOiBsMiwgdChyMi50YXJnZXQpLCByMi5nLCByMi5vLCByMi5rKTtcbn1cbnUuYmluZCh7IGc6IDEgfSk7XG51LmJpbmQoeyBrOiAxIH0pO1xuXG4vLyAuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vY2xzeEAyLjAuMC9ub2RlX21vZHVsZXMvY2xzeC9kaXN0L2Nsc3gubWpzXG5mdW5jdGlvbiByKGUyKSB7XG4gIHZhciB0MiwgZiwgbjIgPSBcIlwiO1xuICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgZTIgfHwgXCJudW1iZXJcIiA9PSB0eXBlb2YgZTIpXG4gICAgbjIgKz0gZTI7XG4gIGVsc2UgaWYgKFwib2JqZWN0XCIgPT0gdHlwZW9mIGUyKVxuICAgIGlmIChBcnJheS5pc0FycmF5KGUyKSlcbiAgICAgIGZvciAodDIgPSAwOyB0MiA8IGUyLmxlbmd0aDsgdDIrKylcbiAgICAgICAgZTJbdDJdICYmIChmID0gcihlMlt0Ml0pKSAmJiAobjIgJiYgKG4yICs9IFwiIFwiKSwgbjIgKz0gZik7XG4gICAgZWxzZVxuICAgICAgZm9yICh0MiBpbiBlMilcbiAgICAgICAgZTJbdDJdICYmIChuMiAmJiAobjIgKz0gXCIgXCIpLCBuMiArPSB0Mik7XG4gIHJldHVybiBuMjtcbn1cbmZ1bmN0aW9uIGNsc3goKSB7XG4gIGZvciAodmFyIGUyLCB0MiwgZiA9IDAsIG4yID0gXCJcIjsgZiA8IGFyZ3VtZW50cy5sZW5ndGg7IClcbiAgICAoZTIgPSBhcmd1bWVudHNbZisrXSkgJiYgKHQyID0gcihlMikpICYmIChuMiAmJiAobjIgKz0gXCIgXCIpLCBuMiArPSB0Mik7XG4gIHJldHVybiBuMjtcbn1cblxuLy8gLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bzb2xpZC1wcmltaXRpdmVzK3RyYW5zaXRpb24tZ3JvdXBAMS4wLjNfc29saWQtanNAMS44Ljcvbm9kZV9tb2R1bGVzL0Bzb2xpZC1wcmltaXRpdmVzL3RyYW5zaXRpb24tZ3JvdXAvZGlzdC9pbmRleC5qc1xudmFyIG5vb3AgPSAoKSA9PiB7XG59O1xuZnVuY3Rpb24gY3JlYXRlTGlzdFRyYW5zaXRpb24oc291cmNlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGluaXRTb3VyY2UgPSB1bnRyYWNrKHNvdXJjZSk7XG4gIGlmIChpc1NlcnZlcikge1xuICAgIGNvbnN0IGNvcHkgPSBpbml0U291cmNlLnNsaWNlKCk7XG4gICAgcmV0dXJuICgpID0+IGNvcHk7XG4gIH1cbiAgY29uc3QgeyBvbkNoYW5nZSB9ID0gb3B0aW9ucztcbiAgbGV0IHByZXZTZXQgPSBuZXcgU2V0KG9wdGlvbnMuYXBwZWFyID8gdm9pZCAwIDogaW5pdFNvdXJjZSk7XG4gIGNvbnN0IGV4aXRpbmcgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtTZXQoKTtcbiAgY29uc3QgW3RvUmVtb3ZlLCBzZXRUb1JlbW92ZV0gPSBjcmVhdGVTaWduYWwoW10sIHsgZXF1YWxzOiBmYWxzZSB9KTtcbiAgY29uc3QgW2lzVHJhbnNpdGlvblBlbmRpbmddID0gdXNlVHJhbnNpdGlvbigpO1xuICBjb25zdCBmaW5pc2hSZW1vdmVkID0gb3B0aW9ucy5leGl0TWV0aG9kID09PSBcInJlbW92ZVwiID8gbm9vcCA6IChlbHMpID0+IHtcbiAgICBzZXRUb1JlbW92ZSgocDIpID0+IChwMi5wdXNoLmFwcGx5KHAyLCBlbHMpLCBwMikpO1xuICAgIGZvciAoY29uc3QgZWwgb2YgZWxzKVxuICAgICAgZXhpdGluZy5kZWxldGUoZWwpO1xuICB9O1xuICBjb25zdCBoYW5kbGVSZW1vdmVkID0gb3B0aW9ucy5leGl0TWV0aG9kID09PSBcInJlbW92ZVwiID8gbm9vcCA6IG9wdGlvbnMuZXhpdE1ldGhvZCA9PT0gXCJrZWVwLWluZGV4XCIgPyAoZWxzLCBlbCwgaTIpID0+IGVscy5zcGxpY2UoaTIsIDAsIGVsKSA6IChlbHMsIGVsKSA9PiBlbHMucHVzaChlbCk7XG4gIHJldHVybiBjcmVhdGVNZW1vKFxuICAgIChwcmV2KSA9PiB7XG4gICAgICBjb25zdCBlbHNUb1JlbW92ZSA9IHRvUmVtb3ZlKCk7XG4gICAgICBjb25zdCBzb3VyY2VMaXN0ID0gc291cmNlKCk7XG4gICAgICBzb3VyY2VMaXN0WyRUUkFDS107XG4gICAgICBpZiAodW50cmFjayhpc1RyYW5zaXRpb25QZW5kaW5nKSkge1xuICAgICAgICBpc1RyYW5zaXRpb25QZW5kaW5nKCk7XG4gICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgfVxuICAgICAgaWYgKGVsc1RvUmVtb3ZlLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBuZXh0ID0gcHJldi5maWx0ZXIoKGUyKSA9PiAhZWxzVG9SZW1vdmUuaW5jbHVkZXMoZTIpKTtcbiAgICAgICAgZWxzVG9SZW1vdmUubGVuZ3RoID0gMDtcbiAgICAgICAgb25DaGFuZ2UoeyBsaXN0OiBuZXh0LCBhZGRlZDogW10sIHJlbW92ZWQ6IFtdLCB1bmNoYW5nZWQ6IG5leHQsIGZpbmlzaFJlbW92ZWQgfSk7XG4gICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVudHJhY2soKCkgPT4ge1xuICAgICAgICBjb25zdCBuZXh0U2V0ID0gbmV3IFNldChzb3VyY2VMaXN0KTtcbiAgICAgICAgY29uc3QgbmV4dCA9IHNvdXJjZUxpc3Quc2xpY2UoKTtcbiAgICAgICAgY29uc3QgYWRkZWQgPSBbXTtcbiAgICAgICAgY29uc3QgcmVtb3ZlZCA9IFtdO1xuICAgICAgICBjb25zdCB1bmNoYW5nZWQgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBlbCBvZiBzb3VyY2VMaXN0KSB7XG4gICAgICAgICAgKHByZXZTZXQuaGFzKGVsKSA/IHVuY2hhbmdlZCA6IGFkZGVkKS5wdXNoKGVsKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbm90aGluZ0NoYW5nZWQgPSAhYWRkZWQubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpMiA9IDA7IGkyIDwgcHJldi5sZW5ndGg7IGkyKyspIHtcbiAgICAgICAgICBjb25zdCBlbCA9IHByZXZbaTJdO1xuICAgICAgICAgIGlmICghbmV4dFNldC5oYXMoZWwpKSB7XG4gICAgICAgICAgICBpZiAoIWV4aXRpbmcuaGFzKGVsKSkge1xuICAgICAgICAgICAgICByZW1vdmVkLnB1c2goZWwpO1xuICAgICAgICAgICAgICBleGl0aW5nLmFkZChlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYW5kbGVSZW1vdmVkKG5leHQsIGVsLCBpMik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChub3RoaW5nQ2hhbmdlZCAmJiBlbCAhPT0gbmV4dFtpMl0pXG4gICAgICAgICAgICBub3RoaW5nQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcmVtb3ZlZC5sZW5ndGggJiYgbm90aGluZ0NoYW5nZWQpXG4gICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgIG9uQ2hhbmdlKHsgbGlzdDogbmV4dCwgYWRkZWQsIHJlbW92ZWQsIHVuY2hhbmdlZCwgZmluaXNoUmVtb3ZlZCB9KTtcbiAgICAgICAgcHJldlNldCA9IG5leHRTZXQ7XG4gICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBvcHRpb25zLmFwcGVhciA/IFtdIDogaW5pdFNvdXJjZS5zbGljZSgpXG4gICk7XG59XG5cbi8vIC4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac29saWQtcHJpbWl0aXZlcyt1dGlsc0A2LjIuMV9zb2xpZC1qc0AxLjguNy9ub2RlX21vZHVsZXMvQHNvbGlkLXByaW1pdGl2ZXMvdXRpbHMvZGlzdC9jaHVuay9SNTY3NVlNVS5qc1xudmFyIGlzQ2xpZW50ID0gIWlzU2VydmVyO1xudmFyIGlzRGV2ID0gaXNDbGllbnQgJiYgISFERVY7XG52YXIgbm9vcDIgPSAoKSA9PiB2b2lkIDA7XG52YXIgaXNOb25OdWxsYWJsZSA9IChpMikgPT4gaTIgIT0gbnVsbDtcbnZhciBmaWx0ZXJOb25OdWxsYWJsZSA9IChhcnIpID0+IGFyci5maWx0ZXIoaXNOb25OdWxsYWJsZSk7XG5mdW5jdGlvbiBjaGFpbihjYWxsYmFja3MpIHtcbiAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgZm9yIChjb25zdCBjYWxsYmFjayBvZiBjYWxsYmFja3MpXG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayguLi5hcmdzKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIHJldmVyc2VDaGFpbihjYWxsYmFja3MpIHtcbiAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgZm9yIChsZXQgaTIgPSBjYWxsYmFja3MubGVuZ3RoIC0gMTsgaTIgPj0gMDsgaTItLSkge1xuICAgICAgY29uc3QgY2FsbGJhY2sgPSBjYWxsYmFja3NbaTJdO1xuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soLi4uYXJncyk7XG4gICAgfVxuICB9O1xufVxudmFyIGFjY2VzcyA9ICh2KSA9PiB0eXBlb2YgdiA9PT0gXCJmdW5jdGlvblwiICYmICF2Lmxlbmd0aCA/IHYoKSA6IHY7XG52YXIgYXNBcnJheSA9ICh2YWx1ZSkgPT4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IHZhbHVlID8gW3ZhbHVlXSA6IFtdO1xuZnVuY3Rpb24gYWNjZXNzV2l0aCh2YWx1ZU9yRm4sIC4uLmFyZ3MpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZU9yRm4gPT09IFwiZnVuY3Rpb25cIiA/IHZhbHVlT3JGbiguLi5hcmdzKSA6IHZhbHVlT3JGbjtcbn1cbnZhciB0cnlPbkNsZWFudXAgPSBpc0RldiA/IChmbikgPT4gZ2V0T3duZXIoKSA/IG9uQ2xlYW51cChmbikgOiBmbiA6IG9uQ2xlYW51cDtcbmZ1bmN0aW9uIGhhbmRsZURpZmZBcnJheShjdXJyZW50LCBwcmV2LCBoYW5kbGVBZGRlZCwgaGFuZGxlUmVtb3ZlZCkge1xuICBjb25zdCBjdXJyTGVuZ3RoID0gY3VycmVudC5sZW5ndGg7XG4gIGNvbnN0IHByZXZMZW5ndGggPSBwcmV2Lmxlbmd0aDtcbiAgbGV0IGkyID0gMDtcbiAgaWYgKCFwcmV2TGVuZ3RoKSB7XG4gICAgZm9yICg7IGkyIDwgY3Vyckxlbmd0aDsgaTIrKylcbiAgICAgIGhhbmRsZUFkZGVkKGN1cnJlbnRbaTJdKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFjdXJyTGVuZ3RoKSB7XG4gICAgZm9yICg7IGkyIDwgcHJldkxlbmd0aDsgaTIrKylcbiAgICAgIGhhbmRsZVJlbW92ZWQocHJldltpMl0pO1xuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKDsgaTIgPCBwcmV2TGVuZ3RoOyBpMisrKSB7XG4gICAgaWYgKHByZXZbaTJdICE9PSBjdXJyZW50W2kyXSlcbiAgICAgIGJyZWFrO1xuICB9XG4gIGxldCBwcmV2RWw7XG4gIGxldCBjdXJyRWw7XG4gIHByZXYgPSBwcmV2LnNsaWNlKGkyKTtcbiAgY3VycmVudCA9IGN1cnJlbnQuc2xpY2UoaTIpO1xuICBmb3IgKHByZXZFbCBvZiBwcmV2KSB7XG4gICAgaWYgKCFjdXJyZW50LmluY2x1ZGVzKHByZXZFbCkpXG4gICAgICBoYW5kbGVSZW1vdmVkKHByZXZFbCk7XG4gIH1cbiAgZm9yIChjdXJyRWwgb2YgY3VycmVudCkge1xuICAgIGlmICghcHJldi5pbmNsdWRlcyhjdXJyRWwpKVxuICAgICAgaGFuZGxlQWRkZWQoY3VyckVsKTtcbiAgfVxufVxuXG4vLyAuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNvbGlkLXByaW1pdGl2ZXMrcmVmc0AxLjAuNV9zb2xpZC1qc0AxLjguNy9ub2RlX21vZHVsZXMvQHNvbGlkLXByaW1pdGl2ZXMvcmVmcy9kaXN0L2luZGV4LmpzXG5mdW5jdGlvbiBtZXJnZVJlZnMoLi4ucmVmcykge1xuICByZXR1cm4gY2hhaW4ocmVmcyk7XG59XG52YXIgZGVmYXVsdEVsZW1lbnRQcmVkaWNhdGUgPSBpc1NlcnZlciA/IChpdGVtKSA9PiBpdGVtICE9IG51bGwgJiYgdHlwZW9mIGl0ZW0gPT09IFwib2JqZWN0XCIgJiYgXCJ0XCIgaW4gaXRlbSA6IChpdGVtKSA9PiBpdGVtIGluc3RhbmNlb2YgRWxlbWVudDtcbmZ1bmN0aW9uIGdldFJlc29sdmVkRWxlbWVudHModmFsdWUsIHByZWRpY2F0ZSkge1xuICBpZiAocHJlZGljYXRlKHZhbHVlKSlcbiAgICByZXR1cm4gdmFsdWU7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiAmJiAhdmFsdWUubGVuZ3RoKVxuICAgIHJldHVybiBnZXRSZXNvbHZlZEVsZW1lbnRzKHZhbHVlKCksIHByZWRpY2F0ZSk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdmFsdWUpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGdldFJlc29sdmVkRWxlbWVudHMoaXRlbSwgcHJlZGljYXRlKTtcbiAgICAgIGlmIChyZXN1bHQpXG4gICAgICAgIEFycmF5LmlzQXJyYXkocmVzdWx0KSA/IHJlc3VsdHMucHVzaC5hcHBseShyZXN1bHRzLCByZXN1bHQpIDogcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzLmxlbmd0aCA/IHJlc3VsdHMgOiBudWxsO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUVsZW1lbnRzKGZuLCBwcmVkaWNhdGUgPSBkZWZhdWx0RWxlbWVudFByZWRpY2F0ZSwgc2VydmVyUHJlZGljYXRlID0gZGVmYXVsdEVsZW1lbnRQcmVkaWNhdGUpIHtcbiAgY29uc3QgY2hpbGRyZW4yID0gY3JlYXRlTWVtbyhmbik7XG4gIGNvbnN0IG1lbW8gPSBjcmVhdGVNZW1vKFxuICAgICgpID0+IGdldFJlc29sdmVkRWxlbWVudHMoY2hpbGRyZW4yKCksIGlzU2VydmVyID8gc2VydmVyUHJlZGljYXRlIDogcHJlZGljYXRlKVxuICApO1xuICBtZW1vLnRvQXJyYXkgPSAoKSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBtZW1vKCk7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiB2YWx1ZSA/IFt2YWx1ZV0gOiBbXTtcbiAgfTtcbiAgcmV0dXJuIG1lbW87XG59XG5cbi8vIC4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zb2xpZC10cmFuc2l0aW9uLWdyb3VwQDAuMi4zX3NvbGlkLWpzQDEuOC43L25vZGVfbW9kdWxlcy9zb2xpZC10cmFuc2l0aW9uLWdyb3VwL2Rpc3QvaW5kZXguanNcbmZ1bmN0aW9uIGNyZWF0ZUNsYXNzbmFtZXMocHJvcHMpIHtcbiAgcmV0dXJuIGNyZWF0ZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IG5hbWUgPSBwcm9wcy5uYW1lIHx8IFwic1wiO1xuICAgIHJldHVybiB7XG4gICAgICBlbnRlckFjdGl2ZTogKHByb3BzLmVudGVyQWN0aXZlQ2xhc3MgfHwgbmFtZSArIFwiLWVudGVyLWFjdGl2ZVwiKS5zcGxpdChcIiBcIiksXG4gICAgICBlbnRlcjogKHByb3BzLmVudGVyQ2xhc3MgfHwgbmFtZSArIFwiLWVudGVyXCIpLnNwbGl0KFwiIFwiKSxcbiAgICAgIGVudGVyVG86IChwcm9wcy5lbnRlclRvQ2xhc3MgfHwgbmFtZSArIFwiLWVudGVyLXRvXCIpLnNwbGl0KFwiIFwiKSxcbiAgICAgIGV4aXRBY3RpdmU6IChwcm9wcy5leGl0QWN0aXZlQ2xhc3MgfHwgbmFtZSArIFwiLWV4aXQtYWN0aXZlXCIpLnNwbGl0KFwiIFwiKSxcbiAgICAgIGV4aXQ6IChwcm9wcy5leGl0Q2xhc3MgfHwgbmFtZSArIFwiLWV4aXRcIikuc3BsaXQoXCIgXCIpLFxuICAgICAgZXhpdFRvOiAocHJvcHMuZXhpdFRvQ2xhc3MgfHwgbmFtZSArIFwiLWV4aXQtdG9cIikuc3BsaXQoXCIgXCIpLFxuICAgICAgbW92ZTogKHByb3BzLm1vdmVDbGFzcyB8fCBuYW1lICsgXCItbW92ZVwiKS5zcGxpdChcIiBcIilcbiAgICB9O1xuICB9KTtcbn1cbmZ1bmN0aW9uIG5leHRGcmFtZShmbikge1xuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZuKSk7XG59XG5mdW5jdGlvbiBlbnRlclRyYW5zaXRpb24oY2xhc3NlcywgZXZlbnRzLCBlbCwgZG9uZSkge1xuICBjb25zdCB7IG9uQmVmb3JlRW50ZXIsIG9uRW50ZXIsIG9uQWZ0ZXJFbnRlciB9ID0gZXZlbnRzO1xuICBvbkJlZm9yZUVudGVyPy4oZWwpO1xuICBlbC5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzZXMuZW50ZXIpO1xuICBlbC5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzZXMuZW50ZXJBY3RpdmUpO1xuICBxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG4gICAgaWYgKCFlbC5wYXJlbnROb2RlKVxuICAgICAgcmV0dXJuIGRvbmU/LigpO1xuICAgIG9uRW50ZXI/LihlbCwgKCkgPT4gZW5kVHJhbnNpdGlvbigpKTtcbiAgfSk7XG4gIG5leHRGcmFtZSgoKSA9PiB7XG4gICAgZWwuY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc2VzLmVudGVyKTtcbiAgICBlbC5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzZXMuZW50ZXJUbyk7XG4gICAgaWYgKCFvbkVudGVyIHx8IG9uRW50ZXIubGVuZ3RoIDwgMikge1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIiwgZW5kVHJhbnNpdGlvbik7XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwiYW5pbWF0aW9uZW5kXCIsIGVuZFRyYW5zaXRpb24pO1xuICAgIH1cbiAgfSk7XG4gIGZ1bmN0aW9uIGVuZFRyYW5zaXRpb24oZTIpIHtcbiAgICBpZiAoIWUyIHx8IGUyLnRhcmdldCA9PT0gZWwpIHtcbiAgICAgIGRvbmU/LigpO1xuICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIiwgZW5kVHJhbnNpdGlvbik7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYW5pbWF0aW9uZW5kXCIsIGVuZFRyYW5zaXRpb24pO1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc2VzLmVudGVyQWN0aXZlKTtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uY2xhc3Nlcy5lbnRlclRvKTtcbiAgICAgIG9uQWZ0ZXJFbnRlcj8uKGVsKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGV4aXRUcmFuc2l0aW9uKGNsYXNzZXMsIGV2ZW50cywgZWwsIGRvbmUpIHtcbiAgY29uc3QgeyBvbkJlZm9yZUV4aXQsIG9uRXhpdCwgb25BZnRlckV4aXQgfSA9IGV2ZW50cztcbiAgaWYgKCFlbC5wYXJlbnROb2RlKVxuICAgIHJldHVybiBkb25lPy4oKTtcbiAgb25CZWZvcmVFeGl0Py4oZWwpO1xuICBlbC5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzZXMuZXhpdCk7XG4gIGVsLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3Nlcy5leGl0QWN0aXZlKTtcbiAgb25FeGl0Py4oZWwsICgpID0+IGVuZFRyYW5zaXRpb24oKSk7XG4gIG5leHRGcmFtZSgoKSA9PiB7XG4gICAgZWwuY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc2VzLmV4aXQpO1xuICAgIGVsLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3Nlcy5leGl0VG8pO1xuICAgIGlmICghb25FeGl0IHx8IG9uRXhpdC5sZW5ndGggPCAyKSB7XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCBlbmRUcmFuc2l0aW9uKTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25lbmRcIiwgZW5kVHJhbnNpdGlvbik7XG4gICAgfVxuICB9KTtcbiAgZnVuY3Rpb24gZW5kVHJhbnNpdGlvbihlMikge1xuICAgIGlmICghZTIgfHwgZTIudGFyZ2V0ID09PSBlbCkge1xuICAgICAgZG9uZT8uKCk7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCBlbmRUcmFuc2l0aW9uKTtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25lbmRcIiwgZW5kVHJhbnNpdGlvbik7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKC4uLmNsYXNzZXMuZXhpdEFjdGl2ZSk7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKC4uLmNsYXNzZXMuZXhpdFRvKTtcbiAgICAgIG9uQWZ0ZXJFeGl0Py4oZWwpO1xuICAgIH1cbiAgfVxufVxudmFyIFRyYW5zaXRpb25Hcm91cCA9IChwcm9wcykgPT4ge1xuICBjb25zdCBjbGFzc25hbWVzID0gY3JlYXRlQ2xhc3NuYW1lcyhwcm9wcyk7XG4gIHJldHVybiBjcmVhdGVMaXN0VHJhbnNpdGlvbihyZXNvbHZlRWxlbWVudHMoKCkgPT4gcHJvcHMuY2hpbGRyZW4pLnRvQXJyYXksIHtcbiAgICBhcHBlYXI6IHByb3BzLmFwcGVhcixcbiAgICBleGl0TWV0aG9kOiBcImtlZXAtaW5kZXhcIixcbiAgICBvbkNoYW5nZSh7IGFkZGVkLCByZW1vdmVkLCBmaW5pc2hSZW1vdmVkLCBsaXN0IH0pIHtcbiAgICAgIGNvbnN0IGNsYXNzZXMgPSBjbGFzc25hbWVzKCk7XG4gICAgICBmb3IgKGNvbnN0IGVsIG9mIGFkZGVkKSB7XG4gICAgICAgIGVudGVyVHJhbnNpdGlvbihjbGFzc2VzLCBwcm9wcywgZWwpO1xuICAgICAgfVxuICAgICAgY29uc3QgdG9Nb3ZlID0gW107XG4gICAgICBmb3IgKGNvbnN0IGVsIG9mIGxpc3QpIHtcbiAgICAgICAgaWYgKGVsLmlzQ29ubmVjdGVkICYmIChlbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IHx8IGVsIGluc3RhbmNlb2YgU1ZHRWxlbWVudCkpIHtcbiAgICAgICAgICB0b01vdmUucHVzaCh7IGVsLCByZWN0OiBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcXVldWVNaWNyb3Rhc2soKCkgPT4ge1xuICAgICAgICBjb25zdCBtb3ZlZCA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHsgZWwsIHJlY3QgfSBvZiB0b01vdmUpIHtcbiAgICAgICAgICBpZiAoZWwuaXNDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1JlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgZFggPSByZWN0LmxlZnQgLSBuZXdSZWN0LmxlZnQsIGRZID0gcmVjdC50b3AgLSBuZXdSZWN0LnRvcDtcbiAgICAgICAgICAgIGlmIChkWCB8fCBkWSkge1xuICAgICAgICAgICAgICBlbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCR7ZFh9cHgsICR7ZFl9cHgpYDtcbiAgICAgICAgICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gXCIwc1wiO1xuICAgICAgICAgICAgICBtb3ZlZC5wdXNoKGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIGZvciAoY29uc3QgZWwgb2YgbW92ZWQpIHtcbiAgICAgICAgICBsZXQgZW5kVHJhbnNpdGlvbjIgPSBmdW5jdGlvbihlMikge1xuICAgICAgICAgICAgaWYgKGUyLnRhcmdldCA9PT0gZWwgfHwgL3RyYW5zZm9ybSQvLnRlc3QoZTIucHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCBlbmRUcmFuc2l0aW9uMik7XG4gICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uY2xhc3Nlcy5tb3ZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3Nlcy5tb3ZlKTtcbiAgICAgICAgICBlbC5zdHlsZS50cmFuc2Zvcm0gPSBlbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBcIlwiO1xuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIGVuZFRyYW5zaXRpb24yKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBmb3IgKGNvbnN0IGVsIG9mIHJlbW92ZWQpIHtcbiAgICAgICAgZXhpdFRyYW5zaXRpb24oY2xhc3NlcywgcHJvcHMsIGVsLCAoKSA9PiBmaW5pc2hSZW1vdmVkKFtlbF0pKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcblxuLy8gLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bzb2xpZC1wcmltaXRpdmVzK2tleWVkQDEuMi4wX3NvbGlkLWpzQDEuOC43L25vZGVfbW9kdWxlcy9Ac29saWQtcHJpbWl0aXZlcy9rZXllZC9kaXN0L2luZGV4LmpzXG52YXIgRkFMTEJBQ0sgPSBTeW1ib2woXCJmYWxsYmFja1wiKTtcbmZ1bmN0aW9uIGRpc3Bvc2UobGlzdCkge1xuICBmb3IgKGNvbnN0IG8yIG9mIGxpc3QpXG4gICAgbzIuZGlzcG9zZSgpO1xufVxuZnVuY3Rpb24ga2V5QXJyYXkoaXRlbXMsIGtleUZuLCBtYXBGbiwgb3B0aW9ucyA9IHt9KSB7XG4gIGlmIChpc1NlcnZlcikge1xuICAgIGNvbnN0IGl0ZW1zUmVmID0gaXRlbXMoKTtcbiAgICBsZXQgczIgPSBbXTtcbiAgICBpZiAoaXRlbXNSZWYgJiYgaXRlbXNSZWYubGVuZ3RoKSB7XG4gICAgICBmb3IgKGxldCBpMiA9IDAsIGxlbiA9IGl0ZW1zUmVmLmxlbmd0aDsgaTIgPCBsZW47IGkyKyspXG4gICAgICAgIHMyLnB1c2goXG4gICAgICAgICAgbWFwRm4oXG4gICAgICAgICAgICAoKSA9PiBpdGVtc1JlZltpMl0sXG4gICAgICAgICAgICAoKSA9PiBpMlxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZmFsbGJhY2spXG4gICAgICBzMiA9IFtvcHRpb25zLmZhbGxiYWNrKCldO1xuICAgIHJldHVybiAoKSA9PiBzMjtcbiAgfVxuICBjb25zdCBwcmV2ID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgb25DbGVhbnVwKCgpID0+IGRpc3Bvc2UocHJldi52YWx1ZXMoKSkpO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGNvbnN0IGxpc3QgPSBpdGVtcygpIHx8IFtdO1xuICAgIGxpc3RbJFRSQUNLXTtcbiAgICByZXR1cm4gdW50cmFjaygoKSA9PiB7XG4gICAgICBpZiAoIWxpc3QubGVuZ3RoKSB7XG4gICAgICAgIGRpc3Bvc2UocHJldi52YWx1ZXMoKSk7XG4gICAgICAgIHByZXYuY2xlYXIoKTtcbiAgICAgICAgaWYgKCFvcHRpb25zLmZhbGxiYWNrKVxuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgY29uc3QgZmIyID0gY3JlYXRlUm9vdCgoZGlzcG9zZTIpID0+IHtcbiAgICAgICAgICBwcmV2LnNldChGQUxMQkFDSywgeyBkaXNwb3NlOiBkaXNwb3NlMiB9KTtcbiAgICAgICAgICByZXR1cm4gb3B0aW9ucy5mYWxsYmFjaygpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFtmYjJdO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5KGxpc3QubGVuZ3RoKTtcbiAgICAgIGNvbnN0IGZiID0gcHJldi5nZXQoRkFMTEJBQ0spO1xuICAgICAgaWYgKCFwcmV2LnNpemUgfHwgZmIpIHtcbiAgICAgICAgZmI/LmRpc3Bvc2UoKTtcbiAgICAgICAgcHJldi5kZWxldGUoRkFMTEJBQ0spO1xuICAgICAgICBmb3IgKGxldCBpMiA9IDA7IGkyIDwgbGlzdC5sZW5ndGg7IGkyKyspIHtcbiAgICAgICAgICBjb25zdCBpdGVtID0gbGlzdFtpMl07XG4gICAgICAgICAgY29uc3Qga2V5ID0ga2V5Rm4oaXRlbSwgaTIpO1xuICAgICAgICAgIGFkZE5ld0l0ZW0ocmVzdWx0LCBpdGVtLCBpMiwga2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgY29uc3QgcHJldktleXMgPSBuZXcgU2V0KHByZXYua2V5cygpKTtcbiAgICAgIGZvciAobGV0IGkyID0gMDsgaTIgPCBsaXN0Lmxlbmd0aDsgaTIrKykge1xuICAgICAgICBjb25zdCBpdGVtID0gbGlzdFtpMl07XG4gICAgICAgIGNvbnN0IGtleSA9IGtleUZuKGl0ZW0sIGkyKTtcbiAgICAgICAgcHJldktleXMuZGVsZXRlKGtleSk7XG4gICAgICAgIGNvbnN0IGxvb2t1cCA9IHByZXYuZ2V0KGtleSk7XG4gICAgICAgIGlmIChsb29rdXApIHtcbiAgICAgICAgICByZXN1bHRbaTJdID0gbG9va3VwLm1hcHBlZDtcbiAgICAgICAgICBsb29rdXAuc2V0SW5kZXg/LihpMik7XG4gICAgICAgICAgbG9va3VwLnNldEl0ZW0oKCkgPT4gaXRlbSk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgIGFkZE5ld0l0ZW0ocmVzdWx0LCBpdGVtLCBpMiwga2V5KTtcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIHByZXZLZXlzKSB7XG4gICAgICAgIHByZXYuZ2V0KGtleSk/LmRpc3Bvc2UoKTtcbiAgICAgICAgcHJldi5kZWxldGUoa2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG4gIH07XG4gIGZ1bmN0aW9uIGFkZE5ld0l0ZW0obGlzdCwgaXRlbSwgaTIsIGtleSkge1xuICAgIGNyZWF0ZVJvb3QoKGRpc3Bvc2UyKSA9PiB7XG4gICAgICBjb25zdCBbZ2V0SXRlbSwgc2V0SXRlbV0gPSBjcmVhdGVTaWduYWwoaXRlbSk7XG4gICAgICBjb25zdCBzYXZlID0geyBzZXRJdGVtLCBkaXNwb3NlOiBkaXNwb3NlMiB9O1xuICAgICAgaWYgKG1hcEZuLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgY29uc3QgW2luZGV4LCBzZXRJbmRleF0gPSBjcmVhdGVTaWduYWwoaTIpO1xuICAgICAgICBzYXZlLnNldEluZGV4ID0gc2V0SW5kZXg7XG4gICAgICAgIHNhdmUubWFwcGVkID0gbWFwRm4oZ2V0SXRlbSwgaW5kZXgpO1xuICAgICAgfSBlbHNlXG4gICAgICAgIHNhdmUubWFwcGVkID0gbWFwRm4oZ2V0SXRlbSk7XG4gICAgICBwcmV2LnNldChrZXksIHNhdmUpO1xuICAgICAgbGlzdFtpMl0gPSBzYXZlLm1hcHBlZDtcbiAgICB9KTtcbiAgfVxufVxuZnVuY3Rpb24gS2V5KHByb3BzKSB7XG4gIGNvbnN0IHsgYnkgfSA9IHByb3BzO1xuICByZXR1cm4gY3JlYXRlTWVtbyhcbiAgICBrZXlBcnJheShcbiAgICAgICgpID0+IHByb3BzLmVhY2gsXG4gICAgICB0eXBlb2YgYnkgPT09IFwiZnVuY3Rpb25cIiA/IGJ5IDogKHYpID0+IHZbYnldLFxuICAgICAgcHJvcHMuY2hpbGRyZW4sXG4gICAgICBcImZhbGxiYWNrXCIgaW4gcHJvcHMgPyB7IGZhbGxiYWNrOiAoKSA9PiBwcm9wcy5mYWxsYmFjayB9IDogdm9pZCAwXG4gICAgKVxuICApO1xufVxuXG4vLyAuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNvbGlkLXByaW1pdGl2ZXMrc3RvcmFnZUAxLjMuMTFfc29saWQtanNAMS44Ljcvbm9kZV9tb2R1bGVzL0Bzb2xpZC1wcmltaXRpdmVzL3N0b3JhZ2UvZGlzdC9pbmRleC5qc1xuZnVuY3Rpb24gY3JlYXRlU3RvcmFnZShwcm9wcykge1xuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IGNyZWF0ZVNpZ25hbCgpO1xuICBjb25zdCBoYW5kbGVFcnJvciA9IHByb3BzPy50aHJvdyA/IChlcnIsIGZhbGxiYWNrKSA9PiB7XG4gICAgc2V0RXJyb3IoZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIgOiBuZXcgRXJyb3IoZmFsbGJhY2spKTtcbiAgICB0aHJvdyBlcnI7XG4gIH0gOiAoZXJyLCBmYWxsYmFjaykgPT4ge1xuICAgIHNldEVycm9yKGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyIDogbmV3IEVycm9yKGZhbGxiYWNrKSk7XG4gIH07XG4gIGNvbnN0IGFwaXMgPSBwcm9wcz8uYXBpID8gQXJyYXkuaXNBcnJheShwcm9wcy5hcGkpID8gcHJvcHMuYXBpIDogW3Byb3BzLmFwaV0gOiBbZ2xvYmFsVGhpcy5sb2NhbFN0b3JhZ2VdLmZpbHRlcihCb29sZWFuKTtcbiAgY29uc3QgcHJlZml4ID0gcHJvcHM/LnByZWZpeCA/IGAke3Byb3BzLnByZWZpeH0uYCA6IFwiXCI7XG4gIGNvbnN0IHNpZ25hbHMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBjb25zdCBzdG9yZSA9IG5ldyBQcm94eShcbiAgICB7fSxcbiAgICB7XG4gICAgICBnZXQoXywga2V5KSB7XG4gICAgICAgIGxldCBub2RlID0gc2lnbmFscy5nZXQoa2V5KTtcbiAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgbm9kZSA9IGNyZWF0ZVNpZ25hbCh2b2lkIDAsIHsgZXF1YWxzOiBmYWxzZSB9KTtcbiAgICAgICAgICBzaWduYWxzLnNldChrZXksIG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIG5vZGVbMF0oKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBhcGlzLnJlZHVjZShcbiAgICAgICAgICAocmVzdWx0LCBhcGkpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgIT09IG51bGwgfHwgIWFwaSkge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcmV0dXJuIGFwaS5nZXRJdGVtKGAke3ByZWZpeH0ke2tleX1gKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGBFcnJvciByZWFkaW5nICR7cHJlZml4fSR7a2V5fSBmcm9tICR7YXBpW1wibmFtZVwiXX1gKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBudWxsXG4gICAgICAgICk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiBwcm9wcz8uZGVzZXJpYWxpemVyKSB7XG4gICAgICAgICAgcmV0dXJuIHByb3BzLmRlc2VyaWFsaXplcih2YWx1ZSwga2V5LCBwcm9wcy5vcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICApO1xuICBjb25zdCBzZXR0ZXIgPSAoa2V5LCB2YWx1ZSwgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IGZpbHRlcmVkVmFsdWUgPSBwcm9wcz8uc2VyaWFsaXplciA/IHByb3BzLnNlcmlhbGl6ZXIodmFsdWUsIGtleSwgb3B0aW9ucyA/PyBwcm9wcy5vcHRpb25zKSA6IHZhbHVlO1xuICAgIGNvbnN0IGFwaUtleSA9IGAke3ByZWZpeH0ke2tleX1gO1xuICAgIGFwaXMuZm9yRWFjaCgoYXBpKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBhcGkuZ2V0SXRlbShhcGlLZXkpICE9PSBmaWx0ZXJlZFZhbHVlICYmIGFwaS5zZXRJdGVtKGFwaUtleSwgZmlsdGVyZWRWYWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBgRXJyb3Igc2V0dGluZyAke3ByZWZpeH0ke2tleX0gdG8gJHtmaWx0ZXJlZFZhbHVlfSBpbiAke2FwaS5uYW1lfWApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IG5vZGUgPSBzaWduYWxzLmdldChrZXkpO1xuICAgIG5vZGUgJiYgbm9kZVsxXSgpO1xuICB9O1xuICBjb25zdCByZW1vdmUgPSAoa2V5KSA9PiBhcGlzLmZvckVhY2goKGFwaSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBhcGkucmVtb3ZlSXRlbShgJHtwcmVmaXh9JHtrZXl9YCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlcnIsIGBFcnJvciByZW1vdmluZyAke3ByZWZpeH0ke2tleX0gZnJvbSAke2FwaS5uYW1lfWApO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGNsZWFyID0gKCkgPT4gYXBpcy5mb3JFYWNoKChhcGkpID0+IHtcbiAgICB0cnkge1xuICAgICAgYXBpLmNsZWFyKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlcnIsIGBFcnJvciBjbGVhcmluZyAke2FwaS5uYW1lfWApO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IHRvSlNPTiA9ICgpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBjb25zdCBhZGRWYWx1ZSA9IChrZXksIHZhbHVlKSA9PiB7XG4gICAgICBpZiAoIXJlc3VsdC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGNvbnN0IGZpbHRlcmVkVmFsdWUgPSB2YWx1ZSAmJiBwcm9wcz8uZGVzZXJpYWxpemVyID8gcHJvcHMuZGVzZXJpYWxpemVyKHZhbHVlLCBrZXksIHByb3BzLm9wdGlvbnMpIDogdmFsdWU7XG4gICAgICAgIGlmIChmaWx0ZXJlZFZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBmaWx0ZXJlZFZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBhcGlzLmZvckVhY2goKGFwaSkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBhcGkuZ2V0QWxsID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgbGV0IHZhbHVlcztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YWx1ZXMgPSBhcGkuZ2V0QWxsKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGVyciwgYEVycm9yIGdldHRpbmcgYWxsIHZhbHVlcyBmcm9tIGluICR7YXBpLm5hbWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgdmFsdWVzKSB7XG4gICAgICAgICAgYWRkVmFsdWUoa2V5LCB2YWx1ZXNba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBpbmRleCA9IDAsIGtleTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB3aGlsZSAoa2V5ID0gYXBpLmtleShpbmRleCsrKSkge1xuICAgICAgICAgICAgaWYgKCFyZXN1bHQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICBhZGRWYWx1ZShrZXksIGFwaS5nZXRJdGVtKGtleSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBgRXJyb3IgZ2V0dGluZyBhbGwgdmFsdWVzIGZyb20gJHthcGkubmFtZX1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHByb3BzPy5zeW5jICE9PSBmYWxzZSAmJiBvbk1vdW50KCgpID0+IHtcbiAgICBjb25zdCBsaXN0ZW5lciA9IChldikgPT4ge1xuICAgICAgbGV0IGNoYW5nZWQgPSBmYWxzZTtcbiAgICAgIGFwaXMuZm9yRWFjaCgoYXBpKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKGFwaSAhPT0gZXYuc3RvcmFnZUFyZWEgJiYgZXYua2V5ICYmIGV2Lm5ld1ZhbHVlICE9PSBhcGkuZ2V0SXRlbShldi5rZXkpKSB7XG4gICAgICAgICAgICBldi5uZXdWYWx1ZSA/IGFwaS5zZXRJdGVtKGV2LmtleSwgZXYubmV3VmFsdWUpIDogYXBpLnJlbW92ZUl0ZW0oZXYua2V5KTtcbiAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoXG4gICAgICAgICAgICBlcnIsXG4gICAgICAgICAgICBgRXJyb3Igc3luY2hpbmcgYXBpICR7YXBpLm5hbWV9IGZyb20gc3RvcmFnZSBldmVudCAoJHtldi5rZXl9PSR7ZXYubmV3VmFsdWV9KWBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNoYW5nZWQgJiYgZXYua2V5ICYmIHNpZ25hbHMuZ2V0KGV2LmtleSk/LlsxXSgpO1xuICAgIH07XG4gICAgaWYgKFwiYWRkRXZlbnRMaXN0ZW5lclwiIGluIGdsb2JhbFRoaXMpIHtcbiAgICAgIGdsb2JhbFRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcInN0b3JhZ2VcIiwgbGlzdGVuZXIpO1xuICAgICAgb25DbGVhbnVwKCgpID0+IGdsb2JhbFRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInN0b3JhZ2VcIiwgbGlzdGVuZXIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpcy5mb3JFYWNoKChhcGkpID0+IGFwaS5hZGRFdmVudExpc3RlbmVyPy4oXCJzdG9yYWdlXCIsIGxpc3RlbmVyKSk7XG4gICAgICBvbkNsZWFudXAoKCkgPT4gYXBpcy5mb3JFYWNoKChhcGkpID0+IGFwaS5yZW1vdmVFdmVudExpc3RlbmVyPy4oXCJzdG9yYWdlXCIsIGxpc3RlbmVyKSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBbXG4gICAgc3RvcmUsXG4gICAgc2V0dGVyLFxuICAgIHtcbiAgICAgIGNsZWFyLFxuICAgICAgZXJyb3IsXG4gICAgICByZW1vdmUsXG4gICAgICB0b0pTT05cbiAgICB9XG4gIF07XG59XG52YXIgY3JlYXRlTG9jYWxTdG9yYWdlID0gY3JlYXRlU3RvcmFnZTtcbnZhciBhZGRDbGVhck1ldGhvZCA9IChzdG9yYWdlKSA9PiB7XG4gIGlmICh0eXBlb2Ygc3RvcmFnZS5jbGVhciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIHN0b3JhZ2U7XG4gIH1cbiAgc3RvcmFnZS5jbGVhciA9ICgpID0+IHtcbiAgICBsZXQga2V5O1xuICAgIHdoaWxlIChrZXkgPSBzdG9yYWdlLmtleSgwKSkge1xuICAgICAgc3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gc3RvcmFnZTtcbn07XG52YXIgc2VyaWFsaXplQ29va2llT3B0aW9ucyA9IChvcHRpb25zKSA9PiB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIGxldCBtZW1vID0gXCJcIjtcbiAgZm9yIChjb25zdCBrZXkgaW4gb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPSBvcHRpb25zW2tleV07XG4gICAgbWVtbyArPSB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgPyBgOyAke2tleX09JHt2YWx1ZS50b1VUQ1N0cmluZygpfWAgOiB0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiID8gYDsgJHtrZXl9YCA6IGA7ICR7a2V5fT0ke3ZhbHVlfWA7XG4gIH1cbiAgcmV0dXJuIG1lbW87XG59O1xudmFyIGNvb2tpZVN0b3JhZ2UgPSBhZGRDbGVhck1ldGhvZCh7XG4gIF9jb29raWVzOiBbZ2xvYmFsVGhpcy5kb2N1bWVudCwgXCJjb29raWVcIl0sXG4gIGdldEl0ZW06IChrZXkpID0+IGNvb2tpZVN0b3JhZ2UuX2Nvb2tpZXNbMF1bY29va2llU3RvcmFnZS5fY29va2llc1sxXV0ubWF0Y2goXCIoXnw7KVxcXFxzKlwiICsga2V5ICsgXCJcXFxccyo9XFxcXHMqKFteO10rKVwiKT8ucG9wKCkgPz8gbnVsbCxcbiAgc2V0SXRlbTogKGtleSwgdmFsdWUsIG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBvbGRWYWx1ZSA9IGNvb2tpZVN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgIGNvb2tpZVN0b3JhZ2UuX2Nvb2tpZXNbMF1bY29va2llU3RvcmFnZS5fY29va2llc1sxXV0gPSBgJHtrZXl9PSR7dmFsdWV9JHtzZXJpYWxpemVDb29raWVPcHRpb25zKFxuICAgICAgb3B0aW9uc1xuICAgICl9YDtcbiAgICBjb25zdCBzdG9yYWdlRXZlbnQgPSBPYmplY3QuYXNzaWduKG5ldyBFdmVudChcInN0b3JhZ2VcIiksIHtcbiAgICAgIGtleSxcbiAgICAgIG9sZFZhbHVlLFxuICAgICAgbmV3VmFsdWU6IHZhbHVlLFxuICAgICAgdXJsOiBnbG9iYWxUaGlzLmRvY3VtZW50LlVSTCxcbiAgICAgIHN0b3JhZ2VBcmVhOiBjb29raWVTdG9yYWdlXG4gICAgfSk7XG4gICAgd2luZG93LmRpc3BhdGNoRXZlbnQoc3RvcmFnZUV2ZW50KTtcbiAgfSxcbiAgcmVtb3ZlSXRlbTogKGtleSkgPT4ge1xuICAgIGNvb2tpZVN0b3JhZ2UuX2Nvb2tpZXNbMF1bY29va2llU3RvcmFnZS5fY29va2llc1sxXV0gPSBgJHtrZXl9PWRlbGV0ZWQke3NlcmlhbGl6ZUNvb2tpZU9wdGlvbnMoe1xuICAgICAgZXhwaXJlczogLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKDApXG4gICAgfSl9YDtcbiAgfSxcbiAga2V5OiAoaW5kZXgpID0+IHtcbiAgICBsZXQga2V5ID0gbnVsbDtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGNvb2tpZVN0b3JhZ2UuX2Nvb2tpZXNbMF1bY29va2llU3RvcmFnZS5fY29va2llc1sxXV0ucmVwbGFjZShcbiAgICAgIC8oPzpefDspXFxzKiguKz8pXFxzKj1cXHMqW147XSsvZyxcbiAgICAgIChfLCBmb3VuZCkgPT4ge1xuICAgICAgICBpZiAoIWtleSAmJiBmb3VuZCAmJiBjb3VudCsrID09PSBpbmRleCkge1xuICAgICAgICAgIGtleSA9IGZvdW5kO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgfVxuICAgICk7XG4gICAgcmV0dXJuIGtleTtcbiAgfSxcbiAgZ2V0IGxlbmd0aCgpIHtcbiAgICBsZXQgbGVuZ3RoID0gMDtcbiAgICBjb29raWVTdG9yYWdlLl9jb29raWVzWzBdW2Nvb2tpZVN0b3JhZ2UuX2Nvb2tpZXNbMV1dLnJlcGxhY2UoXG4gICAgICAvKD86Xnw7KVxccyouKz9cXHMqPVxccypbXjtdKy9nLFxuICAgICAgKGZvdW5kKSA9PiB7XG4gICAgICAgIGxlbmd0aCArPSBmb3VuZCA/IDEgOiAwO1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIH1cbiAgICApO1xuICAgIHJldHVybiBsZW5ndGg7XG4gIH1cbn0pO1xuXG4vLyAuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNvbGlkLXByaW1pdGl2ZXMrZXZlbnQtbGlzdGVuZXJAMi4zLjBfc29saWQtanNAMS44Ljcvbm9kZV9tb2R1bGVzL0Bzb2xpZC1wcmltaXRpdmVzL2V2ZW50LWxpc3RlbmVyL2Rpc3QvaW5kZXguanNcbmZ1bmN0aW9uIG1ha2VFdmVudExpc3RlbmVyKHRhcmdldCwgdHlwZSwgaGFuZGxlciwgb3B0aW9ucykge1xuICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgcmV0dXJuIHRyeU9uQ2xlYW51cCh0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lci5iaW5kKHRhcmdldCwgdHlwZSwgaGFuZGxlciwgb3B0aW9ucykpO1xufVxuZnVuY3Rpb24gY3JlYXRlRXZlbnRMaXN0ZW5lcih0YXJnZXRzLCB0eXBlLCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gIGlmIChpc1NlcnZlcilcbiAgICByZXR1cm47XG4gIGNvbnN0IGF0dGFjaExpc3RlbmVycyA9ICgpID0+IHtcbiAgICBhc0FycmF5KGFjY2Vzcyh0YXJnZXRzKSkuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgIGlmIChlbClcbiAgICAgICAgYXNBcnJheShhY2Nlc3ModHlwZSkpLmZvckVhY2goKHR5cGUyKSA9PiBtYWtlRXZlbnRMaXN0ZW5lcihlbCwgdHlwZTIsIGhhbmRsZXIsIG9wdGlvbnMpKTtcbiAgICB9KTtcbiAgfTtcbiAgaWYgKHR5cGVvZiB0YXJnZXRzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgY3JlYXRlRWZmZWN0KGF0dGFjaExpc3RlbmVycyk7XG4gIGVsc2VcbiAgICBjcmVhdGVSZW5kZXJFZmZlY3QoYXR0YWNoTGlzdGVuZXJzKTtcbn1cblxuLy8gLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bzb2xpZC1wcmltaXRpdmVzK3Jlc2l6ZS1vYnNlcnZlckAyLjAuMjJfc29saWQtanNAMS44Ljcvbm9kZV9tb2R1bGVzL0Bzb2xpZC1wcmltaXRpdmVzL3Jlc2l6ZS1vYnNlcnZlci9kaXN0L2luZGV4LmpzXG5mdW5jdGlvbiBtYWtlUmVzaXplT2JzZXJ2ZXIoY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgaWYgKGlzU2VydmVyKSB7XG4gICAgcmV0dXJuIHsgb2JzZXJ2ZTogbm9vcDIsIHVub2JzZXJ2ZTogbm9vcDIgfTtcbiAgfVxuICBjb25zdCBvYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihjYWxsYmFjayk7XG4gIG9uQ2xlYW51cChvYnNlcnZlci5kaXNjb25uZWN0LmJpbmQob2JzZXJ2ZXIpKTtcbiAgcmV0dXJuIHtcbiAgICBvYnNlcnZlOiAocmVmKSA9PiBvYnNlcnZlci5vYnNlcnZlKHJlZiwgb3B0aW9ucyksXG4gICAgdW5vYnNlcnZlOiBvYnNlcnZlci51bm9ic2VydmUuYmluZChvYnNlcnZlcilcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlc2l6ZU9ic2VydmVyKHRhcmdldHMsIG9uUmVzaXplLCBvcHRpb25zKSB7XG4gIGlmIChpc1NlcnZlcilcbiAgICByZXR1cm47XG4gIGNvbnN0IHByZXZpb3VzTWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCksIHsgb2JzZXJ2ZSwgdW5vYnNlcnZlIH0gPSBtYWtlUmVzaXplT2JzZXJ2ZXIoKGVudHJpZXMyKSA9PiB7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzMikge1xuICAgICAgY29uc3QgeyBjb250ZW50UmVjdCwgdGFyZ2V0IH0gPSBlbnRyeSwgd2lkdGggPSBNYXRoLnJvdW5kKGNvbnRlbnRSZWN0LndpZHRoKSwgaGVpZ2h0ID0gTWF0aC5yb3VuZChjb250ZW50UmVjdC5oZWlnaHQpLCBwcmV2aW91cyA9IHByZXZpb3VzTWFwLmdldCh0YXJnZXQpO1xuICAgICAgaWYgKCFwcmV2aW91cyB8fCBwcmV2aW91cy53aWR0aCAhPT0gd2lkdGggfHwgcHJldmlvdXMuaGVpZ2h0ICE9PSBoZWlnaHQpIHtcbiAgICAgICAgb25SZXNpemUoY29udGVudFJlY3QsIHRhcmdldCwgZW50cnkpO1xuICAgICAgICBwcmV2aW91c01hcC5zZXQodGFyZ2V0LCB7IHdpZHRoLCBoZWlnaHQgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCBvcHRpb25zKTtcbiAgY3JlYXRlRWZmZWN0KChwcmV2KSA9PiB7XG4gICAgY29uc3QgcmVmcyA9IGZpbHRlck5vbk51bGxhYmxlKGFzQXJyYXkoYWNjZXNzKHRhcmdldHMpKSk7XG4gICAgaGFuZGxlRGlmZkFycmF5KHJlZnMsIHByZXYsIG9ic2VydmUsIHVub2JzZXJ2ZSk7XG4gICAgcmV0dXJuIHJlZnM7XG4gIH0sIFtdKTtcbn1cblxuLy8gLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bzb2xpZC1wcmltaXRpdmVzK3Byb3BzQDMuMS44X3NvbGlkLWpzQDEuOC43L25vZGVfbW9kdWxlcy9Ac29saWQtcHJpbWl0aXZlcy9wcm9wcy9kaXN0L2luZGV4LmpzXG5mdW5jdGlvbiB0cnVlRm4yKCkge1xuICByZXR1cm4gdHJ1ZTtcbn1cbnZhciBwcm9wVHJhcHMgPSB7XG4gIGdldChfLCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHtcbiAgICBpZiAocHJvcGVydHkgPT09ICRQUk9YWSlcbiAgICAgIHJldHVybiByZWNlaXZlcjtcbiAgICByZXR1cm4gXy5nZXQocHJvcGVydHkpO1xuICB9LFxuICBoYXMoXywgcHJvcGVydHkpIHtcbiAgICByZXR1cm4gXy5oYXMocHJvcGVydHkpO1xuICB9LFxuICBzZXQ6IHRydWVGbjIsXG4gIGRlbGV0ZVByb3BlcnR5OiB0cnVlRm4yLFxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoXywgcHJvcGVydHkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF8uZ2V0KHByb3BlcnR5KTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IHRydWVGbjIsXG4gICAgICBkZWxldGVQcm9wZXJ0eTogdHJ1ZUZuMlxuICAgIH07XG4gIH0sXG4gIG93bktleXMoXykge1xuICAgIHJldHVybiBfLmtleXMoKTtcbiAgfVxufTtcbnZhciBleHRyYWN0Q1NTcmVnZXggPSAvKCg/Oi0tKT8oPzpcXHcrLT8pKylcXHMqOlxccyooW147XSopL2c7XG5mdW5jdGlvbiBzdHJpbmdTdHlsZVRvT2JqZWN0KHN0eWxlMikge1xuICBjb25zdCBvYmplY3QgPSB7fTtcbiAgbGV0IG1hdGNoO1xuICB3aGlsZSAobWF0Y2ggPSBleHRyYWN0Q1NTcmVnZXguZXhlYyhzdHlsZTIpKSB7XG4gICAgb2JqZWN0W21hdGNoWzFdXSA9IG1hdGNoWzJdO1xuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5mdW5jdGlvbiBjb21iaW5lU3R5bGUoYTIsIGIyKSB7XG4gIGlmICh0eXBlb2YgYTIgPT09IFwic3RyaW5nXCIpIHtcbiAgICBpZiAodHlwZW9mIGIyID09PSBcInN0cmluZ1wiKVxuICAgICAgcmV0dXJuIGAke2EyfTske2IyfWA7XG4gICAgYTIgPSBzdHJpbmdTdHlsZVRvT2JqZWN0KGEyKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYjIgPT09IFwic3RyaW5nXCIpIHtcbiAgICBiMiA9IHN0cmluZ1N0eWxlVG9PYmplY3QoYjIpO1xuICB9XG4gIHJldHVybiB7IC4uLmEyLCAuLi5iMiB9O1xufVxudmFyIHJlZHVjZSA9IChzb3VyY2VzLCBrZXksIGNhbGMpID0+IHtcbiAgbGV0IHYgPSB2b2lkIDA7XG4gIGZvciAoY29uc3QgcHJvcHMgb2Ygc291cmNlcykge1xuICAgIGNvbnN0IHByb3BWID0gYWNjZXNzKHByb3BzKVtrZXldO1xuICAgIGlmICghdilcbiAgICAgIHYgPSBwcm9wVjtcbiAgICBlbHNlIGlmIChwcm9wVilcbiAgICAgIHYgPSBjYWxjKHYsIHByb3BWKTtcbiAgfVxuICByZXR1cm4gdjtcbn07XG5mdW5jdGlvbiBjb21iaW5lUHJvcHMoLi4uYXJncykge1xuICBjb25zdCByZXN0QXJncyA9IEFycmF5LmlzQXJyYXkoYXJnc1swXSk7XG4gIGNvbnN0IHNvdXJjZXMgPSByZXN0QXJncyA/IGFyZ3NbMF0gOiBhcmdzO1xuICBpZiAoc291cmNlcy5sZW5ndGggPT09IDEpXG4gICAgcmV0dXJuIHNvdXJjZXNbMF07XG4gIGNvbnN0IGNoYWluRm4gPSByZXN0QXJncyAmJiBhcmdzWzFdPy5yZXZlcnNlRXZlbnRIYW5kbGVycyA/IHJldmVyc2VDaGFpbiA6IGNoYWluO1xuICBjb25zdCBsaXN0ZW5lcnMyID0ge307XG4gIGZvciAoY29uc3QgcHJvcHMgb2Ygc291cmNlcykge1xuICAgIGNvbnN0IHByb3BzT2JqID0gYWNjZXNzKHByb3BzKTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wc09iaikge1xuICAgICAgaWYgKGtleVswXSA9PT0gXCJvXCIgJiYga2V5WzFdID09PSBcIm5cIiAmJiBrZXlbMl0pIHtcbiAgICAgICAgY29uc3QgdiA9IHByb3BzT2JqW2tleV07XG4gICAgICAgIGNvbnN0IG5hbWUgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSB0eXBlb2YgdiA9PT0gXCJmdW5jdGlvblwiID8gdiA6IChcbiAgICAgICAgICAvLyBqc3ggZXZlbnQgaGFuZGxlcnMgY2FuIGJlIHR1cGxlcyBvZiBbY2FsbGJhY2ssIGFyZ11cbiAgICAgICAgICBBcnJheS5pc0FycmF5KHYpID8gdi5sZW5ndGggPT09IDEgPyB2WzBdIDogdlswXS5iaW5kKHZvaWQgMCwgdlsxXSkgOiB2b2lkIDBcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGNhbGxiYWNrKVxuICAgICAgICAgIGxpc3RlbmVyczJbbmFtZV0gPyBsaXN0ZW5lcnMyW25hbWVdLnB1c2goY2FsbGJhY2spIDogbGlzdGVuZXJzMltuYW1lXSA9IFtjYWxsYmFja107XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBkZWxldGUgbGlzdGVuZXJzMltuYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29uc3QgbWVyZ2UgPSBtZXJnZVByb3BzKC4uLnNvdXJjZXMpO1xuICByZXR1cm4gbmV3IFByb3h5KFxuICAgIHtcbiAgICAgIGdldChrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KG1lcmdlLCBrZXkpO1xuICAgICAgICBpZiAoa2V5ID09PSBcInN0eWxlXCIpXG4gICAgICAgICAgcmV0dXJuIHJlZHVjZShzb3VyY2VzLCBcInN0eWxlXCIsIGNvbWJpbmVTdHlsZSk7XG4gICAgICAgIGlmIChrZXkgPT09IFwicmVmXCIpIHtcbiAgICAgICAgICBjb25zdCBjYWxsYmFja3MgPSBbXTtcbiAgICAgICAgICBmb3IgKGNvbnN0IHByb3BzIG9mIHNvdXJjZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGNiID0gYWNjZXNzKHByb3BzKVtrZXldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICBjYWxsYmFja3MucHVzaChjYik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjaGFpbkZuKGNhbGxiYWNrcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGtleVswXSA9PT0gXCJvXCIgJiYga2V5WzFdID09PSBcIm5cIiAmJiBrZXlbMl0pIHtcbiAgICAgICAgICBjb25zdCBjYWxsYmFja3MgPSBsaXN0ZW5lcnMyW2tleS50b0xvd2VyQ2FzZSgpXTtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2tzID8gY2hhaW5GbihjYWxsYmFja3MpIDogUmVmbGVjdC5nZXQobWVyZ2UsIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGtleSA9PT0gXCJjbGFzc1wiIHx8IGtleSA9PT0gXCJjbGFzc05hbWVcIilcbiAgICAgICAgICByZXR1cm4gcmVkdWNlKHNvdXJjZXMsIGtleSwgKGEyLCBiMikgPT4gYCR7YTJ9ICR7YjJ9YCk7XG4gICAgICAgIGlmIChrZXkgPT09IFwiY2xhc3NMaXN0XCIpXG4gICAgICAgICAgcmV0dXJuIHJlZHVjZShzb3VyY2VzLCBrZXksIChhMiwgYjIpID0+ICh7IC4uLmEyLCAuLi5iMiB9KSk7XG4gICAgICAgIHJldHVybiBSZWZsZWN0LmdldChtZXJnZSwga2V5KTtcbiAgICAgIH0sXG4gICAgICBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiBSZWZsZWN0LmhhcyhtZXJnZSwga2V5KTtcbiAgICAgIH0sXG4gICAgICBrZXlzKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMobWVyZ2UpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcHJvcFRyYXBzXG4gICk7XG59XG5cbi8vIC4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Aa29iYWx0ZSt1dGlsc0AwLjkuMF9zb2xpZC1qc0AxLjguNy9ub2RlX21vZHVsZXMvQGtvYmFsdGUvdXRpbHMvZGlzdC9pbmRleC5qc1xuZnVuY3Rpb24gYWRkSXRlbVRvQXJyYXkoYXJyYXksIGl0ZW0sIGluZGV4ID0gLTEpIHtcbiAgaWYgKCEoaW5kZXggaW4gYXJyYXkpKSB7XG4gICAgcmV0dXJuIFsuLi5hcnJheSwgaXRlbV07XG4gIH1cbiAgcmV0dXJuIFsuLi5hcnJheS5zbGljZSgwLCBpbmRleCksIGl0ZW0sIC4uLmFycmF5LnNsaWNlKGluZGV4KV07XG59XG5mdW5jdGlvbiByZW1vdmVJdGVtRnJvbUFycmF5KGFycmF5LCBpdGVtKSB7XG4gIGNvbnN0IHVwZGF0ZWRBcnJheSA9IFsuLi5hcnJheV07XG4gIGNvbnN0IGluZGV4ID0gdXBkYXRlZEFycmF5LmluZGV4T2YoaXRlbSk7XG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICB1cGRhdGVkQXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuICByZXR1cm4gdXBkYXRlZEFycmF5O1xufVxuZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIjtcbn1cbmZ1bmN0aW9uIGlzQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpO1xufVxuZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09IFwiW29iamVjdCBTdHJpbmddXCI7XG59XG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUdlbmVyYXRlSWQoYmFzZUlkKSB7XG4gIHJldHVybiAoc3VmZml4KSA9PiBgJHtiYXNlSWQoKX0tJHtzdWZmaXh9YDtcbn1cbmZ1bmN0aW9uIGNvbnRhaW5zKHBhcmVudCwgY2hpbGQpIHtcbiAgaWYgKCFwYXJlbnQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHBhcmVudCA9PT0gY2hpbGQgfHwgcGFyZW50LmNvbnRhaW5zKGNoaWxkKTtcbn1cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQobm9kZSwgYWN0aXZlRGVzY2VuZGFudCA9IGZhbHNlKSB7XG4gIGNvbnN0IHsgYWN0aXZlRWxlbWVudCB9ID0gZ2V0RG9jdW1lbnQobm9kZSk7XG4gIGlmICghYWN0aXZlRWxlbWVudD8ubm9kZU5hbWUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoaXNGcmFtZShhY3RpdmVFbGVtZW50KSAmJiBhY3RpdmVFbGVtZW50LmNvbnRlbnREb2N1bWVudCkge1xuICAgIHJldHVybiBnZXRBY3RpdmVFbGVtZW50KGFjdGl2ZUVsZW1lbnQuY29udGVudERvY3VtZW50LmJvZHksIGFjdGl2ZURlc2NlbmRhbnQpO1xuICB9XG4gIGlmIChhY3RpdmVEZXNjZW5kYW50KSB7XG4gICAgY29uc3QgaWQgPSBhY3RpdmVFbGVtZW50LmdldEF0dHJpYnV0ZShcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiKTtcbiAgICBpZiAoaWQpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBnZXREb2N1bWVudChhY3RpdmVFbGVtZW50KS5nZXRFbGVtZW50QnlJZChpZCk7XG4gICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFjdGl2ZUVsZW1lbnQ7XG59XG5mdW5jdGlvbiBnZXRXaW5kb3cobm9kZSkge1xuICByZXR1cm4gZ2V0RG9jdW1lbnQobm9kZSkuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xufVxuZnVuY3Rpb24gZ2V0RG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogZG9jdW1lbnQ7XG59XG5mdW5jdGlvbiBpc0ZyYW1lKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQudGFnTmFtZSA9PT0gXCJJRlJBTUVcIjtcbn1cbnZhciBFdmVudEtleSA9IC8qIEBfX1BVUkVfXyAqLyAoKEV2ZW50S2V5MikgPT4ge1xuICBFdmVudEtleTJbXCJFc2NhcGVcIl0gPSBcIkVzY2FwZVwiO1xuICBFdmVudEtleTJbXCJFbnRlclwiXSA9IFwiRW50ZXJcIjtcbiAgRXZlbnRLZXkyW1wiVGFiXCJdID0gXCJUYWJcIjtcbiAgRXZlbnRLZXkyW1wiU3BhY2VcIl0gPSBcIiBcIjtcbiAgRXZlbnRLZXkyW1wiQXJyb3dEb3duXCJdID0gXCJBcnJvd0Rvd25cIjtcbiAgRXZlbnRLZXkyW1wiQXJyb3dMZWZ0XCJdID0gXCJBcnJvd0xlZnRcIjtcbiAgRXZlbnRLZXkyW1wiQXJyb3dSaWdodFwiXSA9IFwiQXJyb3dSaWdodFwiO1xuICBFdmVudEtleTJbXCJBcnJvd1VwXCJdID0gXCJBcnJvd1VwXCI7XG4gIEV2ZW50S2V5MltcIkVuZFwiXSA9IFwiRW5kXCI7XG4gIEV2ZW50S2V5MltcIkhvbWVcIl0gPSBcIkhvbWVcIjtcbiAgRXZlbnRLZXkyW1wiUGFnZURvd25cIl0gPSBcIlBhZ2VEb3duXCI7XG4gIEV2ZW50S2V5MltcIlBhZ2VVcFwiXSA9IFwiUGFnZVVwXCI7XG4gIHJldHVybiBFdmVudEtleTI7XG59KShFdmVudEtleSB8fCB7fSk7XG5mdW5jdGlvbiB0ZXN0UGxhdGZvcm0ocmUpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93Lm5hdmlnYXRvciAhPSBudWxsID8gKFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICByZS50ZXN0KHdpbmRvdy5uYXZpZ2F0b3JbXCJ1c2VyQWdlbnREYXRhXCJdPy5wbGF0Zm9ybSB8fCB3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtKVxuICApIDogZmFsc2U7XG59XG5mdW5jdGlvbiBpc01hYygpIHtcbiAgcmV0dXJuIHRlc3RQbGF0Zm9ybSgvXk1hYy9pKTtcbn1cbmZ1bmN0aW9uIGlzSVBob25lKCkge1xuICByZXR1cm4gdGVzdFBsYXRmb3JtKC9eaVBob25lL2kpO1xufVxuZnVuY3Rpb24gaXNJUGFkKCkge1xuICByZXR1cm4gdGVzdFBsYXRmb3JtKC9eaVBhZC9pKSB8fCAvLyBpUGFkT1MgMTMgbGllcyBhbmQgc2F5cyBpdCdzIGEgTWFjLCBidXQgd2UgY2FuIGRpc3Rpbmd1aXNoIGJ5IGRldGVjdGluZyB0b3VjaCBzdXBwb3J0LlxuICBpc01hYygpICYmIG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDE7XG59XG5mdW5jdGlvbiBpc0lPUygpIHtcbiAgcmV0dXJuIGlzSVBob25lKCkgfHwgaXNJUGFkKCk7XG59XG5mdW5jdGlvbiBpc0FwcGxlRGV2aWNlKCkge1xuICByZXR1cm4gaXNNYWMoKSB8fCBpc0lPUygpO1xufVxuZnVuY3Rpb24gY2FsbEhhbmRsZXIoZXZlbnQsIGhhbmRsZXIpIHtcbiAgaWYgKGhhbmRsZXIpIHtcbiAgICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgICAgaGFuZGxlcihldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhhbmRsZXJbMF0oaGFuZGxlclsxXSwgZXZlbnQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZXZlbnQ/LmRlZmF1bHRQcmV2ZW50ZWQ7XG59XG5mdW5jdGlvbiBjb21wb3NlRXZlbnRIYW5kbGVycyhoYW5kbGVycykge1xuICByZXR1cm4gKGV2ZW50KSA9PiB7XG4gICAgZm9yIChjb25zdCBoYW5kbGVyIG9mIGhhbmRsZXJzKSB7XG4gICAgICBjYWxsSGFuZGxlcihldmVudCwgaGFuZGxlcik7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gaXNDdHJsS2V5KGUyKSB7XG4gIGlmIChpc01hYygpKSB7XG4gICAgcmV0dXJuIGUyLm1ldGFLZXkgJiYgIWUyLmN0cmxLZXk7XG4gIH1cbiAgcmV0dXJuIGUyLmN0cmxLZXkgJiYgIWUyLm1ldGFLZXk7XG59XG5mdW5jdGlvbiBmb2N1c1dpdGhvdXRTY3JvbGxpbmcoZWxlbWVudCkge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHN1cHBvcnRzUHJldmVudFNjcm9sbCgpKSB7XG4gICAgZWxlbWVudC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc2Nyb2xsYWJsZUVsZW1lbnRzID0gZ2V0U2Nyb2xsYWJsZUVsZW1lbnRzKGVsZW1lbnQpO1xuICAgIGVsZW1lbnQuZm9jdXMoKTtcbiAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb24oc2Nyb2xsYWJsZUVsZW1lbnRzKTtcbiAgfVxufVxudmFyIHN1cHBvcnRzUHJldmVudFNjcm9sbENhY2hlZCA9IG51bGw7XG5mdW5jdGlvbiBzdXBwb3J0c1ByZXZlbnRTY3JvbGwoKSB7XG4gIGlmIChzdXBwb3J0c1ByZXZlbnRTY3JvbGxDYWNoZWQgPT0gbnVsbCkge1xuICAgIHN1cHBvcnRzUHJldmVudFNjcm9sbENhY2hlZCA9IGZhbHNlO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBmb2N1c0VsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgZm9jdXNFbGVtLmZvY3VzKHtcbiAgICAgICAgZ2V0IHByZXZlbnRTY3JvbGwoKSB7XG4gICAgICAgICAgc3VwcG9ydHNQcmV2ZW50U2Nyb2xsQ2FjaGVkID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZTIpIHtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN1cHBvcnRzUHJldmVudFNjcm9sbENhY2hlZDtcbn1cbmZ1bmN0aW9uIGdldFNjcm9sbGFibGVFbGVtZW50cyhlbGVtZW50KSB7XG4gIGxldCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gIGNvbnN0IHNjcm9sbGFibGVFbGVtZW50cyA9IFtdO1xuICBjb25zdCByb290U2Nyb2xsaW5nRWxlbWVudCA9IGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB3aGlsZSAocGFyZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgcGFyZW50ICE9PSByb290U2Nyb2xsaW5nRWxlbWVudCkge1xuICAgIGlmIChwYXJlbnQub2Zmc2V0SGVpZ2h0IDwgcGFyZW50LnNjcm9sbEhlaWdodCB8fCBwYXJlbnQub2Zmc2V0V2lkdGggPCBwYXJlbnQuc2Nyb2xsV2lkdGgpIHtcbiAgICAgIHNjcm9sbGFibGVFbGVtZW50cy5wdXNoKHtcbiAgICAgICAgZWxlbWVudDogcGFyZW50LFxuICAgICAgICBzY3JvbGxUb3A6IHBhcmVudC5zY3JvbGxUb3AsXG4gICAgICAgIHNjcm9sbExlZnQ6IHBhcmVudC5zY3JvbGxMZWZ0XG4gICAgICB9KTtcbiAgICB9XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG4gIH1cbiAgaWYgKHJvb3RTY3JvbGxpbmdFbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICBzY3JvbGxhYmxlRWxlbWVudHMucHVzaCh7XG4gICAgICBlbGVtZW50OiByb290U2Nyb2xsaW5nRWxlbWVudCxcbiAgICAgIHNjcm9sbFRvcDogcm9vdFNjcm9sbGluZ0VsZW1lbnQuc2Nyb2xsVG9wLFxuICAgICAgc2Nyb2xsTGVmdDogcm9vdFNjcm9sbGluZ0VsZW1lbnQuc2Nyb2xsTGVmdFxuICAgIH0pO1xuICB9XG4gIHJldHVybiBzY3JvbGxhYmxlRWxlbWVudHM7XG59XG5mdW5jdGlvbiByZXN0b3JlU2Nyb2xsUG9zaXRpb24oc2Nyb2xsYWJsZUVsZW1lbnRzKSB7XG4gIGZvciAoY29uc3QgeyBlbGVtZW50LCBzY3JvbGxUb3AsIHNjcm9sbExlZnQgfSBvZiBzY3JvbGxhYmxlRWxlbWVudHMpIHtcbiAgICBlbGVtZW50LnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICBlbGVtZW50LnNjcm9sbExlZnQgPSBzY3JvbGxMZWZ0O1xuICB9XG59XG52YXIgZm9jdXNhYmxlRWxlbWVudHMgPSBbXG4gIFwiaW5wdXQ6bm90KFt0eXBlPSdoaWRkZW4nXSk6bm90KFtkaXNhYmxlZF0pXCIsXG4gIFwic2VsZWN0Om5vdChbZGlzYWJsZWRdKVwiLFxuICBcInRleHRhcmVhOm5vdChbZGlzYWJsZWRdKVwiLFxuICBcImJ1dHRvbjpub3QoW2Rpc2FibGVkXSlcIixcbiAgXCJhW2hyZWZdXCIsXG4gIFwiYXJlYVtocmVmXVwiLFxuICBcIlt0YWJpbmRleF1cIixcbiAgXCJpZnJhbWVcIixcbiAgXCJvYmplY3RcIixcbiAgXCJlbWJlZFwiLFxuICBcImF1ZGlvW2NvbnRyb2xzXVwiLFxuICBcInZpZGVvW2NvbnRyb2xzXVwiLFxuICBcIltjb250ZW50ZWRpdGFibGVdOm5vdChbY29udGVudGVkaXRhYmxlPSdmYWxzZSddKVwiXG5dO1xudmFyIHRhYmJhYmxlRWxlbWVudHMgPSBbLi4uZm9jdXNhYmxlRWxlbWVudHMsICdbdGFiaW5kZXhdOm5vdChbdGFiaW5kZXg9XCItMVwiXSk6bm90KFtkaXNhYmxlZF0pJ107XG52YXIgRk9DVVNBQkxFX0VMRU1FTlRfU0VMRUNUT1IgPSBmb2N1c2FibGVFbGVtZW50cy5qb2luKFwiOm5vdChbaGlkZGVuXSksXCIpICsgXCIsW3RhYmluZGV4XTpub3QoW2Rpc2FibGVkXSk6bm90KFtoaWRkZW5dKVwiO1xudmFyIFRBQkJBQkxFX0VMRU1FTlRfU0VMRUNUT1IgPSB0YWJiYWJsZUVsZW1lbnRzLmpvaW4oXG4gICc6bm90KFtoaWRkZW5dKTpub3QoW3RhYmluZGV4PVwiLTFcIl0pLCdcbik7XG5mdW5jdGlvbiBnZXRBbGxUYWJiYWJsZUluKGNvbnRhaW5lciwgaW5jbHVkZUNvbnRhaW5lcikge1xuICBjb25zdCBlbGVtZW50cyA9IEFycmF5LmZyb20oY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoRk9DVVNBQkxFX0VMRU1FTlRfU0VMRUNUT1IpKTtcbiAgY29uc3QgdGFiYmFibGVFbGVtZW50czIgPSBlbGVtZW50cy5maWx0ZXIoaXNUYWJiYWJsZSk7XG4gIGlmIChpbmNsdWRlQ29udGFpbmVyICYmIGlzVGFiYmFibGUoY29udGFpbmVyKSkge1xuICAgIHRhYmJhYmxlRWxlbWVudHMyLnVuc2hpZnQoY29udGFpbmVyKTtcbiAgfVxuICB0YWJiYWJsZUVsZW1lbnRzMi5mb3JFYWNoKChlbGVtZW50LCBpMikgPT4ge1xuICAgIGlmIChpc0ZyYW1lKGVsZW1lbnQpICYmIGVsZW1lbnQuY29udGVudERvY3VtZW50KSB7XG4gICAgICBjb25zdCBmcmFtZUJvZHkgPSBlbGVtZW50LmNvbnRlbnREb2N1bWVudC5ib2R5O1xuICAgICAgY29uc3QgYWxsRnJhbWVUYWJiYWJsZSA9IGdldEFsbFRhYmJhYmxlSW4oZnJhbWVCb2R5LCBmYWxzZSk7XG4gICAgICB0YWJiYWJsZUVsZW1lbnRzMi5zcGxpY2UoaTIsIDEsIC4uLmFsbEZyYW1lVGFiYmFibGUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB0YWJiYWJsZUVsZW1lbnRzMjtcbn1cbmZ1bmN0aW9uIGlzVGFiYmFibGUoZWxlbWVudCkge1xuICByZXR1cm4gaXNGb2N1c2FibGUoZWxlbWVudCkgJiYgIWhhc05lZ2F0aXZlVGFiSW5kZXgoZWxlbWVudCk7XG59XG5mdW5jdGlvbiBpc0ZvY3VzYWJsZShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50Lm1hdGNoZXMoRk9DVVNBQkxFX0VMRU1FTlRfU0VMRUNUT1IpICYmIGlzRWxlbWVudFZpc2libGUoZWxlbWVudCk7XG59XG5mdW5jdGlvbiBoYXNOZWdhdGl2ZVRhYkluZGV4KGVsZW1lbnQpIHtcbiAgY29uc3QgdGFiSW5kZXggPSBwYXJzZUludChlbGVtZW50LmdldEF0dHJpYnV0ZShcInRhYmluZGV4XCIpIHx8IFwiMFwiLCAxMCk7XG4gIHJldHVybiB0YWJJbmRleCA8IDA7XG59XG5mdW5jdGlvbiBpc0VsZW1lbnRWaXNpYmxlKGVsZW1lbnQsIGNoaWxkRWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC5ub2RlTmFtZSAhPT0gXCIjY29tbWVudFwiICYmIGlzU3R5bGVWaXNpYmxlKGVsZW1lbnQpICYmIGlzQXR0cmlidXRlVmlzaWJsZShlbGVtZW50LCBjaGlsZEVsZW1lbnQpICYmICghZWxlbWVudC5wYXJlbnRFbGVtZW50IHx8IGlzRWxlbWVudFZpc2libGUoZWxlbWVudC5wYXJlbnRFbGVtZW50LCBlbGVtZW50KSk7XG59XG5mdW5jdGlvbiBpc1N0eWxlVmlzaWJsZShlbGVtZW50KSB7XG4gIGlmICghKGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkgJiYgIShlbGVtZW50IGluc3RhbmNlb2YgU1ZHRWxlbWVudCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgeyBkaXNwbGF5LCB2aXNpYmlsaXR5IH0gPSBlbGVtZW50LnN0eWxlO1xuICBsZXQgaXNWaXNpYmxlID0gZGlzcGxheSAhPT0gXCJub25lXCIgJiYgdmlzaWJpbGl0eSAhPT0gXCJoaWRkZW5cIiAmJiB2aXNpYmlsaXR5ICE9PSBcImNvbGxhcHNlXCI7XG4gIGlmIChpc1Zpc2libGUpIHtcbiAgICBpZiAoIWVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldykge1xuICAgICAgcmV0dXJuIGlzVmlzaWJsZTtcbiAgICB9XG4gICAgY29uc3QgeyBnZXRDb21wdXRlZFN0eWxlOiBnZXRDb21wdXRlZFN0eWxlMyB9ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICAgIGNvbnN0IHsgZGlzcGxheTogY29tcHV0ZWREaXNwbGF5LCB2aXNpYmlsaXR5OiBjb21wdXRlZFZpc2liaWxpdHkgfSA9IGdldENvbXB1dGVkU3R5bGUzKGVsZW1lbnQpO1xuICAgIGlzVmlzaWJsZSA9IGNvbXB1dGVkRGlzcGxheSAhPT0gXCJub25lXCIgJiYgY29tcHV0ZWRWaXNpYmlsaXR5ICE9PSBcImhpZGRlblwiICYmIGNvbXB1dGVkVmlzaWJpbGl0eSAhPT0gXCJjb2xsYXBzZVwiO1xuICB9XG4gIHJldHVybiBpc1Zpc2libGU7XG59XG5mdW5jdGlvbiBpc0F0dHJpYnV0ZVZpc2libGUoZWxlbWVudCwgY2hpbGRFbGVtZW50KSB7XG4gIHJldHVybiAhZWxlbWVudC5oYXNBdHRyaWJ1dGUoXCJoaWRkZW5cIikgJiYgKGVsZW1lbnQubm9kZU5hbWUgPT09IFwiREVUQUlMU1wiICYmIGNoaWxkRWxlbWVudCAmJiBjaGlsZEVsZW1lbnQubm9kZU5hbWUgIT09IFwiU1VNTUFSWVwiID8gZWxlbWVudC5oYXNBdHRyaWJ1dGUoXCJvcGVuXCIpIDogdHJ1ZSk7XG59XG5mdW5jdGlvbiBpc0VsZW1lbnRJblNjb3BlKGVsZW1lbnQsIHNjb3BlKSB7XG4gIHJldHVybiBzY29wZS5zb21lKChub2RlKSA9PiBub2RlLmNvbnRhaW5zKGVsZW1lbnQpKTtcbn1cbmZ1bmN0aW9uIGdldEZvY3VzYWJsZVRyZWVXYWxrZXIocm9vdCwgb3B0cywgc2NvcGUpIHtcbiAgY29uc3Qgc2VsZWN0b3IgPSBvcHRzPy50YWJiYWJsZSA/IFRBQkJBQkxFX0VMRU1FTlRfU0VMRUNUT1IgOiBGT0NVU0FCTEVfRUxFTUVOVF9TRUxFQ1RPUjtcbiAgY29uc3Qgd2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihyb290LCBOb2RlRmlsdGVyLlNIT1dfRUxFTUVOVCwge1xuICAgIGFjY2VwdE5vZGUobm9kZSkge1xuICAgICAgaWYgKG9wdHM/LmZyb20/LmNvbnRhaW5zKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBOb2RlRmlsdGVyLkZJTFRFUl9SRUpFQ1Q7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5tYXRjaGVzKHNlbGVjdG9yKSAmJiBpc0VsZW1lbnRWaXNpYmxlKG5vZGUpICYmICghc2NvcGUgfHwgaXNFbGVtZW50SW5TY29wZShub2RlLCBzY29wZSkpICYmICghb3B0cz8uYWNjZXB0IHx8IG9wdHMuYWNjZXB0KG5vZGUpKSkge1xuICAgICAgICByZXR1cm4gTm9kZUZpbHRlci5GSUxURVJfQUNDRVBUO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE5vZGVGaWx0ZXIuRklMVEVSX1NLSVA7XG4gICAgfVxuICB9KTtcbiAgaWYgKG9wdHM/LmZyb20pIHtcbiAgICB3YWxrZXIuY3VycmVudE5vZGUgPSBvcHRzLmZyb207XG4gIH1cbiAgcmV0dXJuIHdhbGtlcjtcbn1cbmZ1bmN0aW9uIG5vb3AzKCkge1xuICByZXR1cm47XG59XG5mdW5jdGlvbiBpc1BvaW50SW5Qb2x5Z29uKHBvaW50LCBwb2x5Z29uKSB7XG4gIGNvbnN0IFt4LCB5XSA9IHBvaW50O1xuICBsZXQgaW5zaWRlID0gZmFsc2U7XG4gIGNvbnN0IGxlbmd0aCA9IHBvbHlnb24ubGVuZ3RoO1xuICBmb3IgKGxldCBsMiA9IGxlbmd0aCwgaTIgPSAwLCBqID0gbDIgLSAxOyBpMiA8IGwyOyBqID0gaTIrKykge1xuICAgIGNvbnN0IFt4aSwgeWldID0gcG9seWdvbltpMl07XG4gICAgY29uc3QgW3hqLCB5al0gPSBwb2x5Z29uW2pdO1xuICAgIGNvbnN0IFssIHZ5XSA9IHBvbHlnb25baiA9PT0gMCA/IGwyIC0gMSA6IGogLSAxXSB8fCBbMCwgMF07XG4gICAgY29uc3Qgd2hlcmUgPSAoeWkgLSB5aikgKiAoeCAtIHhpKSAtICh4aSAtIHhqKSAqICh5IC0geWkpO1xuICAgIGlmICh5aiA8IHlpKSB7XG4gICAgICBpZiAoeSA+PSB5aiAmJiB5IDwgeWkpIHtcbiAgICAgICAgaWYgKHdoZXJlID09PSAwKVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAod2hlcmUgPiAwKSB7XG4gICAgICAgICAgaWYgKHkgPT09IHlqKSB7XG4gICAgICAgICAgICBpZiAoeSA+IHZ5KSB7XG4gICAgICAgICAgICAgIGluc2lkZSA9ICFpbnNpZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluc2lkZSA9ICFpbnNpZGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh5aSA8IHlqKSB7XG4gICAgICBpZiAoeSA+IHlpICYmIHkgPD0geWopIHtcbiAgICAgICAgaWYgKHdoZXJlID09PSAwKVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAod2hlcmUgPCAwKSB7XG4gICAgICAgICAgaWYgKHkgPT09IHlqKSB7XG4gICAgICAgICAgICBpZiAoeSA8IHZ5KSB7XG4gICAgICAgICAgICAgIGluc2lkZSA9ICFpbnNpZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluc2lkZSA9ICFpbnNpZGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh5ID09IHlpICYmICh4ID49IHhqICYmIHggPD0geGkgfHwgeCA+PSB4aSAmJiB4IDw9IHhqKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBpbnNpZGU7XG59XG5mdW5jdGlvbiBtZXJnZURlZmF1bHRQcm9wcyhkZWZhdWx0UHJvcHMsIHByb3BzKSB7XG4gIHJldHVybiBtZXJnZVByb3BzKGRlZmF1bHRQcm9wcywgcHJvcHMpO1xufVxudmFyIHRyYW5zaXRpb25zQnlFbGVtZW50ID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbnZhciB0cmFuc2l0aW9uQ2FsbGJhY2tzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbmZ1bmN0aW9uIHNldHVwR2xvYmFsRXZlbnRzKCkge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBvblRyYW5zaXRpb25TdGFydCA9IChlMikgPT4ge1xuICAgIGlmICghZTIudGFyZ2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCB0cmFuc2l0aW9ucyA9IHRyYW5zaXRpb25zQnlFbGVtZW50LmdldChlMi50YXJnZXQpO1xuICAgIGlmICghdHJhbnNpdGlvbnMpIHtcbiAgICAgIHRyYW5zaXRpb25zID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgICAgIHRyYW5zaXRpb25zQnlFbGVtZW50LnNldChlMi50YXJnZXQsIHRyYW5zaXRpb25zKTtcbiAgICAgIGUyLnRhcmdldC5hZGRFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmNhbmNlbFwiLCBvblRyYW5zaXRpb25FbmQpO1xuICAgIH1cbiAgICB0cmFuc2l0aW9ucy5hZGQoZTIucHJvcGVydHlOYW1lKTtcbiAgfTtcbiAgY29uc3Qgb25UcmFuc2l0aW9uRW5kID0gKGUyKSA9PiB7XG4gICAgaWYgKCFlMi50YXJnZXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcHJvcGVydGllcyA9IHRyYW5zaXRpb25zQnlFbGVtZW50LmdldChlMi50YXJnZXQpO1xuICAgIGlmICghcHJvcGVydGllcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwcm9wZXJ0aWVzLmRlbGV0ZShlMi5wcm9wZXJ0eU5hbWUpO1xuICAgIGlmIChwcm9wZXJ0aWVzLnNpemUgPT09IDApIHtcbiAgICAgIGUyLnRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmNhbmNlbFwiLCBvblRyYW5zaXRpb25FbmQpO1xuICAgICAgdHJhbnNpdGlvbnNCeUVsZW1lbnQuZGVsZXRlKGUyLnRhcmdldCk7XG4gICAgfVxuICAgIGlmICh0cmFuc2l0aW9uc0J5RWxlbWVudC5zaXplID09PSAwKSB7XG4gICAgICBmb3IgKGNvbnN0IGNiIG9mIHRyYW5zaXRpb25DYWxsYmFja3MpIHtcbiAgICAgICAgY2IoKTtcbiAgICAgIH1cbiAgICAgIHRyYW5zaXRpb25DYWxsYmFja3MuY2xlYXIoKTtcbiAgICB9XG4gIH07XG4gIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25ydW5cIiwgb25UcmFuc2l0aW9uU3RhcnQpO1xuICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIG9uVHJhbnNpdGlvbkVuZCk7XG59XG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIikge1xuICAgIHNldHVwR2xvYmFsRXZlbnRzKCk7XG4gIH0gZWxzZSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgc2V0dXBHbG9iYWxFdmVudHMpO1xuICB9XG59XG5mdW5jdGlvbiBzY3JvbGxJbnRvVmlldyhzY3JvbGxWaWV3LCBlbGVtZW50KSB7XG4gIGNvbnN0IG9mZnNldFggPSByZWxhdGl2ZU9mZnNldChzY3JvbGxWaWV3LCBlbGVtZW50LCBcImxlZnRcIik7XG4gIGNvbnN0IG9mZnNldFkgPSByZWxhdGl2ZU9mZnNldChzY3JvbGxWaWV3LCBlbGVtZW50LCBcInRvcFwiKTtcbiAgY29uc3Qgd2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuICBjb25zdCBoZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgbGV0IHggPSBzY3JvbGxWaWV3LnNjcm9sbExlZnQ7XG4gIGxldCB5ID0gc2Nyb2xsVmlldy5zY3JvbGxUb3A7XG4gIGNvbnN0IG1heFggPSB4ICsgc2Nyb2xsVmlldy5vZmZzZXRXaWR0aDtcbiAgY29uc3QgbWF4WSA9IHkgKyBzY3JvbGxWaWV3Lm9mZnNldEhlaWdodDtcbiAgaWYgKG9mZnNldFggPD0geCkge1xuICAgIHggPSBvZmZzZXRYO1xuICB9IGVsc2UgaWYgKG9mZnNldFggKyB3aWR0aCA+IG1heFgpIHtcbiAgICB4ICs9IG9mZnNldFggKyB3aWR0aCAtIG1heFg7XG4gIH1cbiAgaWYgKG9mZnNldFkgPD0geSkge1xuICAgIHkgPSBvZmZzZXRZO1xuICB9IGVsc2UgaWYgKG9mZnNldFkgKyBoZWlnaHQgPiBtYXhZKSB7XG4gICAgeSArPSBvZmZzZXRZICsgaGVpZ2h0IC0gbWF4WTtcbiAgfVxuICBzY3JvbGxWaWV3LnNjcm9sbExlZnQgPSB4O1xuICBzY3JvbGxWaWV3LnNjcm9sbFRvcCA9IHk7XG59XG5mdW5jdGlvbiByZWxhdGl2ZU9mZnNldChhbmNlc3RvciwgY2hpbGQsIGF4aXMpIHtcbiAgY29uc3QgcHJvcCA9IGF4aXMgPT09IFwibGVmdFwiID8gXCJvZmZzZXRMZWZ0XCIgOiBcIm9mZnNldFRvcFwiO1xuICBsZXQgc3VtID0gMDtcbiAgd2hpbGUgKGNoaWxkLm9mZnNldFBhcmVudCkge1xuICAgIHN1bSArPSBjaGlsZFtwcm9wXTtcbiAgICBpZiAoY2hpbGQub2Zmc2V0UGFyZW50ID09PSBhbmNlc3Rvcikge1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmIChjaGlsZC5vZmZzZXRQYXJlbnQuY29udGFpbnMoYW5jZXN0b3IpKSB7XG4gICAgICBzdW0gLT0gYW5jZXN0b3JbcHJvcF07XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2hpbGQgPSBjaGlsZC5vZmZzZXRQYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIHN1bTtcbn1cbnZhciB2aXN1YWxseUhpZGRlblN0eWxlcyA9IHtcbiAgYm9yZGVyOiBcIjBcIixcbiAgY2xpcDogXCJyZWN0KDAgMCAwIDApXCIsXG4gIFwiY2xpcC1wYXRoXCI6IFwiaW5zZXQoNTAlKVwiLFxuICBoZWlnaHQ6IFwiMXB4XCIsXG4gIG1hcmdpbjogXCIwIC0xcHggLTFweCAwXCIsXG4gIG92ZXJmbG93OiBcImhpZGRlblwiLFxuICBwYWRkaW5nOiBcIjBcIixcbiAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgd2lkdGg6IFwiMXB4XCIsXG4gIFwid2hpdGUtc3BhY2VcIjogXCJub3dyYXBcIlxufTtcblxuLy8gLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NvbGlkLWpzQDEuOC43L25vZGVfbW9kdWxlcy9zb2xpZC1qcy9zdG9yZS9kaXN0L3N0b3JlLmpzXG52YXIgJFJBVyA9IFN5bWJvbChcInN0b3JlLXJhd1wiKTtcbnZhciAkTk9ERSA9IFN5bWJvbChcInN0b3JlLW5vZGVcIik7XG52YXIgJEhBUyA9IFN5bWJvbChcInN0b3JlLWhhc1wiKTtcbnZhciAkU0VMRiA9IFN5bWJvbChcInN0b3JlLXNlbGZcIik7XG5mdW5jdGlvbiB3cmFwJDEodmFsdWUpIHtcbiAgbGV0IHAyID0gdmFsdWVbJFBST1hZXTtcbiAgaWYgKCFwMikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgJFBST1hZLCB7XG4gICAgICB2YWx1ZTogcDIgPSBuZXcgUHJveHkodmFsdWUsIHByb3h5VHJhcHMkMSlcbiAgICB9KTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBjb25zdCBrZXlzMiA9IE9iamVjdC5rZXlzKHZhbHVlKSwgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHZhbHVlKTtcbiAgICAgIGZvciAobGV0IGkyID0gMCwgbDIgPSBrZXlzMi5sZW5ndGg7IGkyIDwgbDI7IGkyKyspIHtcbiAgICAgICAgY29uc3QgcHJvcCA9IGtleXMyW2kyXTtcbiAgICAgICAgaWYgKGRlc2NbcHJvcF0uZ2V0KSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbHVlLCBwcm9wLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBkZXNjW3Byb3BdLmVudW1lcmFibGUsXG4gICAgICAgICAgICBnZXQ6IGRlc2NbcHJvcF0uZ2V0LmJpbmQocDIpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHAyO1xufVxuZnVuY3Rpb24gaXNXcmFwcGFibGUob2JqKSB7XG4gIGxldCBwcm90bztcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgJiYgKG9ialskUFJPWFldIHx8ICEocHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSkgfHwgcHJvdG8gPT09IE9iamVjdC5wcm90b3R5cGUgfHwgQXJyYXkuaXNBcnJheShvYmopKTtcbn1cbmZ1bmN0aW9uIHVud3JhcChpdGVtLCBzZXQgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpKSB7XG4gIGxldCByZXN1bHQsIHVud3JhcHBlZCwgdiwgcHJvcDtcbiAgaWYgKHJlc3VsdCA9IGl0ZW0gIT0gbnVsbCAmJiBpdGVtWyRSQVddKVxuICAgIHJldHVybiByZXN1bHQ7XG4gIGlmICghaXNXcmFwcGFibGUoaXRlbSkgfHwgc2V0LmhhcyhpdGVtKSlcbiAgICByZXR1cm4gaXRlbTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbSkpIHtcbiAgICBpZiAoT2JqZWN0LmlzRnJvemVuKGl0ZW0pKVxuICAgICAgaXRlbSA9IGl0ZW0uc2xpY2UoMCk7XG4gICAgZWxzZVxuICAgICAgc2V0LmFkZChpdGVtKTtcbiAgICBmb3IgKGxldCBpMiA9IDAsIGwyID0gaXRlbS5sZW5ndGg7IGkyIDwgbDI7IGkyKyspIHtcbiAgICAgIHYgPSBpdGVtW2kyXTtcbiAgICAgIGlmICgodW53cmFwcGVkID0gdW53cmFwKHYsIHNldCkpICE9PSB2KVxuICAgICAgICBpdGVtW2kyXSA9IHVud3JhcHBlZDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKE9iamVjdC5pc0Zyb3plbihpdGVtKSlcbiAgICAgIGl0ZW0gPSBPYmplY3QuYXNzaWduKHt9LCBpdGVtKTtcbiAgICBlbHNlXG4gICAgICBzZXQuYWRkKGl0ZW0pO1xuICAgIGNvbnN0IGtleXMyID0gT2JqZWN0LmtleXMoaXRlbSksIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhpdGVtKTtcbiAgICBmb3IgKGxldCBpMiA9IDAsIGwyID0ga2V5czIubGVuZ3RoOyBpMiA8IGwyOyBpMisrKSB7XG4gICAgICBwcm9wID0ga2V5czJbaTJdO1xuICAgICAgaWYgKGRlc2NbcHJvcF0uZ2V0KVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIHYgPSBpdGVtW3Byb3BdO1xuICAgICAgaWYgKCh1bndyYXBwZWQgPSB1bndyYXAodiwgc2V0KSkgIT09IHYpXG4gICAgICAgIGl0ZW1bcHJvcF0gPSB1bndyYXBwZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBpdGVtO1xufVxuZnVuY3Rpb24gZ2V0Tm9kZXModGFyZ2V0LCBzeW1ib2wpIHtcbiAgbGV0IG5vZGVzID0gdGFyZ2V0W3N5bWJvbF07XG4gIGlmICghbm9kZXMpXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgc3ltYm9sLCB7XG4gICAgICB2YWx1ZTogbm9kZXMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKVxuICAgIH0pO1xuICByZXR1cm4gbm9kZXM7XG59XG5mdW5jdGlvbiBnZXROb2RlKG5vZGVzLCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKG5vZGVzW3Byb3BlcnR5XSlcbiAgICByZXR1cm4gbm9kZXNbcHJvcGVydHldO1xuICBjb25zdCBbczIsIHNldF0gPSBjcmVhdGVTaWduYWwodmFsdWUsIHtcbiAgICBlcXVhbHM6IGZhbHNlLFxuICAgIGludGVybmFsOiB0cnVlXG4gIH0pO1xuICBzMi4kID0gc2V0O1xuICByZXR1cm4gbm9kZXNbcHJvcGVydHldID0gczI7XG59XG5mdW5jdGlvbiBwcm94eURlc2NyaXB0b3IkMSh0YXJnZXQsIHByb3BlcnR5KSB7XG4gIGNvbnN0IGRlc2MgPSBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5KTtcbiAgaWYgKCFkZXNjIHx8IGRlc2MuZ2V0IHx8ICFkZXNjLmNvbmZpZ3VyYWJsZSB8fCBwcm9wZXJ0eSA9PT0gJFBST1hZIHx8IHByb3BlcnR5ID09PSAkTk9ERSlcbiAgICByZXR1cm4gZGVzYztcbiAgZGVsZXRlIGRlc2MudmFsdWU7XG4gIGRlbGV0ZSBkZXNjLndyaXRhYmxlO1xuICBkZXNjLmdldCA9ICgpID0+IHRhcmdldFskUFJPWFldW3Byb3BlcnR5XTtcbiAgcmV0dXJuIGRlc2M7XG59XG5mdW5jdGlvbiB0cmFja1NlbGYodGFyZ2V0KSB7XG4gIGdldExpc3RlbmVyKCkgJiYgZ2V0Tm9kZShnZXROb2Rlcyh0YXJnZXQsICROT0RFKSwgJFNFTEYpKCk7XG59XG5mdW5jdGlvbiBvd25LZXlzKHRhcmdldCkge1xuICB0cmFja1NlbGYodGFyZ2V0KTtcbiAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpO1xufVxudmFyIHByb3h5VHJhcHMkMSA9IHtcbiAgZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7XG4gICAgaWYgKHByb3BlcnR5ID09PSAkUkFXKVxuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICBpZiAocHJvcGVydHkgPT09ICRQUk9YWSlcbiAgICAgIHJldHVybiByZWNlaXZlcjtcbiAgICBpZiAocHJvcGVydHkgPT09ICRUUkFDSykge1xuICAgICAgdHJhY2tTZWxmKHRhcmdldCk7XG4gICAgICByZXR1cm4gcmVjZWl2ZXI7XG4gICAgfVxuICAgIGNvbnN0IG5vZGVzID0gZ2V0Tm9kZXModGFyZ2V0LCAkTk9ERSk7XG4gICAgY29uc3QgdHJhY2tlZCA9IG5vZGVzW3Byb3BlcnR5XTtcbiAgICBsZXQgdmFsdWUgPSB0cmFja2VkID8gdHJhY2tlZCgpIDogdGFyZ2V0W3Byb3BlcnR5XTtcbiAgICBpZiAocHJvcGVydHkgPT09ICROT0RFIHx8IHByb3BlcnR5ID09PSAkSEFTIHx8IHByb3BlcnR5ID09PSBcIl9fcHJvdG9fX1wiKVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIGlmICghdHJhY2tlZCkge1xuICAgICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgICBpZiAoZ2V0TGlzdGVuZXIoKSAmJiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIgfHwgdGFyZ2V0Lmhhc093blByb3BlcnR5KHByb3BlcnR5KSkgJiYgIShkZXNjICYmIGRlc2MuZ2V0KSlcbiAgICAgICAgdmFsdWUgPSBnZXROb2RlKG5vZGVzLCBwcm9wZXJ0eSwgdmFsdWUpKCk7XG4gICAgfVxuICAgIHJldHVybiBpc1dyYXBwYWJsZSh2YWx1ZSkgPyB3cmFwJDEodmFsdWUpIDogdmFsdWU7XG4gIH0sXG4gIGhhcyh0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgaWYgKHByb3BlcnR5ID09PSAkUkFXIHx8IHByb3BlcnR5ID09PSAkUFJPWFkgfHwgcHJvcGVydHkgPT09ICRUUkFDSyB8fCBwcm9wZXJ0eSA9PT0gJE5PREUgfHwgcHJvcGVydHkgPT09ICRIQVMgfHwgcHJvcGVydHkgPT09IFwiX19wcm90b19fXCIpXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBnZXRMaXN0ZW5lcigpICYmIGdldE5vZGUoZ2V0Tm9kZXModGFyZ2V0LCAkSEFTKSwgcHJvcGVydHkpKCk7XG4gICAgcmV0dXJuIHByb3BlcnR5IGluIHRhcmdldDtcbiAgfSxcbiAgc2V0KCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBkZWxldGVQcm9wZXJ0eSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgb3duS2V5cyxcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBwcm94eURlc2NyaXB0b3IkMVxufTtcbmZ1bmN0aW9uIHNldFByb3BlcnR5KHN0YXRlMiwgcHJvcGVydHksIHZhbHVlLCBkZWxldGluZyA9IGZhbHNlKSB7XG4gIGlmICghZGVsZXRpbmcgJiYgc3RhdGUyW3Byb3BlcnR5XSA9PT0gdmFsdWUpXG4gICAgcmV0dXJuO1xuICBjb25zdCBwcmV2ID0gc3RhdGUyW3Byb3BlcnR5XSwgbGVuID0gc3RhdGUyLmxlbmd0aDtcbiAgaWYgKHZhbHVlID09PSB2b2lkIDApIHtcbiAgICBkZWxldGUgc3RhdGUyW3Byb3BlcnR5XTtcbiAgICBpZiAoc3RhdGUyWyRIQVNdICYmIHN0YXRlMlskSEFTXVtwcm9wZXJ0eV0gJiYgcHJldiAhPT0gdm9pZCAwKVxuICAgICAgc3RhdGUyWyRIQVNdW3Byb3BlcnR5XS4kKCk7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUyW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIGlmIChzdGF0ZTJbJEhBU10gJiYgc3RhdGUyWyRIQVNdW3Byb3BlcnR5XSAmJiBwcmV2ID09PSB2b2lkIDApXG4gICAgICBzdGF0ZTJbJEhBU11bcHJvcGVydHldLiQoKTtcbiAgfVxuICBsZXQgbm9kZXMgPSBnZXROb2RlcyhzdGF0ZTIsICROT0RFKSwgbm9kZTtcbiAgaWYgKG5vZGUgPSBnZXROb2RlKG5vZGVzLCBwcm9wZXJ0eSwgcHJldikpXG4gICAgbm9kZS4kKCgpID0+IHZhbHVlKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc3RhdGUyKSAmJiBzdGF0ZTIubGVuZ3RoICE9PSBsZW4pIHtcbiAgICBmb3IgKGxldCBpMiA9IHN0YXRlMi5sZW5ndGg7IGkyIDwgbGVuOyBpMisrKVxuICAgICAgKG5vZGUgPSBub2Rlc1tpMl0pICYmIG5vZGUuJCgpO1xuICAgIChub2RlID0gZ2V0Tm9kZShub2RlcywgXCJsZW5ndGhcIiwgbGVuKSkgJiYgbm9kZS4kKHN0YXRlMi5sZW5ndGgpO1xuICB9XG4gIChub2RlID0gbm9kZXNbJFNFTEZdKSAmJiBub2RlLiQoKTtcbn1cbmZ1bmN0aW9uIG1lcmdlU3RvcmVOb2RlKHN0YXRlMiwgdmFsdWUpIHtcbiAgY29uc3Qga2V5czIgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gIGZvciAobGV0IGkyID0gMDsgaTIgPCBrZXlzMi5sZW5ndGg7IGkyICs9IDEpIHtcbiAgICBjb25zdCBrZXkgPSBrZXlzMltpMl07XG4gICAgc2V0UHJvcGVydHkoc3RhdGUyLCBrZXksIHZhbHVlW2tleV0pO1xuICB9XG59XG5mdW5jdGlvbiB1cGRhdGVBcnJheShjdXJyZW50LCBuZXh0KSB7XG4gIGlmICh0eXBlb2YgbmV4dCA9PT0gXCJmdW5jdGlvblwiKVxuICAgIG5leHQgPSBuZXh0KGN1cnJlbnQpO1xuICBuZXh0ID0gdW53cmFwKG5leHQpO1xuICBpZiAoQXJyYXkuaXNBcnJheShuZXh0KSkge1xuICAgIGlmIChjdXJyZW50ID09PSBuZXh0KVxuICAgICAgcmV0dXJuO1xuICAgIGxldCBpMiA9IDAsIGxlbiA9IG5leHQubGVuZ3RoO1xuICAgIGZvciAoOyBpMiA8IGxlbjsgaTIrKykge1xuICAgICAgY29uc3QgdmFsdWUgPSBuZXh0W2kyXTtcbiAgICAgIGlmIChjdXJyZW50W2kyXSAhPT0gdmFsdWUpXG4gICAgICAgIHNldFByb3BlcnR5KGN1cnJlbnQsIGkyLCB2YWx1ZSk7XG4gICAgfVxuICAgIHNldFByb3BlcnR5KGN1cnJlbnQsIFwibGVuZ3RoXCIsIGxlbik7XG4gIH0gZWxzZVxuICAgIG1lcmdlU3RvcmVOb2RlKGN1cnJlbnQsIG5leHQpO1xufVxuZnVuY3Rpb24gdXBkYXRlUGF0aChjdXJyZW50LCBwYXRoLCB0cmF2ZXJzZWQgPSBbXSkge1xuICBsZXQgcGFydCwgcHJldiA9IGN1cnJlbnQ7XG4gIGlmIChwYXRoLmxlbmd0aCA+IDEpIHtcbiAgICBwYXJ0ID0gcGF0aC5zaGlmdCgpO1xuICAgIGNvbnN0IHBhcnRUeXBlID0gdHlwZW9mIHBhcnQsIGlzQXJyYXkyID0gQXJyYXkuaXNBcnJheShjdXJyZW50KTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwYXJ0KSkge1xuICAgICAgZm9yIChsZXQgaTIgPSAwOyBpMiA8IHBhcnQubGVuZ3RoOyBpMisrKSB7XG4gICAgICAgIHVwZGF0ZVBhdGgoY3VycmVudCwgW3BhcnRbaTJdXS5jb25jYXQocGF0aCksIHRyYXZlcnNlZCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmIChpc0FycmF5MiAmJiBwYXJ0VHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBmb3IgKGxldCBpMiA9IDA7IGkyIDwgY3VycmVudC5sZW5ndGg7IGkyKyspIHtcbiAgICAgICAgaWYgKHBhcnQoY3VycmVudFtpMl0sIGkyKSlcbiAgICAgICAgICB1cGRhdGVQYXRoKGN1cnJlbnQsIFtpMl0uY29uY2F0KHBhdGgpLCB0cmF2ZXJzZWQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheTIgJiYgcGFydFR5cGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIGNvbnN0IHsgZnJvbSA9IDAsIHRvID0gY3VycmVudC5sZW5ndGggLSAxLCBieSA9IDEgfSA9IHBhcnQ7XG4gICAgICBmb3IgKGxldCBpMiA9IGZyb207IGkyIDw9IHRvOyBpMiArPSBieSkge1xuICAgICAgICB1cGRhdGVQYXRoKGN1cnJlbnQsIFtpMl0uY29uY2F0KHBhdGgpLCB0cmF2ZXJzZWQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAocGF0aC5sZW5ndGggPiAxKSB7XG4gICAgICB1cGRhdGVQYXRoKGN1cnJlbnRbcGFydF0sIHBhdGgsIFtwYXJ0XS5jb25jYXQodHJhdmVyc2VkKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHByZXYgPSBjdXJyZW50W3BhcnRdO1xuICAgIHRyYXZlcnNlZCA9IFtwYXJ0XS5jb25jYXQodHJhdmVyc2VkKTtcbiAgfVxuICBsZXQgdmFsdWUgPSBwYXRoWzBdO1xuICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YWx1ZSA9IHZhbHVlKHByZXYsIHRyYXZlcnNlZCk7XG4gICAgaWYgKHZhbHVlID09PSBwcmV2KVxuICAgICAgcmV0dXJuO1xuICB9XG4gIGlmIChwYXJ0ID09PSB2b2lkIDAgJiYgdmFsdWUgPT0gdm9pZCAwKVxuICAgIHJldHVybjtcbiAgdmFsdWUgPSB1bndyYXAodmFsdWUpO1xuICBpZiAocGFydCA9PT0gdm9pZCAwIHx8IGlzV3JhcHBhYmxlKHByZXYpICYmIGlzV3JhcHBhYmxlKHZhbHVlKSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBtZXJnZVN0b3JlTm9kZShwcmV2LCB2YWx1ZSk7XG4gIH0gZWxzZVxuICAgIHNldFByb3BlcnR5KGN1cnJlbnQsIHBhcnQsIHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKC4uLltzdG9yZSwgb3B0aW9uc10pIHtcbiAgY29uc3QgdW53cmFwcGVkU3RvcmUgPSB1bndyYXAoc3RvcmUgfHwge30pO1xuICBjb25zdCBpc0FycmF5MiA9IEFycmF5LmlzQXJyYXkodW53cmFwcGVkU3RvcmUpO1xuICBjb25zdCB3cmFwcGVkU3RvcmUgPSB3cmFwJDEodW53cmFwcGVkU3RvcmUpO1xuICBmdW5jdGlvbiBzZXRTdG9yZSguLi5hcmdzKSB7XG4gICAgYmF0Y2goKCkgPT4ge1xuICAgICAgaXNBcnJheTIgJiYgYXJncy5sZW5ndGggPT09IDEgPyB1cGRhdGVBcnJheSh1bndyYXBwZWRTdG9yZSwgYXJnc1swXSkgOiB1cGRhdGVQYXRoKHVud3JhcHBlZFN0b3JlLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gW3dyYXBwZWRTdG9yZSwgc2V0U3RvcmVdO1xufVxuXG4vLyAuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGludGVybmF0aW9uYWxpemVkK21lc3NhZ2VAMy4xLjEvbm9kZV9tb2R1bGVzL0BpbnRlcm5hdGlvbmFsaXplZC9tZXNzYWdlL2Rpc3QvaW1wb3J0Lm1qc1xudmFyICRkNmZkMjNiYzMzNzY2MGRmJGV4cG9ydCQ2NDgzOWU2MTUxMjBkZjE3ID0gY2xhc3Mge1xuICBnZXRTdHJpbmdGb3JMb2NhbGUoa2V5LCBsb2NhbGUpIHtcbiAgICBsZXQgc3RyaW5ncyA9IHRoaXMubWVzc2FnZXNbbG9jYWxlXTtcbiAgICBpZiAoIXN0cmluZ3MpIHtcbiAgICAgIHN0cmluZ3MgPSAkZDZmZDIzYmMzMzc2NjBkZiR2YXIkZ2V0U3RyaW5nc0ZvckxvY2FsZShsb2NhbGUsIHRoaXMubWVzc2FnZXMsIHRoaXMuZGVmYXVsdExvY2FsZSk7XG4gICAgICB0aGlzLm1lc3NhZ2VzW2xvY2FsZV0gPSBzdHJpbmdzO1xuICAgIH1cbiAgICBsZXQgc3RyaW5nID0gc3RyaW5nc1trZXldO1xuICAgIGlmICghc3RyaW5nKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCBpbnRsIG1lc3NhZ2UgJHtrZXl9IGluICR7bG9jYWxlfSBsb2NhbGVgKTtcbiAgICByZXR1cm4gc3RyaW5nO1xuICB9XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2VzLCBkZWZhdWx0TG9jYWxlID0gXCJlbi1VU1wiKSB7XG4gICAgdGhpcy5tZXNzYWdlcyA9IHtcbiAgICAgIC4uLm1lc3NhZ2VzXG4gICAgfTtcbiAgICB0aGlzLmRlZmF1bHRMb2NhbGUgPSBkZWZhdWx0TG9jYWxlO1xuICB9XG59O1xuZnVuY3Rpb24gJGQ2ZmQyM2JjMzM3NjYwZGYkdmFyJGdldFN0cmluZ3NGb3JMb2NhbGUobG9jYWxlLCBzdHJpbmdzLCBkZWZhdWx0TG9jYWxlID0gXCJlbi1VU1wiKSB7XG4gIGlmIChzdHJpbmdzW2xvY2FsZV0pXG4gICAgcmV0dXJuIHN0cmluZ3NbbG9jYWxlXTtcbiAgbGV0IGxhbmd1YWdlID0gJGQ2ZmQyM2JjMzM3NjYwZGYkdmFyJGdldExhbmd1YWdlKGxvY2FsZSk7XG4gIGlmIChzdHJpbmdzW2xhbmd1YWdlXSlcbiAgICByZXR1cm4gc3RyaW5nc1tsYW5ndWFnZV07XG4gIGZvciAobGV0IGtleSBpbiBzdHJpbmdzKSB7XG4gICAgaWYgKGtleS5zdGFydHNXaXRoKGxhbmd1YWdlICsgXCItXCIpKVxuICAgICAgcmV0dXJuIHN0cmluZ3Nba2V5XTtcbiAgfVxuICByZXR1cm4gc3RyaW5nc1tkZWZhdWx0TG9jYWxlXTtcbn1cbmZ1bmN0aW9uICRkNmZkMjNiYzMzNzY2MGRmJHZhciRnZXRMYW5ndWFnZShsb2NhbGUpIHtcbiAgaWYgKEludGwuTG9jYWxlKVxuICAgIHJldHVybiBuZXcgSW50bC5Mb2NhbGUobG9jYWxlKS5sYW5ndWFnZTtcbiAgcmV0dXJuIGxvY2FsZS5zcGxpdChcIi1cIilbMF07XG59XG5cbi8vIC4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AZmxvYXRpbmctdWkrdXRpbHNAMC4xLjYvbm9kZV9tb2R1bGVzL0BmbG9hdGluZy11aS91dGlscy9kaXN0L2Zsb2F0aW5nLXVpLnV0aWxzLm1qc1xudmFyIHNpZGVzID0gW1widG9wXCIsIFwicmlnaHRcIiwgXCJib3R0b21cIiwgXCJsZWZ0XCJdO1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIHJvdW5kID0gTWF0aC5yb3VuZDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgY3JlYXRlQ29vcmRzID0gKHYpID0+ICh7XG4gIHg6IHYsXG4gIHk6IHZcbn0pO1xudmFyIG9wcG9zaXRlU2lkZU1hcCA9IHtcbiAgbGVmdDogXCJyaWdodFwiLFxuICByaWdodDogXCJsZWZ0XCIsXG4gIGJvdHRvbTogXCJ0b3BcIixcbiAgdG9wOiBcImJvdHRvbVwiXG59O1xudmFyIG9wcG9zaXRlQWxpZ25tZW50TWFwID0ge1xuICBzdGFydDogXCJlbmRcIixcbiAgZW5kOiBcInN0YXJ0XCJcbn07XG5mdW5jdGlvbiBjbGFtcDIoc3RhcnQsIHZhbHVlLCBlbmQpIHtcbiAgcmV0dXJuIG1heChzdGFydCwgbWluKHZhbHVlLCBlbmQpKTtcbn1cbmZ1bmN0aW9uIGV2YWx1YXRlKHZhbHVlLCBwYXJhbSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyB2YWx1ZShwYXJhbSkgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGdldFNpZGUocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQuc3BsaXQoXCItXCIpWzBdO1xufVxuZnVuY3Rpb24gZ2V0QWxpZ25tZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KFwiLVwiKVsxXTtcbn1cbmZ1bmN0aW9uIGdldE9wcG9zaXRlQXhpcyhheGlzKSB7XG4gIHJldHVybiBheGlzID09PSBcInhcIiA/IFwieVwiIDogXCJ4XCI7XG59XG5mdW5jdGlvbiBnZXRBeGlzTGVuZ3RoKGF4aXMpIHtcbiAgcmV0dXJuIGF4aXMgPT09IFwieVwiID8gXCJoZWlnaHRcIiA6IFwid2lkdGhcIjtcbn1cbmZ1bmN0aW9uIGdldFNpZGVBeGlzKHBsYWNlbWVudCkge1xuICByZXR1cm4gW1widG9wXCIsIFwiYm90dG9tXCJdLmluY2x1ZGVzKGdldFNpZGUocGxhY2VtZW50KSkgPyBcInlcIiA6IFwieFwiO1xufVxuZnVuY3Rpb24gZ2V0QWxpZ25tZW50QXhpcyhwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIGdldE9wcG9zaXRlQXhpcyhnZXRTaWRlQXhpcyhwbGFjZW1lbnQpKTtcbn1cbmZ1bmN0aW9uIGdldEFsaWdubWVudFNpZGVzKHBsYWNlbWVudCwgcmVjdHMsIHJ0bCkge1xuICBpZiAocnRsID09PSB2b2lkIDApIHtcbiAgICBydGwgPSBmYWxzZTtcbiAgfVxuICBjb25zdCBhbGlnbm1lbnQgPSBnZXRBbGlnbm1lbnQocGxhY2VtZW50KTtcbiAgY29uc3QgYWxpZ25tZW50QXhpcyA9IGdldEFsaWdubWVudEF4aXMocGxhY2VtZW50KTtcbiAgY29uc3QgbGVuZ3RoID0gZ2V0QXhpc0xlbmd0aChhbGlnbm1lbnRBeGlzKTtcbiAgbGV0IG1haW5BbGlnbm1lbnRTaWRlID0gYWxpZ25tZW50QXhpcyA9PT0gXCJ4XCIgPyBhbGlnbm1lbnQgPT09IChydGwgPyBcImVuZFwiIDogXCJzdGFydFwiKSA/IFwicmlnaHRcIiA6IFwibGVmdFwiIDogYWxpZ25tZW50ID09PSBcInN0YXJ0XCIgPyBcImJvdHRvbVwiIDogXCJ0b3BcIjtcbiAgaWYgKHJlY3RzLnJlZmVyZW5jZVtsZW5ndGhdID4gcmVjdHMuZmxvYXRpbmdbbGVuZ3RoXSkge1xuICAgIG1haW5BbGlnbm1lbnRTaWRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpbkFsaWdubWVudFNpZGUpO1xuICB9XG4gIHJldHVybiBbbWFpbkFsaWdubWVudFNpZGUsIGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5BbGlnbm1lbnRTaWRlKV07XG59XG5mdW5jdGlvbiBnZXRFeHBhbmRlZFBsYWNlbWVudHMocGxhY2VtZW50KSB7XG4gIGNvbnN0IG9wcG9zaXRlUGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgcmV0dXJuIFtnZXRPcHBvc2l0ZUFsaWdubWVudFBsYWNlbWVudChwbGFjZW1lbnQpLCBvcHBvc2l0ZVBsYWNlbWVudCwgZ2V0T3Bwb3NpdGVBbGlnbm1lbnRQbGFjZW1lbnQob3Bwb3NpdGVQbGFjZW1lbnQpXTtcbn1cbmZ1bmN0aW9uIGdldE9wcG9zaXRlQWxpZ25tZW50UGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL3N0YXJ0fGVuZC9nLCAoYWxpZ25tZW50KSA9PiBvcHBvc2l0ZUFsaWdubWVudE1hcFthbGlnbm1lbnRdKTtcbn1cbmZ1bmN0aW9uIGdldFNpZGVMaXN0KHNpZGUsIGlzU3RhcnQsIHJ0bCkge1xuICBjb25zdCBsciA9IFtcImxlZnRcIiwgXCJyaWdodFwiXTtcbiAgY29uc3QgcmwgPSBbXCJyaWdodFwiLCBcImxlZnRcIl07XG4gIGNvbnN0IHRiID0gW1widG9wXCIsIFwiYm90dG9tXCJdO1xuICBjb25zdCBidCA9IFtcImJvdHRvbVwiLCBcInRvcFwiXTtcbiAgc3dpdGNoIChzaWRlKSB7XG4gICAgY2FzZSBcInRvcFwiOlxuICAgIGNhc2UgXCJib3R0b21cIjpcbiAgICAgIGlmIChydGwpXG4gICAgICAgIHJldHVybiBpc1N0YXJ0ID8gcmwgOiBscjtcbiAgICAgIHJldHVybiBpc1N0YXJ0ID8gbHIgOiBybDtcbiAgICBjYXNlIFwibGVmdFwiOlxuICAgIGNhc2UgXCJyaWdodFwiOlxuICAgICAgcmV0dXJuIGlzU3RhcnQgPyB0YiA6IGJ0O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gW107XG4gIH1cbn1cbmZ1bmN0aW9uIGdldE9wcG9zaXRlQXhpc1BsYWNlbWVudHMocGxhY2VtZW50LCBmbGlwQWxpZ25tZW50LCBkaXJlY3Rpb24sIHJ0bCkge1xuICBjb25zdCBhbGlnbm1lbnQgPSBnZXRBbGlnbm1lbnQocGxhY2VtZW50KTtcbiAgbGV0IGxpc3QgPSBnZXRTaWRlTGlzdChnZXRTaWRlKHBsYWNlbWVudCksIGRpcmVjdGlvbiA9PT0gXCJzdGFydFwiLCBydGwpO1xuICBpZiAoYWxpZ25tZW50KSB7XG4gICAgbGlzdCA9IGxpc3QubWFwKChzaWRlKSA9PiBzaWRlICsgXCItXCIgKyBhbGlnbm1lbnQpO1xuICAgIGlmIChmbGlwQWxpZ25tZW50KSB7XG4gICAgICBsaXN0ID0gbGlzdC5jb25jYXQobGlzdC5tYXAoZ2V0T3Bwb3NpdGVBbGlnbm1lbnRQbGFjZW1lbnQpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxpc3Q7XG59XG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgKHNpZGUpID0+IG9wcG9zaXRlU2lkZU1hcFtzaWRlXSk7XG59XG5mdW5jdGlvbiBleHBhbmRQYWRkaW5nT2JqZWN0KHBhZGRpbmcpIHtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgLi4ucGFkZGluZ1xuICB9O1xufVxuZnVuY3Rpb24gZ2V0UGFkZGluZ09iamVjdChwYWRkaW5nKSB7XG4gIHJldHVybiB0eXBlb2YgcGFkZGluZyAhPT0gXCJudW1iZXJcIiA/IGV4cGFuZFBhZGRpbmdPYmplY3QocGFkZGluZykgOiB7XG4gICAgdG9wOiBwYWRkaW5nLFxuICAgIHJpZ2h0OiBwYWRkaW5nLFxuICAgIGJvdHRvbTogcGFkZGluZyxcbiAgICBsZWZ0OiBwYWRkaW5nXG4gIH07XG59XG5mdW5jdGlvbiByZWN0VG9DbGllbnRSZWN0KHJlY3QpIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5yZWN0LFxuICAgIHRvcDogcmVjdC55LFxuICAgIGxlZnQ6IHJlY3QueCxcbiAgICByaWdodDogcmVjdC54ICsgcmVjdC53aWR0aCxcbiAgICBib3R0b206IHJlY3QueSArIHJlY3QuaGVpZ2h0XG4gIH07XG59XG5cbi8vIC4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AZmxvYXRpbmctdWkrY29yZUAxLjUuMC9ub2RlX21vZHVsZXMvQGZsb2F0aW5nLXVpL2NvcmUvZGlzdC9mbG9hdGluZy11aS5jb3JlLm1qc1xuZnVuY3Rpb24gY29tcHV0ZUNvb3Jkc0Zyb21QbGFjZW1lbnQoX3JlZiwgcGxhY2VtZW50LCBydGwpIHtcbiAgbGV0IHtcbiAgICByZWZlcmVuY2UsXG4gICAgZmxvYXRpbmdcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IHNpZGVBeGlzID0gZ2V0U2lkZUF4aXMocGxhY2VtZW50KTtcbiAgY29uc3QgYWxpZ25tZW50QXhpcyA9IGdldEFsaWdubWVudEF4aXMocGxhY2VtZW50KTtcbiAgY29uc3QgYWxpZ25MZW5ndGggPSBnZXRBeGlzTGVuZ3RoKGFsaWdubWVudEF4aXMpO1xuICBjb25zdCBzaWRlID0gZ2V0U2lkZShwbGFjZW1lbnQpO1xuICBjb25zdCBpc1ZlcnRpY2FsID0gc2lkZUF4aXMgPT09IFwieVwiO1xuICBjb25zdCBjb21tb25YID0gcmVmZXJlbmNlLnggKyByZWZlcmVuY2Uud2lkdGggLyAyIC0gZmxvYXRpbmcud2lkdGggLyAyO1xuICBjb25zdCBjb21tb25ZID0gcmVmZXJlbmNlLnkgKyByZWZlcmVuY2UuaGVpZ2h0IC8gMiAtIGZsb2F0aW5nLmhlaWdodCAvIDI7XG4gIGNvbnN0IGNvbW1vbkFsaWduID0gcmVmZXJlbmNlW2FsaWduTGVuZ3RoXSAvIDIgLSBmbG9hdGluZ1thbGlnbkxlbmd0aF0gLyAyO1xuICBsZXQgY29vcmRzO1xuICBzd2l0Y2ggKHNpZGUpIHtcbiAgICBjYXNlIFwidG9wXCI6XG4gICAgICBjb29yZHMgPSB7XG4gICAgICAgIHg6IGNvbW1vblgsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55IC0gZmxvYXRpbmcuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImJvdHRvbVwiOlxuICAgICAgY29vcmRzID0ge1xuICAgICAgICB4OiBjb21tb25YLFxuICAgICAgICB5OiByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwicmlnaHRcIjpcbiAgICAgIGNvb3JkcyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggKyByZWZlcmVuY2Uud2lkdGgsXG4gICAgICAgIHk6IGNvbW1vbllcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwibGVmdFwiOlxuICAgICAgY29vcmRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCAtIGZsb2F0aW5nLndpZHRoLFxuICAgICAgICB5OiBjb21tb25ZXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGNvb3JkcyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLngsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55XG4gICAgICB9O1xuICB9XG4gIHN3aXRjaCAoZ2V0QWxpZ25tZW50KHBsYWNlbWVudCkpIHtcbiAgICBjYXNlIFwic3RhcnRcIjpcbiAgICAgIGNvb3Jkc1thbGlnbm1lbnRBeGlzXSAtPSBjb21tb25BbGlnbiAqIChydGwgJiYgaXNWZXJ0aWNhbCA/IC0xIDogMSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZW5kXCI6XG4gICAgICBjb29yZHNbYWxpZ25tZW50QXhpc10gKz0gY29tbW9uQWxpZ24gKiAocnRsICYmIGlzVmVydGljYWwgPyAtMSA6IDEpO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIGNvb3Jkcztcbn1cbnZhciBjb21wdXRlUG9zaXRpb24gPSBhc3luYyAocmVmZXJlbmNlLCBmbG9hdGluZywgY29uZmlnKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBwbGFjZW1lbnQgPSBcImJvdHRvbVwiLFxuICAgIHN0cmF0ZWd5ID0gXCJhYnNvbHV0ZVwiLFxuICAgIG1pZGRsZXdhcmUgPSBbXSxcbiAgICBwbGF0Zm9ybTogcGxhdGZvcm0yXG4gIH0gPSBjb25maWc7XG4gIGNvbnN0IHZhbGlkTWlkZGxld2FyZSA9IG1pZGRsZXdhcmUuZmlsdGVyKEJvb2xlYW4pO1xuICBjb25zdCBydGwgPSBhd2FpdCAocGxhdGZvcm0yLmlzUlRMID09IG51bGwgPyB2b2lkIDAgOiBwbGF0Zm9ybTIuaXNSVEwoZmxvYXRpbmcpKTtcbiAgbGV0IHJlY3RzID0gYXdhaXQgcGxhdGZvcm0yLmdldEVsZW1lbnRSZWN0cyh7XG4gICAgcmVmZXJlbmNlLFxuICAgIGZsb2F0aW5nLFxuICAgIHN0cmF0ZWd5XG4gIH0pO1xuICBsZXQge1xuICAgIHgsXG4gICAgeVxuICB9ID0gY29tcHV0ZUNvb3Jkc0Zyb21QbGFjZW1lbnQocmVjdHMsIHBsYWNlbWVudCwgcnRsKTtcbiAgbGV0IHN0YXRlZnVsUGxhY2VtZW50ID0gcGxhY2VtZW50O1xuICBsZXQgbWlkZGxld2FyZURhdGEgPSB7fTtcbiAgbGV0IHJlc2V0Q291bnQgPSAwO1xuICBmb3IgKGxldCBpMiA9IDA7IGkyIDwgdmFsaWRNaWRkbGV3YXJlLmxlbmd0aDsgaTIrKykge1xuICAgIGNvbnN0IHtcbiAgICAgIG5hbWUsXG4gICAgICBmblxuICAgIH0gPSB2YWxpZE1pZGRsZXdhcmVbaTJdO1xuICAgIGNvbnN0IHtcbiAgICAgIHg6IG5leHRYLFxuICAgICAgeTogbmV4dFksXG4gICAgICBkYXRhLFxuICAgICAgcmVzZXRcbiAgICB9ID0gYXdhaXQgZm4oe1xuICAgICAgeCxcbiAgICAgIHksXG4gICAgICBpbml0aWFsUGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBwbGFjZW1lbnQ6IHN0YXRlZnVsUGxhY2VtZW50LFxuICAgICAgc3RyYXRlZ3ksXG4gICAgICBtaWRkbGV3YXJlRGF0YSxcbiAgICAgIHJlY3RzLFxuICAgICAgcGxhdGZvcm06IHBsYXRmb3JtMixcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIHJlZmVyZW5jZSxcbiAgICAgICAgZmxvYXRpbmdcbiAgICAgIH1cbiAgICB9KTtcbiAgICB4ID0gbmV4dFggIT0gbnVsbCA/IG5leHRYIDogeDtcbiAgICB5ID0gbmV4dFkgIT0gbnVsbCA/IG5leHRZIDogeTtcbiAgICBtaWRkbGV3YXJlRGF0YSA9IHtcbiAgICAgIC4uLm1pZGRsZXdhcmVEYXRhLFxuICAgICAgW25hbWVdOiB7XG4gICAgICAgIC4uLm1pZGRsZXdhcmVEYXRhW25hbWVdLFxuICAgICAgICAuLi5kYXRhXG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAocmVzZXQgJiYgcmVzZXRDb3VudCA8PSA1MCkge1xuICAgICAgcmVzZXRDb3VudCsrO1xuICAgICAgaWYgKHR5cGVvZiByZXNldCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBpZiAocmVzZXQucGxhY2VtZW50KSB7XG4gICAgICAgICAgc3RhdGVmdWxQbGFjZW1lbnQgPSByZXNldC5wbGFjZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc2V0LnJlY3RzKSB7XG4gICAgICAgICAgcmVjdHMgPSByZXNldC5yZWN0cyA9PT0gdHJ1ZSA/IGF3YWl0IHBsYXRmb3JtMi5nZXRFbGVtZW50UmVjdHMoe1xuICAgICAgICAgICAgcmVmZXJlbmNlLFxuICAgICAgICAgICAgZmxvYXRpbmcsXG4gICAgICAgICAgICBzdHJhdGVneVxuICAgICAgICAgIH0pIDogcmVzZXQucmVjdHM7XG4gICAgICAgIH1cbiAgICAgICAgKHtcbiAgICAgICAgICB4LFxuICAgICAgICAgIHlcbiAgICAgICAgfSA9IGNvbXB1dGVDb29yZHNGcm9tUGxhY2VtZW50KHJlY3RzLCBzdGF0ZWZ1bFBsYWNlbWVudCwgcnRsKSk7XG4gICAgICB9XG4gICAgICBpMiA9IC0xO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgeCxcbiAgICB5LFxuICAgIHBsYWNlbWVudDogc3RhdGVmdWxQbGFjZW1lbnQsXG4gICAgc3RyYXRlZ3ksXG4gICAgbWlkZGxld2FyZURhdGFcbiAgfTtcbn07XG5hc3luYyBmdW5jdGlvbiBkZXRlY3RPdmVyZmxvdyhzdGF0ZTIsIG9wdGlvbnMpIHtcbiAgdmFyIF9hd2FpdCRwbGF0Zm9ybSRpc0VsZTtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBjb25zdCB7XG4gICAgeCxcbiAgICB5LFxuICAgIHBsYXRmb3JtOiBwbGF0Zm9ybTIsXG4gICAgcmVjdHMsXG4gICAgZWxlbWVudHMsXG4gICAgc3RyYXRlZ3lcbiAgfSA9IHN0YXRlMjtcbiAgY29uc3Qge1xuICAgIGJvdW5kYXJ5ID0gXCJjbGlwcGluZ0FuY2VzdG9yc1wiLFxuICAgIHJvb3RCb3VuZGFyeSA9IFwidmlld3BvcnRcIixcbiAgICBlbGVtZW50Q29udGV4dCA9IFwiZmxvYXRpbmdcIixcbiAgICBhbHRCb3VuZGFyeSA9IGZhbHNlLFxuICAgIHBhZGRpbmcgPSAwXG4gIH0gPSBldmFsdWF0ZShvcHRpb25zLCBzdGF0ZTIpO1xuICBjb25zdCBwYWRkaW5nT2JqZWN0ID0gZ2V0UGFkZGluZ09iamVjdChwYWRkaW5nKTtcbiAgY29uc3QgYWx0Q29udGV4dCA9IGVsZW1lbnRDb250ZXh0ID09PSBcImZsb2F0aW5nXCIgPyBcInJlZmVyZW5jZVwiIDogXCJmbG9hdGluZ1wiO1xuICBjb25zdCBlbGVtZW50ID0gZWxlbWVudHNbYWx0Qm91bmRhcnkgPyBhbHRDb250ZXh0IDogZWxlbWVudENvbnRleHRdO1xuICBjb25zdCBjbGlwcGluZ0NsaWVudFJlY3QgPSByZWN0VG9DbGllbnRSZWN0KGF3YWl0IHBsYXRmb3JtMi5nZXRDbGlwcGluZ1JlY3Qoe1xuICAgIGVsZW1lbnQ6ICgoX2F3YWl0JHBsYXRmb3JtJGlzRWxlID0gYXdhaXQgKHBsYXRmb3JtMi5pc0VsZW1lbnQgPT0gbnVsbCA/IHZvaWQgMCA6IHBsYXRmb3JtMi5pc0VsZW1lbnQoZWxlbWVudCkpKSAhPSBudWxsID8gX2F3YWl0JHBsYXRmb3JtJGlzRWxlIDogdHJ1ZSkgPyBlbGVtZW50IDogZWxlbWVudC5jb250ZXh0RWxlbWVudCB8fCBhd2FpdCAocGxhdGZvcm0yLmdldERvY3VtZW50RWxlbWVudCA9PSBudWxsID8gdm9pZCAwIDogcGxhdGZvcm0yLmdldERvY3VtZW50RWxlbWVudChlbGVtZW50cy5mbG9hdGluZykpLFxuICAgIGJvdW5kYXJ5LFxuICAgIHJvb3RCb3VuZGFyeSxcbiAgICBzdHJhdGVneVxuICB9KSk7XG4gIGNvbnN0IHJlY3QgPSBlbGVtZW50Q29udGV4dCA9PT0gXCJmbG9hdGluZ1wiID8ge1xuICAgIC4uLnJlY3RzLmZsb2F0aW5nLFxuICAgIHgsXG4gICAgeVxuICB9IDogcmVjdHMucmVmZXJlbmNlO1xuICBjb25zdCBvZmZzZXRQYXJlbnQgPSBhd2FpdCAocGxhdGZvcm0yLmdldE9mZnNldFBhcmVudCA9PSBudWxsID8gdm9pZCAwIDogcGxhdGZvcm0yLmdldE9mZnNldFBhcmVudChlbGVtZW50cy5mbG9hdGluZykpO1xuICBjb25zdCBvZmZzZXRTY2FsZSA9IGF3YWl0IChwbGF0Zm9ybTIuaXNFbGVtZW50ID09IG51bGwgPyB2b2lkIDAgOiBwbGF0Zm9ybTIuaXNFbGVtZW50KG9mZnNldFBhcmVudCkpID8gYXdhaXQgKHBsYXRmb3JtMi5nZXRTY2FsZSA9PSBudWxsID8gdm9pZCAwIDogcGxhdGZvcm0yLmdldFNjYWxlKG9mZnNldFBhcmVudCkpIHx8IHtcbiAgICB4OiAxLFxuICAgIHk6IDFcbiAgfSA6IHtcbiAgICB4OiAxLFxuICAgIHk6IDFcbiAgfTtcbiAgY29uc3QgZWxlbWVudENsaWVudFJlY3QgPSByZWN0VG9DbGllbnRSZWN0KHBsYXRmb3JtMi5jb252ZXJ0T2Zmc2V0UGFyZW50UmVsYXRpdmVSZWN0VG9WaWV3cG9ydFJlbGF0aXZlUmVjdCA/IGF3YWl0IHBsYXRmb3JtMi5jb252ZXJ0T2Zmc2V0UGFyZW50UmVsYXRpdmVSZWN0VG9WaWV3cG9ydFJlbGF0aXZlUmVjdCh7XG4gICAgcmVjdCxcbiAgICBvZmZzZXRQYXJlbnQsXG4gICAgc3RyYXRlZ3lcbiAgfSkgOiByZWN0KTtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IChjbGlwcGluZ0NsaWVudFJlY3QudG9wIC0gZWxlbWVudENsaWVudFJlY3QudG9wICsgcGFkZGluZ09iamVjdC50b3ApIC8gb2Zmc2V0U2NhbGUueSxcbiAgICBib3R0b206IChlbGVtZW50Q2xpZW50UmVjdC5ib3R0b20gLSBjbGlwcGluZ0NsaWVudFJlY3QuYm90dG9tICsgcGFkZGluZ09iamVjdC5ib3R0b20pIC8gb2Zmc2V0U2NhbGUueSxcbiAgICBsZWZ0OiAoY2xpcHBpbmdDbGllbnRSZWN0LmxlZnQgLSBlbGVtZW50Q2xpZW50UmVjdC5sZWZ0ICsgcGFkZGluZ09iamVjdC5sZWZ0KSAvIG9mZnNldFNjYWxlLngsXG4gICAgcmlnaHQ6IChlbGVtZW50Q2xpZW50UmVjdC5yaWdodCAtIGNsaXBwaW5nQ2xpZW50UmVjdC5yaWdodCArIHBhZGRpbmdPYmplY3QucmlnaHQpIC8gb2Zmc2V0U2NhbGUueFxuICB9O1xufVxudmFyIGFycm93ID0gKG9wdGlvbnMpID0+ICh7XG4gIG5hbWU6IFwiYXJyb3dcIixcbiAgb3B0aW9ucyxcbiAgYXN5bmMgZm4oc3RhdGUyKSB7XG4gICAgY29uc3Qge1xuICAgICAgeCxcbiAgICAgIHksXG4gICAgICBwbGFjZW1lbnQsXG4gICAgICByZWN0cyxcbiAgICAgIHBsYXRmb3JtOiBwbGF0Zm9ybTIsXG4gICAgICBlbGVtZW50cyxcbiAgICAgIG1pZGRsZXdhcmVEYXRhXG4gICAgfSA9IHN0YXRlMjtcbiAgICBjb25zdCB7XG4gICAgICBlbGVtZW50LFxuICAgICAgcGFkZGluZyA9IDBcbiAgICB9ID0gZXZhbHVhdGUob3B0aW9ucywgc3RhdGUyKSB8fCB7fTtcbiAgICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGNvbnN0IHBhZGRpbmdPYmplY3QgPSBnZXRQYWRkaW5nT2JqZWN0KHBhZGRpbmcpO1xuICAgIGNvbnN0IGNvb3JkcyA9IHtcbiAgICAgIHgsXG4gICAgICB5XG4gICAgfTtcbiAgICBjb25zdCBheGlzID0gZ2V0QWxpZ25tZW50QXhpcyhwbGFjZW1lbnQpO1xuICAgIGNvbnN0IGxlbmd0aCA9IGdldEF4aXNMZW5ndGgoYXhpcyk7XG4gICAgY29uc3QgYXJyb3dEaW1lbnNpb25zID0gYXdhaXQgcGxhdGZvcm0yLmdldERpbWVuc2lvbnMoZWxlbWVudCk7XG4gICAgY29uc3QgaXNZQXhpcyA9IGF4aXMgPT09IFwieVwiO1xuICAgIGNvbnN0IG1pblByb3AgPSBpc1lBeGlzID8gXCJ0b3BcIiA6IFwibGVmdFwiO1xuICAgIGNvbnN0IG1heFByb3AgPSBpc1lBeGlzID8gXCJib3R0b21cIiA6IFwicmlnaHRcIjtcbiAgICBjb25zdCBjbGllbnRQcm9wID0gaXNZQXhpcyA/IFwiY2xpZW50SGVpZ2h0XCIgOiBcImNsaWVudFdpZHRoXCI7XG4gICAgY29uc3QgZW5kRGlmZiA9IHJlY3RzLnJlZmVyZW5jZVtsZW5ndGhdICsgcmVjdHMucmVmZXJlbmNlW2F4aXNdIC0gY29vcmRzW2F4aXNdIC0gcmVjdHMuZmxvYXRpbmdbbGVuZ3RoXTtcbiAgICBjb25zdCBzdGFydERpZmYgPSBjb29yZHNbYXhpc10gLSByZWN0cy5yZWZlcmVuY2VbYXhpc107XG4gICAgY29uc3QgYXJyb3dPZmZzZXRQYXJlbnQgPSBhd2FpdCAocGxhdGZvcm0yLmdldE9mZnNldFBhcmVudCA9PSBudWxsID8gdm9pZCAwIDogcGxhdGZvcm0yLmdldE9mZnNldFBhcmVudChlbGVtZW50KSk7XG4gICAgbGV0IGNsaWVudFNpemUgPSBhcnJvd09mZnNldFBhcmVudCA/IGFycm93T2Zmc2V0UGFyZW50W2NsaWVudFByb3BdIDogMDtcbiAgICBpZiAoIWNsaWVudFNpemUgfHwgIWF3YWl0IChwbGF0Zm9ybTIuaXNFbGVtZW50ID09IG51bGwgPyB2b2lkIDAgOiBwbGF0Zm9ybTIuaXNFbGVtZW50KGFycm93T2Zmc2V0UGFyZW50KSkpIHtcbiAgICAgIGNsaWVudFNpemUgPSBlbGVtZW50cy5mbG9hdGluZ1tjbGllbnRQcm9wXSB8fCByZWN0cy5mbG9hdGluZ1tsZW5ndGhdO1xuICAgIH1cbiAgICBjb25zdCBjZW50ZXJUb1JlZmVyZW5jZSA9IGVuZERpZmYgLyAyIC0gc3RhcnREaWZmIC8gMjtcbiAgICBjb25zdCBsYXJnZXN0UG9zc2libGVQYWRkaW5nID0gY2xpZW50U2l6ZSAvIDIgLSBhcnJvd0RpbWVuc2lvbnNbbGVuZ3RoXSAvIDIgLSAxO1xuICAgIGNvbnN0IG1pblBhZGRpbmcgPSBtaW4ocGFkZGluZ09iamVjdFttaW5Qcm9wXSwgbGFyZ2VzdFBvc3NpYmxlUGFkZGluZyk7XG4gICAgY29uc3QgbWF4UGFkZGluZyA9IG1pbihwYWRkaW5nT2JqZWN0W21heFByb3BdLCBsYXJnZXN0UG9zc2libGVQYWRkaW5nKTtcbiAgICBjb25zdCBtaW4kMSA9IG1pblBhZGRpbmc7XG4gICAgY29uc3QgbWF4MiA9IGNsaWVudFNpemUgLSBhcnJvd0RpbWVuc2lvbnNbbGVuZ3RoXSAtIG1heFBhZGRpbmc7XG4gICAgY29uc3QgY2VudGVyID0gY2xpZW50U2l6ZSAvIDIgLSBhcnJvd0RpbWVuc2lvbnNbbGVuZ3RoXSAvIDIgKyBjZW50ZXJUb1JlZmVyZW5jZTtcbiAgICBjb25zdCBvZmZzZXQyID0gY2xhbXAyKG1pbiQxLCBjZW50ZXIsIG1heDIpO1xuICAgIGNvbnN0IHNob3VsZEFkZE9mZnNldCA9ICFtaWRkbGV3YXJlRGF0YS5hcnJvdyAmJiBnZXRBbGlnbm1lbnQocGxhY2VtZW50KSAhPSBudWxsICYmIGNlbnRlciAhPSBvZmZzZXQyICYmIHJlY3RzLnJlZmVyZW5jZVtsZW5ndGhdIC8gMiAtIChjZW50ZXIgPCBtaW4kMSA/IG1pblBhZGRpbmcgOiBtYXhQYWRkaW5nKSAtIGFycm93RGltZW5zaW9uc1tsZW5ndGhdIC8gMiA8IDA7XG4gICAgY29uc3QgYWxpZ25tZW50T2Zmc2V0ID0gc2hvdWxkQWRkT2Zmc2V0ID8gY2VudGVyIDwgbWluJDEgPyBjZW50ZXIgLSBtaW4kMSA6IGNlbnRlciAtIG1heDIgOiAwO1xuICAgIHJldHVybiB7XG4gICAgICBbYXhpc106IGNvb3Jkc1theGlzXSArIGFsaWdubWVudE9mZnNldCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgW2F4aXNdOiBvZmZzZXQyLFxuICAgICAgICBjZW50ZXJPZmZzZXQ6IGNlbnRlciAtIG9mZnNldDIgLSBhbGlnbm1lbnRPZmZzZXQsXG4gICAgICAgIC4uLnNob3VsZEFkZE9mZnNldCAmJiB7XG4gICAgICAgICAgYWxpZ25tZW50T2Zmc2V0XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZXNldDogc2hvdWxkQWRkT2Zmc2V0XG4gICAgfTtcbiAgfVxufSk7XG52YXIgZmxpcCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG5hbWU6IFwiZmxpcFwiLFxuICAgIG9wdGlvbnMsXG4gICAgYXN5bmMgZm4oc3RhdGUyKSB7XG4gICAgICB2YXIgX21pZGRsZXdhcmVEYXRhJGFycm93LCBfbWlkZGxld2FyZURhdGEkZmxpcDtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcGxhY2VtZW50LFxuICAgICAgICBtaWRkbGV3YXJlRGF0YSxcbiAgICAgICAgcmVjdHMsXG4gICAgICAgIGluaXRpYWxQbGFjZW1lbnQsXG4gICAgICAgIHBsYXRmb3JtOiBwbGF0Zm9ybTIsXG4gICAgICAgIGVsZW1lbnRzXG4gICAgICB9ID0gc3RhdGUyO1xuICAgICAgY29uc3Qge1xuICAgICAgICBtYWluQXhpczogY2hlY2tNYWluQXhpcyA9IHRydWUsXG4gICAgICAgIGNyb3NzQXhpczogY2hlY2tDcm9zc0F4aXMgPSB0cnVlLFxuICAgICAgICBmYWxsYmFja1BsYWNlbWVudHM6IHNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyxcbiAgICAgICAgZmFsbGJhY2tTdHJhdGVneSA9IFwiYmVzdEZpdFwiLFxuICAgICAgICBmYWxsYmFja0F4aXNTaWRlRGlyZWN0aW9uID0gXCJub25lXCIsXG4gICAgICAgIGZsaXBBbGlnbm1lbnQgPSB0cnVlLFxuICAgICAgICAuLi5kZXRlY3RPdmVyZmxvd09wdGlvbnNcbiAgICAgIH0gPSBldmFsdWF0ZShvcHRpb25zLCBzdGF0ZTIpO1xuICAgICAgaWYgKChfbWlkZGxld2FyZURhdGEkYXJyb3cgPSBtaWRkbGV3YXJlRGF0YS5hcnJvdykgIT0gbnVsbCAmJiBfbWlkZGxld2FyZURhdGEkYXJyb3cuYWxpZ25tZW50T2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNpZGUgPSBnZXRTaWRlKHBsYWNlbWVudCk7XG4gICAgICBjb25zdCBpc0Jhc2VQbGFjZW1lbnQgPSBnZXRTaWRlKGluaXRpYWxQbGFjZW1lbnQpID09PSBpbml0aWFsUGxhY2VtZW50O1xuICAgICAgY29uc3QgcnRsID0gYXdhaXQgKHBsYXRmb3JtMi5pc1JUTCA9PSBudWxsID8gdm9pZCAwIDogcGxhdGZvcm0yLmlzUlRMKGVsZW1lbnRzLmZsb2F0aW5nKSk7XG4gICAgICBjb25zdCBmYWxsYmFja1BsYWNlbWVudHMgPSBzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMgfHwgKGlzQmFzZVBsYWNlbWVudCB8fCAhZmxpcEFsaWdubWVudCA/IFtnZXRPcHBvc2l0ZVBsYWNlbWVudChpbml0aWFsUGxhY2VtZW50KV0gOiBnZXRFeHBhbmRlZFBsYWNlbWVudHMoaW5pdGlhbFBsYWNlbWVudCkpO1xuICAgICAgaWYgKCFzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMgJiYgZmFsbGJhY2tBeGlzU2lkZURpcmVjdGlvbiAhPT0gXCJub25lXCIpIHtcbiAgICAgICAgZmFsbGJhY2tQbGFjZW1lbnRzLnB1c2goLi4uZ2V0T3Bwb3NpdGVBeGlzUGxhY2VtZW50cyhpbml0aWFsUGxhY2VtZW50LCBmbGlwQWxpZ25tZW50LCBmYWxsYmFja0F4aXNTaWRlRGlyZWN0aW9uLCBydGwpKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHBsYWNlbWVudHMyID0gW2luaXRpYWxQbGFjZW1lbnQsIC4uLmZhbGxiYWNrUGxhY2VtZW50c107XG4gICAgICBjb25zdCBvdmVyZmxvdyA9IGF3YWl0IGRldGVjdE92ZXJmbG93KHN0YXRlMiwgZGV0ZWN0T3ZlcmZsb3dPcHRpb25zKTtcbiAgICAgIGNvbnN0IG92ZXJmbG93cyA9IFtdO1xuICAgICAgbGV0IG92ZXJmbG93c0RhdGEgPSAoKF9taWRkbGV3YXJlRGF0YSRmbGlwID0gbWlkZGxld2FyZURhdGEuZmxpcCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9taWRkbGV3YXJlRGF0YSRmbGlwLm92ZXJmbG93cykgfHwgW107XG4gICAgICBpZiAoY2hlY2tNYWluQXhpcykge1xuICAgICAgICBvdmVyZmxvd3MucHVzaChvdmVyZmxvd1tzaWRlXSk7XG4gICAgICB9XG4gICAgICBpZiAoY2hlY2tDcm9zc0F4aXMpIHtcbiAgICAgICAgY29uc3Qgc2lkZXMyID0gZ2V0QWxpZ25tZW50U2lkZXMocGxhY2VtZW50LCByZWN0cywgcnRsKTtcbiAgICAgICAgb3ZlcmZsb3dzLnB1c2gob3ZlcmZsb3dbc2lkZXMyWzBdXSwgb3ZlcmZsb3dbc2lkZXMyWzFdXSk7XG4gICAgICB9XG4gICAgICBvdmVyZmxvd3NEYXRhID0gWy4uLm92ZXJmbG93c0RhdGEsIHtcbiAgICAgICAgcGxhY2VtZW50LFxuICAgICAgICBvdmVyZmxvd3NcbiAgICAgIH1dO1xuICAgICAgaWYgKCFvdmVyZmxvd3MuZXZlcnkoKHNpZGUyKSA9PiBzaWRlMiA8PSAwKSkge1xuICAgICAgICB2YXIgX21pZGRsZXdhcmVEYXRhJGZsaXAyLCBfb3ZlcmZsb3dzRGF0YSRmaWx0ZXI7XG4gICAgICAgIGNvbnN0IG5leHRJbmRleCA9ICgoKF9taWRkbGV3YXJlRGF0YSRmbGlwMiA9IG1pZGRsZXdhcmVEYXRhLmZsaXApID09IG51bGwgPyB2b2lkIDAgOiBfbWlkZGxld2FyZURhdGEkZmxpcDIuaW5kZXgpIHx8IDApICsgMTtcbiAgICAgICAgY29uc3QgbmV4dFBsYWNlbWVudCA9IHBsYWNlbWVudHMyW25leHRJbmRleF07XG4gICAgICAgIGlmIChuZXh0UGxhY2VtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgICAgICAgb3ZlcmZsb3dzOiBvdmVyZmxvd3NEYXRhXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzZXQ6IHtcbiAgICAgICAgICAgICAgcGxhY2VtZW50OiBuZXh0UGxhY2VtZW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzZXRQbGFjZW1lbnQgPSAoX292ZXJmbG93c0RhdGEkZmlsdGVyID0gb3ZlcmZsb3dzRGF0YS5maWx0ZXIoKGQpID0+IGQub3ZlcmZsb3dzWzBdIDw9IDApLnNvcnQoKGEyLCBiMikgPT4gYTIub3ZlcmZsb3dzWzFdIC0gYjIub3ZlcmZsb3dzWzFdKVswXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9vdmVyZmxvd3NEYXRhJGZpbHRlci5wbGFjZW1lbnQ7XG4gICAgICAgIGlmICghcmVzZXRQbGFjZW1lbnQpIHtcbiAgICAgICAgICBzd2l0Y2ggKGZhbGxiYWNrU3RyYXRlZ3kpIHtcbiAgICAgICAgICAgIGNhc2UgXCJiZXN0Rml0XCI6IHtcbiAgICAgICAgICAgICAgdmFyIF9vdmVyZmxvd3NEYXRhJG1hcCRzbztcbiAgICAgICAgICAgICAgY29uc3QgcGxhY2VtZW50MiA9IChfb3ZlcmZsb3dzRGF0YSRtYXAkc28gPSBvdmVyZmxvd3NEYXRhLm1hcCgoZCkgPT4gW2QucGxhY2VtZW50LCBkLm92ZXJmbG93cy5maWx0ZXIoKG92ZXJmbG93MikgPT4gb3ZlcmZsb3cyID4gMCkucmVkdWNlKChhY2MsIG92ZXJmbG93MikgPT4gYWNjICsgb3ZlcmZsb3cyLCAwKV0pLnNvcnQoKGEyLCBiMikgPT4gYTJbMV0gLSBiMlsxXSlbMF0pID09IG51bGwgPyB2b2lkIDAgOiBfb3ZlcmZsb3dzRGF0YSRtYXAkc29bMF07XG4gICAgICAgICAgICAgIGlmIChwbGFjZW1lbnQyKSB7XG4gICAgICAgICAgICAgICAgcmVzZXRQbGFjZW1lbnQgPSBwbGFjZW1lbnQyO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcImluaXRpYWxQbGFjZW1lbnRcIjpcbiAgICAgICAgICAgICAgcmVzZXRQbGFjZW1lbnQgPSBpbml0aWFsUGxhY2VtZW50O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBsYWNlbWVudCAhPT0gcmVzZXRQbGFjZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzZXQ6IHtcbiAgICAgICAgICAgICAgcGxhY2VtZW50OiByZXNldFBsYWNlbWVudFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gIH07XG59O1xuZnVuY3Rpb24gZ2V0U2lkZU9mZnNldHMob3ZlcmZsb3csIHJlY3QpIHtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IG92ZXJmbG93LnRvcCAtIHJlY3QuaGVpZ2h0LFxuICAgIHJpZ2h0OiBvdmVyZmxvdy5yaWdodCAtIHJlY3Qud2lkdGgsXG4gICAgYm90dG9tOiBvdmVyZmxvdy5ib3R0b20gLSByZWN0LmhlaWdodCxcbiAgICBsZWZ0OiBvdmVyZmxvdy5sZWZ0IC0gcmVjdC53aWR0aFxuICB9O1xufVxuZnVuY3Rpb24gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKG92ZXJmbG93KSB7XG4gIHJldHVybiBzaWRlcy5zb21lKChzaWRlKSA9PiBvdmVyZmxvd1tzaWRlXSA+PSAwKTtcbn1cbnZhciBoaWRlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbmFtZTogXCJoaWRlXCIsXG4gICAgb3B0aW9ucyxcbiAgICBhc3luYyBmbihzdGF0ZTIpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcmVjdHNcbiAgICAgIH0gPSBzdGF0ZTI7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHN0cmF0ZWd5ID0gXCJyZWZlcmVuY2VIaWRkZW5cIixcbiAgICAgICAgLi4uZGV0ZWN0T3ZlcmZsb3dPcHRpb25zXG4gICAgICB9ID0gZXZhbHVhdGUob3B0aW9ucywgc3RhdGUyKTtcbiAgICAgIHN3aXRjaCAoc3RyYXRlZ3kpIHtcbiAgICAgICAgY2FzZSBcInJlZmVyZW5jZUhpZGRlblwiOiB7XG4gICAgICAgICAgY29uc3Qgb3ZlcmZsb3cgPSBhd2FpdCBkZXRlY3RPdmVyZmxvdyhzdGF0ZTIsIHtcbiAgICAgICAgICAgIC4uLmRldGVjdE92ZXJmbG93T3B0aW9ucyxcbiAgICAgICAgICAgIGVsZW1lbnRDb250ZXh0OiBcInJlZmVyZW5jZVwiXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29uc3Qgb2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKG92ZXJmbG93LCByZWN0cy5yZWZlcmVuY2UpO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgIHJlZmVyZW5jZUhpZGRlbk9mZnNldHM6IG9mZnNldHMsXG4gICAgICAgICAgICAgIHJlZmVyZW5jZUhpZGRlbjogaXNBbnlTaWRlRnVsbHlDbGlwcGVkKG9mZnNldHMpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiZXNjYXBlZFwiOiB7XG4gICAgICAgICAgY29uc3Qgb3ZlcmZsb3cgPSBhd2FpdCBkZXRlY3RPdmVyZmxvdyhzdGF0ZTIsIHtcbiAgICAgICAgICAgIC4uLmRldGVjdE92ZXJmbG93T3B0aW9ucyxcbiAgICAgICAgICAgIGFsdEJvdW5kYXJ5OiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29uc3Qgb2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKG92ZXJmbG93LCByZWN0cy5mbG9hdGluZyk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgZXNjYXBlZE9mZnNldHM6IG9mZnNldHMsXG4gICAgICAgICAgICAgIGVzY2FwZWQ6IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChvZmZzZXRzKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5hc3luYyBmdW5jdGlvbiBjb252ZXJ0VmFsdWVUb0Nvb3JkcyhzdGF0ZTIsIG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIHBsYWNlbWVudCxcbiAgICBwbGF0Zm9ybTogcGxhdGZvcm0yLFxuICAgIGVsZW1lbnRzXG4gIH0gPSBzdGF0ZTI7XG4gIGNvbnN0IHJ0bCA9IGF3YWl0IChwbGF0Zm9ybTIuaXNSVEwgPT0gbnVsbCA/IHZvaWQgMCA6IHBsYXRmb3JtMi5pc1JUTChlbGVtZW50cy5mbG9hdGluZykpO1xuICBjb25zdCBzaWRlID0gZ2V0U2lkZShwbGFjZW1lbnQpO1xuICBjb25zdCBhbGlnbm1lbnQgPSBnZXRBbGlnbm1lbnQocGxhY2VtZW50KTtcbiAgY29uc3QgaXNWZXJ0aWNhbCA9IGdldFNpZGVBeGlzKHBsYWNlbWVudCkgPT09IFwieVwiO1xuICBjb25zdCBtYWluQXhpc011bHRpID0gW1wibGVmdFwiLCBcInRvcFwiXS5pbmNsdWRlcyhzaWRlKSA/IC0xIDogMTtcbiAgY29uc3QgY3Jvc3NBeGlzTXVsdGkgPSBydGwgJiYgaXNWZXJ0aWNhbCA/IC0xIDogMTtcbiAgY29uc3QgcmF3VmFsdWUgPSBldmFsdWF0ZShvcHRpb25zLCBzdGF0ZTIpO1xuICBsZXQge1xuICAgIG1haW5BeGlzLFxuICAgIGNyb3NzQXhpcyxcbiAgICBhbGlnbm1lbnRBeGlzXG4gIH0gPSB0eXBlb2YgcmF3VmFsdWUgPT09IFwibnVtYmVyXCIgPyB7XG4gICAgbWFpbkF4aXM6IHJhd1ZhbHVlLFxuICAgIGNyb3NzQXhpczogMCxcbiAgICBhbGlnbm1lbnRBeGlzOiBudWxsXG4gIH0gOiB7XG4gICAgbWFpbkF4aXM6IDAsXG4gICAgY3Jvc3NBeGlzOiAwLFxuICAgIGFsaWdubWVudEF4aXM6IG51bGwsXG4gICAgLi4ucmF3VmFsdWVcbiAgfTtcbiAgaWYgKGFsaWdubWVudCAmJiB0eXBlb2YgYWxpZ25tZW50QXhpcyA9PT0gXCJudW1iZXJcIikge1xuICAgIGNyb3NzQXhpcyA9IGFsaWdubWVudCA9PT0gXCJlbmRcIiA/IGFsaWdubWVudEF4aXMgKiAtMSA6IGFsaWdubWVudEF4aXM7XG4gIH1cbiAgcmV0dXJuIGlzVmVydGljYWwgPyB7XG4gICAgeDogY3Jvc3NBeGlzICogY3Jvc3NBeGlzTXVsdGksXG4gICAgeTogbWFpbkF4aXMgKiBtYWluQXhpc011bHRpXG4gIH0gOiB7XG4gICAgeDogbWFpbkF4aXMgKiBtYWluQXhpc011bHRpLFxuICAgIHk6IGNyb3NzQXhpcyAqIGNyb3NzQXhpc011bHRpXG4gIH07XG59XG52YXIgb2Zmc2V0ID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IDA7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBcIm9mZnNldFwiLFxuICAgIG9wdGlvbnMsXG4gICAgYXN5bmMgZm4oc3RhdGUyKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHgsXG4gICAgICAgIHlcbiAgICAgIH0gPSBzdGF0ZTI7XG4gICAgICBjb25zdCBkaWZmQ29vcmRzID0gYXdhaXQgY29udmVydFZhbHVlVG9Db29yZHMoc3RhdGUyLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHg6IHggKyBkaWZmQ29vcmRzLngsXG4gICAgICAgIHk6IHkgKyBkaWZmQ29vcmRzLnksXG4gICAgICAgIGRhdGE6IGRpZmZDb29yZHNcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTtcbnZhciBzaGlmdCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG5hbWU6IFwic2hpZnRcIixcbiAgICBvcHRpb25zLFxuICAgIGFzeW5jIGZuKHN0YXRlMikge1xuICAgICAgY29uc3Qge1xuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBwbGFjZW1lbnRcbiAgICAgIH0gPSBzdGF0ZTI7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG1haW5BeGlzOiBjaGVja01haW5BeGlzID0gdHJ1ZSxcbiAgICAgICAgY3Jvc3NBeGlzOiBjaGVja0Nyb3NzQXhpcyA9IGZhbHNlLFxuICAgICAgICBsaW1pdGVyID0ge1xuICAgICAgICAgIGZuOiAoX3JlZikgPT4ge1xuICAgICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgICAgeDogeDIsXG4gICAgICAgICAgICAgIHk6IHkyXG4gICAgICAgICAgICB9ID0gX3JlZjtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHg6IHgyLFxuICAgICAgICAgICAgICB5OiB5MlxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC4uLmRldGVjdE92ZXJmbG93T3B0aW9uc1xuICAgICAgfSA9IGV2YWx1YXRlKG9wdGlvbnMsIHN0YXRlMik7XG4gICAgICBjb25zdCBjb29yZHMgPSB7XG4gICAgICAgIHgsXG4gICAgICAgIHlcbiAgICAgIH07XG4gICAgICBjb25zdCBvdmVyZmxvdyA9IGF3YWl0IGRldGVjdE92ZXJmbG93KHN0YXRlMiwgZGV0ZWN0T3ZlcmZsb3dPcHRpb25zKTtcbiAgICAgIGNvbnN0IGNyb3NzQXhpcyA9IGdldFNpZGVBeGlzKGdldFNpZGUocGxhY2VtZW50KSk7XG4gICAgICBjb25zdCBtYWluQXhpcyA9IGdldE9wcG9zaXRlQXhpcyhjcm9zc0F4aXMpO1xuICAgICAgbGV0IG1haW5BeGlzQ29vcmQgPSBjb29yZHNbbWFpbkF4aXNdO1xuICAgICAgbGV0IGNyb3NzQXhpc0Nvb3JkID0gY29vcmRzW2Nyb3NzQXhpc107XG4gICAgICBpZiAoY2hlY2tNYWluQXhpcykge1xuICAgICAgICBjb25zdCBtaW5TaWRlID0gbWFpbkF4aXMgPT09IFwieVwiID8gXCJ0b3BcIiA6IFwibGVmdFwiO1xuICAgICAgICBjb25zdCBtYXhTaWRlID0gbWFpbkF4aXMgPT09IFwieVwiID8gXCJib3R0b21cIiA6IFwicmlnaHRcIjtcbiAgICAgICAgY29uc3QgbWluMiA9IG1haW5BeGlzQ29vcmQgKyBvdmVyZmxvd1ttaW5TaWRlXTtcbiAgICAgICAgY29uc3QgbWF4MiA9IG1haW5BeGlzQ29vcmQgLSBvdmVyZmxvd1ttYXhTaWRlXTtcbiAgICAgICAgbWFpbkF4aXNDb29yZCA9IGNsYW1wMihtaW4yLCBtYWluQXhpc0Nvb3JkLCBtYXgyKTtcbiAgICAgIH1cbiAgICAgIGlmIChjaGVja0Nyb3NzQXhpcykge1xuICAgICAgICBjb25zdCBtaW5TaWRlID0gY3Jvc3NBeGlzID09PSBcInlcIiA/IFwidG9wXCIgOiBcImxlZnRcIjtcbiAgICAgICAgY29uc3QgbWF4U2lkZSA9IGNyb3NzQXhpcyA9PT0gXCJ5XCIgPyBcImJvdHRvbVwiIDogXCJyaWdodFwiO1xuICAgICAgICBjb25zdCBtaW4yID0gY3Jvc3NBeGlzQ29vcmQgKyBvdmVyZmxvd1ttaW5TaWRlXTtcbiAgICAgICAgY29uc3QgbWF4MiA9IGNyb3NzQXhpc0Nvb3JkIC0gb3ZlcmZsb3dbbWF4U2lkZV07XG4gICAgICAgIGNyb3NzQXhpc0Nvb3JkID0gY2xhbXAyKG1pbjIsIGNyb3NzQXhpc0Nvb3JkLCBtYXgyKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGxpbWl0ZWRDb29yZHMgPSBsaW1pdGVyLmZuKHtcbiAgICAgICAgLi4uc3RhdGUyLFxuICAgICAgICBbbWFpbkF4aXNdOiBtYWluQXhpc0Nvb3JkLFxuICAgICAgICBbY3Jvc3NBeGlzXTogY3Jvc3NBeGlzQ29vcmRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4ubGltaXRlZENvb3JkcyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHg6IGxpbWl0ZWRDb29yZHMueCAtIHgsXG4gICAgICAgICAgeTogbGltaXRlZENvb3Jkcy55IC0geVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07XG52YXIgc2l6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG5hbWU6IFwic2l6ZVwiLFxuICAgIG9wdGlvbnMsXG4gICAgYXN5bmMgZm4oc3RhdGUyKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHBsYWNlbWVudCxcbiAgICAgICAgcmVjdHMsXG4gICAgICAgIHBsYXRmb3JtOiBwbGF0Zm9ybTIsXG4gICAgICAgIGVsZW1lbnRzXG4gICAgICB9ID0gc3RhdGUyO1xuICAgICAgY29uc3Qge1xuICAgICAgICBhcHBseSA9ICgpID0+IHtcbiAgICAgICAgfSxcbiAgICAgICAgLi4uZGV0ZWN0T3ZlcmZsb3dPcHRpb25zXG4gICAgICB9ID0gZXZhbHVhdGUob3B0aW9ucywgc3RhdGUyKTtcbiAgICAgIGNvbnN0IG92ZXJmbG93ID0gYXdhaXQgZGV0ZWN0T3ZlcmZsb3coc3RhdGUyLCBkZXRlY3RPdmVyZmxvd09wdGlvbnMpO1xuICAgICAgY29uc3Qgc2lkZSA9IGdldFNpZGUocGxhY2VtZW50KTtcbiAgICAgIGNvbnN0IGFsaWdubWVudCA9IGdldEFsaWdubWVudChwbGFjZW1lbnQpO1xuICAgICAgY29uc3QgaXNZQXhpcyA9IGdldFNpZGVBeGlzKHBsYWNlbWVudCkgPT09IFwieVwiO1xuICAgICAgY29uc3Qge1xuICAgICAgICB3aWR0aCxcbiAgICAgICAgaGVpZ2h0XG4gICAgICB9ID0gcmVjdHMuZmxvYXRpbmc7XG4gICAgICBsZXQgaGVpZ2h0U2lkZTtcbiAgICAgIGxldCB3aWR0aFNpZGU7XG4gICAgICBpZiAoc2lkZSA9PT0gXCJ0b3BcIiB8fCBzaWRlID09PSBcImJvdHRvbVwiKSB7XG4gICAgICAgIGhlaWdodFNpZGUgPSBzaWRlO1xuICAgICAgICB3aWR0aFNpZGUgPSBhbGlnbm1lbnQgPT09IChhd2FpdCAocGxhdGZvcm0yLmlzUlRMID09IG51bGwgPyB2b2lkIDAgOiBwbGF0Zm9ybTIuaXNSVEwoZWxlbWVudHMuZmxvYXRpbmcpKSA/IFwic3RhcnRcIiA6IFwiZW5kXCIpID8gXCJsZWZ0XCIgOiBcInJpZ2h0XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aWR0aFNpZGUgPSBzaWRlO1xuICAgICAgICBoZWlnaHRTaWRlID0gYWxpZ25tZW50ID09PSBcImVuZFwiID8gXCJ0b3BcIiA6IFwiYm90dG9tXCI7XG4gICAgICB9XG4gICAgICBjb25zdCBvdmVyZmxvd0F2YWlsYWJsZUhlaWdodCA9IGhlaWdodCAtIG92ZXJmbG93W2hlaWdodFNpZGVdO1xuICAgICAgY29uc3Qgb3ZlcmZsb3dBdmFpbGFibGVXaWR0aCA9IHdpZHRoIC0gb3ZlcmZsb3dbd2lkdGhTaWRlXTtcbiAgICAgIGNvbnN0IG5vU2hpZnQgPSAhc3RhdGUyLm1pZGRsZXdhcmVEYXRhLnNoaWZ0O1xuICAgICAgbGV0IGF2YWlsYWJsZUhlaWdodCA9IG92ZXJmbG93QXZhaWxhYmxlSGVpZ2h0O1xuICAgICAgbGV0IGF2YWlsYWJsZVdpZHRoID0gb3ZlcmZsb3dBdmFpbGFibGVXaWR0aDtcbiAgICAgIGlmIChpc1lBeGlzKSB7XG4gICAgICAgIGNvbnN0IG1heGltdW1DbGlwcGluZ1dpZHRoID0gd2lkdGggLSBvdmVyZmxvdy5sZWZ0IC0gb3ZlcmZsb3cucmlnaHQ7XG4gICAgICAgIGF2YWlsYWJsZVdpZHRoID0gYWxpZ25tZW50IHx8IG5vU2hpZnQgPyBtaW4ob3ZlcmZsb3dBdmFpbGFibGVXaWR0aCwgbWF4aW11bUNsaXBwaW5nV2lkdGgpIDogbWF4aW11bUNsaXBwaW5nV2lkdGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBtYXhpbXVtQ2xpcHBpbmdIZWlnaHQgPSBoZWlnaHQgLSBvdmVyZmxvdy50b3AgLSBvdmVyZmxvdy5ib3R0b207XG4gICAgICAgIGF2YWlsYWJsZUhlaWdodCA9IGFsaWdubWVudCB8fCBub1NoaWZ0ID8gbWluKG92ZXJmbG93QXZhaWxhYmxlSGVpZ2h0LCBtYXhpbXVtQ2xpcHBpbmdIZWlnaHQpIDogbWF4aW11bUNsaXBwaW5nSGVpZ2h0O1xuICAgICAgfVxuICAgICAgaWYgKG5vU2hpZnQgJiYgIWFsaWdubWVudCkge1xuICAgICAgICBjb25zdCB4TWluID0gbWF4KG92ZXJmbG93LmxlZnQsIDApO1xuICAgICAgICBjb25zdCB4TWF4ID0gbWF4KG92ZXJmbG93LnJpZ2h0LCAwKTtcbiAgICAgICAgY29uc3QgeU1pbiA9IG1heChvdmVyZmxvdy50b3AsIDApO1xuICAgICAgICBjb25zdCB5TWF4ID0gbWF4KG92ZXJmbG93LmJvdHRvbSwgMCk7XG4gICAgICAgIGlmIChpc1lBeGlzKSB7XG4gICAgICAgICAgYXZhaWxhYmxlV2lkdGggPSB3aWR0aCAtIDIgKiAoeE1pbiAhPT0gMCB8fCB4TWF4ICE9PSAwID8geE1pbiArIHhNYXggOiBtYXgob3ZlcmZsb3cubGVmdCwgb3ZlcmZsb3cucmlnaHQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhdmFpbGFibGVIZWlnaHQgPSBoZWlnaHQgLSAyICogKHlNaW4gIT09IDAgfHwgeU1heCAhPT0gMCA/IHlNaW4gKyB5TWF4IDogbWF4KG92ZXJmbG93LnRvcCwgb3ZlcmZsb3cuYm90dG9tKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGF3YWl0IGFwcGx5KHtcbiAgICAgICAgLi4uc3RhdGUyLFxuICAgICAgICBhdmFpbGFibGVXaWR0aCxcbiAgICAgICAgYXZhaWxhYmxlSGVpZ2h0XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IG5leHREaW1lbnNpb25zID0gYXdhaXQgcGxhdGZvcm0yLmdldERpbWVuc2lvbnMoZWxlbWVudHMuZmxvYXRpbmcpO1xuICAgICAgaWYgKHdpZHRoICE9PSBuZXh0RGltZW5zaW9ucy53aWR0aCB8fCBoZWlnaHQgIT09IG5leHREaW1lbnNpb25zLmhlaWdodCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJlc2V0OiB7XG4gICAgICAgICAgICByZWN0czogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gIH07XG59O1xuXG4vLyAuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGZsb2F0aW5nLXVpK3V0aWxzQDAuMS42L25vZGVfbW9kdWxlcy9AZmxvYXRpbmctdWkvdXRpbHMvZG9tL2Rpc3QvZmxvYXRpbmctdWkudXRpbHMuZG9tLm1qc1xuZnVuY3Rpb24gZ2V0Tm9kZU5hbWUobm9kZSkge1xuICBpZiAoaXNOb2RlKG5vZGUpKSB7XG4gICAgcmV0dXJuIChub2RlLm5vZGVOYW1lIHx8IFwiXCIpLnRvTG93ZXJDYXNlKCk7XG4gIH1cbiAgcmV0dXJuIFwiI2RvY3VtZW50XCI7XG59XG5mdW5jdGlvbiBnZXRXaW5kb3cyKG5vZGUpIHtcbiAgdmFyIF9ub2RlJG93bmVyRG9jdW1lbnQ7XG4gIHJldHVybiAobm9kZSA9PSBudWxsID8gdm9pZCAwIDogKF9ub2RlJG93bmVyRG9jdW1lbnQgPSBub2RlLm93bmVyRG9jdW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfbm9kZSRvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSB8fCB3aW5kb3c7XG59XG5mdW5jdGlvbiBnZXREb2N1bWVudEVsZW1lbnQobm9kZSkge1xuICB2YXIgX3JlZjtcbiAgcmV0dXJuIChfcmVmID0gKGlzTm9kZShub2RlKSA/IG5vZGUub3duZXJEb2N1bWVudCA6IG5vZGUuZG9jdW1lbnQpIHx8IHdpbmRvdy5kb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZWYuZG9jdW1lbnRFbGVtZW50O1xufVxuZnVuY3Rpb24gaXNOb2RlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIE5vZGUgfHwgdmFsdWUgaW5zdGFuY2VvZiBnZXRXaW5kb3cyKHZhbHVlKS5Ob2RlO1xufVxuZnVuY3Rpb24gaXNFbGVtZW50KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIEVsZW1lbnQgfHwgdmFsdWUgaW5zdGFuY2VvZiBnZXRXaW5kb3cyKHZhbHVlKS5FbGVtZW50O1xufVxuZnVuY3Rpb24gaXNIVE1MRWxlbWVudCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCB8fCB2YWx1ZSBpbnN0YW5jZW9mIGdldFdpbmRvdzIodmFsdWUpLkhUTUxFbGVtZW50O1xufVxuZnVuY3Rpb24gaXNTaGFkb3dSb290KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgU2hhZG93Um9vdCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBTaGFkb3dSb290IHx8IHZhbHVlIGluc3RhbmNlb2YgZ2V0V2luZG93Mih2YWx1ZSkuU2hhZG93Um9vdDtcbn1cbmZ1bmN0aW9uIGlzT3ZlcmZsb3dFbGVtZW50KGVsZW1lbnQpIHtcbiAgY29uc3Qge1xuICAgIG92ZXJmbG93LFxuICAgIG92ZXJmbG93WCxcbiAgICBvdmVyZmxvd1ksXG4gICAgZGlzcGxheVxuICB9ID0gZ2V0Q29tcHV0ZWRTdHlsZTIoZWxlbWVudCk7XG4gIHJldHVybiAvYXV0b3xzY3JvbGx8b3ZlcmxheXxoaWRkZW58Y2xpcC8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCkgJiYgIVtcImlubGluZVwiLCBcImNvbnRlbnRzXCJdLmluY2x1ZGVzKGRpc3BsYXkpO1xufVxuZnVuY3Rpb24gaXNUYWJsZUVsZW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gW1widGFibGVcIiwgXCJ0ZFwiLCBcInRoXCJdLmluY2x1ZGVzKGdldE5vZGVOYW1lKGVsZW1lbnQpKTtcbn1cbmZ1bmN0aW9uIGlzQ29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHtcbiAgY29uc3Qgd2Via2l0ID0gaXNXZWJLaXQoKTtcbiAgY29uc3QgY3NzID0gZ2V0Q29tcHV0ZWRTdHlsZTIoZWxlbWVudCk7XG4gIHJldHVybiBjc3MudHJhbnNmb3JtICE9PSBcIm5vbmVcIiB8fCBjc3MucGVyc3BlY3RpdmUgIT09IFwibm9uZVwiIHx8IChjc3MuY29udGFpbmVyVHlwZSA/IGNzcy5jb250YWluZXJUeXBlICE9PSBcIm5vcm1hbFwiIDogZmFsc2UpIHx8ICF3ZWJraXQgJiYgKGNzcy5iYWNrZHJvcEZpbHRlciA/IGNzcy5iYWNrZHJvcEZpbHRlciAhPT0gXCJub25lXCIgOiBmYWxzZSkgfHwgIXdlYmtpdCAmJiAoY3NzLmZpbHRlciA/IGNzcy5maWx0ZXIgIT09IFwibm9uZVwiIDogZmFsc2UpIHx8IFtcInRyYW5zZm9ybVwiLCBcInBlcnNwZWN0aXZlXCIsIFwiZmlsdGVyXCJdLnNvbWUoKHZhbHVlKSA9PiAoY3NzLndpbGxDaGFuZ2UgfHwgXCJcIikuaW5jbHVkZXModmFsdWUpKSB8fCBbXCJwYWludFwiLCBcImxheW91dFwiLCBcInN0cmljdFwiLCBcImNvbnRlbnRcIl0uc29tZSgodmFsdWUpID0+IChjc3MuY29udGFpbiB8fCBcIlwiKS5pbmNsdWRlcyh2YWx1ZSkpO1xufVxuZnVuY3Rpb24gZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHtcbiAgbGV0IGN1cnJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShlbGVtZW50KTtcbiAgd2hpbGUgKGlzSFRNTEVsZW1lbnQoY3VycmVudE5vZGUpICYmICFpc0xhc3RUcmF2ZXJzYWJsZU5vZGUoY3VycmVudE5vZGUpKSB7XG4gICAgaWYgKGlzQ29udGFpbmluZ0Jsb2NrKGN1cnJlbnROb2RlKSkge1xuICAgICAgcmV0dXJuIGN1cnJlbnROb2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoY3VycmVudE5vZGUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGlzV2ViS2l0KCkge1xuICBpZiAodHlwZW9mIENTUyA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhQ1NTLnN1cHBvcnRzKVxuICAgIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIENTUy5zdXBwb3J0cyhcIi13ZWJraXQtYmFja2Ryb3AtZmlsdGVyXCIsIFwibm9uZVwiKTtcbn1cbmZ1bmN0aW9uIGlzTGFzdFRyYXZlcnNhYmxlTm9kZShub2RlKSB7XG4gIHJldHVybiBbXCJodG1sXCIsIFwiYm9keVwiLCBcIiNkb2N1bWVudFwiXS5pbmNsdWRlcyhnZXROb2RlTmFtZShub2RlKSk7XG59XG5mdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlMihlbGVtZW50KSB7XG4gIHJldHVybiBnZXRXaW5kb3cyKGVsZW1lbnQpLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG59XG5mdW5jdGlvbiBnZXROb2RlU2Nyb2xsKGVsZW1lbnQpIHtcbiAgaWYgKGlzRWxlbWVudChlbGVtZW50KSkge1xuICAgIHJldHVybiB7XG4gICAgICBzY3JvbGxMZWZ0OiBlbGVtZW50LnNjcm9sbExlZnQsXG4gICAgICBzY3JvbGxUb3A6IGVsZW1lbnQuc2Nyb2xsVG9wXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IGVsZW1lbnQucGFnZVhPZmZzZXQsXG4gICAgc2Nyb2xsVG9wOiBlbGVtZW50LnBhZ2VZT2Zmc2V0XG4gIH07XG59XG5mdW5jdGlvbiBnZXRQYXJlbnROb2RlKG5vZGUpIHtcbiAgaWYgKGdldE5vZGVOYW1lKG5vZGUpID09PSBcImh0bWxcIikge1xuICAgIHJldHVybiBub2RlO1xuICB9XG4gIGNvbnN0IHJlc3VsdCA9IChcbiAgICAvLyBTdGVwIGludG8gdGhlIHNoYWRvdyBET00gb2YgdGhlIHBhcmVudCBvZiBhIHNsb3R0ZWQgbm9kZS5cbiAgICBub2RlLmFzc2lnbmVkU2xvdCB8fCAvLyBET00gRWxlbWVudCBkZXRlY3RlZC5cbiAgICBub2RlLnBhcmVudE5vZGUgfHwgLy8gU2hhZG93Um9vdCBkZXRlY3RlZC5cbiAgICBpc1NoYWRvd1Jvb3Qobm9kZSkgJiYgbm9kZS5ob3N0IHx8IC8vIEZhbGxiYWNrLlxuICAgIGdldERvY3VtZW50RWxlbWVudChub2RlKVxuICApO1xuICByZXR1cm4gaXNTaGFkb3dSb290KHJlc3VsdCkgPyByZXN1bHQuaG9zdCA6IHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGdldE5lYXJlc3RPdmVyZmxvd0FuY2VzdG9yKG5vZGUpIHtcbiAgY29uc3QgcGFyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUobm9kZSk7XG4gIGlmIChpc0xhc3RUcmF2ZXJzYWJsZU5vZGUocGFyZW50Tm9kZSkpIHtcbiAgICByZXR1cm4gbm9kZS5vd25lckRvY3VtZW50ID8gbm9kZS5vd25lckRvY3VtZW50LmJvZHkgOiBub2RlLmJvZHk7XG4gIH1cbiAgaWYgKGlzSFRNTEVsZW1lbnQocGFyZW50Tm9kZSkgJiYgaXNPdmVyZmxvd0VsZW1lbnQocGFyZW50Tm9kZSkpIHtcbiAgICByZXR1cm4gcGFyZW50Tm9kZTtcbiAgfVxuICByZXR1cm4gZ2V0TmVhcmVzdE92ZXJmbG93QW5jZXN0b3IocGFyZW50Tm9kZSk7XG59XG5mdW5jdGlvbiBnZXRPdmVyZmxvd0FuY2VzdG9ycyhub2RlLCBsaXN0LCB0cmF2ZXJzZUlmcmFtZXMpIHtcbiAgdmFyIF9ub2RlJG93bmVyRG9jdW1lbnQyO1xuICBpZiAobGlzdCA9PT0gdm9pZCAwKSB7XG4gICAgbGlzdCA9IFtdO1xuICB9XG4gIGlmICh0cmF2ZXJzZUlmcmFtZXMgPT09IHZvaWQgMCkge1xuICAgIHRyYXZlcnNlSWZyYW1lcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc2Nyb2xsYWJsZUFuY2VzdG9yID0gZ2V0TmVhcmVzdE92ZXJmbG93QW5jZXN0b3Iobm9kZSk7XG4gIGNvbnN0IGlzQm9keSA9IHNjcm9sbGFibGVBbmNlc3RvciA9PT0gKChfbm9kZSRvd25lckRvY3VtZW50MiA9IG5vZGUub3duZXJEb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9ub2RlJG93bmVyRG9jdW1lbnQyLmJvZHkpO1xuICBjb25zdCB3aW4gPSBnZXRXaW5kb3cyKHNjcm9sbGFibGVBbmNlc3Rvcik7XG4gIGlmIChpc0JvZHkpIHtcbiAgICByZXR1cm4gbGlzdC5jb25jYXQod2luLCB3aW4udmlzdWFsVmlld3BvcnQgfHwgW10sIGlzT3ZlcmZsb3dFbGVtZW50KHNjcm9sbGFibGVBbmNlc3RvcikgPyBzY3JvbGxhYmxlQW5jZXN0b3IgOiBbXSwgd2luLmZyYW1lRWxlbWVudCAmJiB0cmF2ZXJzZUlmcmFtZXMgPyBnZXRPdmVyZmxvd0FuY2VzdG9ycyh3aW4uZnJhbWVFbGVtZW50KSA6IFtdKTtcbiAgfVxuICByZXR1cm4gbGlzdC5jb25jYXQoc2Nyb2xsYWJsZUFuY2VzdG9yLCBnZXRPdmVyZmxvd0FuY2VzdG9ycyhzY3JvbGxhYmxlQW5jZXN0b3IsIFtdLCB0cmF2ZXJzZUlmcmFtZXMpKTtcbn1cblxuLy8gLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BmbG9hdGluZy11aStkb21AMS41LjMvbm9kZV9tb2R1bGVzL0BmbG9hdGluZy11aS9kb20vZGlzdC9mbG9hdGluZy11aS5kb20ubWpzXG5mdW5jdGlvbiBnZXRDc3NEaW1lbnNpb25zKGVsZW1lbnQpIHtcbiAgY29uc3QgY3NzID0gZ2V0Q29tcHV0ZWRTdHlsZTIoZWxlbWVudCk7XG4gIGxldCB3aWR0aCA9IHBhcnNlRmxvYXQoY3NzLndpZHRoKSB8fCAwO1xuICBsZXQgaGVpZ2h0ID0gcGFyc2VGbG9hdChjc3MuaGVpZ2h0KSB8fCAwO1xuICBjb25zdCBoYXNPZmZzZXQgPSBpc0hUTUxFbGVtZW50KGVsZW1lbnQpO1xuICBjb25zdCBvZmZzZXRXaWR0aCA9IGhhc09mZnNldCA/IGVsZW1lbnQub2Zmc2V0V2lkdGggOiB3aWR0aDtcbiAgY29uc3Qgb2Zmc2V0SGVpZ2h0ID0gaGFzT2Zmc2V0ID8gZWxlbWVudC5vZmZzZXRIZWlnaHQgOiBoZWlnaHQ7XG4gIGNvbnN0IHNob3VsZEZhbGxiYWNrID0gcm91bmQod2lkdGgpICE9PSBvZmZzZXRXaWR0aCB8fCByb3VuZChoZWlnaHQpICE9PSBvZmZzZXRIZWlnaHQ7XG4gIGlmIChzaG91bGRGYWxsYmFjaykge1xuICAgIHdpZHRoID0gb2Zmc2V0V2lkdGg7XG4gICAgaGVpZ2h0ID0gb2Zmc2V0SGVpZ2h0O1xuICB9XG4gIHJldHVybiB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgICQ6IHNob3VsZEZhbGxiYWNrXG4gIH07XG59XG5mdW5jdGlvbiB1bndyYXBFbGVtZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuICFpc0VsZW1lbnQoZWxlbWVudCkgPyBlbGVtZW50LmNvbnRleHRFbGVtZW50IDogZWxlbWVudDtcbn1cbmZ1bmN0aW9uIGdldFNjYWxlKGVsZW1lbnQpIHtcbiAgY29uc3QgZG9tRWxlbWVudCA9IHVud3JhcEVsZW1lbnQoZWxlbWVudCk7XG4gIGlmICghaXNIVE1MRWxlbWVudChkb21FbGVtZW50KSkge1xuICAgIHJldHVybiBjcmVhdGVDb29yZHMoMSk7XG4gIH1cbiAgY29uc3QgcmVjdCA9IGRvbUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgJFxuICB9ID0gZ2V0Q3NzRGltZW5zaW9ucyhkb21FbGVtZW50KTtcbiAgbGV0IHggPSAoJCA/IHJvdW5kKHJlY3Qud2lkdGgpIDogcmVjdC53aWR0aCkgLyB3aWR0aDtcbiAgbGV0IHkgPSAoJCA/IHJvdW5kKHJlY3QuaGVpZ2h0KSA6IHJlY3QuaGVpZ2h0KSAvIGhlaWdodDtcbiAgaWYgKCF4IHx8ICFOdW1iZXIuaXNGaW5pdGUoeCkpIHtcbiAgICB4ID0gMTtcbiAgfVxuICBpZiAoIXkgfHwgIU51bWJlci5pc0Zpbml0ZSh5KSkge1xuICAgIHkgPSAxO1xuICB9XG4gIHJldHVybiB7XG4gICAgeCxcbiAgICB5XG4gIH07XG59XG52YXIgbm9PZmZzZXRzID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZUNvb3JkcygwKTtcbmZ1bmN0aW9uIGdldFZpc3VhbE9mZnNldHMoZWxlbWVudCkge1xuICBjb25zdCB3aW4gPSBnZXRXaW5kb3cyKGVsZW1lbnQpO1xuICBpZiAoIWlzV2ViS2l0KCkgfHwgIXdpbi52aXN1YWxWaWV3cG9ydCkge1xuICAgIHJldHVybiBub09mZnNldHM7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB4OiB3aW4udmlzdWFsVmlld3BvcnQub2Zmc2V0TGVmdCxcbiAgICB5OiB3aW4udmlzdWFsVmlld3BvcnQub2Zmc2V0VG9wXG4gIH07XG59XG5mdW5jdGlvbiBzaG91bGRBZGRWaXN1YWxPZmZzZXRzKGVsZW1lbnQsIGlzRml4ZWQsIGZsb2F0aW5nT2Zmc2V0UGFyZW50KSB7XG4gIGlmIChpc0ZpeGVkID09PSB2b2lkIDApIHtcbiAgICBpc0ZpeGVkID0gZmFsc2U7XG4gIH1cbiAgaWYgKCFmbG9hdGluZ09mZnNldFBhcmVudCB8fCBpc0ZpeGVkICYmIGZsb2F0aW5nT2Zmc2V0UGFyZW50ICE9PSBnZXRXaW5kb3cyKGVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBpc0ZpeGVkO1xufVxuZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIGluY2x1ZGVTY2FsZSwgaXNGaXhlZFN0cmF0ZWd5LCBvZmZzZXRQYXJlbnQpIHtcbiAgaWYgKGluY2x1ZGVTY2FsZSA9PT0gdm9pZCAwKSB7XG4gICAgaW5jbHVkZVNjYWxlID0gZmFsc2U7XG4gIH1cbiAgaWYgKGlzRml4ZWRTdHJhdGVneSA9PT0gdm9pZCAwKSB7XG4gICAgaXNGaXhlZFN0cmF0ZWd5ID0gZmFsc2U7XG4gIH1cbiAgY29uc3QgY2xpZW50UmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IGRvbUVsZW1lbnQgPSB1bndyYXBFbGVtZW50KGVsZW1lbnQpO1xuICBsZXQgc2NhbGUgPSBjcmVhdGVDb29yZHMoMSk7XG4gIGlmIChpbmNsdWRlU2NhbGUpIHtcbiAgICBpZiAob2Zmc2V0UGFyZW50KSB7XG4gICAgICBpZiAoaXNFbGVtZW50KG9mZnNldFBhcmVudCkpIHtcbiAgICAgICAgc2NhbGUgPSBnZXRTY2FsZShvZmZzZXRQYXJlbnQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzY2FsZSA9IGdldFNjYWxlKGVsZW1lbnQpO1xuICAgIH1cbiAgfVxuICBjb25zdCB2aXN1YWxPZmZzZXRzID0gc2hvdWxkQWRkVmlzdWFsT2Zmc2V0cyhkb21FbGVtZW50LCBpc0ZpeGVkU3RyYXRlZ3ksIG9mZnNldFBhcmVudCkgPyBnZXRWaXN1YWxPZmZzZXRzKGRvbUVsZW1lbnQpIDogY3JlYXRlQ29vcmRzKDApO1xuICBsZXQgeCA9IChjbGllbnRSZWN0LmxlZnQgKyB2aXN1YWxPZmZzZXRzLngpIC8gc2NhbGUueDtcbiAgbGV0IHkgPSAoY2xpZW50UmVjdC50b3AgKyB2aXN1YWxPZmZzZXRzLnkpIC8gc2NhbGUueTtcbiAgbGV0IHdpZHRoID0gY2xpZW50UmVjdC53aWR0aCAvIHNjYWxlLng7XG4gIGxldCBoZWlnaHQgPSBjbGllbnRSZWN0LmhlaWdodCAvIHNjYWxlLnk7XG4gIGlmIChkb21FbGVtZW50KSB7XG4gICAgY29uc3Qgd2luID0gZ2V0V2luZG93Mihkb21FbGVtZW50KTtcbiAgICBjb25zdCBvZmZzZXRXaW4gPSBvZmZzZXRQYXJlbnQgJiYgaXNFbGVtZW50KG9mZnNldFBhcmVudCkgPyBnZXRXaW5kb3cyKG9mZnNldFBhcmVudCkgOiBvZmZzZXRQYXJlbnQ7XG4gICAgbGV0IGN1cnJlbnRJRnJhbWUgPSB3aW4uZnJhbWVFbGVtZW50O1xuICAgIHdoaWxlIChjdXJyZW50SUZyYW1lICYmIG9mZnNldFBhcmVudCAmJiBvZmZzZXRXaW4gIT09IHdpbikge1xuICAgICAgY29uc3QgaWZyYW1lU2NhbGUgPSBnZXRTY2FsZShjdXJyZW50SUZyYW1lKTtcbiAgICAgIGNvbnN0IGlmcmFtZVJlY3QgPSBjdXJyZW50SUZyYW1lLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgY29uc3QgY3NzID0gZ2V0Q29tcHV0ZWRTdHlsZTIoY3VycmVudElGcmFtZSk7XG4gICAgICBjb25zdCBsZWZ0ID0gaWZyYW1lUmVjdC5sZWZ0ICsgKGN1cnJlbnRJRnJhbWUuY2xpZW50TGVmdCArIHBhcnNlRmxvYXQoY3NzLnBhZGRpbmdMZWZ0KSkgKiBpZnJhbWVTY2FsZS54O1xuICAgICAgY29uc3QgdG9wID0gaWZyYW1lUmVjdC50b3AgKyAoY3VycmVudElGcmFtZS5jbGllbnRUb3AgKyBwYXJzZUZsb2F0KGNzcy5wYWRkaW5nVG9wKSkgKiBpZnJhbWVTY2FsZS55O1xuICAgICAgeCAqPSBpZnJhbWVTY2FsZS54O1xuICAgICAgeSAqPSBpZnJhbWVTY2FsZS55O1xuICAgICAgd2lkdGggKj0gaWZyYW1lU2NhbGUueDtcbiAgICAgIGhlaWdodCAqPSBpZnJhbWVTY2FsZS55O1xuICAgICAgeCArPSBsZWZ0O1xuICAgICAgeSArPSB0b3A7XG4gICAgICBjdXJyZW50SUZyYW1lID0gZ2V0V2luZG93MihjdXJyZW50SUZyYW1lKS5mcmFtZUVsZW1lbnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZWN0VG9DbGllbnRSZWN0KHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgeCxcbiAgICB5XG4gIH0pO1xufVxuZnVuY3Rpb24gY29udmVydE9mZnNldFBhcmVudFJlbGF0aXZlUmVjdFRvVmlld3BvcnRSZWxhdGl2ZVJlY3QoX3JlZikge1xuICBsZXQge1xuICAgIHJlY3QsXG4gICAgb2Zmc2V0UGFyZW50LFxuICAgIHN0cmF0ZWd5XG4gIH0gPSBfcmVmO1xuICBjb25zdCBpc09mZnNldFBhcmVudEFuRWxlbWVudCA9IGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcbiAgY29uc3QgZG9jdW1lbnRFbGVtZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KG9mZnNldFBhcmVudCk7XG4gIGlmIChvZmZzZXRQYXJlbnQgPT09IGRvY3VtZW50RWxlbWVudCkge1xuICAgIHJldHVybiByZWN0O1xuICB9XG4gIGxldCBzY3JvbGwgPSB7XG4gICAgc2Nyb2xsTGVmdDogMCxcbiAgICBzY3JvbGxUb3A6IDBcbiAgfTtcbiAgbGV0IHNjYWxlID0gY3JlYXRlQ29vcmRzKDEpO1xuICBjb25zdCBvZmZzZXRzID0gY3JlYXRlQ29vcmRzKDApO1xuICBpZiAoaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgfHwgIWlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ICYmIHN0cmF0ZWd5ICE9PSBcImZpeGVkXCIpIHtcbiAgICBpZiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSAhPT0gXCJib2R5XCIgfHwgaXNPdmVyZmxvd0VsZW1lbnQoZG9jdW1lbnRFbGVtZW50KSkge1xuICAgICAgc2Nyb2xsID0gZ2V0Tm9kZVNjcm9sbChvZmZzZXRQYXJlbnQpO1xuICAgIH1cbiAgICBpZiAoaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICBjb25zdCBvZmZzZXRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCk7XG4gICAgICBzY2FsZSA9IGdldFNjYWxlKG9mZnNldFBhcmVudCk7XG4gICAgICBvZmZzZXRzLnggPSBvZmZzZXRSZWN0LnggKyBvZmZzZXRQYXJlbnQuY2xpZW50TGVmdDtcbiAgICAgIG9mZnNldHMueSA9IG9mZnNldFJlY3QueSArIG9mZnNldFBhcmVudC5jbGllbnRUb3A7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHJlY3Qud2lkdGggKiBzY2FsZS54LFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHQgKiBzY2FsZS55LFxuICAgIHg6IHJlY3QueCAqIHNjYWxlLnggLSBzY3JvbGwuc2Nyb2xsTGVmdCAqIHNjYWxlLnggKyBvZmZzZXRzLngsXG4gICAgeTogcmVjdC55ICogc2NhbGUueSAtIHNjcm9sbC5zY3JvbGxUb3AgKiBzY2FsZS55ICsgb2Zmc2V0cy55XG4gIH07XG59XG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0cyhlbGVtZW50KSB7XG4gIHJldHVybiBBcnJheS5mcm9tKGVsZW1lbnQuZ2V0Q2xpZW50UmVjdHMoKSk7XG59XG5mdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdldEJvdW5kaW5nQ2xpZW50UmVjdChnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkpLmxlZnQgKyBnZXROb2RlU2Nyb2xsKGVsZW1lbnQpLnNjcm9sbExlZnQ7XG59XG5mdW5jdGlvbiBnZXREb2N1bWVudFJlY3QoZWxlbWVudCkge1xuICBjb25zdCBodG1sID0gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpO1xuICBjb25zdCBzY3JvbGwgPSBnZXROb2RlU2Nyb2xsKGVsZW1lbnQpO1xuICBjb25zdCBib2R5ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHk7XG4gIGNvbnN0IHdpZHRoID0gbWF4KGh0bWwuc2Nyb2xsV2lkdGgsIGh0bWwuY2xpZW50V2lkdGgsIGJvZHkuc2Nyb2xsV2lkdGgsIGJvZHkuY2xpZW50V2lkdGgpO1xuICBjb25zdCBoZWlnaHQgPSBtYXgoaHRtbC5zY3JvbGxIZWlnaHQsIGh0bWwuY2xpZW50SGVpZ2h0LCBib2R5LnNjcm9sbEhlaWdodCwgYm9keS5jbGllbnRIZWlnaHQpO1xuICBsZXQgeCA9IC1zY3JvbGwuc2Nyb2xsTGVmdCArIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCk7XG4gIGNvbnN0IHkgPSAtc2Nyb2xsLnNjcm9sbFRvcDtcbiAgaWYgKGdldENvbXB1dGVkU3R5bGUyKGJvZHkpLmRpcmVjdGlvbiA9PT0gXCJydGxcIikge1xuICAgIHggKz0gbWF4KGh0bWwuY2xpZW50V2lkdGgsIGJvZHkuY2xpZW50V2lkdGgpIC0gd2lkdGg7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgeCxcbiAgICB5XG4gIH07XG59XG5mdW5jdGlvbiBnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCwgc3RyYXRlZ3kpIHtcbiAgY29uc3Qgd2luID0gZ2V0V2luZG93MihlbGVtZW50KTtcbiAgY29uc3QgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgY29uc3QgdmlzdWFsVmlld3BvcnQgPSB3aW4udmlzdWFsVmlld3BvcnQ7XG4gIGxldCB3aWR0aCA9IGh0bWwuY2xpZW50V2lkdGg7XG4gIGxldCBoZWlnaHQgPSBodG1sLmNsaWVudEhlaWdodDtcbiAgbGV0IHggPSAwO1xuICBsZXQgeSA9IDA7XG4gIGlmICh2aXN1YWxWaWV3cG9ydCkge1xuICAgIHdpZHRoID0gdmlzdWFsVmlld3BvcnQud2lkdGg7XG4gICAgaGVpZ2h0ID0gdmlzdWFsVmlld3BvcnQuaGVpZ2h0O1xuICAgIGNvbnN0IHZpc3VhbFZpZXdwb3J0QmFzZWQgPSBpc1dlYktpdCgpO1xuICAgIGlmICghdmlzdWFsVmlld3BvcnRCYXNlZCB8fCB2aXN1YWxWaWV3cG9ydEJhc2VkICYmIHN0cmF0ZWd5ID09PSBcImZpeGVkXCIpIHtcbiAgICAgIHggPSB2aXN1YWxWaWV3cG9ydC5vZmZzZXRMZWZ0O1xuICAgICAgeSA9IHZpc3VhbFZpZXdwb3J0Lm9mZnNldFRvcDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgeCxcbiAgICB5XG4gIH07XG59XG5mdW5jdGlvbiBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50LCBzdHJhdGVneSkge1xuICBjb25zdCBjbGllbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIHRydWUsIHN0cmF0ZWd5ID09PSBcImZpeGVkXCIpO1xuICBjb25zdCB0b3AgPSBjbGllbnRSZWN0LnRvcCArIGVsZW1lbnQuY2xpZW50VG9wO1xuICBjb25zdCBsZWZ0ID0gY2xpZW50UmVjdC5sZWZ0ICsgZWxlbWVudC5jbGllbnRMZWZ0O1xuICBjb25zdCBzY2FsZSA9IGlzSFRNTEVsZW1lbnQoZWxlbWVudCkgPyBnZXRTY2FsZShlbGVtZW50KSA6IGNyZWF0ZUNvb3JkcygxKTtcbiAgY29uc3Qgd2lkdGggPSBlbGVtZW50LmNsaWVudFdpZHRoICogc2NhbGUueDtcbiAgY29uc3QgaGVpZ2h0ID0gZWxlbWVudC5jbGllbnRIZWlnaHQgKiBzY2FsZS55O1xuICBjb25zdCB4ID0gbGVmdCAqIHNjYWxlLng7XG4gIGNvbnN0IHkgPSB0b3AgKiBzY2FsZS55O1xuICByZXR1cm4ge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICB4LFxuICAgIHlcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldENsaWVudFJlY3RGcm9tQ2xpcHBpbmdBbmNlc3RvcihlbGVtZW50LCBjbGlwcGluZ0FuY2VzdG9yLCBzdHJhdGVneSkge1xuICBsZXQgcmVjdDtcbiAgaWYgKGNsaXBwaW5nQW5jZXN0b3IgPT09IFwidmlld3BvcnRcIikge1xuICAgIHJlY3QgPSBnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCwgc3RyYXRlZ3kpO1xuICB9IGVsc2UgaWYgKGNsaXBwaW5nQW5jZXN0b3IgPT09IFwiZG9jdW1lbnRcIikge1xuICAgIHJlY3QgPSBnZXREb2N1bWVudFJlY3QoZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpKTtcbiAgfSBlbHNlIGlmIChpc0VsZW1lbnQoY2xpcHBpbmdBbmNlc3RvcikpIHtcbiAgICByZWN0ID0gZ2V0SW5uZXJCb3VuZGluZ0NsaWVudFJlY3QoY2xpcHBpbmdBbmNlc3Rvciwgc3RyYXRlZ3kpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHZpc3VhbE9mZnNldHMgPSBnZXRWaXN1YWxPZmZzZXRzKGVsZW1lbnQpO1xuICAgIHJlY3QgPSB7XG4gICAgICAuLi5jbGlwcGluZ0FuY2VzdG9yLFxuICAgICAgeDogY2xpcHBpbmdBbmNlc3Rvci54IC0gdmlzdWFsT2Zmc2V0cy54LFxuICAgICAgeTogY2xpcHBpbmdBbmNlc3Rvci55IC0gdmlzdWFsT2Zmc2V0cy55XG4gICAgfTtcbiAgfVxuICByZXR1cm4gcmVjdFRvQ2xpZW50UmVjdChyZWN0KTtcbn1cbmZ1bmN0aW9uIGhhc0ZpeGVkUG9zaXRpb25BbmNlc3RvcihlbGVtZW50LCBzdG9wTm9kZSkge1xuICBjb25zdCBwYXJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShlbGVtZW50KTtcbiAgaWYgKHBhcmVudE5vZGUgPT09IHN0b3BOb2RlIHx8ICFpc0VsZW1lbnQocGFyZW50Tm9kZSkgfHwgaXNMYXN0VHJhdmVyc2FibGVOb2RlKHBhcmVudE5vZGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBnZXRDb21wdXRlZFN0eWxlMihwYXJlbnROb2RlKS5wb3NpdGlvbiA9PT0gXCJmaXhlZFwiIHx8IGhhc0ZpeGVkUG9zaXRpb25BbmNlc3RvcihwYXJlbnROb2RlLCBzdG9wTm9kZSk7XG59XG5mdW5jdGlvbiBnZXRDbGlwcGluZ0VsZW1lbnRBbmNlc3RvcnMoZWxlbWVudCwgY2FjaGUpIHtcbiAgY29uc3QgY2FjaGVkUmVzdWx0ID0gY2FjaGUuZ2V0KGVsZW1lbnQpO1xuICBpZiAoY2FjaGVkUmVzdWx0KSB7XG4gICAgcmV0dXJuIGNhY2hlZFJlc3VsdDtcbiAgfVxuICBsZXQgcmVzdWx0ID0gZ2V0T3ZlcmZsb3dBbmNlc3RvcnMoZWxlbWVudCwgW10sIGZhbHNlKS5maWx0ZXIoKGVsKSA9PiBpc0VsZW1lbnQoZWwpICYmIGdldE5vZGVOYW1lKGVsKSAhPT0gXCJib2R5XCIpO1xuICBsZXQgY3VycmVudENvbnRhaW5pbmdCbG9ja0NvbXB1dGVkU3R5bGUgPSBudWxsO1xuICBjb25zdCBlbGVtZW50SXNGaXhlZCA9IGdldENvbXB1dGVkU3R5bGUyKGVsZW1lbnQpLnBvc2l0aW9uID09PSBcImZpeGVkXCI7XG4gIGxldCBjdXJyZW50Tm9kZSA9IGVsZW1lbnRJc0ZpeGVkID8gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSA6IGVsZW1lbnQ7XG4gIHdoaWxlIChpc0VsZW1lbnQoY3VycmVudE5vZGUpICYmICFpc0xhc3RUcmF2ZXJzYWJsZU5vZGUoY3VycmVudE5vZGUpKSB7XG4gICAgY29uc3QgY29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUyKGN1cnJlbnROb2RlKTtcbiAgICBjb25zdCBjdXJyZW50Tm9kZUlzQ29udGFpbmluZyA9IGlzQ29udGFpbmluZ0Jsb2NrKGN1cnJlbnROb2RlKTtcbiAgICBpZiAoIWN1cnJlbnROb2RlSXNDb250YWluaW5nICYmIGNvbXB1dGVkU3R5bGUucG9zaXRpb24gPT09IFwiZml4ZWRcIikge1xuICAgICAgY3VycmVudENvbnRhaW5pbmdCbG9ja0NvbXB1dGVkU3R5bGUgPSBudWxsO1xuICAgIH1cbiAgICBjb25zdCBzaG91bGREcm9wQ3VycmVudE5vZGUgPSBlbGVtZW50SXNGaXhlZCA/ICFjdXJyZW50Tm9kZUlzQ29udGFpbmluZyAmJiAhY3VycmVudENvbnRhaW5pbmdCbG9ja0NvbXB1dGVkU3R5bGUgOiAhY3VycmVudE5vZGVJc0NvbnRhaW5pbmcgJiYgY29tcHV0ZWRTdHlsZS5wb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiAmJiAhIWN1cnJlbnRDb250YWluaW5nQmxvY2tDb21wdXRlZFN0eWxlICYmIFtcImFic29sdXRlXCIsIFwiZml4ZWRcIl0uaW5jbHVkZXMoY3VycmVudENvbnRhaW5pbmdCbG9ja0NvbXB1dGVkU3R5bGUucG9zaXRpb24pIHx8IGlzT3ZlcmZsb3dFbGVtZW50KGN1cnJlbnROb2RlKSAmJiAhY3VycmVudE5vZGVJc0NvbnRhaW5pbmcgJiYgaGFzRml4ZWRQb3NpdGlvbkFuY2VzdG9yKGVsZW1lbnQsIGN1cnJlbnROb2RlKTtcbiAgICBpZiAoc2hvdWxkRHJvcEN1cnJlbnROb2RlKSB7XG4gICAgICByZXN1bHQgPSByZXN1bHQuZmlsdGVyKChhbmNlc3RvcikgPT4gYW5jZXN0b3IgIT09IGN1cnJlbnROb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudENvbnRhaW5pbmdCbG9ja0NvbXB1dGVkU3R5bGUgPSBjb21wdXRlZFN0eWxlO1xuICAgIH1cbiAgICBjdXJyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoY3VycmVudE5vZGUpO1xuICB9XG4gIGNhY2hlLnNldChlbGVtZW50LCByZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZ2V0Q2xpcHBpbmdSZWN0KF9yZWYpIHtcbiAgbGV0IHtcbiAgICBlbGVtZW50LFxuICAgIGJvdW5kYXJ5LFxuICAgIHJvb3RCb3VuZGFyeSxcbiAgICBzdHJhdGVneVxuICB9ID0gX3JlZjtcbiAgY29uc3QgZWxlbWVudENsaXBwaW5nQW5jZXN0b3JzID0gYm91bmRhcnkgPT09IFwiY2xpcHBpbmdBbmNlc3RvcnNcIiA/IGdldENsaXBwaW5nRWxlbWVudEFuY2VzdG9ycyhlbGVtZW50LCB0aGlzLl9jKSA6IFtdLmNvbmNhdChib3VuZGFyeSk7XG4gIGNvbnN0IGNsaXBwaW5nQW5jZXN0b3JzID0gWy4uLmVsZW1lbnRDbGlwcGluZ0FuY2VzdG9ycywgcm9vdEJvdW5kYXJ5XTtcbiAgY29uc3QgZmlyc3RDbGlwcGluZ0FuY2VzdG9yID0gY2xpcHBpbmdBbmNlc3RvcnNbMF07XG4gIGNvbnN0IGNsaXBwaW5nUmVjdCA9IGNsaXBwaW5nQW5jZXN0b3JzLnJlZHVjZSgoYWNjUmVjdCwgY2xpcHBpbmdBbmNlc3RvcikgPT4ge1xuICAgIGNvbnN0IHJlY3QgPSBnZXRDbGllbnRSZWN0RnJvbUNsaXBwaW5nQW5jZXN0b3IoZWxlbWVudCwgY2xpcHBpbmdBbmNlc3Rvciwgc3RyYXRlZ3kpO1xuICAgIGFjY1JlY3QudG9wID0gbWF4KHJlY3QudG9wLCBhY2NSZWN0LnRvcCk7XG4gICAgYWNjUmVjdC5yaWdodCA9IG1pbihyZWN0LnJpZ2h0LCBhY2NSZWN0LnJpZ2h0KTtcbiAgICBhY2NSZWN0LmJvdHRvbSA9IG1pbihyZWN0LmJvdHRvbSwgYWNjUmVjdC5ib3R0b20pO1xuICAgIGFjY1JlY3QubGVmdCA9IG1heChyZWN0LmxlZnQsIGFjY1JlY3QubGVmdCk7XG4gICAgcmV0dXJuIGFjY1JlY3Q7XG4gIH0sIGdldENsaWVudFJlY3RGcm9tQ2xpcHBpbmdBbmNlc3RvcihlbGVtZW50LCBmaXJzdENsaXBwaW5nQW5jZXN0b3IsIHN0cmF0ZWd5KSk7XG4gIHJldHVybiB7XG4gICAgd2lkdGg6IGNsaXBwaW5nUmVjdC5yaWdodCAtIGNsaXBwaW5nUmVjdC5sZWZ0LFxuICAgIGhlaWdodDogY2xpcHBpbmdSZWN0LmJvdHRvbSAtIGNsaXBwaW5nUmVjdC50b3AsXG4gICAgeDogY2xpcHBpbmdSZWN0LmxlZnQsXG4gICAgeTogY2xpcHBpbmdSZWN0LnRvcFxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGltZW5zaW9ucyhlbGVtZW50KSB7XG4gIHJldHVybiBnZXRDc3NEaW1lbnNpb25zKGVsZW1lbnQpO1xufVxuZnVuY3Rpb24gZ2V0UmVjdFJlbGF0aXZlVG9PZmZzZXRQYXJlbnQoZWxlbWVudCwgb2Zmc2V0UGFyZW50LCBzdHJhdGVneSkge1xuICBjb25zdCBpc09mZnNldFBhcmVudEFuRWxlbWVudCA9IGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcbiAgY29uc3QgZG9jdW1lbnRFbGVtZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KG9mZnNldFBhcmVudCk7XG4gIGNvbnN0IGlzRml4ZWQgPSBzdHJhdGVneSA9PT0gXCJmaXhlZFwiO1xuICBjb25zdCByZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIHRydWUsIGlzRml4ZWQsIG9mZnNldFBhcmVudCk7XG4gIGxldCBzY3JvbGwgPSB7XG4gICAgc2Nyb2xsTGVmdDogMCxcbiAgICBzY3JvbGxUb3A6IDBcbiAgfTtcbiAgY29uc3Qgb2Zmc2V0cyA9IGNyZWF0ZUNvb3JkcygwKTtcbiAgaWYgKGlzT2Zmc2V0UGFyZW50QW5FbGVtZW50IHx8ICFpc09mZnNldFBhcmVudEFuRWxlbWVudCAmJiAhaXNGaXhlZCkge1xuICAgIGlmIChnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpICE9PSBcImJvZHlcIiB8fCBpc092ZXJmbG93RWxlbWVudChkb2N1bWVudEVsZW1lbnQpKSB7XG4gICAgICBzY3JvbGwgPSBnZXROb2RlU2Nyb2xsKG9mZnNldFBhcmVudCk7XG4gICAgfVxuICAgIGlmIChpc09mZnNldFBhcmVudEFuRWxlbWVudCkge1xuICAgICAgY29uc3Qgb2Zmc2V0UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQsIHRydWUsIGlzRml4ZWQsIG9mZnNldFBhcmVudCk7XG4gICAgICBvZmZzZXRzLnggPSBvZmZzZXRSZWN0LnggKyBvZmZzZXRQYXJlbnQuY2xpZW50TGVmdDtcbiAgICAgIG9mZnNldHMueSA9IG9mZnNldFJlY3QueSArIG9mZnNldFBhcmVudC5jbGllbnRUb3A7XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIG9mZnNldHMueCA9IGdldFdpbmRvd1Njcm9sbEJhclgoZG9jdW1lbnRFbGVtZW50KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB4OiByZWN0LmxlZnQgKyBzY3JvbGwuc2Nyb2xsTGVmdCAtIG9mZnNldHMueCxcbiAgICB5OiByZWN0LnRvcCArIHNjcm9sbC5zY3JvbGxUb3AgLSBvZmZzZXRzLnksXG4gICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodFxuICB9O1xufVxuZnVuY3Rpb24gZ2V0VHJ1ZU9mZnNldFBhcmVudChlbGVtZW50LCBwb2x5ZmlsbCkge1xuICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgZ2V0Q29tcHV0ZWRTdHlsZTIoZWxlbWVudCkucG9zaXRpb24gPT09IFwiZml4ZWRcIikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChwb2x5ZmlsbCkge1xuICAgIHJldHVybiBwb2x5ZmlsbChlbGVtZW50KTtcbiAgfVxuICByZXR1cm4gZWxlbWVudC5vZmZzZXRQYXJlbnQ7XG59XG5mdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCwgcG9seWZpbGwpIHtcbiAgY29uc3Qgd2luZG93MiA9IGdldFdpbmRvdzIoZWxlbWVudCk7XG4gIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSkge1xuICAgIHJldHVybiB3aW5kb3cyO1xuICB9XG4gIGxldCBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQsIHBvbHlmaWxsKTtcbiAgd2hpbGUgKG9mZnNldFBhcmVudCAmJiBpc1RhYmxlRWxlbWVudChvZmZzZXRQYXJlbnQpICYmIGdldENvbXB1dGVkU3R5bGUyKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09IFwic3RhdGljXCIpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCwgcG9seWZpbGwpO1xuICB9XG4gIGlmIChvZmZzZXRQYXJlbnQgJiYgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09IFwiaHRtbFwiIHx8IGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09IFwiYm9keVwiICYmIGdldENvbXB1dGVkU3R5bGUyKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09IFwic3RhdGljXCIgJiYgIWlzQ29udGFpbmluZ0Jsb2NrKG9mZnNldFBhcmVudCkpKSB7XG4gICAgcmV0dXJuIHdpbmRvdzI7XG4gIH1cbiAgcmV0dXJuIG9mZnNldFBhcmVudCB8fCBnZXRDb250YWluaW5nQmxvY2soZWxlbWVudCkgfHwgd2luZG93Mjtcbn1cbnZhciBnZXRFbGVtZW50UmVjdHMgPSBhc3luYyBmdW5jdGlvbihfcmVmKSB7XG4gIGxldCB7XG4gICAgcmVmZXJlbmNlLFxuICAgIGZsb2F0aW5nLFxuICAgIHN0cmF0ZWd5XG4gIH0gPSBfcmVmO1xuICBjb25zdCBnZXRPZmZzZXRQYXJlbnRGbiA9IHRoaXMuZ2V0T2Zmc2V0UGFyZW50IHx8IGdldE9mZnNldFBhcmVudDtcbiAgY29uc3QgZ2V0RGltZW5zaW9uc0ZuID0gdGhpcy5nZXREaW1lbnNpb25zO1xuICByZXR1cm4ge1xuICAgIHJlZmVyZW5jZTogZ2V0UmVjdFJlbGF0aXZlVG9PZmZzZXRQYXJlbnQocmVmZXJlbmNlLCBhd2FpdCBnZXRPZmZzZXRQYXJlbnRGbihmbG9hdGluZyksIHN0cmF0ZWd5KSxcbiAgICBmbG9hdGluZzoge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDAsXG4gICAgICAuLi5hd2FpdCBnZXREaW1lbnNpb25zRm4oZmxvYXRpbmcpXG4gICAgfVxuICB9O1xufTtcbmZ1bmN0aW9uIGlzUlRMKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUyKGVsZW1lbnQpLmRpcmVjdGlvbiA9PT0gXCJydGxcIjtcbn1cbnZhciBwbGF0Zm9ybSA9IHtcbiAgY29udmVydE9mZnNldFBhcmVudFJlbGF0aXZlUmVjdFRvVmlld3BvcnRSZWxhdGl2ZVJlY3QsXG4gIGdldERvY3VtZW50RWxlbWVudCxcbiAgZ2V0Q2xpcHBpbmdSZWN0LFxuICBnZXRPZmZzZXRQYXJlbnQsXG4gIGdldEVsZW1lbnRSZWN0cyxcbiAgZ2V0Q2xpZW50UmVjdHMsXG4gIGdldERpbWVuc2lvbnMsXG4gIGdldFNjYWxlLFxuICBpc0VsZW1lbnQsXG4gIGlzUlRMXG59O1xuZnVuY3Rpb24gb2JzZXJ2ZU1vdmUoZWxlbWVudCwgb25Nb3ZlKSB7XG4gIGxldCBpbyA9IG51bGw7XG4gIGxldCB0aW1lb3V0SWQ7XG4gIGNvbnN0IHJvb3QgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgaW8gJiYgaW8uZGlzY29ubmVjdCgpO1xuICAgIGlvID0gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiByZWZyZXNoKHNraXAsIHRocmVzaG9sZCkge1xuICAgIGlmIChza2lwID09PSB2b2lkIDApIHtcbiAgICAgIHNraXAgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRocmVzaG9sZCA9PT0gdm9pZCAwKSB7XG4gICAgICB0aHJlc2hvbGQgPSAxO1xuICAgIH1cbiAgICBjbGVhbnVwKCk7XG4gICAgY29uc3Qge1xuICAgICAgbGVmdCxcbiAgICAgIHRvcCxcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0XG4gICAgfSA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgaWYgKCFza2lwKSB7XG4gICAgICBvbk1vdmUoKTtcbiAgICB9XG4gICAgaWYgKCF3aWR0aCB8fCAhaGVpZ2h0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGluc2V0VG9wID0gZmxvb3IodG9wKTtcbiAgICBjb25zdCBpbnNldFJpZ2h0ID0gZmxvb3Iocm9vdC5jbGllbnRXaWR0aCAtIChsZWZ0ICsgd2lkdGgpKTtcbiAgICBjb25zdCBpbnNldEJvdHRvbSA9IGZsb29yKHJvb3QuY2xpZW50SGVpZ2h0IC0gKHRvcCArIGhlaWdodCkpO1xuICAgIGNvbnN0IGluc2V0TGVmdCA9IGZsb29yKGxlZnQpO1xuICAgIGNvbnN0IHJvb3RNYXJnaW4gPSAtaW5zZXRUb3AgKyBcInB4IFwiICsgLWluc2V0UmlnaHQgKyBcInB4IFwiICsgLWluc2V0Qm90dG9tICsgXCJweCBcIiArIC1pbnNldExlZnQgKyBcInB4XCI7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIHJvb3RNYXJnaW4sXG4gICAgICB0aHJlc2hvbGQ6IG1heCgwLCBtaW4oMSwgdGhyZXNob2xkKSkgfHwgMVxuICAgIH07XG4gICAgbGV0IGlzRmlyc3RVcGRhdGUgPSB0cnVlO1xuICAgIGZ1bmN0aW9uIGhhbmRsZU9ic2VydmUoZW50cmllczIpIHtcbiAgICAgIGNvbnN0IHJhdGlvID0gZW50cmllczJbMF0uaW50ZXJzZWN0aW9uUmF0aW87XG4gICAgICBpZiAocmF0aW8gIT09IHRocmVzaG9sZCkge1xuICAgICAgICBpZiAoIWlzRmlyc3RVcGRhdGUpIHtcbiAgICAgICAgICByZXR1cm4gcmVmcmVzaCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcmF0aW8pIHtcbiAgICAgICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHJlZnJlc2goZmFsc2UsIDFlLTcpO1xuICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVmcmVzaChmYWxzZSwgcmF0aW8pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpc0ZpcnN0VXBkYXRlID0gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBpbyA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihoYW5kbGVPYnNlcnZlLCB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIC8vIEhhbmRsZSA8aWZyYW1lPnNcbiAgICAgICAgcm9vdDogcm9vdC5vd25lckRvY3VtZW50XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlMikge1xuICAgICAgaW8gPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoaGFuZGxlT2JzZXJ2ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGlvLm9ic2VydmUoZWxlbWVudCk7XG4gIH1cbiAgcmVmcmVzaCh0cnVlKTtcbiAgcmV0dXJuIGNsZWFudXA7XG59XG5mdW5jdGlvbiBhdXRvVXBkYXRlKHJlZmVyZW5jZSwgZmxvYXRpbmcsIHVwZGF0ZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGNvbnN0IHtcbiAgICBhbmNlc3RvclNjcm9sbCA9IHRydWUsXG4gICAgYW5jZXN0b3JSZXNpemUgPSB0cnVlLFxuICAgIGVsZW1lbnRSZXNpemUgPSB0eXBlb2YgUmVzaXplT2JzZXJ2ZXIgPT09IFwiZnVuY3Rpb25cIixcbiAgICBsYXlvdXRTaGlmdCA9IHR5cGVvZiBJbnRlcnNlY3Rpb25PYnNlcnZlciA9PT0gXCJmdW5jdGlvblwiLFxuICAgIGFuaW1hdGlvbkZyYW1lID0gZmFsc2VcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHJlZmVyZW5jZUVsID0gdW53cmFwRWxlbWVudChyZWZlcmVuY2UpO1xuICBjb25zdCBhbmNlc3RvcnMgPSBhbmNlc3RvclNjcm9sbCB8fCBhbmNlc3RvclJlc2l6ZSA/IFsuLi5yZWZlcmVuY2VFbCA/IGdldE92ZXJmbG93QW5jZXN0b3JzKHJlZmVyZW5jZUVsKSA6IFtdLCAuLi5nZXRPdmVyZmxvd0FuY2VzdG9ycyhmbG9hdGluZyldIDogW107XG4gIGFuY2VzdG9ycy5mb3JFYWNoKChhbmNlc3RvcikgPT4ge1xuICAgIGFuY2VzdG9yU2Nyb2xsICYmIGFuY2VzdG9yLmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgdXBkYXRlLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG4gICAgYW5jZXN0b3JSZXNpemUgJiYgYW5jZXN0b3IuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB1cGRhdGUpO1xuICB9KTtcbiAgY29uc3QgY2xlYW51cElvID0gcmVmZXJlbmNlRWwgJiYgbGF5b3V0U2hpZnQgPyBvYnNlcnZlTW92ZShyZWZlcmVuY2VFbCwgdXBkYXRlKSA6IG51bGw7XG4gIGxldCByZW9ic2VydmVGcmFtZSA9IC0xO1xuICBsZXQgcmVzaXplT2JzZXJ2ZXIgPSBudWxsO1xuICBpZiAoZWxlbWVudFJlc2l6ZSkge1xuICAgIHJlc2l6ZU9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKChfcmVmKSA9PiB7XG4gICAgICBsZXQgW2ZpcnN0RW50cnldID0gX3JlZjtcbiAgICAgIGlmIChmaXJzdEVudHJ5ICYmIGZpcnN0RW50cnkudGFyZ2V0ID09PSByZWZlcmVuY2VFbCAmJiByZXNpemVPYnNlcnZlcikge1xuICAgICAgICByZXNpemVPYnNlcnZlci51bm9ic2VydmUoZmxvYXRpbmcpO1xuICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShyZW9ic2VydmVGcmFtZSk7XG4gICAgICAgIHJlb2JzZXJ2ZUZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICByZXNpemVPYnNlcnZlciAmJiByZXNpemVPYnNlcnZlci5vYnNlcnZlKGZsb2F0aW5nKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB1cGRhdGUoKTtcbiAgICB9KTtcbiAgICBpZiAocmVmZXJlbmNlRWwgJiYgIWFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICByZXNpemVPYnNlcnZlci5vYnNlcnZlKHJlZmVyZW5jZUVsKTtcbiAgICB9XG4gICAgcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShmbG9hdGluZyk7XG4gIH1cbiAgbGV0IGZyYW1lSWQ7XG4gIGxldCBwcmV2UmVmUmVjdCA9IGFuaW1hdGlvbkZyYW1lID8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHJlZmVyZW5jZSkgOiBudWxsO1xuICBpZiAoYW5pbWF0aW9uRnJhbWUpIHtcbiAgICBmcmFtZUxvb3AoKTtcbiAgfVxuICBmdW5jdGlvbiBmcmFtZUxvb3AoKSB7XG4gICAgY29uc3QgbmV4dFJlZlJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QocmVmZXJlbmNlKTtcbiAgICBpZiAocHJldlJlZlJlY3QgJiYgKG5leHRSZWZSZWN0LnggIT09IHByZXZSZWZSZWN0LnggfHwgbmV4dFJlZlJlY3QueSAhPT0gcHJldlJlZlJlY3QueSB8fCBuZXh0UmVmUmVjdC53aWR0aCAhPT0gcHJldlJlZlJlY3Qud2lkdGggfHwgbmV4dFJlZlJlY3QuaGVpZ2h0ICE9PSBwcmV2UmVmUmVjdC5oZWlnaHQpKSB7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gICAgcHJldlJlZlJlY3QgPSBuZXh0UmVmUmVjdDtcbiAgICBmcmFtZUlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZyYW1lTG9vcCk7XG4gIH1cbiAgdXBkYXRlKCk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgYW5jZXN0b3JzLmZvckVhY2goKGFuY2VzdG9yKSA9PiB7XG4gICAgICBhbmNlc3RvclNjcm9sbCAmJiBhbmNlc3Rvci5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHVwZGF0ZSk7XG4gICAgICBhbmNlc3RvclJlc2l6ZSAmJiBhbmNlc3Rvci5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHVwZGF0ZSk7XG4gICAgfSk7XG4gICAgY2xlYW51cElvICYmIGNsZWFudXBJbygpO1xuICAgIHJlc2l6ZU9ic2VydmVyICYmIHJlc2l6ZU9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICByZXNpemVPYnNlcnZlciA9IG51bGw7XG4gICAgaWYgKGFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShmcmFtZUlkKTtcbiAgICB9XG4gIH07XG59XG52YXIgY29tcHV0ZVBvc2l0aW9uMiA9IChyZWZlcmVuY2UsIGZsb2F0aW5nLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IGNhY2hlID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgY29uc3QgbWVyZ2VkT3B0aW9ucyA9IHtcbiAgICBwbGF0Zm9ybSxcbiAgICAuLi5vcHRpb25zXG4gIH07XG4gIGNvbnN0IHBsYXRmb3JtV2l0aENhY2hlID0ge1xuICAgIC4uLm1lcmdlZE9wdGlvbnMucGxhdGZvcm0sXG4gICAgX2M6IGNhY2hlXG4gIH07XG4gIHJldHVybiBjb21wdXRlUG9zaXRpb24ocmVmZXJlbmNlLCBmbG9hdGluZywge1xuICAgIC4uLm1lcmdlZE9wdGlvbnMsXG4gICAgcGxhdGZvcm06IHBsYXRmb3JtV2l0aENhY2hlXG4gIH0pO1xufTtcblxuLy8gLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Brb2JhbHRlK2NvcmVAMC4xMS4yX3NvbGlkLWpzQDEuOC43L25vZGVfbW9kdWxlcy9Aa29iYWx0ZS9jb3JlL2Rpc3QvZXNtL2luZGV4LmpzXG5jcmVhdGVDb250ZXh0KCk7XG5mdW5jdGlvbiBidWlsZE5vZGVzKHBhcmFtcykge1xuICBsZXQgaW5kZXggPSBwYXJhbXMuc3RhcnRJbmRleCA/PyAwO1xuICBjb25zdCBsZXZlbCA9IHBhcmFtcy5zdGFydExldmVsID8/IDA7XG4gIGNvbnN0IG5vZGVzID0gW107XG4gIGNvbnN0IGdldEtleSA9IChkYXRhKSA9PiB7XG4gICAgaWYgKGRhdGEgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIGNvbnN0IF9nZXRLZXkgPSBwYXJhbXMuZ2V0S2V5ID8/IFwia2V5XCI7XG4gICAgY29uc3QgZGF0YUtleSA9IGlzU3RyaW5nKF9nZXRLZXkpID8gZGF0YVtfZ2V0S2V5XSA6IF9nZXRLZXkoZGF0YSk7XG4gICAgcmV0dXJuIGRhdGFLZXkgIT0gbnVsbCA/IFN0cmluZyhkYXRhS2V5KSA6IFwiXCI7XG4gIH07XG4gIGNvbnN0IGdldFRleHRWYWx1ZSA9IChkYXRhKSA9PiB7XG4gICAgaWYgKGRhdGEgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIGNvbnN0IF9nZXRUZXh0VmFsdWUgPSBwYXJhbXMuZ2V0VGV4dFZhbHVlID8/IFwidGV4dFZhbHVlXCI7XG4gICAgY29uc3QgZGF0YVRleHRWYWx1ZSA9IGlzU3RyaW5nKF9nZXRUZXh0VmFsdWUpID8gZGF0YVtfZ2V0VGV4dFZhbHVlXSA6IF9nZXRUZXh0VmFsdWUoZGF0YSk7XG4gICAgcmV0dXJuIGRhdGFUZXh0VmFsdWUgIT0gbnVsbCA/IFN0cmluZyhkYXRhVGV4dFZhbHVlKSA6IFwiXCI7XG4gIH07XG4gIGNvbnN0IGdldERpc2FibGVkID0gKGRhdGEpID0+IHtcbiAgICBpZiAoZGF0YSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IF9nZXREaXNhYmxlZCA9IHBhcmFtcy5nZXREaXNhYmxlZCA/PyBcImRpc2FibGVkXCI7XG4gICAgcmV0dXJuIChpc1N0cmluZyhfZ2V0RGlzYWJsZWQpID8gZGF0YVtfZ2V0RGlzYWJsZWRdIDogX2dldERpc2FibGVkKGRhdGEpKSA/PyBmYWxzZTtcbiAgfTtcbiAgY29uc3QgZ2V0U2VjdGlvbkNoaWxkcmVuID0gKGRhdGEpID0+IHtcbiAgICBpZiAoZGF0YSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgICBpZiAoaXNTdHJpbmcocGFyYW1zLmdldFNlY3Rpb25DaGlsZHJlbikpIHtcbiAgICAgIHJldHVybiBkYXRhW3BhcmFtcy5nZXRTZWN0aW9uQ2hpbGRyZW5dO1xuICAgIH1cbiAgICByZXR1cm4gcGFyYW1zLmdldFNlY3Rpb25DaGlsZHJlbj8uKGRhdGEpO1xuICB9O1xuICBmb3IgKGNvbnN0IGRhdGEgb2YgcGFyYW1zLmRhdGFTb3VyY2UpIHtcbiAgICBpZiAoaXNTdHJpbmcoZGF0YSkgfHwgaXNOdW1iZXIoZGF0YSkpIHtcbiAgICAgIG5vZGVzLnB1c2goe1xuICAgICAgICB0eXBlOiBcIml0ZW1cIixcbiAgICAgICAgcmF3VmFsdWU6IGRhdGEsXG4gICAgICAgIGtleTogU3RyaW5nKGRhdGEpLFxuICAgICAgICB0ZXh0VmFsdWU6IFN0cmluZyhkYXRhKSxcbiAgICAgICAgZGlzYWJsZWQ6IGdldERpc2FibGVkKGRhdGEpLFxuICAgICAgICBsZXZlbCxcbiAgICAgICAgaW5kZXhcbiAgICAgIH0pO1xuICAgICAgaW5kZXgrKztcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoZ2V0U2VjdGlvbkNoaWxkcmVuKGRhdGEpICE9IG51bGwpIHtcbiAgICAgIG5vZGVzLnB1c2goe1xuICAgICAgICB0eXBlOiBcInNlY3Rpb25cIixcbiAgICAgICAgcmF3VmFsdWU6IGRhdGEsXG4gICAgICAgIGtleTogXCJcIixcbiAgICAgICAgLy8gbm90IGFwcGxpY2FibGUgaGVyZVxuICAgICAgICB0ZXh0VmFsdWU6IFwiXCIsXG4gICAgICAgIC8vIG5vdCBhcHBsaWNhYmxlIGhlcmVcbiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgICAvLyBub3QgYXBwbGljYWJsZSBoZXJlXG4gICAgICAgIGxldmVsLFxuICAgICAgICBpbmRleFxuICAgICAgfSk7XG4gICAgICBpbmRleCsrO1xuICAgICAgY29uc3Qgc2VjdGlvbkNoaWxkcmVuID0gZ2V0U2VjdGlvbkNoaWxkcmVuKGRhdGEpID8/IFtdO1xuICAgICAgaWYgKHNlY3Rpb25DaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkTm9kZXMgPSBidWlsZE5vZGVzKHtcbiAgICAgICAgICBkYXRhU291cmNlOiBzZWN0aW9uQ2hpbGRyZW4sXG4gICAgICAgICAgZ2V0S2V5OiBwYXJhbXMuZ2V0S2V5LFxuICAgICAgICAgIGdldFRleHRWYWx1ZTogcGFyYW1zLmdldFRleHRWYWx1ZSxcbiAgICAgICAgICBnZXREaXNhYmxlZDogcGFyYW1zLmdldERpc2FibGVkLFxuICAgICAgICAgIGdldFNlY3Rpb25DaGlsZHJlbjogcGFyYW1zLmdldFNlY3Rpb25DaGlsZHJlbixcbiAgICAgICAgICBzdGFydEluZGV4OiBpbmRleCxcbiAgICAgICAgICBzdGFydExldmVsOiBsZXZlbCArIDFcbiAgICAgICAgfSk7XG4gICAgICAgIG5vZGVzLnB1c2goLi4uY2hpbGROb2Rlcyk7XG4gICAgICAgIGluZGV4ICs9IGNoaWxkTm9kZXMubGVuZ3RoO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBub2Rlcy5wdXNoKHtcbiAgICAgICAgdHlwZTogXCJpdGVtXCIsXG4gICAgICAgIHJhd1ZhbHVlOiBkYXRhLFxuICAgICAgICBrZXk6IGdldEtleShkYXRhKSxcbiAgICAgICAgdGV4dFZhbHVlOiBnZXRUZXh0VmFsdWUoZGF0YSksXG4gICAgICAgIGRpc2FibGVkOiBnZXREaXNhYmxlZChkYXRhKSxcbiAgICAgICAgbGV2ZWwsXG4gICAgICAgIGluZGV4XG4gICAgICB9KTtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuICB9XG4gIHJldHVybiBub2Rlcztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvbGxlY3Rpb24ocHJvcHMsIGRlcHMgPSBbXSkge1xuICBjb25zdCBpbml0aWFsTm9kZXMgPSBidWlsZE5vZGVzKHtcbiAgICBkYXRhU291cmNlOiBhY2Nlc3MocHJvcHMuZGF0YVNvdXJjZSksXG4gICAgZ2V0S2V5OiBhY2Nlc3MocHJvcHMuZ2V0S2V5KSxcbiAgICBnZXRUZXh0VmFsdWU6IGFjY2Vzcyhwcm9wcy5nZXRUZXh0VmFsdWUpLFxuICAgIGdldERpc2FibGVkOiBhY2Nlc3MocHJvcHMuZ2V0RGlzYWJsZWQpLFxuICAgIGdldFNlY3Rpb25DaGlsZHJlbjogYWNjZXNzKHByb3BzLmdldFNlY3Rpb25DaGlsZHJlbilcbiAgfSk7XG4gIGNvbnN0IFtjb2xsZWN0aW9uLCBzZXRDb2xsZWN0aW9uXSA9IGNyZWF0ZVNpZ25hbChwcm9wcy5mYWN0b3J5KGluaXRpYWxOb2RlcykpO1xuICBjcmVhdGVFZmZlY3Qob24oWygpID0+IGFjY2Vzcyhwcm9wcy5kYXRhU291cmNlKSwgKCkgPT4gYWNjZXNzKHByb3BzLmdldEtleSksICgpID0+IGFjY2Vzcyhwcm9wcy5nZXRUZXh0VmFsdWUpLCAoKSA9PiBhY2Nlc3MocHJvcHMuZ2V0RGlzYWJsZWQpLCAoKSA9PiBhY2Nlc3MocHJvcHMuZ2V0U2VjdGlvbkNoaWxkcmVuKSwgKCkgPT4gcHJvcHMuZmFjdG9yeSwgLi4uZGVwc10sIChbZGF0YVNvdXJjZSwgZ2V0S2V5LCBnZXRUZXh0VmFsdWUsIGdldERpc2FibGVkLCBnZXRTZWN0aW9uQ2hpbGRyZW4sIGZhY3RvcnldKSA9PiB7XG4gICAgY29uc3Qgbm9kZXMgPSBidWlsZE5vZGVzKHtcbiAgICAgIGRhdGFTb3VyY2UsXG4gICAgICBnZXRLZXksXG4gICAgICBnZXRUZXh0VmFsdWUsXG4gICAgICBnZXREaXNhYmxlZCxcbiAgICAgIGdldFNlY3Rpb25DaGlsZHJlblxuICAgIH0pO1xuICAgIHNldENvbGxlY3Rpb24oKCkgPT4gZmFjdG9yeShub2RlcykpO1xuICB9LCB7XG4gICAgZGVmZXI6IHRydWVcbiAgfSkpO1xuICByZXR1cm4gY29sbGVjdGlvbjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvbnRyb2xsYWJsZVNpZ25hbChwcm9wcykge1xuICBjb25zdCBbX3ZhbHVlLCBfc2V0VmFsdWVdID0gY3JlYXRlU2lnbmFsKHByb3BzLmRlZmF1bHRWYWx1ZT8uKCkpO1xuICBjb25zdCBpc0NvbnRyb2xsZWQgPSBjcmVhdGVNZW1vKCgpID0+IHByb3BzLnZhbHVlPy4oKSAhPT0gdm9pZCAwKTtcbiAgY29uc3QgdmFsdWUgPSBjcmVhdGVNZW1vKCgpID0+IGlzQ29udHJvbGxlZCgpID8gcHJvcHMudmFsdWU/LigpIDogX3ZhbHVlKCkpO1xuICBjb25zdCBzZXRWYWx1ZSA9IChuZXh0KSA9PiB7XG4gICAgdW50cmFjaygoKSA9PiB7XG4gICAgICBjb25zdCBuZXh0VmFsdWUgPSBhY2Nlc3NXaXRoKG5leHQsIHZhbHVlKCkpO1xuICAgICAgaWYgKCFPYmplY3QuaXMobmV4dFZhbHVlLCB2YWx1ZSgpKSkge1xuICAgICAgICBpZiAoIWlzQ29udHJvbGxlZCgpKSB7XG4gICAgICAgICAgX3NldFZhbHVlKG5leHRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcHJvcHMub25DaGFuZ2U/LihuZXh0VmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5leHRWYWx1ZTtcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIFt2YWx1ZSwgc2V0VmFsdWVdO1xufVxuZnVuY3Rpb24gY3JlYXRlQ29udHJvbGxhYmxlQm9vbGVhblNpZ25hbChwcm9wcykge1xuICBjb25zdCBbX3ZhbHVlLCBzZXRWYWx1ZV0gPSBjcmVhdGVDb250cm9sbGFibGVTaWduYWwocHJvcHMpO1xuICBjb25zdCB2YWx1ZSA9ICgpID0+IF92YWx1ZSgpID8/IGZhbHNlO1xuICByZXR1cm4gW3ZhbHVlLCBzZXRWYWx1ZV07XG59XG5mdW5jdGlvbiBjcmVhdGVDb250cm9sbGFibGVBcnJheVNpZ25hbChwcm9wcykge1xuICBjb25zdCBbX3ZhbHVlLCBzZXRWYWx1ZV0gPSBjcmVhdGVDb250cm9sbGFibGVTaWduYWwocHJvcHMpO1xuICBjb25zdCB2YWx1ZSA9ICgpID0+IF92YWx1ZSgpID8/IFtdO1xuICByZXR1cm4gW3ZhbHVlLCBzZXRWYWx1ZV07XG59XG5mdW5jdGlvbiBjcmVhdGVEaXNjbG9zdXJlU3RhdGUocHJvcHMgPSB7fSkge1xuICBjb25zdCBbaXNPcGVuLCBzZXRJc09wZW5dID0gY3JlYXRlQ29udHJvbGxhYmxlQm9vbGVhblNpZ25hbCh7XG4gICAgdmFsdWU6ICgpID0+IGFjY2Vzcyhwcm9wcy5vcGVuKSxcbiAgICBkZWZhdWx0VmFsdWU6ICgpID0+ICEhYWNjZXNzKHByb3BzLmRlZmF1bHRPcGVuKSxcbiAgICBvbkNoYW5nZTogKHZhbHVlKSA9PiBwcm9wcy5vbk9wZW5DaGFuZ2U/Lih2YWx1ZSlcbiAgfSk7XG4gIGNvbnN0IG9wZW4gPSAoKSA9PiB7XG4gICAgc2V0SXNPcGVuKHRydWUpO1xuICB9O1xuICBjb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBzZXRJc09wZW4oZmFsc2UpO1xuICB9O1xuICBjb25zdCB0b2dnbGUgPSAoKSA9PiB7XG4gICAgaXNPcGVuKCkgPyBjbG9zZSgpIDogb3BlbigpO1xuICB9O1xuICByZXR1cm4ge1xuICAgIGlzT3BlbixcbiAgICBzZXRJc09wZW4sXG4gICAgb3BlbixcbiAgICBjbG9zZSxcbiAgICB0b2dnbGVcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVzY2FwZUtleURvd24ocHJvcHMpIHtcbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IChldmVudCkgPT4ge1xuICAgIGlmIChldmVudC5rZXkgPT09IEV2ZW50S2V5LkVzY2FwZSkge1xuICAgICAgcHJvcHMub25Fc2NhcGVLZXlEb3duPy4oZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaXNTZXJ2ZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGFjY2Vzcyhwcm9wcy5pc0Rpc2FibGVkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBkb2N1bWVudDIgPSBwcm9wcy5vd25lckRvY3VtZW50Py4oKSA/PyBnZXREb2N1bWVudCgpO1xuICAgIGRvY3VtZW50Mi5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBoYW5kbGVLZXlEb3duKTtcbiAgICBvbkNsZWFudXAoKCkgPT4ge1xuICAgICAgZG9jdW1lbnQyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGhhbmRsZUtleURvd24pO1xuICAgIH0pO1xuICB9KTtcbn1cbnZhciBEQVRBX1RPUF9MQVlFUl9BVFRSID0gXCJkYXRhLWtiLXRvcC1sYXllclwiO1xudmFyIG9yaWdpbmFsQm9keVBvaW50ZXJFdmVudHM7XG52YXIgaGFzRGlzYWJsZWRCb2R5UG9pbnRlckV2ZW50cyA9IGZhbHNlO1xudmFyIGxheWVycyA9IFtdO1xuZnVuY3Rpb24gaW5kZXhPZihub2RlKSB7XG4gIHJldHVybiBsYXllcnMuZmluZEluZGV4KChsYXllcikgPT4gbGF5ZXIubm9kZSA9PT0gbm9kZSk7XG59XG5mdW5jdGlvbiBmaW5kKG5vZGUpIHtcbiAgcmV0dXJuIGxheWVyc1tpbmRleE9mKG5vZGUpXTtcbn1cbmZ1bmN0aW9uIGlzVG9wTW9zdExheWVyKG5vZGUpIHtcbiAgcmV0dXJuIGxheWVyc1tsYXllcnMubGVuZ3RoIC0gMV0ubm9kZSA9PT0gbm9kZTtcbn1cbmZ1bmN0aW9uIGdldFBvaW50ZXJCbG9ja2luZ0xheWVycygpIHtcbiAgcmV0dXJuIGxheWVycy5maWx0ZXIoKGxheWVyKSA9PiBsYXllci5pc1BvaW50ZXJCbG9ja2luZyk7XG59XG5mdW5jdGlvbiBnZXRUb3BNb3N0UG9pbnRlckJsb2NraW5nTGF5ZXIoKSB7XG4gIHJldHVybiBbLi4uZ2V0UG9pbnRlckJsb2NraW5nTGF5ZXJzKCldLnNsaWNlKC0xKVswXTtcbn1cbmZ1bmN0aW9uIGhhc1BvaW50ZXJCbG9ja2luZ0xheWVyKCkge1xuICByZXR1cm4gZ2V0UG9pbnRlckJsb2NraW5nTGF5ZXJzKCkubGVuZ3RoID4gMDtcbn1cbmZ1bmN0aW9uIGlzQmVsb3dQb2ludGVyQmxvY2tpbmdMYXllcihub2RlKSB7XG4gIGNvbnN0IGhpZ2hlc3RCbG9ja2luZ0luZGV4ID0gaW5kZXhPZihnZXRUb3BNb3N0UG9pbnRlckJsb2NraW5nTGF5ZXIoKT8ubm9kZSk7XG4gIHJldHVybiBpbmRleE9mKG5vZGUpIDwgaGlnaGVzdEJsb2NraW5nSW5kZXg7XG59XG5mdW5jdGlvbiBhZGRMYXllcihsYXllcikge1xuICBsYXllcnMucHVzaChsYXllcik7XG59XG5mdW5jdGlvbiByZW1vdmVMYXllcihub2RlKSB7XG4gIGNvbnN0IGluZGV4ID0gaW5kZXhPZihub2RlKTtcbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybjtcbiAgfVxuICBsYXllcnMuc3BsaWNlKGluZGV4LCAxKTtcbn1cbmZ1bmN0aW9uIGFzc2lnblBvaW50ZXJFdmVudFRvTGF5ZXJzKCkge1xuICBsYXllcnMuZm9yRWFjaCgoe1xuICAgIG5vZGVcbiAgfSkgPT4ge1xuICAgIG5vZGUuc3R5bGUucG9pbnRlckV2ZW50cyA9IGlzQmVsb3dQb2ludGVyQmxvY2tpbmdMYXllcihub2RlKSA/IFwibm9uZVwiIDogXCJhdXRvXCI7XG4gIH0pO1xufVxuZnVuY3Rpb24gZGlzYWJsZUJvZHlQb2ludGVyRXZlbnRzKG5vZGUpIHtcbiAgaWYgKGhhc1BvaW50ZXJCbG9ja2luZ0xheWVyKCkgJiYgIWhhc0Rpc2FibGVkQm9keVBvaW50ZXJFdmVudHMpIHtcbiAgICBjb25zdCBvd25lckRvY3VtZW50ID0gZ2V0RG9jdW1lbnQobm9kZSk7XG4gICAgb3JpZ2luYWxCb2R5UG9pbnRlckV2ZW50cyA9IGRvY3VtZW50LmJvZHkuc3R5bGUucG9pbnRlckV2ZW50cztcbiAgICBvd25lckRvY3VtZW50LmJvZHkuc3R5bGUucG9pbnRlckV2ZW50cyA9IFwibm9uZVwiO1xuICAgIGhhc0Rpc2FibGVkQm9keVBvaW50ZXJFdmVudHMgPSB0cnVlO1xuICB9XG59XG5mdW5jdGlvbiByZXN0b3JlQm9keVBvaW50ZXJFdmVudHMobm9kZSkge1xuICBpZiAoaGFzUG9pbnRlckJsb2NraW5nTGF5ZXIoKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBvd25lckRvY3VtZW50ID0gZ2V0RG9jdW1lbnQobm9kZSk7XG4gIG93bmVyRG9jdW1lbnQuYm9keS5zdHlsZS5wb2ludGVyRXZlbnRzID0gb3JpZ2luYWxCb2R5UG9pbnRlckV2ZW50cztcbiAgaWYgKG93bmVyRG9jdW1lbnQuYm9keS5zdHlsZS5sZW5ndGggPT09IDApIHtcbiAgICBvd25lckRvY3VtZW50LmJvZHkucmVtb3ZlQXR0cmlidXRlKFwic3R5bGVcIik7XG4gIH1cbiAgaGFzRGlzYWJsZWRCb2R5UG9pbnRlckV2ZW50cyA9IGZhbHNlO1xufVxudmFyIGxheWVyU3RhY2sgPSB7XG4gIGxheWVycyxcbiAgaXNUb3BNb3N0TGF5ZXIsXG4gIGhhc1BvaW50ZXJCbG9ja2luZ0xheWVyLFxuICBpc0JlbG93UG9pbnRlckJsb2NraW5nTGF5ZXIsXG4gIGFkZExheWVyLFxuICByZW1vdmVMYXllcixcbiAgaW5kZXhPZixcbiAgZmluZCxcbiAgYXNzaWduUG9pbnRlckV2ZW50VG9MYXllcnMsXG4gIGRpc2FibGVCb2R5UG9pbnRlckV2ZW50cyxcbiAgcmVzdG9yZUJvZHlQb2ludGVyRXZlbnRzXG59O1xudmFyIEFVVE9GT0NVU19PTl9NT1VOVF9FVkVOVCA9IFwiZm9jdXNTY29wZS5hdXRvRm9jdXNPbk1vdW50XCI7XG52YXIgQVVUT0ZPQ1VTX09OX1VOTU9VTlRfRVZFTlQgPSBcImZvY3VzU2NvcGUuYXV0b0ZvY3VzT25Vbm1vdW50XCI7XG52YXIgRVZFTlRfT1BUSU9OUyA9IHtcbiAgYnViYmxlczogZmFsc2UsXG4gIGNhbmNlbGFibGU6IHRydWVcbn07XG52YXIgZm9jdXNTY29wZVN0YWNrID0ge1xuICAvKiogQSBzdGFjayBvZiBmb2N1cyBzY29wZXMsIHdpdGggdGhlIGFjdGl2ZSBvbmUgYXQgdGhlIHRvcCAqL1xuICBzdGFjazogW10sXG4gIGFjdGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGFja1swXTtcbiAgfSxcbiAgYWRkKHNjb3BlKSB7XG4gICAgaWYgKHNjb3BlICE9PSB0aGlzLmFjdGl2ZSgpKSB7XG4gICAgICB0aGlzLmFjdGl2ZSgpPy5wYXVzZSgpO1xuICAgIH1cbiAgICB0aGlzLnN0YWNrID0gcmVtb3ZlSXRlbUZyb21BcnJheSh0aGlzLnN0YWNrLCBzY29wZSk7XG4gICAgdGhpcy5zdGFjay51bnNoaWZ0KHNjb3BlKTtcbiAgfSxcbiAgcmVtb3ZlKHNjb3BlKSB7XG4gICAgdGhpcy5zdGFjayA9IHJlbW92ZUl0ZW1Gcm9tQXJyYXkodGhpcy5zdGFjaywgc2NvcGUpO1xuICAgIHRoaXMuYWN0aXZlKCk/LnJlc3VtZSgpO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlRm9jdXNTY29wZShwcm9wcywgcmVmKSB7XG4gIGNvbnN0IFtpc1BhdXNlZCwgc2V0SXNQYXVzZWRdID0gY3JlYXRlU2lnbmFsKGZhbHNlKTtcbiAgY29uc3QgZm9jdXNTY29wZSA9IHtcbiAgICBwYXVzZSgpIHtcbiAgICAgIHNldElzUGF1c2VkKHRydWUpO1xuICAgIH0sXG4gICAgcmVzdW1lKCkge1xuICAgICAgc2V0SXNQYXVzZWQoZmFsc2UpO1xuICAgIH1cbiAgfTtcbiAgbGV0IGxhc3RGb2N1c2VkRWxlbWVudCA9IG51bGw7XG4gIGNvbnN0IG9uTW91bnRBdXRvRm9jdXMgPSAoZTIpID0+IHByb3BzLm9uTW91bnRBdXRvRm9jdXM/LihlMik7XG4gIGNvbnN0IG9uVW5tb3VudEF1dG9Gb2N1cyA9IChlMikgPT4gcHJvcHMub25Vbm1vdW50QXV0b0ZvY3VzPy4oZTIpO1xuICBjb25zdCBvd25lckRvY3VtZW50ID0gKCkgPT4gZ2V0RG9jdW1lbnQocmVmKCkpO1xuICBjb25zdCBjcmVhdGVTZW50aW5lbCA9ICgpID0+IHtcbiAgICBjb25zdCBlbGVtZW50ID0gb3duZXJEb2N1bWVudCgpLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1mb2N1cy10cmFwXCIsIFwiXCIpO1xuICAgIGVsZW1lbnQudGFiSW5kZXggPSAwO1xuICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgdmlzdWFsbHlIaWRkZW5TdHlsZXMpO1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9O1xuICBjb25zdCB0YWJiYWJsZXMgPSAoKSA9PiB7XG4gICAgY29uc3QgY29udGFpbmVyID0gcmVmKCk7XG4gICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIGdldEFsbFRhYmJhYmxlSW4oY29udGFpbmVyLCB0cnVlKS5maWx0ZXIoKGVsKSA9PiAhZWwuaGFzQXR0cmlidXRlKFwiZGF0YS1mb2N1cy10cmFwXCIpKTtcbiAgfTtcbiAgY29uc3QgZmlyc3RUYWJiYWJsZSA9ICgpID0+IHtcbiAgICBjb25zdCBpdGVtcyA9IHRhYmJhYmxlcygpO1xuICAgIHJldHVybiBpdGVtcy5sZW5ndGggPiAwID8gaXRlbXNbMF0gOiBudWxsO1xuICB9O1xuICBjb25zdCBsYXN0VGFiYmFibGUgPSAoKSA9PiB7XG4gICAgY29uc3QgaXRlbXMgPSB0YWJiYWJsZXMoKTtcbiAgICByZXR1cm4gaXRlbXMubGVuZ3RoID4gMCA/IGl0ZW1zW2l0ZW1zLmxlbmd0aCAtIDFdIDogbnVsbDtcbiAgfTtcbiAgY29uc3Qgc2hvdWxkUHJldmVudFVubW91bnRBdXRvRm9jdXMgPSAoKSA9PiB7XG4gICAgY29uc3QgY29udGFpbmVyID0gcmVmKCk7XG4gICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgYWN0aXZlRWxlbWVudCA9IGdldEFjdGl2ZUVsZW1lbnQoY29udGFpbmVyKTtcbiAgICBpZiAoIWFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGNvbnRhaW5zKGNvbnRhaW5lciwgYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRm9jdXNhYmxlKGFjdGl2ZUVsZW1lbnQpO1xuICB9O1xuICBjcmVhdGVFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpc1NlcnZlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjb250YWluZXIgPSByZWYoKTtcbiAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb2N1c1Njb3BlU3RhY2suYWRkKGZvY3VzU2NvcGUpO1xuICAgIGNvbnN0IHByZXZpb3VzbHlGb2N1c2VkRWxlbWVudCA9IGdldEFjdGl2ZUVsZW1lbnQoY29udGFpbmVyKTtcbiAgICBjb25zdCBoYXNGb2N1c2VkQ2FuZGlkYXRlID0gY29udGFpbnMoY29udGFpbmVyLCBwcmV2aW91c2x5Rm9jdXNlZEVsZW1lbnQpO1xuICAgIGlmICghaGFzRm9jdXNlZENhbmRpZGF0ZSkge1xuICAgICAgY29uc3QgbW91bnRFdmVudCA9IG5ldyBDdXN0b21FdmVudChBVVRPRk9DVVNfT05fTU9VTlRfRVZFTlQsIEVWRU5UX09QVElPTlMpO1xuICAgICAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoQVVUT0ZPQ1VTX09OX01PVU5UX0VWRU5ULCBvbk1vdW50QXV0b0ZvY3VzKTtcbiAgICAgIGNvbnRhaW5lci5kaXNwYXRjaEV2ZW50KG1vdW50RXZlbnQpO1xuICAgICAgaWYgKCFtb3VudEV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgZm9jdXNXaXRob3V0U2Nyb2xsaW5nKGZpcnN0VGFiYmFibGUoKSk7XG4gICAgICAgICAgaWYgKGdldEFjdGl2ZUVsZW1lbnQoY29udGFpbmVyKSA9PT0gcHJldmlvdXNseUZvY3VzZWRFbGVtZW50KSB7XG4gICAgICAgICAgICBmb2N1c1dpdGhvdXRTY3JvbGxpbmcoY29udGFpbmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIDApO1xuICAgICAgfVxuICAgIH1cbiAgICBvbkNsZWFudXAoKCkgPT4ge1xuICAgICAgY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoQVVUT0ZPQ1VTX09OX01PVU5UX0VWRU5ULCBvbk1vdW50QXV0b0ZvY3VzKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjb25zdCB1bm1vdW50RXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoQVVUT0ZPQ1VTX09OX1VOTU9VTlRfRVZFTlQsIEVWRU5UX09QVElPTlMpO1xuICAgICAgICBpZiAoc2hvdWxkUHJldmVudFVubW91bnRBdXRvRm9jdXMoKSkge1xuICAgICAgICAgIHVubW91bnRFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKEFVVE9GT0NVU19PTl9VTk1PVU5UX0VWRU5ULCBvblVubW91bnRBdXRvRm9jdXMpO1xuICAgICAgICBjb250YWluZXIuZGlzcGF0Y2hFdmVudCh1bm1vdW50RXZlbnQpO1xuICAgICAgICBpZiAoIXVubW91bnRFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgZm9jdXNXaXRob3V0U2Nyb2xsaW5nKHByZXZpb3VzbHlGb2N1c2VkRWxlbWVudCA/PyBvd25lckRvY3VtZW50KCkuYm9keSk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoQVVUT0ZPQ1VTX09OX1VOTU9VTlRfRVZFTlQsIG9uVW5tb3VudEF1dG9Gb2N1cyk7XG4gICAgICAgIGZvY3VzU2NvcGVTdGFjay5yZW1vdmUoZm9jdXNTY29wZSk7XG4gICAgICB9LCAwKTtcbiAgICB9KTtcbiAgfSk7XG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlzU2VydmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNvbnRhaW5lciA9IHJlZigpO1xuICAgIGlmICghY29udGFpbmVyIHx8ICFhY2Nlc3MocHJvcHMudHJhcEZvY3VzKSB8fCBpc1BhdXNlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG9uRm9jdXNJbiA9IChldmVudCkgPT4ge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgaWYgKHRhcmdldD8uY2xvc2VzdChgWyR7REFUQV9UT1BfTEFZRVJfQVRUUn1dYCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGNvbnRhaW5zKGNvbnRhaW5lciwgdGFyZ2V0KSkge1xuICAgICAgICBsYXN0Rm9jdXNlZEVsZW1lbnQgPSB0YXJnZXQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb2N1c1dpdGhvdXRTY3JvbGxpbmcobGFzdEZvY3VzZWRFbGVtZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG9uRm9jdXNPdXQgPSAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IHJlbGF0ZWRUYXJnZXQgPSBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAgICAgY29uc3QgdGFyZ2V0ID0gcmVsYXRlZFRhcmdldCA/PyBnZXRBY3RpdmVFbGVtZW50KGNvbnRhaW5lcik7XG4gICAgICBpZiAodGFyZ2V0Py5jbG9zZXN0KGBbJHtEQVRBX1RPUF9MQVlFUl9BVFRSfV1gKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIWNvbnRhaW5zKGNvbnRhaW5lciwgdGFyZ2V0KSkge1xuICAgICAgICBmb2N1c1dpdGhvdXRTY3JvbGxpbmcobGFzdEZvY3VzZWRFbGVtZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIG93bmVyRG9jdW1lbnQoKS5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNpblwiLCBvbkZvY3VzSW4pO1xuICAgIG93bmVyRG9jdW1lbnQoKS5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNvdXRcIiwgb25Gb2N1c091dCk7XG4gICAgb25DbGVhbnVwKCgpID0+IHtcbiAgICAgIG93bmVyRG9jdW1lbnQoKS5yZW1vdmVFdmVudExpc3RlbmVyKFwiZm9jdXNpblwiLCBvbkZvY3VzSW4pO1xuICAgICAgb3duZXJEb2N1bWVudCgpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmb2N1c291dFwiLCBvbkZvY3VzT3V0KTtcbiAgICB9KTtcbiAgfSk7XG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlzU2VydmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNvbnRhaW5lciA9IHJlZigpO1xuICAgIGlmICghY29udGFpbmVyIHx8ICFhY2Nlc3MocHJvcHMudHJhcEZvY3VzKSB8fCBpc1BhdXNlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHN0YXJ0U2VudGluZWwgPSBjcmVhdGVTZW50aW5lbCgpO1xuICAgIGNvbnRhaW5lci5pbnNlcnRBZGphY2VudEVsZW1lbnQoXCJhZnRlcmJlZ2luXCIsIHN0YXJ0U2VudGluZWwpO1xuICAgIGNvbnN0IGVuZFNlbnRpbmVsID0gY3JlYXRlU2VudGluZWwoKTtcbiAgICBjb250YWluZXIuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYmVmb3JlZW5kXCIsIGVuZFNlbnRpbmVsKTtcbiAgICBmdW5jdGlvbiBvbkZvY3VzKGV2ZW50KSB7XG4gICAgICBjb25zdCBmaXJzdCA9IGZpcnN0VGFiYmFibGUoKTtcbiAgICAgIGNvbnN0IGxhc3QgPSBsYXN0VGFiYmFibGUoKTtcbiAgICAgIGlmIChldmVudC5yZWxhdGVkVGFyZ2V0ID09PSBmaXJzdCkge1xuICAgICAgICBmb2N1c1dpdGhvdXRTY3JvbGxpbmcobGFzdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb2N1c1dpdGhvdXRTY3JvbGxpbmcoZmlyc3QpO1xuICAgICAgfVxuICAgIH1cbiAgICBzdGFydFNlbnRpbmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c2luXCIsIG9uRm9jdXMpO1xuICAgIGVuZFNlbnRpbmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c2luXCIsIG9uRm9jdXMpO1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKG11dGF0aW9ucykgPT4ge1xuICAgICAgZm9yIChjb25zdCBtdXRhdGlvbiBvZiBtdXRhdGlvbnMpIHtcbiAgICAgICAgaWYgKG11dGF0aW9uLnByZXZpb3VzU2libGluZyA9PT0gZW5kU2VudGluZWwpIHtcbiAgICAgICAgICBlbmRTZW50aW5lbC5yZW1vdmUoKTtcbiAgICAgICAgICBjb250YWluZXIuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYmVmb3JlZW5kXCIsIGVuZFNlbnRpbmVsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobXV0YXRpb24ubmV4dFNpYmxpbmcgPT09IHN0YXJ0U2VudGluZWwpIHtcbiAgICAgICAgICBzdGFydFNlbnRpbmVsLnJlbW92ZSgpO1xuICAgICAgICAgIGNvbnRhaW5lci5pbnNlcnRBZGphY2VudEVsZW1lbnQoXCJhZnRlcmJlZ2luXCIsIHN0YXJ0U2VudGluZWwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShjb250YWluZXIsIHtcbiAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgIHN1YnRyZWU6IGZhbHNlXG4gICAgfSk7XG4gICAgb25DbGVhbnVwKCgpID0+IHtcbiAgICAgIHN0YXJ0U2VudGluZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3VzaW5cIiwgb25Gb2N1cyk7XG4gICAgICBlbmRTZW50aW5lbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiZm9jdXNpblwiLCBvbkZvY3VzKTtcbiAgICAgIHN0YXJ0U2VudGluZWwucmVtb3ZlKCk7XG4gICAgICBlbmRTZW50aW5lbC5yZW1vdmUoKTtcbiAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9KTtcbiAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVGb3JtUmVzZXRMaXN0ZW5lcihlbGVtZW50LCBoYW5kbGVyKSB7XG4gIGNyZWF0ZUVmZmVjdChvbihlbGVtZW50LCAoZWxlbWVudDIpID0+IHtcbiAgICBpZiAoZWxlbWVudDIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBmb3JtID0gZ2V0Q2xvc2VzdEZvcm0oZWxlbWVudDIpO1xuICAgIGlmIChmb3JtID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKFwicmVzZXRcIiwgaGFuZGxlciwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICAgIG9uQ2xlYW51cCgoKSA9PiB7XG4gICAgICBmb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNldFwiLCBoYW5kbGVyKTtcbiAgICB9KTtcbiAgfSkpO1xufVxuZnVuY3Rpb24gZ2V0Q2xvc2VzdEZvcm0oZWxlbWVudCkge1xuICByZXR1cm4gaXNGb3JtRWxlbWVudChlbGVtZW50KSA/IGVsZW1lbnQuZm9ybSA6IGVsZW1lbnQuY2xvc2VzdChcImZvcm1cIik7XG59XG5mdW5jdGlvbiBpc0Zvcm1FbGVtZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQubWF0Y2hlcyhcInRleHRhcmVhLCBpbnB1dCwgc2VsZWN0LCBidXR0b25cIik7XG59XG52YXIgREFUQV9MSVZFX0FOTk9VTkNFUl9BVFRSID0gXCJkYXRhLWxpdmUtYW5ub3VuY2VyXCI7XG5mdW5jdGlvbiBjcmVhdGVIaWRlT3V0c2lkZShwcm9wcykge1xuICBjcmVhdGVFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhY2Nlc3MocHJvcHMuaXNEaXNhYmxlZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb25DbGVhbnVwKGFyaWFIaWRlT3V0c2lkZShhY2Nlc3MocHJvcHMudGFyZ2V0cyksIGFjY2Vzcyhwcm9wcy5yb290KSkpO1xuICB9KTtcbn1cbnZhciByZWZDb3VudE1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xudmFyIG9ic2VydmVyU3RhY2sgPSBbXTtcbmZ1bmN0aW9uIGFyaWFIaWRlT3V0c2lkZSh0YXJnZXRzLCByb290ID0gZG9jdW1lbnQuYm9keSkge1xuICBjb25zdCB2aXNpYmxlTm9kZXMgPSBuZXcgU2V0KHRhcmdldHMpO1xuICBjb25zdCBoaWRkZW5Ob2RlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gIGNvbnN0IHdhbGsgPSAocm9vdDIpID0+IHtcbiAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2Ygcm9vdDIucXVlcnlTZWxlY3RvckFsbChgWyR7REFUQV9MSVZFX0FOTk9VTkNFUl9BVFRSfV0sIFske0RBVEFfVE9QX0xBWUVSX0FUVFJ9XWApKSB7XG4gICAgICB2aXNpYmxlTm9kZXMuYWRkKGVsZW1lbnQpO1xuICAgIH1cbiAgICBjb25zdCBhY2NlcHROb2RlID0gKG5vZGUpID0+IHtcbiAgICAgIGlmICh2aXNpYmxlTm9kZXMuaGFzKG5vZGUpIHx8IG5vZGUucGFyZW50RWxlbWVudCAmJiBoaWRkZW5Ob2Rlcy5oYXMobm9kZS5wYXJlbnRFbGVtZW50KSAmJiBub2RlLnBhcmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKFwicm9sZVwiKSAhPT0gXCJyb3dcIikge1xuICAgICAgICByZXR1cm4gTm9kZUZpbHRlci5GSUxURVJfUkVKRUNUO1xuICAgICAgfVxuICAgICAgZm9yIChjb25zdCB0YXJnZXQgb2YgdmlzaWJsZU5vZGVzKSB7XG4gICAgICAgIGlmIChub2RlLmNvbnRhaW5zKHRhcmdldCkpIHtcbiAgICAgICAgICByZXR1cm4gTm9kZUZpbHRlci5GSUxURVJfU0tJUDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIE5vZGVGaWx0ZXIuRklMVEVSX0FDQ0VQVDtcbiAgICB9O1xuICAgIGNvbnN0IHdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIocm9vdDIsIE5vZGVGaWx0ZXIuU0hPV19FTEVNRU5ULCB7XG4gICAgICBhY2NlcHROb2RlXG4gICAgfSk7XG4gICAgY29uc3QgYWNjZXB0Um9vdCA9IGFjY2VwdE5vZGUocm9vdDIpO1xuICAgIGlmIChhY2NlcHRSb290ID09PSBOb2RlRmlsdGVyLkZJTFRFUl9BQ0NFUFQpIHtcbiAgICAgIGhpZGUyKHJvb3QyKTtcbiAgICB9XG4gICAgaWYgKGFjY2VwdFJvb3QgIT09IE5vZGVGaWx0ZXIuRklMVEVSX1JFSkVDVCkge1xuICAgICAgbGV0IG5vZGUgPSB3YWxrZXIubmV4dE5vZGUoKTtcbiAgICAgIHdoaWxlIChub2RlICE9IG51bGwpIHtcbiAgICAgICAgaGlkZTIobm9kZSk7XG4gICAgICAgIG5vZGUgPSB3YWxrZXIubmV4dE5vZGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IGhpZGUyID0gKG5vZGUpID0+IHtcbiAgICBjb25zdCByZWZDb3VudCA9IHJlZkNvdW50TWFwLmdldChub2RlKSA/PyAwO1xuICAgIGlmIChub2RlLmdldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIpID09PSBcInRydWVcIiAmJiByZWZDb3VudCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocmVmQ291bnQgPT09IDApIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwgXCJ0cnVlXCIpO1xuICAgIH1cbiAgICBoaWRkZW5Ob2Rlcy5hZGQobm9kZSk7XG4gICAgcmVmQ291bnRNYXAuc2V0KG5vZGUsIHJlZkNvdW50ICsgMSk7XG4gIH07XG4gIGlmIChvYnNlcnZlclN0YWNrLmxlbmd0aCkge1xuICAgIG9ic2VydmVyU3RhY2tbb2JzZXJ2ZXJTdGFjay5sZW5ndGggLSAxXS5kaXNjb25uZWN0KCk7XG4gIH1cbiAgd2Fsayhyb290KTtcbiAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoY2hhbmdlcykgPT4ge1xuICAgIGZvciAoY29uc3QgY2hhbmdlIG9mIGNoYW5nZXMpIHtcbiAgICAgIGlmIChjaGFuZ2UudHlwZSAhPT0gXCJjaGlsZExpc3RcIiB8fCBjaGFuZ2UuYWRkZWROb2Rlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoIVsuLi52aXNpYmxlTm9kZXMsIC4uLmhpZGRlbk5vZGVzXS5zb21lKChub2RlKSA9PiBub2RlLmNvbnRhaW5zKGNoYW5nZS50YXJnZXQpKSkge1xuICAgICAgICBmb3IgKGNvbnN0IG5vZGUgb2YgY2hhbmdlLnJlbW92ZWROb2Rlcykge1xuICAgICAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgRWxlbWVudCkge1xuICAgICAgICAgICAgdmlzaWJsZU5vZGVzLmRlbGV0ZShub2RlKTtcbiAgICAgICAgICAgIGhpZGRlbk5vZGVzLmRlbGV0ZShub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIGNoYW5nZS5hZGRlZE5vZGVzKSB7XG4gICAgICAgICAgaWYgKChub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpICYmIChub2RlLmRhdGFzZXQubGl2ZUFubm91bmNlciA9PT0gXCJ0cnVlXCIgfHwgbm9kZS5kYXRhc2V0LnJlYWN0QXJpYVRvcExheWVyID09PSBcInRydWVcIikpIHtcbiAgICAgICAgICAgIHZpc2libGVOb2Rlcy5hZGQobm9kZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChub2RlIGluc3RhbmNlb2YgRWxlbWVudCkge1xuICAgICAgICAgICAgd2Fsayhub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBvYnNlcnZlci5vYnNlcnZlKHJvb3QsIHtcbiAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgc3VidHJlZTogdHJ1ZVxuICB9KTtcbiAgY29uc3Qgb2JzZXJ2ZXJXcmFwcGVyID0ge1xuICAgIG9ic2VydmUoKSB7XG4gICAgICBvYnNlcnZlci5vYnNlcnZlKHJvb3QsIHtcbiAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICBzdWJ0cmVlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGRpc2Nvbm5lY3QoKSB7XG4gICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfVxuICB9O1xuICBvYnNlcnZlclN0YWNrLnB1c2gob2JzZXJ2ZXJXcmFwcGVyKTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgZm9yIChjb25zdCBub2RlIG9mIGhpZGRlbk5vZGVzKSB7XG4gICAgICBjb25zdCBjb3VudCA9IHJlZkNvdW50TWFwLmdldChub2RlKTtcbiAgICAgIGlmIChjb3VudCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChjb3VudCA9PT0gMSkge1xuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIpO1xuICAgICAgICByZWZDb3VudE1hcC5kZWxldGUobm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWZDb3VudE1hcC5zZXQobm9kZSwgY291bnQgLSAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9ic2VydmVyV3JhcHBlciA9PT0gb2JzZXJ2ZXJTdGFja1tvYnNlcnZlclN0YWNrLmxlbmd0aCAtIDFdKSB7XG4gICAgICBvYnNlcnZlclN0YWNrLnBvcCgpO1xuICAgICAgaWYgKG9ic2VydmVyU3RhY2subGVuZ3RoKSB7XG4gICAgICAgIG9ic2VydmVyU3RhY2tbb2JzZXJ2ZXJTdGFjay5sZW5ndGggLSAxXS5vYnNlcnZlKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ic2VydmVyU3RhY2suc3BsaWNlKG9ic2VydmVyU3RhY2suaW5kZXhPZihvYnNlcnZlcldyYXBwZXIpLCAxKTtcbiAgICB9XG4gIH07XG59XG52YXIgUE9JTlRFUl9ET1dOX09VVFNJREVfRVZFTlQgPSBcImludGVyYWN0T3V0c2lkZS5wb2ludGVyRG93bk91dHNpZGVcIjtcbnZhciBGT0NVU19PVVRTSURFX0VWRU5UID0gXCJpbnRlcmFjdE91dHNpZGUuZm9jdXNPdXRzaWRlXCI7XG5mdW5jdGlvbiBjcmVhdGVJbnRlcmFjdE91dHNpZGUocHJvcHMsIHJlZikge1xuICBsZXQgcG9pbnRlckRvd25UaW1lb3V0SWQ7XG4gIGxldCBjbGlja0hhbmRsZXIgPSBub29wMztcbiAgY29uc3Qgb3duZXJEb2N1bWVudCA9ICgpID0+IGdldERvY3VtZW50KHJlZigpKTtcbiAgY29uc3Qgb25Qb2ludGVyRG93bk91dHNpZGUgPSAoZTIpID0+IHByb3BzLm9uUG9pbnRlckRvd25PdXRzaWRlPy4oZTIpO1xuICBjb25zdCBvbkZvY3VzT3V0c2lkZSA9IChlMikgPT4gcHJvcHMub25Gb2N1c091dHNpZGU/LihlMik7XG4gIGNvbnN0IG9uSW50ZXJhY3RPdXRzaWRlID0gKGUyKSA9PiBwcm9wcy5vbkludGVyYWN0T3V0c2lkZT8uKGUyKTtcbiAgY29uc3QgaXNFdmVudE91dHNpZGUgPSAoZTIpID0+IHtcbiAgICBjb25zdCB0YXJnZXQgPSBlMi50YXJnZXQ7XG4gICAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0YXJnZXQuY2xvc2VzdChgWyR7REFUQV9UT1BfTEFZRVJfQVRUUn1dYCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFjb250YWlucyhvd25lckRvY3VtZW50KCksIHRhcmdldCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGNvbnRhaW5zKHJlZigpLCB0YXJnZXQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAhcHJvcHMuc2hvdWxkRXhjbHVkZUVsZW1lbnQ/Lih0YXJnZXQpO1xuICB9O1xuICBjb25zdCBvblBvaW50ZXJEb3duID0gKGUyKSA9PiB7XG4gICAgZnVuY3Rpb24gaGFuZGxlcigpIHtcbiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHJlZigpO1xuICAgICAgY29uc3QgdGFyZ2V0ID0gZTIudGFyZ2V0O1xuICAgICAgaWYgKCFjb250YWluZXIgfHwgIXRhcmdldCB8fCAhaXNFdmVudE91dHNpZGUoZTIpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGhhbmRsZXIyID0gY29tcG9zZUV2ZW50SGFuZGxlcnMoW29uUG9pbnRlckRvd25PdXRzaWRlLCBvbkludGVyYWN0T3V0c2lkZV0pO1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoUE9JTlRFUl9ET1dOX09VVFNJREVfRVZFTlQsIGhhbmRsZXIyLCB7XG4gICAgICAgIG9uY2U6IHRydWVcbiAgICAgIH0pO1xuICAgICAgY29uc3QgcG9pbnRlckRvd25PdXRzaWRlRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoUE9JTlRFUl9ET1dOX09VVFNJREVfRVZFTlQsIHtcbiAgICAgICAgYnViYmxlczogZmFsc2UsXG4gICAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICAgIGRldGFpbDoge1xuICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGUyLFxuICAgICAgICAgIGlzQ29udGV4dE1lbnU6IGUyLmJ1dHRvbiA9PT0gMiB8fCBpc0N0cmxLZXkoZTIpICYmIGUyLmJ1dHRvbiA9PT0gMFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KHBvaW50ZXJEb3duT3V0c2lkZUV2ZW50KTtcbiAgICB9XG4gICAgaWYgKGUyLnBvaW50ZXJUeXBlID09PSBcInRvdWNoXCIpIHtcbiAgICAgIG93bmVyRG9jdW1lbnQoKS5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlcik7XG4gICAgICBjbGlja0hhbmRsZXIgPSBoYW5kbGVyO1xuICAgICAgb3duZXJEb2N1bWVudCgpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVyLCB7XG4gICAgICAgIG9uY2U6IHRydWVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBoYW5kbGVyKCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBvbkZvY3VzSW4gPSAoZTIpID0+IHtcbiAgICBjb25zdCBjb250YWluZXIgPSByZWYoKTtcbiAgICBjb25zdCB0YXJnZXQgPSBlMi50YXJnZXQ7XG4gICAgaWYgKCFjb250YWluZXIgfHwgIXRhcmdldCB8fCAhaXNFdmVudE91dHNpZGUoZTIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGhhbmRsZXIgPSBjb21wb3NlRXZlbnRIYW5kbGVycyhbb25Gb2N1c091dHNpZGUsIG9uSW50ZXJhY3RPdXRzaWRlXSk7XG4gICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoRk9DVVNfT1VUU0lERV9FVkVOVCwgaGFuZGxlciwge1xuICAgICAgb25jZTogdHJ1ZVxuICAgIH0pO1xuICAgIGNvbnN0IGZvY3VzT3V0c2lkZUV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KEZPQ1VTX09VVFNJREVfRVZFTlQsIHtcbiAgICAgIGJ1YmJsZXM6IGZhbHNlLFxuICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcbiAgICAgIGRldGFpbDoge1xuICAgICAgICBvcmlnaW5hbEV2ZW50OiBlMixcbiAgICAgICAgaXNDb250ZXh0TWVudTogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudChmb2N1c091dHNpZGVFdmVudCk7XG4gIH07XG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlzU2VydmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChhY2Nlc3MocHJvcHMuaXNEaXNhYmxlZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcG9pbnRlckRvd25UaW1lb3V0SWQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBvd25lckRvY3VtZW50KCkuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsIG9uUG9pbnRlckRvd24sIHRydWUpO1xuICAgIH0sIDApO1xuICAgIG93bmVyRG9jdW1lbnQoKS5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNpblwiLCBvbkZvY3VzSW4sIHRydWUpO1xuICAgIG9uQ2xlYW51cCgoKSA9PiB7XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHBvaW50ZXJEb3duVGltZW91dElkKTtcbiAgICAgIG93bmVyRG9jdW1lbnQoKS5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY2xpY2tIYW5kbGVyKTtcbiAgICAgIG93bmVyRG9jdW1lbnQoKS5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgb25Qb2ludGVyRG93biwgdHJ1ZSk7XG4gICAgICBvd25lckRvY3VtZW50KCkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3VzaW5cIiwgb25Gb2N1c0luLCB0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVQcmVzZW5jZShwcmVzZW50KSB7XG4gIGNvbnN0IFtub2RlLCBzZXROb2RlXSA9IGNyZWF0ZVNpZ25hbCgpO1xuICBsZXQgc3R5bGVzID0ge307XG4gIGxldCBwcmV2UHJlc2VudCA9IHByZXNlbnQoKTtcbiAgbGV0IHByZXZBbmltYXRpb25OYW1lID0gXCJub25lXCI7XG4gIGNvbnN0IFtzdGF0ZTIsIHNlbmRdID0gY3JlYXRlU3RhdGVNYWNoaW5lKHByZXNlbnQoKSA/IFwibW91bnRlZFwiIDogXCJ1bm1vdW50ZWRcIiwge1xuICAgIG1vdW50ZWQ6IHtcbiAgICAgIFVOTU9VTlQ6IFwidW5tb3VudGVkXCIsXG4gICAgICBBTklNQVRJT05fT1VUOiBcInVubW91bnRTdXNwZW5kZWRcIlxuICAgIH0sXG4gICAgdW5tb3VudFN1c3BlbmRlZDoge1xuICAgICAgTU9VTlQ6IFwibW91bnRlZFwiLFxuICAgICAgQU5JTUFUSU9OX0VORDogXCJ1bm1vdW50ZWRcIlxuICAgIH0sXG4gICAgdW5tb3VudGVkOiB7XG4gICAgICBNT1VOVDogXCJtb3VudGVkXCJcbiAgICB9XG4gIH0pO1xuICBjcmVhdGVFZmZlY3Qob24oc3RhdGUyLCAoc3RhdGUzKSA9PiB7XG4gICAgY29uc3QgY3VycmVudEFuaW1hdGlvbk5hbWUgPSBnZXRBbmltYXRpb25OYW1lKHN0eWxlcyk7XG4gICAgcHJldkFuaW1hdGlvbk5hbWUgPSBzdGF0ZTMgPT09IFwibW91bnRlZFwiID8gY3VycmVudEFuaW1hdGlvbk5hbWUgOiBcIm5vbmVcIjtcbiAgfSkpO1xuICBjcmVhdGVFZmZlY3Qob24ocHJlc2VudCwgKHByZXNlbnQyKSA9PiB7XG4gICAgaWYgKHByZXZQcmVzZW50ID09PSBwcmVzZW50Mikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjdXJyZW50QW5pbWF0aW9uTmFtZSA9IGdldEFuaW1hdGlvbk5hbWUoc3R5bGVzKTtcbiAgICBpZiAocHJlc2VudDIpIHtcbiAgICAgIHNlbmQoXCJNT1VOVFwiKTtcbiAgICB9IGVsc2UgaWYgKHN0eWxlcz8uZGlzcGxheSA9PT0gXCJub25lXCIpIHtcbiAgICAgIHNlbmQoXCJVTk1PVU5UXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBpc0FuaW1hdGluZyA9IHByZXZBbmltYXRpb25OYW1lICE9PSBjdXJyZW50QW5pbWF0aW9uTmFtZTtcbiAgICAgIGlmIChwcmV2UHJlc2VudCAmJiBpc0FuaW1hdGluZykge1xuICAgICAgICBzZW5kKFwiQU5JTUFUSU9OX09VVFwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbmQoXCJVTk1PVU5UXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICBwcmV2UHJlc2VudCA9IHByZXNlbnQyO1xuICB9KSk7XG4gIGNyZWF0ZUVmZmVjdChvbihub2RlLCAobm9kZTIpID0+IHtcbiAgICBpZiAobm9kZTIpIHtcbiAgICAgIGNvbnN0IGhhbmRsZUFuaW1hdGlvbkVuZCA9IChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50QW5pbWF0aW9uTmFtZSA9IGdldEFuaW1hdGlvbk5hbWUoc3R5bGVzKTtcbiAgICAgICAgY29uc3QgaXNDdXJyZW50QW5pbWF0aW9uID0gY3VycmVudEFuaW1hdGlvbk5hbWUuaW5jbHVkZXMoZXZlbnQuYW5pbWF0aW9uTmFtZSk7XG4gICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IG5vZGUyICYmIGlzQ3VycmVudEFuaW1hdGlvbikge1xuICAgICAgICAgIHNlbmQoXCJBTklNQVRJT05fRU5EXCIpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3QgaGFuZGxlQW5pbWF0aW9uU3RhcnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gbm9kZTIpIHtcbiAgICAgICAgICBwcmV2QW5pbWF0aW9uTmFtZSA9IGdldEFuaW1hdGlvbk5hbWUoc3R5bGVzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIG5vZGUyLmFkZEV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25zdGFydFwiLCBoYW5kbGVBbmltYXRpb25TdGFydCk7XG4gICAgICBub2RlMi5hZGRFdmVudExpc3RlbmVyKFwiYW5pbWF0aW9uY2FuY2VsXCIsIGhhbmRsZUFuaW1hdGlvbkVuZCk7XG4gICAgICBub2RlMi5hZGRFdmVudExpc3RlbmVyKFwiYW5pbWF0aW9uZW5kXCIsIGhhbmRsZUFuaW1hdGlvbkVuZCk7XG4gICAgICBvbkNsZWFudXAoKCkgPT4ge1xuICAgICAgICBub2RlMi5yZW1vdmVFdmVudExpc3RlbmVyKFwiYW5pbWF0aW9uc3RhcnRcIiwgaGFuZGxlQW5pbWF0aW9uU3RhcnQpO1xuICAgICAgICBub2RlMi5yZW1vdmVFdmVudExpc3RlbmVyKFwiYW5pbWF0aW9uY2FuY2VsXCIsIGhhbmRsZUFuaW1hdGlvbkVuZCk7XG4gICAgICAgIG5vZGUyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25lbmRcIiwgaGFuZGxlQW5pbWF0aW9uRW5kKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZW5kKFwiQU5JTUFUSU9OX0VORFwiKTtcbiAgICB9XG4gIH0pKTtcbiAgcmV0dXJuIHtcbiAgICBpc1ByZXNlbnQ6ICgpID0+IFtcIm1vdW50ZWRcIiwgXCJ1bm1vdW50U3VzcGVuZGVkXCJdLmluY2x1ZGVzKHN0YXRlMigpKSxcbiAgICBzZXRSZWY6IChlbCkgPT4ge1xuICAgICAgaWYgKGVsKSB7XG4gICAgICAgIHN0eWxlcyA9IGdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAgICAgfVxuICAgICAgc2V0Tm9kZShlbCk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0QW5pbWF0aW9uTmFtZShzdHlsZXMpIHtcbiAgcmV0dXJuIHN0eWxlcz8uYW5pbWF0aW9uTmFtZSB8fCBcIm5vbmVcIjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVN0YXRlTWFjaGluZShpbml0aWFsU3RhdGUsIG1hY2hpbmUpIHtcbiAgY29uc3QgcmVkdWNlMiA9IChzdGF0ZTMsIGV2ZW50KSA9PiB7XG4gICAgY29uc3QgbmV4dFN0YXRlID0gbWFjaGluZVtzdGF0ZTNdW2V2ZW50XTtcbiAgICByZXR1cm4gbmV4dFN0YXRlID8/IHN0YXRlMztcbiAgfTtcbiAgY29uc3QgW3N0YXRlMiwgc2V0U3RhdGUyXSA9IGNyZWF0ZVNpZ25hbChpbml0aWFsU3RhdGUpO1xuICBjb25zdCBzZW5kID0gKGV2ZW50KSA9PiB7XG4gICAgc2V0U3RhdGUyKChwcmV2KSA9PiByZWR1Y2UyKHByZXYsIGV2ZW50KSk7XG4gIH07XG4gIHJldHVybiBbc3RhdGUyLCBzZW5kXTtcbn1cbnZhciBTQ1JPTExfTE9DS19JREVOVElGSUVSID0gXCJkYXRhLWtiLXNjcm9sbC1sb2NrXCI7XG5mdW5jdGlvbiBhc3NpZ25TdHlsZShlbGVtZW50LCBzdHlsZTIpIHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICB9O1xuICB9XG4gIGNvbnN0IHByZXZpb3VzU3R5bGUgPSBlbGVtZW50LnN0eWxlLmNzc1RleHQ7XG4gIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgc3R5bGUyKTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBlbGVtZW50LnN0eWxlLmNzc1RleHQgPSBwcmV2aW91c1N0eWxlO1xuICB9O1xufVxuZnVuY3Rpb24gc2V0Q1NTUHJvcGVydHkoZWxlbWVudCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgfTtcbiAgfVxuICBjb25zdCBwcmV2aW91c1ZhbHVlID0gZWxlbWVudC5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5KTtcbiAgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGlmIChwcmV2aW91c1ZhbHVlKSB7XG4gICAgICBlbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KHByb3BlcnR5LCBwcmV2aW91c1ZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShwcm9wZXJ0eSk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0UGFkZGluZ1Byb3BlcnR5KGRvY3VtZW50RWxlbWVudCkge1xuICBjb25zdCBkb2N1bWVudExlZnQgPSBkb2N1bWVudEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcbiAgY29uc3Qgc2Nyb2xsYmFyWCA9IE1hdGgucm91bmQoZG9jdW1lbnRMZWZ0KSArIGRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0O1xuICByZXR1cm4gc2Nyb2xsYmFyWCA/IFwicGFkZGluZ0xlZnRcIiA6IFwicGFkZGluZ1JpZ2h0XCI7XG59XG5mdW5jdGlvbiBjcmVhdGVQcmV2ZW50U2Nyb2xsKHByb3BzKSB7XG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlzU2VydmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghYWNjZXNzKHByb3BzLm93bmVyUmVmKSB8fCBhY2Nlc3MocHJvcHMuaXNEaXNhYmxlZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZG9jID0gZ2V0RG9jdW1lbnQoYWNjZXNzKHByb3BzLm93bmVyUmVmKSk7XG4gICAgY29uc3Qgd2luID0gZ2V0V2luZG93KGFjY2Vzcyhwcm9wcy5vd25lclJlZikpO1xuICAgIGNvbnN0IHtcbiAgICAgIGRvY3VtZW50RWxlbWVudCxcbiAgICAgIGJvZHlcbiAgICB9ID0gZG9jO1xuICAgIGNvbnN0IGFscmVhZHlMb2NrZWQgPSBib2R5Lmhhc0F0dHJpYnV0ZShTQ1JPTExfTE9DS19JREVOVElGSUVSKTtcbiAgICBpZiAoYWxyZWFkeUxvY2tlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBib2R5LnNldEF0dHJpYnV0ZShTQ1JPTExfTE9DS19JREVOVElGSUVSLCBcIlwiKTtcbiAgICBjb25zdCBzY3JvbGxiYXJXaWR0aCA9IHdpbi5pbm5lcldpZHRoIC0gZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICAgIGNvbnN0IHNldFNjcm9sbGJhcldpZHRoUHJvcGVydHkgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gc2V0Q1NTUHJvcGVydHkoZG9jdW1lbnRFbGVtZW50LCBcIi0tc2Nyb2xsYmFyLXdpZHRoXCIsIGAke3Njcm9sbGJhcldpZHRofXB4YCk7XG4gICAgfTtcbiAgICBjb25zdCBwYWRkaW5nUHJvcGVydHkgPSBnZXRQYWRkaW5nUHJvcGVydHkoZG9jdW1lbnRFbGVtZW50KTtcbiAgICBjb25zdCBzZXRTdHlsZSA9ICgpID0+IHtcbiAgICAgIHJldHVybiBhc3NpZ25TdHlsZShib2R5LCB7XG4gICAgICAgIG92ZXJmbG93OiBcImhpZGRlblwiLFxuICAgICAgICBbcGFkZGluZ1Byb3BlcnR5XTogYCR7c2Nyb2xsYmFyV2lkdGh9cHhgXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IHNldElPU1N0eWxlID0gKCkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBzY3JvbGxYLFxuICAgICAgICBzY3JvbGxZLFxuICAgICAgICB2aXN1YWxWaWV3cG9ydFxuICAgICAgfSA9IHdpbjtcbiAgICAgIGNvbnN0IG9mZnNldExlZnQgPSB2aXN1YWxWaWV3cG9ydD8ub2Zmc2V0TGVmdCA/PyAwO1xuICAgICAgY29uc3Qgb2Zmc2V0VG9wID0gdmlzdWFsVmlld3BvcnQ/Lm9mZnNldFRvcCA/PyAwO1xuICAgICAgY29uc3QgcmVzdG9yZVN0eWxlID0gYXNzaWduU3R5bGUoYm9keSwge1xuICAgICAgICBwb3NpdGlvbjogXCJmaXhlZFwiLFxuICAgICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbiAgICAgICAgdG9wOiBgJHstKHNjcm9sbFkgLSBNYXRoLmZsb29yKG9mZnNldFRvcCkpfXB4YCxcbiAgICAgICAgbGVmdDogYCR7LShzY3JvbGxYIC0gTWF0aC5mbG9vcihvZmZzZXRMZWZ0KSl9cHhgLFxuICAgICAgICByaWdodDogXCIwXCIsXG4gICAgICAgIFtwYWRkaW5nUHJvcGVydHldOiBgJHtzY3JvbGxiYXJXaWR0aH1weGBcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgcmVzdG9yZVN0eWxlKCk7XG4gICAgICAgIHdpbi5zY3JvbGxUbyhzY3JvbGxYLCBzY3JvbGxZKTtcbiAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBjbGVhbnVwID0gY2hhaW4oW3NldFNjcm9sbGJhcldpZHRoUHJvcGVydHkoKSwgaXNJT1MoKSA/IHNldElPU1N0eWxlKCkgOiBzZXRTdHlsZSgpXSk7XG4gICAgb25DbGVhbnVwKCgpID0+IHtcbiAgICAgIGNsZWFudXAoKTtcbiAgICAgIGJvZHkucmVtb3ZlQXR0cmlidXRlKFNDUk9MTF9MT0NLX0lERU5USUZJRVIpO1xuICAgIH0pO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlZ2lzdGVySWQoc2V0dGVyKSB7XG4gIHJldHVybiAoaWQpID0+IHtcbiAgICBzZXR0ZXIoaWQpO1xuICAgIHJldHVybiAoKSA9PiBzZXR0ZXIodm9pZCAwKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRhZ05hbWUocmVmLCBmYWxsYmFjaykge1xuICBjb25zdCBbdGFnTmFtZSwgc2V0VGFnTmFtZV0gPSBjcmVhdGVTaWduYWwoc3RyaW5nT3JVbmRlZmluZWQoZmFsbGJhY2s/LigpKSk7XG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0VGFnTmFtZShyZWYoKT8udGFnTmFtZS50b0xvd2VyQ2FzZSgpIHx8IHN0cmluZ09yVW5kZWZpbmVkKGZhbGxiYWNrPy4oKSkpO1xuICB9KTtcbiAgcmV0dXJuIHRhZ05hbWU7XG59XG5mdW5jdGlvbiBzdHJpbmdPclVuZGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gdmFsdWUgOiB2b2lkIDA7XG59XG5mdW5jdGlvbiBjcmVhdGVUb2dnbGVTdGF0ZShwcm9wcyA9IHt9KSB7XG4gIGNvbnN0IFtpc1NlbGVjdGVkLCBfc2V0SXNTZWxlY3RlZF0gPSBjcmVhdGVDb250cm9sbGFibGVCb29sZWFuU2lnbmFsKHtcbiAgICB2YWx1ZTogKCkgPT4gYWNjZXNzKHByb3BzLmlzU2VsZWN0ZWQpLFxuICAgIGRlZmF1bHRWYWx1ZTogKCkgPT4gISFhY2Nlc3MocHJvcHMuZGVmYXVsdElzU2VsZWN0ZWQpLFxuICAgIG9uQ2hhbmdlOiAodmFsdWUpID0+IHByb3BzLm9uU2VsZWN0ZWRDaGFuZ2U/Lih2YWx1ZSlcbiAgfSk7XG4gIGNvbnN0IHNldElzU2VsZWN0ZWQgPSAodmFsdWUpID0+IHtcbiAgICBpZiAoIWFjY2Vzcyhwcm9wcy5pc1JlYWRPbmx5KSAmJiAhYWNjZXNzKHByb3BzLmlzRGlzYWJsZWQpKSB7XG4gICAgICBfc2V0SXNTZWxlY3RlZCh2YWx1ZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCB0b2dnbGUgPSAoKSA9PiB7XG4gICAgaWYgKCFhY2Nlc3MocHJvcHMuaXNSZWFkT25seSkgJiYgIWFjY2Vzcyhwcm9wcy5pc0Rpc2FibGVkKSkge1xuICAgICAgX3NldElzU2VsZWN0ZWQoIWlzU2VsZWN0ZWQoKSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgIGlzU2VsZWN0ZWQsXG4gICAgc2V0SXNTZWxlY3RlZCxcbiAgICB0b2dnbGVcbiAgfTtcbn1cbnZhciBGT1JNX0NPTlRST0xfUFJPUF9OQU1FUyA9IFtcImlkXCIsIFwibmFtZVwiLCBcInZhbGlkYXRpb25TdGF0ZVwiLCBcInJlcXVpcmVkXCIsIFwiZGlzYWJsZWRcIiwgXCJyZWFkT25seVwiXTtcbmZ1bmN0aW9uIGNyZWF0ZUZvcm1Db250cm9sKHByb3BzKSB7XG4gIGNvbnN0IGRlZmF1bHRJZCA9IGBmb3JtLWNvbnRyb2wtJHtjcmVhdGVVbmlxdWVJZCgpfWA7XG4gIHByb3BzID0gbWVyZ2VEZWZhdWx0UHJvcHMoe1xuICAgIGlkOiBkZWZhdWx0SWRcbiAgfSwgcHJvcHMpO1xuICBjb25zdCBbbGFiZWxJZCwgc2V0TGFiZWxJZF0gPSBjcmVhdGVTaWduYWwoKTtcbiAgY29uc3QgW2ZpZWxkSWQsIHNldEZpZWxkSWRdID0gY3JlYXRlU2lnbmFsKCk7XG4gIGNvbnN0IFtkZXNjcmlwdGlvbklkLCBzZXREZXNjcmlwdGlvbklkXSA9IGNyZWF0ZVNpZ25hbCgpO1xuICBjb25zdCBbZXJyb3JNZXNzYWdlSWQsIHNldEVycm9yTWVzc2FnZUlkXSA9IGNyZWF0ZVNpZ25hbCgpO1xuICBjb25zdCBnZXRBcmlhTGFiZWxsZWRCeSA9IChmaWVsZElkMiwgZmllbGRBcmlhTGFiZWwsIGZpZWxkQXJpYUxhYmVsbGVkQnkpID0+IHtcbiAgICBjb25zdCBoYXNBcmlhTGFiZWxsZWRCeSA9IGZpZWxkQXJpYUxhYmVsbGVkQnkgIT0gbnVsbCB8fCBsYWJlbElkKCkgIT0gbnVsbDtcbiAgICByZXR1cm4gW1xuICAgICAgZmllbGRBcmlhTGFiZWxsZWRCeSxcbiAgICAgIGxhYmVsSWQoKSxcbiAgICAgIC8vIElmIHRoZXJlIGlzIGJvdGggYW4gYXJpYS1sYWJlbCBhbmQgYXJpYS1sYWJlbGxlZGJ5LCBhZGQgdGhlIGZpZWxkIGl0c2VsZiBoYXMgYW4gYXJpYS1sYWJlbGxlZGJ5XG4gICAgICBoYXNBcmlhTGFiZWxsZWRCeSAmJiBmaWVsZEFyaWFMYWJlbCAhPSBudWxsID8gZmllbGRJZDIgOiB2b2lkIDBcbiAgICBdLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKSB8fCB2b2lkIDA7XG4gIH07XG4gIGNvbnN0IGdldEFyaWFEZXNjcmliZWRCeSA9IChmaWVsZEFyaWFEZXNjcmliZWRCeSkgPT4ge1xuICAgIHJldHVybiBbXG4gICAgICBkZXNjcmlwdGlvbklkKCksXG4gICAgICAvLyBVc2UgYXJpYS1kZXNjcmliZWRieSBmb3IgZXJyb3IgbWVzc2FnZSBiZWNhdXNlIGFyaWEtZXJyb3JtZXNzYWdlIGlzIHVuc3VwcG9ydGVkIHVzaW5nIFZvaWNlT3ZlciBvciBOVkRBLlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hZG9iZS9yZWFjdC1zcGVjdHJ1bS9pc3N1ZXMvMTM0NiNpc3N1ZWNvbW1lbnQtNzQwMTM2MjY4XG4gICAgICBlcnJvck1lc3NhZ2VJZCgpLFxuICAgICAgZmllbGRBcmlhRGVzY3JpYmVkQnlcbiAgICBdLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKSB8fCB2b2lkIDA7XG4gIH07XG4gIGNvbnN0IGRhdGFzZXQgPSBjcmVhdGVNZW1vKCgpID0+ICh7XG4gICAgXCJkYXRhLXZhbGlkXCI6IGFjY2Vzcyhwcm9wcy52YWxpZGF0aW9uU3RhdGUpID09PSBcInZhbGlkXCIgPyBcIlwiIDogdm9pZCAwLFxuICAgIFwiZGF0YS1pbnZhbGlkXCI6IGFjY2Vzcyhwcm9wcy52YWxpZGF0aW9uU3RhdGUpID09PSBcImludmFsaWRcIiA/IFwiXCIgOiB2b2lkIDAsXG4gICAgXCJkYXRhLXJlcXVpcmVkXCI6IGFjY2Vzcyhwcm9wcy5yZXF1aXJlZCkgPyBcIlwiIDogdm9pZCAwLFxuICAgIFwiZGF0YS1kaXNhYmxlZFwiOiBhY2Nlc3MocHJvcHMuZGlzYWJsZWQpID8gXCJcIiA6IHZvaWQgMCxcbiAgICBcImRhdGEtcmVhZG9ubHlcIjogYWNjZXNzKHByb3BzLnJlYWRPbmx5KSA/IFwiXCIgOiB2b2lkIDBcbiAgfSkpO1xuICBjb25zdCBmb3JtQ29udHJvbENvbnRleHQgPSB7XG4gICAgbmFtZTogKCkgPT4gYWNjZXNzKHByb3BzLm5hbWUpID8/IGFjY2Vzcyhwcm9wcy5pZCksXG4gICAgZGF0YXNldCxcbiAgICB2YWxpZGF0aW9uU3RhdGU6ICgpID0+IGFjY2Vzcyhwcm9wcy52YWxpZGF0aW9uU3RhdGUpLFxuICAgIGlzUmVxdWlyZWQ6ICgpID0+IGFjY2Vzcyhwcm9wcy5yZXF1aXJlZCksXG4gICAgaXNEaXNhYmxlZDogKCkgPT4gYWNjZXNzKHByb3BzLmRpc2FibGVkKSxcbiAgICBpc1JlYWRPbmx5OiAoKSA9PiBhY2Nlc3MocHJvcHMucmVhZE9ubHkpLFxuICAgIGxhYmVsSWQsXG4gICAgZmllbGRJZCxcbiAgICBkZXNjcmlwdGlvbklkLFxuICAgIGVycm9yTWVzc2FnZUlkLFxuICAgIGdldEFyaWFMYWJlbGxlZEJ5LFxuICAgIGdldEFyaWFEZXNjcmliZWRCeSxcbiAgICBnZW5lcmF0ZUlkOiBjcmVhdGVHZW5lcmF0ZUlkKCgpID0+IGFjY2Vzcyhwcm9wcy5pZCkpLFxuICAgIHJlZ2lzdGVyTGFiZWw6IGNyZWF0ZVJlZ2lzdGVySWQoc2V0TGFiZWxJZCksXG4gICAgcmVnaXN0ZXJGaWVsZDogY3JlYXRlUmVnaXN0ZXJJZChzZXRGaWVsZElkKSxcbiAgICByZWdpc3RlckRlc2NyaXB0aW9uOiBjcmVhdGVSZWdpc3RlcklkKHNldERlc2NyaXB0aW9uSWQpLFxuICAgIHJlZ2lzdGVyRXJyb3JNZXNzYWdlOiBjcmVhdGVSZWdpc3RlcklkKHNldEVycm9yTWVzc2FnZUlkKVxuICB9O1xuICByZXR1cm4ge1xuICAgIGZvcm1Db250cm9sQ29udGV4dFxuICB9O1xufVxudmFyIEZvcm1Db250cm9sQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbmZ1bmN0aW9uIHVzZUZvcm1Db250cm9sQ29udGV4dCgpIHtcbiAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoRm9ybUNvbnRyb2xDb250ZXh0KTtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIltrb2JhbHRlXTogYHVzZUZvcm1Db250cm9sQ29udGV4dGAgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGBGb3JtQ29udHJvbENvbnRleHQuUHJvdmlkZXJgIGNvbXBvbmVudFwiKTtcbiAgfVxuICByZXR1cm4gY29udGV4dDtcbn1cbmZ1bmN0aW9uIFBvbHltb3JwaGljKHByb3BzKSB7XG4gIGNvbnN0IFtsb2NhbCwgb3RoZXJzXSA9IHNwbGl0UHJvcHMocHJvcHMsIFtcImFzQ2hpbGRcIiwgXCJhc1wiLCBcImNoaWxkcmVuXCJdKTtcbiAgaWYgKCFsb2NhbC5hc0NoaWxkKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChEeW5hbWljLCBtZXJnZVByb3BzKHtcbiAgICAgIGdldCBjb21wb25lbnQoKSB7XG4gICAgICAgIHJldHVybiBsb2NhbC5hcztcbiAgICAgIH1cbiAgICB9LCBvdGhlcnMsIHtcbiAgICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsLmNoaWxkcmVuO1xuICAgICAgfVxuICAgIH0pKTtcbiAgfVxuICBjb25zdCByZXNvbHZlZENoaWxkcmVuID0gY2hpbGRyZW4oKCkgPT4gbG9jYWwuY2hpbGRyZW4pO1xuICBpZiAoaXNBcyhyZXNvbHZlZENoaWxkcmVuKCkpKSB7XG4gICAgY29uc3QgY29tYmluZWRQcm9wcyA9IGNvbWJpbmVQcm9wczIob3RoZXJzLCByZXNvbHZlZENoaWxkcmVuKCk/LnByb3BzID8/IHt9KTtcbiAgICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KER5bmFtaWMsIGNvbWJpbmVkUHJvcHMpO1xuICB9XG4gIGlmIChpc0FycmF5KHJlc29sdmVkQ2hpbGRyZW4oKSkpIHtcbiAgICBjb25zdCBuZXdFbGVtZW50ID0gcmVzb2x2ZWRDaGlsZHJlbigpLmZpbmQoaXNBcyk7XG4gICAgaWYgKG5ld0VsZW1lbnQpIHtcbiAgICAgIGNvbnN0IG5ld0NoaWxkcmVuID0gKCkgPT4gY3JlYXRlQ29tcG9uZW50KEZvciwge1xuICAgICAgICBnZXQgZWFjaCgpIHtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZWRDaGlsZHJlbigpO1xuICAgICAgICB9LFxuICAgICAgICBjaGlsZHJlbjogKGNoaWxkKSA9PiBjcmVhdGVDb21wb25lbnQoU2hvdywge1xuICAgICAgICAgIHdoZW46IGNoaWxkID09PSBuZXdFbGVtZW50LFxuICAgICAgICAgIGZhbGxiYWNrOiBjaGlsZCxcbiAgICAgICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3RWxlbWVudC5wcm9wcy5jaGlsZHJlbjtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGNvbWJpbmVkUHJvcHMgPSBjb21iaW5lUHJvcHMyKG90aGVycywgbmV3RWxlbWVudD8ucHJvcHMgPz8ge30pO1xuICAgICAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChEeW5hbWljLCBtZXJnZVByb3BzKGNvbWJpbmVkUHJvcHMsIHtcbiAgICAgICAgY2hpbGRyZW46IG5ld0NoaWxkcmVuXG4gICAgICB9KSk7XG4gICAgfVxuICB9XG4gIHRocm93IG5ldyBFcnJvcihcIltrb2JhbHRlXTogQ29tcG9uZW50IGlzIGV4cGVjdGVkIHRvIHJlbmRlciBgYXNDaGlsZGAgYnV0IG5vIGNoaWxkcmVuIGBBc2AgY29tcG9uZW50IHdhcyBmb3VuZC5cIik7XG59XG52YXIgQVNfQ09NUE9ORU5UX1NZTUJPTCA9IFN5bWJvbChcIiQkS29iYWx0ZUFzQ29tcG9uZW50XCIpO1xuZnVuY3Rpb24gaXNBcyhjb21wb25lbnQpIHtcbiAgcmV0dXJuIGNvbXBvbmVudD8uW0FTX0NPTVBPTkVOVF9TWU1CT0xdID09PSB0cnVlO1xufVxuZnVuY3Rpb24gY29tYmluZVByb3BzMihiYXNlUHJvcHMsIG92ZXJyaWRlUHJvcHMpIHtcbiAgcmV0dXJuIGNvbWJpbmVQcm9wcyhbYmFzZVByb3BzLCBvdmVycmlkZVByb3BzXSwge1xuICAgIHJldmVyc2VFdmVudEhhbmRsZXJzOiB0cnVlXG4gIH0pO1xufVxuZnVuY3Rpb24gRm9ybUNvbnRyb2xEZXNjcmlwdGlvbihwcm9wcykge1xuICBjb25zdCBjb250ZXh0ID0gdXNlRm9ybUNvbnRyb2xDb250ZXh0KCk7XG4gIHByb3BzID0gbWVyZ2VEZWZhdWx0UHJvcHMoe1xuICAgIGlkOiBjb250ZXh0LmdlbmVyYXRlSWQoXCJkZXNjcmlwdGlvblwiKVxuICB9LCBwcm9wcyk7XG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiBvbkNsZWFudXAoY29udGV4dC5yZWdpc3RlckRlc2NyaXB0aW9uKHByb3BzLmlkKSkpO1xuICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KFBvbHltb3JwaGljLCBtZXJnZVByb3BzKHtcbiAgICBhczogXCJkaXZcIlxuICB9LCAoKSA9PiBjb250ZXh0LmRhdGFzZXQoKSwgcHJvcHMpKTtcbn1cbmZ1bmN0aW9uIEZvcm1Db250cm9sRXJyb3JNZXNzYWdlKHByb3BzKSB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VGb3JtQ29udHJvbENvbnRleHQoKTtcbiAgcHJvcHMgPSBtZXJnZURlZmF1bHRQcm9wcyh7XG4gICAgaWQ6IGNvbnRleHQuZ2VuZXJhdGVJZChcImVycm9yLW1lc3NhZ2VcIilcbiAgfSwgcHJvcHMpO1xuICBjb25zdCBbbG9jYWwsIG90aGVyc10gPSBzcGxpdFByb3BzKHByb3BzLCBbXCJmb3JjZU1vdW50XCJdKTtcbiAgY29uc3QgaXNJbnZhbGlkID0gKCkgPT4gY29udGV4dC52YWxpZGF0aW9uU3RhdGUoKSA9PT0gXCJpbnZhbGlkXCI7XG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFpc0ludmFsaWQoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBvbkNsZWFudXAoY29udGV4dC5yZWdpc3RlckVycm9yTWVzc2FnZShvdGhlcnMuaWQpKTtcbiAgfSk7XG4gIHJldHVybiBjcmVhdGVDb21wb25lbnQoU2hvdywge1xuICAgIGdldCB3aGVuKCkge1xuICAgICAgcmV0dXJuIGxvY2FsLmZvcmNlTW91bnQgfHwgaXNJbnZhbGlkKCk7XG4gICAgfSxcbiAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KFBvbHltb3JwaGljLCBtZXJnZVByb3BzKHtcbiAgICAgICAgYXM6IFwiZGl2XCJcbiAgICAgIH0sICgpID0+IGNvbnRleHQuZGF0YXNldCgpLCBvdGhlcnMpKTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gRm9ybUNvbnRyb2xMYWJlbChwcm9wcykge1xuICBsZXQgcmVmO1xuICBjb25zdCBjb250ZXh0ID0gdXNlRm9ybUNvbnRyb2xDb250ZXh0KCk7XG4gIHByb3BzID0gbWVyZ2VEZWZhdWx0UHJvcHMoe1xuICAgIGlkOiBjb250ZXh0LmdlbmVyYXRlSWQoXCJsYWJlbFwiKVxuICB9LCBwcm9wcyk7XG4gIGNvbnN0IFtsb2NhbCwgb3RoZXJzXSA9IHNwbGl0UHJvcHMocHJvcHMsIFtcInJlZlwiXSk7XG4gIGNvbnN0IHRhZ05hbWUgPSBjcmVhdGVUYWdOYW1lKCgpID0+IHJlZiwgKCkgPT4gXCJsYWJlbFwiKTtcbiAgY3JlYXRlRWZmZWN0KCgpID0+IG9uQ2xlYW51cChjb250ZXh0LnJlZ2lzdGVyTGFiZWwob3RoZXJzLmlkKSkpO1xuICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KFBvbHltb3JwaGljLCBtZXJnZVByb3BzKHtcbiAgICBhczogXCJsYWJlbFwiLFxuICAgIHJlZihyJCkge1xuICAgICAgY29uc3QgX3JlZiQgPSBtZXJnZVJlZnMoKGVsKSA9PiByZWYgPSBlbCwgbG9jYWwucmVmKTtcbiAgICAgIHR5cGVvZiBfcmVmJCA9PT0gXCJmdW5jdGlvblwiICYmIF9yZWYkKHIkKTtcbiAgICB9LFxuICAgIGdldCBbXCJmb3JcIl0oKSB7XG4gICAgICByZXR1cm4gY3JlYXRlTWVtbygoKSA9PiB0YWdOYW1lKCkgPT09IFwibGFiZWxcIikoKSA/IGNvbnRleHQuZmllbGRJZCgpIDogdm9pZCAwO1xuICAgIH1cbiAgfSwgKCkgPT4gY29udGV4dC5kYXRhc2V0KCksIG90aGVycykpO1xufVxudmFyIFJUTF9TQ1JJUFRTID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1wiQXZzdFwiLCBcIkFyYWJcIiwgXCJBcm1pXCIsIFwiU3lyY1wiLCBcIlNhbXJcIiwgXCJNYW5kXCIsIFwiVGhhYVwiLCBcIk1lbmRcIiwgXCJOa29vXCIsIFwiQWRsbVwiLCBcIlJvaGdcIiwgXCJIZWJyXCJdKTtcbnZhciBSVExfTEFOR1MgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJhZVwiLCBcImFyXCIsIFwiYXJjXCIsIFwiYmNjXCIsIFwiYnFpXCIsIFwiY2tiXCIsIFwiZHZcIiwgXCJmYVwiLCBcImdsa1wiLCBcImhlXCIsIFwia3VcIiwgXCJtem5cIiwgXCJucW9cIiwgXCJwbmJcIiwgXCJwc1wiLCBcInNkXCIsIFwidWdcIiwgXCJ1clwiLCBcInlpXCJdKTtcbmZ1bmN0aW9uIGlzUlRMMihsb2NhbGUpIHtcbiAgaWYgKEludGwuTG9jYWxlKSB7XG4gICAgY29uc3Qgc2NyaXB0ID0gbmV3IEludGwuTG9jYWxlKGxvY2FsZSkubWF4aW1pemUoKS5zY3JpcHQgPz8gXCJcIjtcbiAgICByZXR1cm4gUlRMX1NDUklQVFMuaGFzKHNjcmlwdCk7XG4gIH1cbiAgY29uc3QgbGFuZyA9IGxvY2FsZS5zcGxpdChcIi1cIilbMF07XG4gIHJldHVybiBSVExfTEFOR1MuaGFzKGxhbmcpO1xufVxuZnVuY3Rpb24gZ2V0UmVhZGluZ0RpcmVjdGlvbihsb2NhbGUpIHtcbiAgcmV0dXJuIGlzUlRMMihsb2NhbGUpID8gXCJydGxcIiA6IFwibHRyXCI7XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0TG9jYWxlKCkge1xuICBsZXQgbG9jYWxlID0gKFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB0eXBlb2YgbmF2aWdhdG9yICE9PSBcInVuZGVmaW5lZFwiICYmIChuYXZpZ2F0b3IubGFuZ3VhZ2UgfHwgbmF2aWdhdG9yLnVzZXJMYW5ndWFnZSkgfHwgXCJlbi1VU1wiXG4gICk7XG4gIHRyeSB7XG4gICAgSW50bC5EYXRlVGltZUZvcm1hdC5zdXBwb3J0ZWRMb2NhbGVzT2YoW2xvY2FsZV0pO1xuICB9IGNhdGNoIChfZXJyKSB7XG4gICAgbG9jYWxlID0gXCJlbi1VU1wiO1xuICB9XG4gIHJldHVybiB7XG4gICAgbG9jYWxlLFxuICAgIGRpcmVjdGlvbjogZ2V0UmVhZGluZ0RpcmVjdGlvbihsb2NhbGUpXG4gIH07XG59XG52YXIgY3VycmVudExvY2FsZSA9IGdldERlZmF1bHRMb2NhbGUoKTtcbnZhciBsaXN0ZW5lcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuZnVuY3Rpb24gdXBkYXRlTG9jYWxlKCkge1xuICBjdXJyZW50TG9jYWxlID0gZ2V0RGVmYXVsdExvY2FsZSgpO1xuICBmb3IgKGNvbnN0IGxpc3RlbmVyIG9mIGxpc3RlbmVycykge1xuICAgIGxpc3RlbmVyKGN1cnJlbnRMb2NhbGUpO1xuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVEZWZhdWx0TG9jYWxlKCkge1xuICBjb25zdCBkZWZhdWx0U1NSTG9jYWxlID0ge1xuICAgIGxvY2FsZTogXCJlbi1VU1wiLFxuICAgIGRpcmVjdGlvbjogXCJsdHJcIlxuICB9O1xuICBjb25zdCBbZGVmYXVsdENsaWVudExvY2FsZSwgc2V0RGVmYXVsdENsaWVudExvY2FsZV0gPSBjcmVhdGVTaWduYWwoY3VycmVudExvY2FsZSk7XG4gIGNvbnN0IGRlZmF1bHRMb2NhbGUgPSBjcmVhdGVNZW1vKCgpID0+IGlzU2VydmVyID8gZGVmYXVsdFNTUkxvY2FsZSA6IGRlZmF1bHRDbGllbnRMb2NhbGUoKSk7XG4gIG9uTW91bnQoKCkgPT4ge1xuICAgIGlmIChsaXN0ZW5lcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsYW5ndWFnZWNoYW5nZVwiLCB1cGRhdGVMb2NhbGUpO1xuICAgIH1cbiAgICBsaXN0ZW5lcnMuYWRkKHNldERlZmF1bHRDbGllbnRMb2NhbGUpO1xuICAgIG9uQ2xlYW51cCgoKSA9PiB7XG4gICAgICBsaXN0ZW5lcnMuZGVsZXRlKHNldERlZmF1bHRDbGllbnRMb2NhbGUpO1xuICAgICAgaWYgKGxpc3RlbmVycy5zaXplID09PSAwKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibGFuZ3VhZ2VjaGFuZ2VcIiwgdXBkYXRlTG9jYWxlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgbG9jYWxlOiAoKSA9PiBkZWZhdWx0TG9jYWxlKCkubG9jYWxlLFxuICAgIGRpcmVjdGlvbjogKCkgPT4gZGVmYXVsdExvY2FsZSgpLmRpcmVjdGlvblxuICB9O1xufVxudmFyIEkxOG5Db250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuZnVuY3Rpb24gdXNlTG9jYWxlKCkge1xuICBjb25zdCBkZWZhdWx0TG9jYWxlID0gY3JlYXRlRGVmYXVsdExvY2FsZSgpO1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChJMThuQ29udGV4dCk7XG4gIHJldHVybiBjb250ZXh0IHx8IGRlZmF1bHRMb2NhbGU7XG59XG52YXIgY2FjaGUkMSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG5mdW5jdGlvbiBjcmVhdGVDb2xsYXRvcihvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICBsb2NhbGVcbiAgfSA9IHVzZUxvY2FsZSgpO1xuICBjb25zdCBjYWNoZUtleSA9IGNyZWF0ZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiBsb2NhbGUoKSArIChvcHRpb25zID8gT2JqZWN0LmVudHJpZXMob3B0aW9ucykuc29ydCgoYTIsIGIyKSA9PiBhMlswXSA8IGIyWzBdID8gLTEgOiAxKS5qb2luKCkgOiBcIlwiKTtcbiAgfSk7XG4gIHJldHVybiBjcmVhdGVNZW1vKCgpID0+IHtcbiAgICBjb25zdCBrZXkgPSBjYWNoZUtleSgpO1xuICAgIGxldCBjb2xsYXRvcjtcbiAgICBpZiAoY2FjaGUkMS5oYXMoa2V5KSkge1xuICAgICAgY29sbGF0b3IgPSBjYWNoZSQxLmdldChrZXkpO1xuICAgIH1cbiAgICBpZiAoIWNvbGxhdG9yKSB7XG4gICAgICBjb2xsYXRvciA9IG5ldyBJbnRsLkNvbGxhdG9yKGxvY2FsZSgpLCBvcHRpb25zKTtcbiAgICAgIGNhY2hlJDEuc2V0KGtleSwgY29sbGF0b3IpO1xuICAgIH1cbiAgICByZXR1cm4gY29sbGF0b3I7XG4gIH0pO1xufVxudmFyIFNlbGVjdGlvbiA9IGNsYXNzIF9TZWxlY3Rpb24gZXh0ZW5kcyBTZXQge1xuICBjb25zdHJ1Y3RvcihrZXlzMiwgYW5jaG9yS2V5LCBjdXJyZW50S2V5KSB7XG4gICAgc3VwZXIoa2V5czIpO1xuICAgIGlmIChrZXlzMiBpbnN0YW5jZW9mIF9TZWxlY3Rpb24pIHtcbiAgICAgIHRoaXMuYW5jaG9yS2V5ID0gYW5jaG9yS2V5IHx8IGtleXMyLmFuY2hvcktleTtcbiAgICAgIHRoaXMuY3VycmVudEtleSA9IGN1cnJlbnRLZXkgfHwga2V5czIuY3VycmVudEtleTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hbmNob3JLZXkgPSBhbmNob3JLZXk7XG4gICAgICB0aGlzLmN1cnJlbnRLZXkgPSBjdXJyZW50S2V5O1xuICAgIH1cbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZUNvbnRyb2xsYWJsZVNlbGVjdGlvblNpZ25hbChwcm9wcykge1xuICBjb25zdCBbX3ZhbHVlLCBzZXRWYWx1ZV0gPSBjcmVhdGVDb250cm9sbGFibGVTaWduYWwocHJvcHMpO1xuICBjb25zdCB2YWx1ZSA9ICgpID0+IF92YWx1ZSgpID8/IG5ldyBTZWxlY3Rpb24oKTtcbiAgcmV0dXJuIFt2YWx1ZSwgc2V0VmFsdWVdO1xufVxuZnVuY3Rpb24gaXNOb25Db250aWd1b3VzU2VsZWN0aW9uTW9kaWZpZXIoZTIpIHtcbiAgcmV0dXJuIGlzQXBwbGVEZXZpY2UoKSA/IGUyLmFsdEtleSA6IGUyLmN0cmxLZXk7XG59XG5mdW5jdGlvbiBpc0N0cmxLZXlQcmVzc2VkKGUyKSB7XG4gIGlmIChpc01hYygpKSB7XG4gICAgcmV0dXJuIGUyLm1ldGFLZXk7XG4gIH1cbiAgcmV0dXJuIGUyLmN0cmxLZXk7XG59XG5mdW5jdGlvbiBjb252ZXJ0U2VsZWN0aW9uKHNlbGVjdGlvbikge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzZWxlY3Rpb24pO1xufVxuZnVuY3Rpb24gaXNTYW1lU2VsZWN0aW9uKHNldEEsIHNldEIpIHtcbiAgaWYgKHNldEEuc2l6ZSAhPT0gc2V0Qi5zaXplKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAoY29uc3QgaXRlbSBvZiBzZXRBKSB7XG4gICAgaWYgKCFzZXRCLmhhcyhpdGVtKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZU11bHRpcGxlU2VsZWN0aW9uU3RhdGUocHJvcHMpIHtcbiAgcHJvcHMgPSBtZXJnZURlZmF1bHRQcm9wcyh7XG4gICAgc2VsZWN0aW9uTW9kZTogXCJub25lXCIsXG4gICAgc2VsZWN0aW9uQmVoYXZpb3I6IFwidG9nZ2xlXCJcbiAgfSwgcHJvcHMpO1xuICBjb25zdCBbaXNGb2N1c2VkLCBzZXRGb2N1c2VkXSA9IGNyZWF0ZVNpZ25hbChmYWxzZSk7XG4gIGNvbnN0IFtmb2N1c2VkS2V5LCBzZXRGb2N1c2VkS2V5XSA9IGNyZWF0ZVNpZ25hbCgpO1xuICBjb25zdCBzZWxlY3RlZEtleXNQcm9wID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgY29uc3Qgc2VsZWN0aW9uID0gYWNjZXNzKHByb3BzLnNlbGVjdGVkS2V5cyk7XG4gICAgaWYgKHNlbGVjdGlvbiAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gY29udmVydFNlbGVjdGlvbihzZWxlY3Rpb24pO1xuICAgIH1cbiAgICByZXR1cm4gc2VsZWN0aW9uO1xuICB9KTtcbiAgY29uc3QgZGVmYXVsdFNlbGVjdGVkS2V5cyA9IGNyZWF0ZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IGRlZmF1bHRTZWxlY3Rpb24gPSBhY2Nlc3MocHJvcHMuZGVmYXVsdFNlbGVjdGVkS2V5cyk7XG4gICAgaWYgKGRlZmF1bHRTZWxlY3Rpb24gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNvbnZlcnRTZWxlY3Rpb24oZGVmYXVsdFNlbGVjdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBuZXcgU2VsZWN0aW9uKCk7XG4gIH0pO1xuICBjb25zdCBbc2VsZWN0ZWRLZXlzLCBfc2V0U2VsZWN0ZWRLZXlzXSA9IGNyZWF0ZUNvbnRyb2xsYWJsZVNlbGVjdGlvblNpZ25hbCh7XG4gICAgdmFsdWU6IHNlbGVjdGVkS2V5c1Byb3AsXG4gICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0U2VsZWN0ZWRLZXlzLFxuICAgIG9uQ2hhbmdlOiAodmFsdWUpID0+IHByb3BzLm9uU2VsZWN0aW9uQ2hhbmdlPy4odmFsdWUpXG4gIH0pO1xuICBjb25zdCBbc2VsZWN0aW9uQmVoYXZpb3IsIHNldFNlbGVjdGlvbkJlaGF2aW9yXSA9IGNyZWF0ZVNpZ25hbChhY2Nlc3MocHJvcHMuc2VsZWN0aW9uQmVoYXZpb3IpKTtcbiAgY29uc3Qgc2VsZWN0aW9uTW9kZSA9ICgpID0+IGFjY2Vzcyhwcm9wcy5zZWxlY3Rpb25Nb2RlKTtcbiAgY29uc3QgZGlzYWxsb3dFbXB0eVNlbGVjdGlvbiA9ICgpID0+IGFjY2Vzcyhwcm9wcy5kaXNhbGxvd0VtcHR5U2VsZWN0aW9uKSA/PyBmYWxzZTtcbiAgY29uc3Qgc2V0U2VsZWN0ZWRLZXlzID0gKGtleXMyKSA9PiB7XG4gICAgaWYgKGFjY2Vzcyhwcm9wcy5hbGxvd0R1cGxpY2F0ZVNlbGVjdGlvbkV2ZW50cykgfHwgIWlzU2FtZVNlbGVjdGlvbihrZXlzMiwgc2VsZWN0ZWRLZXlzKCkpKSB7XG4gICAgICBfc2V0U2VsZWN0ZWRLZXlzKGtleXMyKTtcbiAgICB9XG4gIH07XG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qgc2VsZWN0aW9uID0gc2VsZWN0ZWRLZXlzKCk7XG4gICAgaWYgKGFjY2Vzcyhwcm9wcy5zZWxlY3Rpb25CZWhhdmlvcikgPT09IFwicmVwbGFjZVwiICYmIHNlbGVjdGlvbkJlaGF2aW9yKCkgPT09IFwidG9nZ2xlXCIgJiYgdHlwZW9mIHNlbGVjdGlvbiA9PT0gXCJvYmplY3RcIiAmJiBzZWxlY3Rpb24uc2l6ZSA9PT0gMCkge1xuICAgICAgc2V0U2VsZWN0aW9uQmVoYXZpb3IoXCJyZXBsYWNlXCIpO1xuICAgIH1cbiAgfSk7XG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0U2VsZWN0aW9uQmVoYXZpb3IoYWNjZXNzKHByb3BzLnNlbGVjdGlvbkJlaGF2aW9yKSA/PyBcInRvZ2dsZVwiKTtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgc2VsZWN0aW9uTW9kZSxcbiAgICBkaXNhbGxvd0VtcHR5U2VsZWN0aW9uLFxuICAgIHNlbGVjdGlvbkJlaGF2aW9yLFxuICAgIHNldFNlbGVjdGlvbkJlaGF2aW9yLFxuICAgIGlzRm9jdXNlZCxcbiAgICBzZXRGb2N1c2VkLFxuICAgIGZvY3VzZWRLZXksXG4gICAgc2V0Rm9jdXNlZEtleSxcbiAgICBzZWxlY3RlZEtleXMsXG4gICAgc2V0U2VsZWN0ZWRLZXlzXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVUeXBlU2VsZWN0KHByb3BzKSB7XG4gIGNvbnN0IFtzZWFyY2gsIHNldFNlYXJjaF0gPSBjcmVhdGVTaWduYWwoXCJcIik7XG4gIGNvbnN0IFt0aW1lb3V0SWQsIHNldFRpbWVvdXRJZF0gPSBjcmVhdGVTaWduYWwoLTEpO1xuICBjb25zdCBvbktleURvd24gPSAoZTIpID0+IHtcbiAgICBpZiAoYWNjZXNzKHByb3BzLmlzRGlzYWJsZWQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGRlbGVnYXRlID0gYWNjZXNzKHByb3BzLmtleWJvYXJkRGVsZWdhdGUpO1xuICAgIGNvbnN0IG1hbmFnZXIgPSBhY2Nlc3MocHJvcHMuc2VsZWN0aW9uTWFuYWdlcik7XG4gICAgaWYgKCFkZWxlZ2F0ZS5nZXRLZXlGb3JTZWFyY2gpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY2hhcmFjdGVyID0gZ2V0U3RyaW5nRm9yS2V5KGUyLmtleSk7XG4gICAgaWYgKCFjaGFyYWN0ZXIgfHwgZTIuY3RybEtleSB8fCBlMi5tZXRhS2V5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjaGFyYWN0ZXIgPT09IFwiIFwiICYmIHNlYXJjaCgpLnRyaW0oKS5sZW5ndGggPiAwKSB7XG4gICAgICBlMi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZTIuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICAgIGxldCBuZXdTZWFyY2ggPSBzZXRTZWFyY2goKHByZXYpID0+IHByZXYgKz0gY2hhcmFjdGVyKTtcbiAgICBsZXQga2V5ID0gZGVsZWdhdGUuZ2V0S2V5Rm9yU2VhcmNoKG5ld1NlYXJjaCwgbWFuYWdlci5mb2N1c2VkS2V5KCkpID8/IGRlbGVnYXRlLmdldEtleUZvclNlYXJjaChuZXdTZWFyY2gpO1xuICAgIGlmIChrZXkgPT0gbnVsbCAmJiBpc0FsbFNhbWVMZXR0ZXIobmV3U2VhcmNoKSkge1xuICAgICAgbmV3U2VhcmNoID0gbmV3U2VhcmNoWzBdO1xuICAgICAga2V5ID0gZGVsZWdhdGUuZ2V0S2V5Rm9yU2VhcmNoKG5ld1NlYXJjaCwgbWFuYWdlci5mb2N1c2VkS2V5KCkpID8/IGRlbGVnYXRlLmdldEtleUZvclNlYXJjaChuZXdTZWFyY2gpO1xuICAgIH1cbiAgICBpZiAoa2V5ICE9IG51bGwpIHtcbiAgICAgIG1hbmFnZXIuc2V0Rm9jdXNlZEtleShrZXkpO1xuICAgICAgcHJvcHMub25UeXBlU2VsZWN0Py4oa2V5KTtcbiAgICB9XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCgpKTtcbiAgICBzZXRUaW1lb3V0SWQod2luZG93LnNldFRpbWVvdXQoKCkgPT4gc2V0U2VhcmNoKFwiXCIpLCA1MDApKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlU2VsZWN0SGFuZGxlcnM6IHtcbiAgICAgIG9uS2V5RG93blxuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFN0cmluZ0ZvcktleShrZXkpIHtcbiAgaWYgKGtleS5sZW5ndGggPT09IDEgfHwgIS9eW0EtWl0vaS50ZXN0KGtleSkpIHtcbiAgICByZXR1cm4ga2V5O1xuICB9XG4gIHJldHVybiBcIlwiO1xufVxuZnVuY3Rpb24gaXNBbGxTYW1lTGV0dGVyKHNlYXJjaCkge1xuICByZXR1cm4gc2VhcmNoLnNwbGl0KFwiXCIpLmV2ZXJ5KChsZXR0ZXIpID0+IGxldHRlciA9PT0gc2VhcmNoWzBdKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdGFibGVDb2xsZWN0aW9uKHByb3BzLCByZWYsIHNjcm9sbFJlZikge1xuICBjb25zdCBkZWZhdWx0UHJvcHMgPSB7XG4gICAgc2VsZWN0T25Gb2N1czogKCkgPT4gYWNjZXNzKHByb3BzLnNlbGVjdGlvbk1hbmFnZXIpLnNlbGVjdGlvbkJlaGF2aW9yKCkgPT09IFwicmVwbGFjZVwiXG4gIH07XG4gIHByb3BzID0gbWVyZ2VQcm9wcyhkZWZhdWx0UHJvcHMsIHByb3BzKTtcbiAgY29uc3QgZmluYWxTY3JvbGxSZWYgPSAoKSA9PiBzY3JvbGxSZWY/LigpID8/IHJlZigpO1xuICBjb25zdCB7XG4gICAgZGlyZWN0aW9uXG4gIH0gPSB1c2VMb2NhbGUoKTtcbiAgbGV0IHNjcm9sbFBvcyA9IHtcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMFxuICB9O1xuICBjcmVhdGVFdmVudExpc3RlbmVyKCgpID0+ICFhY2Nlc3MocHJvcHMuaXNWaXJ0dWFsaXplZCkgPyBmaW5hbFNjcm9sbFJlZigpIDogdm9pZCAwLCBcInNjcm9sbFwiLCAoKSA9PiB7XG4gICAgY29uc3Qgc2Nyb2xsRWwgPSBmaW5hbFNjcm9sbFJlZigpO1xuICAgIGlmICghc2Nyb2xsRWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2Nyb2xsUG9zID0ge1xuICAgICAgdG9wOiBzY3JvbGxFbC5zY3JvbGxUb3AsXG4gICAgICBsZWZ0OiBzY3JvbGxFbC5zY3JvbGxMZWZ0XG4gICAgfTtcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICB0eXBlU2VsZWN0SGFuZGxlcnNcbiAgfSA9IGNyZWF0ZVR5cGVTZWxlY3Qoe1xuICAgIGlzRGlzYWJsZWQ6ICgpID0+IGFjY2Vzcyhwcm9wcy5kaXNhbGxvd1R5cGVBaGVhZCksXG4gICAga2V5Ym9hcmREZWxlZ2F0ZTogKCkgPT4gYWNjZXNzKHByb3BzLmtleWJvYXJkRGVsZWdhdGUpLFxuICAgIHNlbGVjdGlvbk1hbmFnZXI6ICgpID0+IGFjY2Vzcyhwcm9wcy5zZWxlY3Rpb25NYW5hZ2VyKVxuICB9KTtcbiAgY29uc3Qgb25LZXlEb3duID0gKGUyKSA9PiB7XG4gICAgY2FsbEhhbmRsZXIoZTIsIHR5cGVTZWxlY3RIYW5kbGVycy5vbktleURvd24pO1xuICAgIGlmIChlMi5hbHRLZXkgJiYgZTIua2V5ID09PSBcIlRhYlwiKSB7XG4gICAgICBlMi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBjb25zdCByZWZFbCA9IHJlZigpO1xuICAgIGlmICghcmVmRWw/LmNvbnRhaW5zKGUyLnRhcmdldCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbWFuYWdlciA9IGFjY2Vzcyhwcm9wcy5zZWxlY3Rpb25NYW5hZ2VyKTtcbiAgICBjb25zdCBzZWxlY3RPbkZvY3VzID0gYWNjZXNzKHByb3BzLnNlbGVjdE9uRm9jdXMpO1xuICAgIGNvbnN0IG5hdmlnYXRlVG9LZXkgPSAoa2V5KSA9PiB7XG4gICAgICBpZiAoa2V5ICE9IG51bGwpIHtcbiAgICAgICAgbWFuYWdlci5zZXRGb2N1c2VkS2V5KGtleSk7XG4gICAgICAgIGlmIChlMi5zaGlmdEtleSAmJiBtYW5hZ2VyLnNlbGVjdGlvbk1vZGUoKSA9PT0gXCJtdWx0aXBsZVwiKSB7XG4gICAgICAgICAgbWFuYWdlci5leHRlbmRTZWxlY3Rpb24oa2V5KTtcbiAgICAgICAgfSBlbHNlIGlmIChzZWxlY3RPbkZvY3VzICYmICFpc05vbkNvbnRpZ3VvdXNTZWxlY3Rpb25Nb2RpZmllcihlMikpIHtcbiAgICAgICAgICBtYW5hZ2VyLnJlcGxhY2VTZWxlY3Rpb24oa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgZGVsZWdhdGUgPSBhY2Nlc3MocHJvcHMua2V5Ym9hcmREZWxlZ2F0ZSk7XG4gICAgY29uc3Qgc2hvdWxkRm9jdXNXcmFwID0gYWNjZXNzKHByb3BzLnNob3VsZEZvY3VzV3JhcCk7XG4gICAgY29uc3QgZm9jdXNlZEtleSA9IG1hbmFnZXIuZm9jdXNlZEtleSgpO1xuICAgIHN3aXRjaCAoZTIua2V5KSB7XG4gICAgICBjYXNlIFwiQXJyb3dEb3duXCI6IHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLmdldEtleUJlbG93KSB7XG4gICAgICAgICAgZTIucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBsZXQgbmV4dEtleTtcbiAgICAgICAgICBpZiAoZm9jdXNlZEtleSAhPSBudWxsKSB7XG4gICAgICAgICAgICBuZXh0S2V5ID0gZGVsZWdhdGUuZ2V0S2V5QmVsb3coZm9jdXNlZEtleSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5leHRLZXkgPSBkZWxlZ2F0ZS5nZXRGaXJzdEtleT8uKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChuZXh0S2V5ID09IG51bGwgJiYgc2hvdWxkRm9jdXNXcmFwKSB7XG4gICAgICAgICAgICBuZXh0S2V5ID0gZGVsZWdhdGUuZ2V0Rmlyc3RLZXk/Lihmb2N1c2VkS2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmF2aWdhdGVUb0tleShuZXh0S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJBcnJvd1VwXCI6IHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLmdldEtleUFib3ZlKSB7XG4gICAgICAgICAgZTIucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBsZXQgbmV4dEtleTtcbiAgICAgICAgICBpZiAoZm9jdXNlZEtleSAhPSBudWxsKSB7XG4gICAgICAgICAgICBuZXh0S2V5ID0gZGVsZWdhdGUuZ2V0S2V5QWJvdmUoZm9jdXNlZEtleSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5leHRLZXkgPSBkZWxlZ2F0ZS5nZXRMYXN0S2V5Py4oKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG5leHRLZXkgPT0gbnVsbCAmJiBzaG91bGRGb2N1c1dyYXApIHtcbiAgICAgICAgICAgIG5leHRLZXkgPSBkZWxlZ2F0ZS5nZXRMYXN0S2V5Py4oZm9jdXNlZEtleSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5hdmlnYXRlVG9LZXkobmV4dEtleSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwiQXJyb3dMZWZ0XCI6IHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLmdldEtleUxlZnRPZikge1xuICAgICAgICAgIGUyLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgY29uc3QgaXNSVEwzID0gZGlyZWN0aW9uKCkgPT09IFwicnRsXCI7XG4gICAgICAgICAgbGV0IG5leHRLZXk7XG4gICAgICAgICAgaWYgKGZvY3VzZWRLZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgbmV4dEtleSA9IGRlbGVnYXRlLmdldEtleUxlZnRPZihmb2N1c2VkS2V5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV4dEtleSA9IGlzUlRMMyA/IGRlbGVnYXRlLmdldEZpcnN0S2V5Py4oKSA6IGRlbGVnYXRlLmdldExhc3RLZXk/LigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuYXZpZ2F0ZVRvS2V5KG5leHRLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcIkFycm93UmlnaHRcIjoge1xuICAgICAgICBpZiAoZGVsZWdhdGUuZ2V0S2V5UmlnaHRPZikge1xuICAgICAgICAgIGUyLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgY29uc3QgaXNSVEwzID0gZGlyZWN0aW9uKCkgPT09IFwicnRsXCI7XG4gICAgICAgICAgbGV0IG5leHRLZXk7XG4gICAgICAgICAgaWYgKGZvY3VzZWRLZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgbmV4dEtleSA9IGRlbGVnYXRlLmdldEtleVJpZ2h0T2YoZm9jdXNlZEtleSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5leHRLZXkgPSBpc1JUTDMgPyBkZWxlZ2F0ZS5nZXRMYXN0S2V5Py4oKSA6IGRlbGVnYXRlLmdldEZpcnN0S2V5Py4oKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmF2aWdhdGVUb0tleShuZXh0S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJIb21lXCI6XG4gICAgICAgIGlmIChkZWxlZ2F0ZS5nZXRGaXJzdEtleSkge1xuICAgICAgICAgIGUyLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgY29uc3QgZmlyc3RLZXkgPSBkZWxlZ2F0ZS5nZXRGaXJzdEtleShmb2N1c2VkS2V5LCBpc0N0cmxLZXlQcmVzc2VkKGUyKSk7XG4gICAgICAgICAgaWYgKGZpcnN0S2V5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIG1hbmFnZXIuc2V0Rm9jdXNlZEtleShmaXJzdEtleSk7XG4gICAgICAgICAgICBpZiAoaXNDdHJsS2V5UHJlc3NlZChlMikgJiYgZTIuc2hpZnRLZXkgJiYgbWFuYWdlci5zZWxlY3Rpb25Nb2RlKCkgPT09IFwibXVsdGlwbGVcIikge1xuICAgICAgICAgICAgICBtYW5hZ2VyLmV4dGVuZFNlbGVjdGlvbihmaXJzdEtleSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdE9uRm9jdXMpIHtcbiAgICAgICAgICAgICAgbWFuYWdlci5yZXBsYWNlU2VsZWN0aW9uKGZpcnN0S2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiRW5kXCI6XG4gICAgICAgIGlmIChkZWxlZ2F0ZS5nZXRMYXN0S2V5KSB7XG4gICAgICAgICAgZTIucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBjb25zdCBsYXN0S2V5ID0gZGVsZWdhdGUuZ2V0TGFzdEtleShmb2N1c2VkS2V5LCBpc0N0cmxLZXlQcmVzc2VkKGUyKSk7XG4gICAgICAgICAgaWYgKGxhc3RLZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgbWFuYWdlci5zZXRGb2N1c2VkS2V5KGxhc3RLZXkpO1xuICAgICAgICAgICAgaWYgKGlzQ3RybEtleVByZXNzZWQoZTIpICYmIGUyLnNoaWZ0S2V5ICYmIG1hbmFnZXIuc2VsZWN0aW9uTW9kZSgpID09PSBcIm11bHRpcGxlXCIpIHtcbiAgICAgICAgICAgICAgbWFuYWdlci5leHRlbmRTZWxlY3Rpb24obGFzdEtleSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdE9uRm9jdXMpIHtcbiAgICAgICAgICAgICAgbWFuYWdlci5yZXBsYWNlU2VsZWN0aW9uKGxhc3RLZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJQYWdlRG93blwiOlxuICAgICAgICBpZiAoZGVsZWdhdGUuZ2V0S2V5UGFnZUJlbG93ICYmIGZvY3VzZWRLZXkgIT0gbnVsbCkge1xuICAgICAgICAgIGUyLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgY29uc3QgbmV4dEtleSA9IGRlbGVnYXRlLmdldEtleVBhZ2VCZWxvdyhmb2N1c2VkS2V5KTtcbiAgICAgICAgICBuYXZpZ2F0ZVRvS2V5KG5leHRLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIlBhZ2VVcFwiOlxuICAgICAgICBpZiAoZGVsZWdhdGUuZ2V0S2V5UGFnZUFib3ZlICYmIGZvY3VzZWRLZXkgIT0gbnVsbCkge1xuICAgICAgICAgIGUyLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgY29uc3QgbmV4dEtleSA9IGRlbGVnYXRlLmdldEtleVBhZ2VBYm92ZShmb2N1c2VkS2V5KTtcbiAgICAgICAgICBuYXZpZ2F0ZVRvS2V5KG5leHRLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImFcIjpcbiAgICAgICAgaWYgKGlzQ3RybEtleVByZXNzZWQoZTIpICYmIG1hbmFnZXIuc2VsZWN0aW9uTW9kZSgpID09PSBcIm11bHRpcGxlXCIgJiYgYWNjZXNzKHByb3BzLmRpc2FsbG93U2VsZWN0QWxsKSAhPT0gdHJ1ZSkge1xuICAgICAgICAgIGUyLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgbWFuYWdlci5zZWxlY3RBbGwoKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJFc2NhcGVcIjpcbiAgICAgICAgaWYgKCFlMi5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgZTIucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBpZiAoIWFjY2Vzcyhwcm9wcy5kaXNhbGxvd0VtcHR5U2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgbWFuYWdlci5jbGVhclNlbGVjdGlvbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJUYWJcIjoge1xuICAgICAgICBpZiAoIWFjY2Vzcyhwcm9wcy5hbGxvd3NUYWJOYXZpZ2F0aW9uKSkge1xuICAgICAgICAgIGlmIChlMi5zaGlmdEtleSkge1xuICAgICAgICAgICAgcmVmRWwuZm9jdXMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgd2Fsa2VyID0gZ2V0Rm9jdXNhYmxlVHJlZVdhbGtlcihyZWZFbCwge1xuICAgICAgICAgICAgICB0YWJiYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgbmV4dDtcbiAgICAgICAgICAgIGxldCBsYXN0O1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICBsYXN0ID0gd2Fsa2VyLmxhc3RDaGlsZCgpO1xuICAgICAgICAgICAgICBpZiAobGFzdCkge1xuICAgICAgICAgICAgICAgIG5leHQgPSBsYXN0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IHdoaWxlIChsYXN0KTtcbiAgICAgICAgICAgIGlmIChuZXh0ICYmICFuZXh0LmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgIGZvY3VzV2l0aG91dFNjcm9sbGluZyhuZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IG9uRm9jdXNJbiA9IChlMikgPT4ge1xuICAgIGNvbnN0IG1hbmFnZXIgPSBhY2Nlc3MocHJvcHMuc2VsZWN0aW9uTWFuYWdlcik7XG4gICAgY29uc3QgZGVsZWdhdGUgPSBhY2Nlc3MocHJvcHMua2V5Ym9hcmREZWxlZ2F0ZSk7XG4gICAgY29uc3Qgc2VsZWN0T25Gb2N1cyA9IGFjY2Vzcyhwcm9wcy5zZWxlY3RPbkZvY3VzKTtcbiAgICBpZiAobWFuYWdlci5pc0ZvY3VzZWQoKSkge1xuICAgICAgaWYgKCFlMi5jdXJyZW50VGFyZ2V0LmNvbnRhaW5zKGUyLnRhcmdldCkpIHtcbiAgICAgICAgbWFuYWdlci5zZXRGb2N1c2VkKGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFlMi5jdXJyZW50VGFyZ2V0LmNvbnRhaW5zKGUyLnRhcmdldCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbWFuYWdlci5zZXRGb2N1c2VkKHRydWUpO1xuICAgIGlmIChtYW5hZ2VyLmZvY3VzZWRLZXkoKSA9PSBudWxsKSB7XG4gICAgICBjb25zdCBuYXZpZ2F0ZVRvRmlyc3RLZXkgPSAoa2V5KSA9PiB7XG4gICAgICAgIGlmIChrZXkgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBtYW5hZ2VyLnNldEZvY3VzZWRLZXkoa2V5KTtcbiAgICAgICAgaWYgKHNlbGVjdE9uRm9jdXMpIHtcbiAgICAgICAgICBtYW5hZ2VyLnJlcGxhY2VTZWxlY3Rpb24oa2V5KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IHJlbGF0ZWRUYXJnZXQgPSBlMi5yZWxhdGVkVGFyZ2V0O1xuICAgICAgaWYgKHJlbGF0ZWRUYXJnZXQgJiYgZTIuY3VycmVudFRhcmdldC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihyZWxhdGVkVGFyZ2V0KSAmIE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HKSB7XG4gICAgICAgIG5hdmlnYXRlVG9GaXJzdEtleShtYW5hZ2VyLmxhc3RTZWxlY3RlZEtleSgpID8/IGRlbGVnYXRlLmdldExhc3RLZXk/LigpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5hdmlnYXRlVG9GaXJzdEtleShtYW5hZ2VyLmZpcnN0U2VsZWN0ZWRLZXkoKSA/PyBkZWxlZ2F0ZS5nZXRGaXJzdEtleT8uKCkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWFjY2Vzcyhwcm9wcy5pc1ZpcnR1YWxpemVkKSkge1xuICAgICAgY29uc3Qgc2Nyb2xsRWwgPSBmaW5hbFNjcm9sbFJlZigpO1xuICAgICAgaWYgKHNjcm9sbEVsKSB7XG4gICAgICAgIHNjcm9sbEVsLnNjcm9sbFRvcCA9IHNjcm9sbFBvcy50b3A7XG4gICAgICAgIHNjcm9sbEVsLnNjcm9sbExlZnQgPSBzY3JvbGxQb3MubGVmdDtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHNjcm9sbEVsLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLWtleT1cIiR7bWFuYWdlci5mb2N1c2VkS2V5KCl9XCJdYCk7XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgZm9jdXNXaXRob3V0U2Nyb2xsaW5nKGVsZW1lbnQpO1xuICAgICAgICAgIHNjcm9sbEludG9WaWV3KHNjcm9sbEVsLCBlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3Qgb25Gb2N1c091dCA9IChlMikgPT4ge1xuICAgIGNvbnN0IG1hbmFnZXIgPSBhY2Nlc3MocHJvcHMuc2VsZWN0aW9uTWFuYWdlcik7XG4gICAgaWYgKCFlMi5jdXJyZW50VGFyZ2V0LmNvbnRhaW5zKGUyLnJlbGF0ZWRUYXJnZXQpKSB7XG4gICAgICBtYW5hZ2VyLnNldEZvY3VzZWQoZmFsc2UpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgb25Nb3VzZURvd24gPSAoZTIpID0+IHtcbiAgICBpZiAoZmluYWxTY3JvbGxSZWYoKSA9PT0gZTIudGFyZ2V0KSB7XG4gICAgICBlMi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgdHJ5QXV0b0ZvY3VzID0gKCkgPT4ge1xuICAgIGNvbnN0IGF1dG9Gb2N1cyA9IGFjY2Vzcyhwcm9wcy5hdXRvRm9jdXMpO1xuICAgIGlmICghYXV0b0ZvY3VzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1hbmFnZXIgPSBhY2Nlc3MocHJvcHMuc2VsZWN0aW9uTWFuYWdlcik7XG4gICAgY29uc3QgZGVsZWdhdGUgPSBhY2Nlc3MocHJvcHMua2V5Ym9hcmREZWxlZ2F0ZSk7XG4gICAgbGV0IGZvY3VzZWRLZXk7XG4gICAgaWYgKGF1dG9Gb2N1cyA9PT0gXCJmaXJzdFwiKSB7XG4gICAgICBmb2N1c2VkS2V5ID0gZGVsZWdhdGUuZ2V0Rmlyc3RLZXk/LigpO1xuICAgIH1cbiAgICBpZiAoYXV0b0ZvY3VzID09PSBcImxhc3RcIikge1xuICAgICAgZm9jdXNlZEtleSA9IGRlbGVnYXRlLmdldExhc3RLZXk/LigpO1xuICAgIH1cbiAgICBjb25zdCBzZWxlY3RlZEtleXMgPSBtYW5hZ2VyLnNlbGVjdGVkS2V5cygpO1xuICAgIGlmIChzZWxlY3RlZEtleXMuc2l6ZSkge1xuICAgICAgZm9jdXNlZEtleSA9IHNlbGVjdGVkS2V5cy52YWx1ZXMoKS5uZXh0KCkudmFsdWU7XG4gICAgfVxuICAgIG1hbmFnZXIuc2V0Rm9jdXNlZCh0cnVlKTtcbiAgICBtYW5hZ2VyLnNldEZvY3VzZWRLZXkoZm9jdXNlZEtleSk7XG4gICAgY29uc3QgcmVmRWwgPSByZWYoKTtcbiAgICBpZiAocmVmRWwgJiYgZm9jdXNlZEtleSA9PSBudWxsICYmICFhY2Nlc3MocHJvcHMuc2hvdWxkVXNlVmlydHVhbEZvY3VzKSkge1xuICAgICAgZm9jdXNXaXRob3V0U2Nyb2xsaW5nKHJlZkVsKTtcbiAgICB9XG4gIH07XG4gIG9uTW91bnQoKCkgPT4ge1xuICAgIGlmIChwcm9wcy5kZWZlckF1dG9Gb2N1cykge1xuICAgICAgc2V0VGltZW91dCh0cnlBdXRvRm9jdXMsIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cnlBdXRvRm9jdXMoKTtcbiAgICB9XG4gIH0pO1xuICBjcmVhdGVFZmZlY3Qob24oW2ZpbmFsU2Nyb2xsUmVmLCAoKSA9PiBhY2Nlc3MocHJvcHMuaXNWaXJ0dWFsaXplZCksICgpID0+IGFjY2Vzcyhwcm9wcy5zZWxlY3Rpb25NYW5hZ2VyKS5mb2N1c2VkS2V5KCldLCAobmV3VmFsdWUpID0+IHtcbiAgICBjb25zdCBbc2Nyb2xsRWwsIGlzVmlydHVhbGl6ZWQsIGZvY3VzZWRLZXldID0gbmV3VmFsdWU7XG4gICAgaWYgKGlzVmlydHVhbGl6ZWQpIHtcbiAgICAgIGZvY3VzZWRLZXkgJiYgcHJvcHMuc2Nyb2xsVG9LZXk/Lihmb2N1c2VkS2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGZvY3VzZWRLZXkgJiYgc2Nyb2xsRWwpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHNjcm9sbEVsLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLWtleT1cIiR7Zm9jdXNlZEtleX1cIl1gKTtcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICBzY3JvbGxJbnRvVmlldyhzY3JvbGxFbCwgZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pKTtcbiAgY29uc3QgdGFiSW5kZXggPSBjcmVhdGVNZW1vKCgpID0+IHtcbiAgICBpZiAoYWNjZXNzKHByb3BzLnNob3VsZFVzZVZpcnR1YWxGb2N1cykpIHtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIHJldHVybiBhY2Nlc3MocHJvcHMuc2VsZWN0aW9uTWFuYWdlcikuZm9jdXNlZEtleSgpID09IG51bGwgPyAwIDogLTE7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRhYkluZGV4LFxuICAgIG9uS2V5RG93bixcbiAgICBvbk1vdXNlRG93bixcbiAgICBvbkZvY3VzSW4sXG4gICAgb25Gb2N1c091dFxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlU2VsZWN0YWJsZUl0ZW0ocHJvcHMsIHJlZikge1xuICBjb25zdCBtYW5hZ2VyID0gKCkgPT4gYWNjZXNzKHByb3BzLnNlbGVjdGlvbk1hbmFnZXIpO1xuICBjb25zdCBrZXkgPSAoKSA9PiBhY2Nlc3MocHJvcHMua2V5KTtcbiAgY29uc3Qgc2hvdWxkVXNlVmlydHVhbEZvY3VzID0gKCkgPT4gYWNjZXNzKHByb3BzLnNob3VsZFVzZVZpcnR1YWxGb2N1cyk7XG4gIGNvbnN0IG9uU2VsZWN0ID0gKGUyKSA9PiB7XG4gICAgaWYgKG1hbmFnZXIoKS5zZWxlY3Rpb25Nb2RlKCkgPT09IFwibm9uZVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChtYW5hZ2VyKCkuc2VsZWN0aW9uTW9kZSgpID09PSBcInNpbmdsZVwiKSB7XG4gICAgICBpZiAobWFuYWdlcigpLmlzU2VsZWN0ZWQoa2V5KCkpICYmICFtYW5hZ2VyKCkuZGlzYWxsb3dFbXB0eVNlbGVjdGlvbigpKSB7XG4gICAgICAgIG1hbmFnZXIoKS50b2dnbGVTZWxlY3Rpb24oa2V5KCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFuYWdlcigpLnJlcGxhY2VTZWxlY3Rpb24oa2V5KCkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZTIgJiYgZTIuc2hpZnRLZXkpIHtcbiAgICAgIG1hbmFnZXIoKS5leHRlbmRTZWxlY3Rpb24oa2V5KCkpO1xuICAgIH0gZWxzZSBpZiAobWFuYWdlcigpLnNlbGVjdGlvbkJlaGF2aW9yKCkgPT09IFwidG9nZ2xlXCIgfHwgaXNDdHJsS2V5UHJlc3NlZChlMikgfHwgXCJwb2ludGVyVHlwZVwiIGluIGUyICYmIGUyLnBvaW50ZXJUeXBlID09PSBcInRvdWNoXCIpIHtcbiAgICAgIG1hbmFnZXIoKS50b2dnbGVTZWxlY3Rpb24oa2V5KCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtYW5hZ2VyKCkucmVwbGFjZVNlbGVjdGlvbihrZXkoKSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBpc1NlbGVjdGVkID0gKCkgPT4gbWFuYWdlcigpLmlzU2VsZWN0ZWQoa2V5KCkpO1xuICBjb25zdCBpc0Rpc2FibGVkID0gKCkgPT4gYWNjZXNzKHByb3BzLmRpc2FibGVkKSB8fCBtYW5hZ2VyKCkuaXNEaXNhYmxlZChrZXkoKSk7XG4gIGNvbnN0IGFsbG93c1NlbGVjdGlvbiA9ICgpID0+ICFpc0Rpc2FibGVkKCkgJiYgbWFuYWdlcigpLmNhblNlbGVjdEl0ZW0oa2V5KCkpO1xuICBsZXQgcG9pbnRlckRvd25UeXBlID0gbnVsbDtcbiAgY29uc3Qgb25Qb2ludGVyRG93biA9IChlMikgPT4ge1xuICAgIGlmICghYWxsb3dzU2VsZWN0aW9uKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcG9pbnRlckRvd25UeXBlID0gZTIucG9pbnRlclR5cGU7XG4gICAgaWYgKGUyLnBvaW50ZXJUeXBlID09PSBcIm1vdXNlXCIgJiYgZTIuYnV0dG9uID09PSAwICYmICFhY2Nlc3MocHJvcHMuc2hvdWxkU2VsZWN0T25QcmVzc1VwKSkge1xuICAgICAgb25TZWxlY3QoZTIpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgb25Qb2ludGVyVXAgPSAoZTIpID0+IHtcbiAgICBpZiAoIWFsbG93c1NlbGVjdGlvbigpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChlMi5wb2ludGVyVHlwZSA9PT0gXCJtb3VzZVwiICYmIGUyLmJ1dHRvbiA9PT0gMCAmJiBhY2Nlc3MocHJvcHMuc2hvdWxkU2VsZWN0T25QcmVzc1VwKSAmJiBhY2Nlc3MocHJvcHMuYWxsb3dzRGlmZmVyZW50UHJlc3NPcmlnaW4pKSB7XG4gICAgICBvblNlbGVjdChlMik7XG4gICAgfVxuICB9O1xuICBjb25zdCBvbkNsaWNrID0gKGUyKSA9PiB7XG4gICAgaWYgKCFhbGxvd3NTZWxlY3Rpb24oKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoYWNjZXNzKHByb3BzLnNob3VsZFNlbGVjdE9uUHJlc3NVcCkgJiYgIWFjY2Vzcyhwcm9wcy5hbGxvd3NEaWZmZXJlbnRQcmVzc09yaWdpbikgfHwgcG9pbnRlckRvd25UeXBlICE9PSBcIm1vdXNlXCIpIHtcbiAgICAgIG9uU2VsZWN0KGUyKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG9uS2V5RG93biA9IChlMikgPT4ge1xuICAgIGlmICghYWxsb3dzU2VsZWN0aW9uKCkgfHwgIVtcIkVudGVyXCIsIFwiIFwiXS5pbmNsdWRlcyhlMi5rZXkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc05vbkNvbnRpZ3VvdXNTZWxlY3Rpb25Nb2RpZmllcihlMikpIHtcbiAgICAgIG1hbmFnZXIoKS50b2dnbGVTZWxlY3Rpb24oa2V5KCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvblNlbGVjdChlMik7XG4gICAgfVxuICB9O1xuICBjb25zdCBvbk1vdXNlRG93biA9IChlMikgPT4ge1xuICAgIGlmIChpc0Rpc2FibGVkKCkpIHtcbiAgICAgIGUyLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBvbkZvY3VzID0gKGUyKSA9PiB7XG4gICAgY29uc3QgcmVmRWwgPSByZWYoKTtcbiAgICBpZiAoc2hvdWxkVXNlVmlydHVhbEZvY3VzKCkgfHwgaXNEaXNhYmxlZCgpIHx8ICFyZWZFbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZTIudGFyZ2V0ID09PSByZWZFbCkge1xuICAgICAgbWFuYWdlcigpLnNldEZvY3VzZWRLZXkoa2V5KCkpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgdGFiSW5kZXggPSBjcmVhdGVNZW1vKCgpID0+IHtcbiAgICBpZiAoc2hvdWxkVXNlVmlydHVhbEZvY3VzKCkgfHwgaXNEaXNhYmxlZCgpKSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgICByZXR1cm4ga2V5KCkgPT09IG1hbmFnZXIoKS5mb2N1c2VkS2V5KCkgPyAwIDogLTE7XG4gIH0pO1xuICBjb25zdCBkYXRhS2V5ID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIGFjY2Vzcyhwcm9wcy52aXJ0dWFsaXplZCkgPyB2b2lkIDAgOiBrZXkoKTtcbiAgfSk7XG4gIGNyZWF0ZUVmZmVjdChvbihbcmVmLCBrZXksIHNob3VsZFVzZVZpcnR1YWxGb2N1cywgKCkgPT4gbWFuYWdlcigpLmZvY3VzZWRLZXkoKSwgKCkgPT4gbWFuYWdlcigpLmlzRm9jdXNlZCgpXSwgKFtyZWZFbCwga2V5Miwgc2hvdWxkVXNlVmlydHVhbEZvY3VzMiwgZm9jdXNlZEtleSwgaXNGb2N1c2VkXSkgPT4ge1xuICAgIGlmIChyZWZFbCAmJiBrZXkyID09PSBmb2N1c2VkS2V5ICYmIGlzRm9jdXNlZCAmJiAhc2hvdWxkVXNlVmlydHVhbEZvY3VzMiAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSByZWZFbCkge1xuICAgICAgaWYgKHByb3BzLmZvY3VzKSB7XG4gICAgICAgIHByb3BzLmZvY3VzKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb2N1c1dpdGhvdXRTY3JvbGxpbmcocmVmRWwpO1xuICAgICAgfVxuICAgIH1cbiAgfSkpO1xuICByZXR1cm4ge1xuICAgIGlzU2VsZWN0ZWQsXG4gICAgaXNEaXNhYmxlZCxcbiAgICBhbGxvd3NTZWxlY3Rpb24sXG4gICAgdGFiSW5kZXgsXG4gICAgZGF0YUtleSxcbiAgICBvblBvaW50ZXJEb3duLFxuICAgIG9uUG9pbnRlclVwLFxuICAgIG9uQ2xpY2ssXG4gICAgb25LZXlEb3duLFxuICAgIG9uTW91c2VEb3duLFxuICAgIG9uRm9jdXNcbiAgfTtcbn1cbnZhciBTZWxlY3Rpb25NYW5hZ2VyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBzdGF0ZTIpIHtcbiAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTI7XG4gIH1cbiAgLyoqIFRoZSB0eXBlIG9mIHNlbGVjdGlvbiB0aGF0IGlzIGFsbG93ZWQgaW4gdGhlIGNvbGxlY3Rpb24uICovXG4gIHNlbGVjdGlvbk1vZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuc2VsZWN0aW9uTW9kZSgpO1xuICB9XG4gIC8qKiBXaGV0aGVyIHRoZSBjb2xsZWN0aW9uIGFsbG93cyBlbXB0eSBzZWxlY3Rpb24uICovXG4gIGRpc2FsbG93RW1wdHlTZWxlY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuZGlzYWxsb3dFbXB0eVNlbGVjdGlvbigpO1xuICB9XG4gIC8qKiBUaGUgc2VsZWN0aW9uIGJlaGF2aW9yIGZvciB0aGUgY29sbGVjdGlvbi4gKi9cbiAgc2VsZWN0aW9uQmVoYXZpb3IoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuc2VsZWN0aW9uQmVoYXZpb3IoKTtcbiAgfVxuICAvKiogU2V0cyB0aGUgc2VsZWN0aW9uIGJlaGF2aW9yIGZvciB0aGUgY29sbGVjdGlvbi4gKi9cbiAgc2V0U2VsZWN0aW9uQmVoYXZpb3Ioc2VsZWN0aW9uQmVoYXZpb3IpIHtcbiAgICB0aGlzLnN0YXRlLnNldFNlbGVjdGlvbkJlaGF2aW9yKHNlbGVjdGlvbkJlaGF2aW9yKTtcbiAgfVxuICAvKiogV2hldGhlciB0aGUgY29sbGVjdGlvbiBpcyBjdXJyZW50bHkgZm9jdXNlZC4gKi9cbiAgaXNGb2N1c2VkKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmlzRm9jdXNlZCgpO1xuICB9XG4gIC8qKiBTZXRzIHdoZXRoZXIgdGhlIGNvbGxlY3Rpb24gaXMgZm9jdXNlZC4gKi9cbiAgc2V0Rm9jdXNlZChpc0ZvY3VzZWQpIHtcbiAgICB0aGlzLnN0YXRlLnNldEZvY3VzZWQoaXNGb2N1c2VkKTtcbiAgfVxuICAvKiogVGhlIGN1cnJlbnQgZm9jdXNlZCBrZXkgaW4gdGhlIGNvbGxlY3Rpb24uICovXG4gIGZvY3VzZWRLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuZm9jdXNlZEtleSgpO1xuICB9XG4gIC8qKiBTZXRzIHRoZSBmb2N1c2VkIGtleS4gKi9cbiAgc2V0Rm9jdXNlZEtleShrZXkpIHtcbiAgICBpZiAoa2V5ID09IG51bGwgfHwgdGhpcy5jb2xsZWN0aW9uKCkuZ2V0SXRlbShrZXkpKSB7XG4gICAgICB0aGlzLnN0YXRlLnNldEZvY3VzZWRLZXkoa2V5KTtcbiAgICB9XG4gIH1cbiAgLyoqIFRoZSBjdXJyZW50bHkgc2VsZWN0ZWQga2V5cyBpbiB0aGUgY29sbGVjdGlvbi4gKi9cbiAgc2VsZWN0ZWRLZXlzKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLnNlbGVjdGVkS2V5cygpO1xuICB9XG4gIC8qKiBSZXR1cm5zIHdoZXRoZXIgYSBrZXkgaXMgc2VsZWN0ZWQuICovXG4gIGlzU2VsZWN0ZWQoa2V5KSB7XG4gICAgaWYgKHRoaXMuc3RhdGUuc2VsZWN0aW9uTW9kZSgpID09PSBcIm5vbmVcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCByZXRyaWV2ZWRLZXkgPSB0aGlzLmdldEtleShrZXkpO1xuICAgIGlmIChyZXRyaWV2ZWRLZXkgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5zZWxlY3RlZEtleXMoKS5oYXMocmV0cmlldmVkS2V5KTtcbiAgfVxuICAvKiogV2hldGhlciB0aGUgc2VsZWN0aW9uIGlzIGVtcHR5LiAqL1xuICBpc0VtcHR5KCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLnNlbGVjdGVkS2V5cygpLnNpemUgPT09IDA7XG4gIH1cbiAgLyoqIFdoZXRoZXIgYWxsIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uIGFyZSBzZWxlY3RlZC4gKi9cbiAgaXNTZWxlY3RBbGwoKSB7XG4gICAgaWYgKHRoaXMuaXNFbXB0eSgpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHNlbGVjdGVkS2V5cyA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRLZXlzKCk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QWxsU2VsZWN0YWJsZUtleXMoKS5ldmVyeSgoaykgPT4gc2VsZWN0ZWRLZXlzLmhhcyhrKSk7XG4gIH1cbiAgZmlyc3RTZWxlY3RlZEtleSgpIHtcbiAgICBsZXQgZmlyc3Q7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgdGhpcy5zdGF0ZS5zZWxlY3RlZEtleXMoKSkge1xuICAgICAgY29uc3QgaXRlbSA9IHRoaXMuY29sbGVjdGlvbigpLmdldEl0ZW0oa2V5KTtcbiAgICAgIGNvbnN0IGlzSXRlbUJlZm9yZUZpcnN0ID0gaXRlbT8uaW5kZXggIT0gbnVsbCAmJiBmaXJzdD8uaW5kZXggIT0gbnVsbCAmJiBpdGVtLmluZGV4IDwgZmlyc3QuaW5kZXg7XG4gICAgICBpZiAoIWZpcnN0IHx8IGlzSXRlbUJlZm9yZUZpcnN0KSB7XG4gICAgICAgIGZpcnN0ID0gaXRlbTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZpcnN0Py5rZXk7XG4gIH1cbiAgbGFzdFNlbGVjdGVkS2V5KCkge1xuICAgIGxldCBsYXN0O1xuICAgIGZvciAoY29uc3Qga2V5IG9mIHRoaXMuc3RhdGUuc2VsZWN0ZWRLZXlzKCkpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmNvbGxlY3Rpb24oKS5nZXRJdGVtKGtleSk7XG4gICAgICBjb25zdCBpc0l0ZW1BZnRlckxhc3QgPSBpdGVtPy5pbmRleCAhPSBudWxsICYmIGxhc3Q/LmluZGV4ICE9IG51bGwgJiYgaXRlbS5pbmRleCA+IGxhc3QuaW5kZXg7XG4gICAgICBpZiAoIWxhc3QgfHwgaXNJdGVtQWZ0ZXJMYXN0KSB7XG4gICAgICAgIGxhc3QgPSBpdGVtO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGFzdD8ua2V5O1xuICB9XG4gIC8qKiBFeHRlbmRzIHRoZSBzZWxlY3Rpb24gdG8gdGhlIGdpdmVuIGtleS4gKi9cbiAgZXh0ZW5kU2VsZWN0aW9uKHRvS2V5KSB7XG4gICAgaWYgKHRoaXMuc2VsZWN0aW9uTW9kZSgpID09PSBcIm5vbmVcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5zZWxlY3Rpb25Nb2RlKCkgPT09IFwic2luZ2xlXCIpIHtcbiAgICAgIHRoaXMucmVwbGFjZVNlbGVjdGlvbih0b0tleSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJldHJpZXZlZFRvS2V5ID0gdGhpcy5nZXRLZXkodG9LZXkpO1xuICAgIGlmIChyZXRyaWV2ZWRUb0tleSA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNlbGVjdGVkS2V5cyA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRLZXlzKCk7XG4gICAgY29uc3QgYW5jaG9yS2V5ID0gc2VsZWN0ZWRLZXlzLmFuY2hvcktleSB8fCByZXRyaWV2ZWRUb0tleTtcbiAgICBjb25zdCBzZWxlY3Rpb24gPSBuZXcgU2VsZWN0aW9uKHNlbGVjdGVkS2V5cywgYW5jaG9yS2V5LCByZXRyaWV2ZWRUb0tleSk7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgdGhpcy5nZXRLZXlSYW5nZShhbmNob3JLZXksIHNlbGVjdGVkS2V5cy5jdXJyZW50S2V5IHx8IHJldHJpZXZlZFRvS2V5KSkge1xuICAgICAgc2VsZWN0aW9uLmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLmdldEtleVJhbmdlKHJldHJpZXZlZFRvS2V5LCBhbmNob3JLZXkpKSB7XG4gICAgICBpZiAodGhpcy5jYW5TZWxlY3RJdGVtKGtleSkpIHtcbiAgICAgICAgc2VsZWN0aW9uLmFkZChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnN0YXRlLnNldFNlbGVjdGVkS2V5cyhzZWxlY3Rpb24pO1xuICB9XG4gIGdldEtleVJhbmdlKGZyb20sIHRvKSB7XG4gICAgY29uc3QgZnJvbUl0ZW0gPSB0aGlzLmNvbGxlY3Rpb24oKS5nZXRJdGVtKGZyb20pO1xuICAgIGNvbnN0IHRvSXRlbSA9IHRoaXMuY29sbGVjdGlvbigpLmdldEl0ZW0odG8pO1xuICAgIGlmIChmcm9tSXRlbSAmJiB0b0l0ZW0pIHtcbiAgICAgIGlmIChmcm9tSXRlbS5pbmRleCAhPSBudWxsICYmIHRvSXRlbS5pbmRleCAhPSBudWxsICYmIGZyb21JdGVtLmluZGV4IDw9IHRvSXRlbS5pbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRLZXlSYW5nZUludGVybmFsKGZyb20sIHRvKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmdldEtleVJhbmdlSW50ZXJuYWwodG8sIGZyb20pO1xuICAgIH1cbiAgICByZXR1cm4gW107XG4gIH1cbiAgZ2V0S2V5UmFuZ2VJbnRlcm5hbChmcm9tLCB0bykge1xuICAgIGNvbnN0IGtleXMyID0gW107XG4gICAgbGV0IGtleSA9IGZyb207XG4gICAgd2hpbGUgKGtleSAhPSBudWxsKSB7XG4gICAgICBjb25zdCBpdGVtID0gdGhpcy5jb2xsZWN0aW9uKCkuZ2V0SXRlbShrZXkpO1xuICAgICAgaWYgKGl0ZW0gJiYgaXRlbS50eXBlID09PSBcIml0ZW1cIikge1xuICAgICAgICBrZXlzMi5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSB0bykge1xuICAgICAgICByZXR1cm4ga2V5czI7XG4gICAgICB9XG4gICAgICBrZXkgPSB0aGlzLmNvbGxlY3Rpb24oKS5nZXRLZXlBZnRlcihrZXkpO1xuICAgIH1cbiAgICByZXR1cm4gW107XG4gIH1cbiAgZ2V0S2V5KGtleSkge1xuICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmNvbGxlY3Rpb24oKS5nZXRJdGVtKGtleSk7XG4gICAgaWYgKCFpdGVtKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgICBpZiAoIWl0ZW0gfHwgaXRlbS50eXBlICE9PSBcIml0ZW1cIikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBpdGVtLmtleTtcbiAgfVxuICAvKiogVG9nZ2xlcyB3aGV0aGVyIHRoZSBnaXZlbiBrZXkgaXMgc2VsZWN0ZWQuICovXG4gIHRvZ2dsZVNlbGVjdGlvbihrZXkpIHtcbiAgICBpZiAodGhpcy5zZWxlY3Rpb25Nb2RlKCkgPT09IFwibm9uZVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLnNlbGVjdGlvbk1vZGUoKSA9PT0gXCJzaW5nbGVcIiAmJiAhdGhpcy5pc1NlbGVjdGVkKGtleSkpIHtcbiAgICAgIHRoaXMucmVwbGFjZVNlbGVjdGlvbihrZXkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByZXRyaWV2ZWRLZXkgPSB0aGlzLmdldEtleShrZXkpO1xuICAgIGlmIChyZXRyaWV2ZWRLZXkgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBrZXlzMiA9IG5ldyBTZWxlY3Rpb24odGhpcy5zdGF0ZS5zZWxlY3RlZEtleXMoKSk7XG4gICAgaWYgKGtleXMyLmhhcyhyZXRyaWV2ZWRLZXkpKSB7XG4gICAgICBrZXlzMi5kZWxldGUocmV0cmlldmVkS2V5KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuY2FuU2VsZWN0SXRlbShyZXRyaWV2ZWRLZXkpKSB7XG4gICAgICBrZXlzMi5hZGQocmV0cmlldmVkS2V5KTtcbiAgICAgIGtleXMyLmFuY2hvcktleSA9IHJldHJpZXZlZEtleTtcbiAgICAgIGtleXMyLmN1cnJlbnRLZXkgPSByZXRyaWV2ZWRLZXk7XG4gICAgfVxuICAgIGlmICh0aGlzLmRpc2FsbG93RW1wdHlTZWxlY3Rpb24oKSAmJiBrZXlzMi5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc3RhdGUuc2V0U2VsZWN0ZWRLZXlzKGtleXMyKTtcbiAgfVxuICAvKiogUmVwbGFjZXMgdGhlIHNlbGVjdGlvbiB3aXRoIG9ubHkgdGhlIGdpdmVuIGtleS4gKi9cbiAgcmVwbGFjZVNlbGVjdGlvbihrZXkpIHtcbiAgICBpZiAodGhpcy5zZWxlY3Rpb25Nb2RlKCkgPT09IFwibm9uZVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJldHJpZXZlZEtleSA9IHRoaXMuZ2V0S2V5KGtleSk7XG4gICAgaWYgKHJldHJpZXZlZEtleSA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNlbGVjdGlvbiA9IHRoaXMuY2FuU2VsZWN0SXRlbShyZXRyaWV2ZWRLZXkpID8gbmV3IFNlbGVjdGlvbihbcmV0cmlldmVkS2V5XSwgcmV0cmlldmVkS2V5LCByZXRyaWV2ZWRLZXkpIDogbmV3IFNlbGVjdGlvbigpO1xuICAgIHRoaXMuc3RhdGUuc2V0U2VsZWN0ZWRLZXlzKHNlbGVjdGlvbik7XG4gIH1cbiAgLyoqIFJlcGxhY2VzIHRoZSBzZWxlY3Rpb24gd2l0aCB0aGUgZ2l2ZW4ga2V5cy4gKi9cbiAgc2V0U2VsZWN0ZWRLZXlzKGtleXMyKSB7XG4gICAgaWYgKHRoaXMuc2VsZWN0aW9uTW9kZSgpID09PSBcIm5vbmVcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzZWxlY3Rpb24gPSBuZXcgU2VsZWN0aW9uKCk7XG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5czIpIHtcbiAgICAgIGNvbnN0IHJldHJpZXZlZEtleSA9IHRoaXMuZ2V0S2V5KGtleSk7XG4gICAgICBpZiAocmV0cmlldmVkS2V5ICE9IG51bGwpIHtcbiAgICAgICAgc2VsZWN0aW9uLmFkZChyZXRyaWV2ZWRLZXkpO1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25Nb2RlKCkgPT09IFwic2luZ2xlXCIpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnN0YXRlLnNldFNlbGVjdGVkS2V5cyhzZWxlY3Rpb24pO1xuICB9XG4gIC8qKiBTZWxlY3RzIGFsbCBpdGVtcyBpbiB0aGUgY29sbGVjdGlvbi4gKi9cbiAgc2VsZWN0QWxsKCkge1xuICAgIGlmICh0aGlzLnNlbGVjdGlvbk1vZGUoKSA9PT0gXCJtdWx0aXBsZVwiKSB7XG4gICAgICB0aGlzLnN0YXRlLnNldFNlbGVjdGVkS2V5cyhuZXcgU2V0KHRoaXMuZ2V0QWxsU2VsZWN0YWJsZUtleXMoKSkpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwga2V5cyBmcm9tIHRoZSBzZWxlY3Rpb24uXG4gICAqL1xuICBjbGVhclNlbGVjdGlvbigpIHtcbiAgICBjb25zdCBzZWxlY3RlZEtleXMgPSB0aGlzLnN0YXRlLnNlbGVjdGVkS2V5cygpO1xuICAgIGlmICghdGhpcy5kaXNhbGxvd0VtcHR5U2VsZWN0aW9uKCkgJiYgc2VsZWN0ZWRLZXlzLnNpemUgPiAwKSB7XG4gICAgICB0aGlzLnN0YXRlLnNldFNlbGVjdGVkS2V5cyhuZXcgU2VsZWN0aW9uKCkpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVG9nZ2xlcyBiZXR3ZWVuIHNlbGVjdCBhbGwgYW5kIGFuIGVtcHR5IHNlbGVjdGlvbi5cbiAgICovXG4gIHRvZ2dsZVNlbGVjdEFsbCgpIHtcbiAgICBpZiAodGhpcy5pc1NlbGVjdEFsbCgpKSB7XG4gICAgICB0aGlzLmNsZWFyU2VsZWN0aW9uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VsZWN0QWxsKCk7XG4gICAgfVxuICB9XG4gIHNlbGVjdChrZXksIGUyKSB7XG4gICAgaWYgKHRoaXMuc2VsZWN0aW9uTW9kZSgpID09PSBcIm5vbmVcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5zZWxlY3Rpb25Nb2RlKCkgPT09IFwic2luZ2xlXCIpIHtcbiAgICAgIGlmICh0aGlzLmlzU2VsZWN0ZWQoa2V5KSAmJiAhdGhpcy5kaXNhbGxvd0VtcHR5U2VsZWN0aW9uKCkpIHtcbiAgICAgICAgdGhpcy50b2dnbGVTZWxlY3Rpb24oa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVwbGFjZVNlbGVjdGlvbihrZXkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5zZWxlY3Rpb25CZWhhdmlvcigpID09PSBcInRvZ2dsZVwiIHx8IGUyICYmIGUyLnBvaW50ZXJUeXBlID09PSBcInRvdWNoXCIpIHtcbiAgICAgIHRoaXMudG9nZ2xlU2VsZWN0aW9uKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVwbGFjZVNlbGVjdGlvbihrZXkpO1xuICAgIH1cbiAgfVxuICAvKiogUmV0dXJucyB3aGV0aGVyIHRoZSBjdXJyZW50IHNlbGVjdGlvbiBpcyBlcXVhbCB0byB0aGUgZ2l2ZW4gc2VsZWN0aW9uLiAqL1xuICBpc1NlbGVjdGlvbkVxdWFsKHNlbGVjdGlvbikge1xuICAgIGlmIChzZWxlY3Rpb24gPT09IHRoaXMuc3RhdGUuc2VsZWN0ZWRLZXlzKCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBzZWxlY3RlZEtleXMgPSB0aGlzLnNlbGVjdGVkS2V5cygpO1xuICAgIGlmIChzZWxlY3Rpb24uc2l6ZSAhPT0gc2VsZWN0ZWRLZXlzLnNpemUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgb2Ygc2VsZWN0aW9uKSB7XG4gICAgICBpZiAoIXNlbGVjdGVkS2V5cy5oYXMoa2V5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IG9mIHNlbGVjdGVkS2V5cykge1xuICAgICAgaWYgKCFzZWxlY3Rpb24uaGFzKGtleSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjYW5TZWxlY3RJdGVtKGtleSkge1xuICAgIGlmICh0aGlzLnN0YXRlLnNlbGVjdGlvbk1vZGUoKSA9PT0gXCJub25lXCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgaXRlbSA9IHRoaXMuY29sbGVjdGlvbigpLmdldEl0ZW0oa2V5KTtcbiAgICByZXR1cm4gaXRlbSAhPSBudWxsICYmICFpdGVtLmRpc2FibGVkO1xuICB9XG4gIGlzRGlzYWJsZWQoa2V5KSB7XG4gICAgY29uc3QgaXRlbSA9IHRoaXMuY29sbGVjdGlvbigpLmdldEl0ZW0oa2V5KTtcbiAgICByZXR1cm4gIWl0ZW0gfHwgaXRlbS5kaXNhYmxlZDtcbiAgfVxuICBnZXRBbGxTZWxlY3RhYmxlS2V5cygpIHtcbiAgICBjb25zdCBrZXlzMiA9IFtdO1xuICAgIGNvbnN0IGFkZEtleXMgPSAoa2V5KSA9PiB7XG4gICAgICB3aGlsZSAoa2V5ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FuU2VsZWN0SXRlbShrZXkpKSB7XG4gICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuY29sbGVjdGlvbigpLmdldEl0ZW0oa2V5KTtcbiAgICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSBcIml0ZW1cIikge1xuICAgICAgICAgICAga2V5czIucHVzaChrZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBrZXkgPSB0aGlzLmNvbGxlY3Rpb24oKS5nZXRLZXlBZnRlcihrZXkpO1xuICAgICAgfVxuICAgIH07XG4gICAgYWRkS2V5cyh0aGlzLmNvbGxlY3Rpb24oKS5nZXRGaXJzdEtleSgpKTtcbiAgICByZXR1cm4ga2V5czI7XG4gIH1cbn07XG52YXIgTGlzdENvbGxlY3Rpb24gPSBjbGFzcyB7XG4gIGtleU1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGNvbnN0cnVjdG9yKG5vZGVzKSB7XG4gICAgdGhpcy5pdGVyYWJsZSA9IG5vZGVzO1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBub2Rlcykge1xuICAgICAgdGhpcy5rZXlNYXAuc2V0KG5vZGUua2V5LCBub2RlKTtcbiAgICB9XG4gICAgaWYgKHRoaXMua2V5TWFwLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGxhc3Q7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBmb3IgKGNvbnN0IFtrZXksIG5vZGVdIG9mIHRoaXMua2V5TWFwKSB7XG4gICAgICBpZiAobGFzdCkge1xuICAgICAgICBsYXN0Lm5leHRLZXkgPSBrZXk7XG4gICAgICAgIG5vZGUucHJldktleSA9IGxhc3Qua2V5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5maXJzdEtleSA9IGtleTtcbiAgICAgICAgbm9kZS5wcmV2S2V5ID0gdm9pZCAwO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUudHlwZSA9PT0gXCJpdGVtXCIpIHtcbiAgICAgICAgbm9kZS5pbmRleCA9IGluZGV4Kys7XG4gICAgICB9XG4gICAgICBsYXN0ID0gbm9kZTtcbiAgICAgIGxhc3QubmV4dEtleSA9IHZvaWQgMDtcbiAgICB9XG4gICAgdGhpcy5sYXN0S2V5ID0gbGFzdC5rZXk7XG4gIH1cbiAgKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHlpZWxkKiB0aGlzLml0ZXJhYmxlO1xuICB9XG4gIGdldFNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMua2V5TWFwLnNpemU7XG4gIH1cbiAgZ2V0S2V5cygpIHtcbiAgICByZXR1cm4gdGhpcy5rZXlNYXAua2V5cygpO1xuICB9XG4gIGdldEtleUJlZm9yZShrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5rZXlNYXAuZ2V0KGtleSk/LnByZXZLZXk7XG4gIH1cbiAgZ2V0S2V5QWZ0ZXIoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMua2V5TWFwLmdldChrZXkpPy5uZXh0S2V5O1xuICB9XG4gIGdldEZpcnN0S2V5KCkge1xuICAgIHJldHVybiB0aGlzLmZpcnN0S2V5O1xuICB9XG4gIGdldExhc3RLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMubGFzdEtleTtcbiAgfVxuICBnZXRJdGVtKGtleSkge1xuICAgIHJldHVybiB0aGlzLmtleU1hcC5nZXQoa2V5KTtcbiAgfVxuICBhdChpZHgpIHtcbiAgICBjb25zdCBrZXlzMiA9IFsuLi50aGlzLmdldEtleXMoKV07XG4gICAgcmV0dXJuIHRoaXMuZ2V0SXRlbShrZXlzMltpZHhdKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZUxpc3RTdGF0ZShwcm9wcykge1xuICBjb25zdCBzZWxlY3Rpb25TdGF0ZSA9IGNyZWF0ZU11bHRpcGxlU2VsZWN0aW9uU3RhdGUocHJvcHMpO1xuICBjb25zdCBmYWN0b3J5ID0gKG5vZGVzKSA9PiB7XG4gICAgcmV0dXJuIHByb3BzLmZpbHRlciA/IG5ldyBMaXN0Q29sbGVjdGlvbihwcm9wcy5maWx0ZXIobm9kZXMpKSA6IG5ldyBMaXN0Q29sbGVjdGlvbihub2Rlcyk7XG4gIH07XG4gIGNvbnN0IGNvbGxlY3Rpb24gPSBjcmVhdGVDb2xsZWN0aW9uKHtcbiAgICBkYXRhU291cmNlOiAoKSA9PiBhY2Nlc3MocHJvcHMuZGF0YVNvdXJjZSksXG4gICAgZ2V0S2V5OiAoKSA9PiBhY2Nlc3MocHJvcHMuZ2V0S2V5KSxcbiAgICBnZXRUZXh0VmFsdWU6ICgpID0+IGFjY2Vzcyhwcm9wcy5nZXRUZXh0VmFsdWUpLFxuICAgIGdldERpc2FibGVkOiAoKSA9PiBhY2Nlc3MocHJvcHMuZ2V0RGlzYWJsZWQpLFxuICAgIGdldFNlY3Rpb25DaGlsZHJlbjogKCkgPT4gYWNjZXNzKHByb3BzLmdldFNlY3Rpb25DaGlsZHJlbiksXG4gICAgZmFjdG9yeVxuICB9LCBbKCkgPT4gcHJvcHMuZmlsdGVyXSk7XG4gIGNvbnN0IHNlbGVjdGlvbk1hbmFnZXIgPSBuZXcgU2VsZWN0aW9uTWFuYWdlcihjb2xsZWN0aW9uLCBzZWxlY3Rpb25TdGF0ZSk7XG4gIGNyZWF0ZUNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBmb2N1c2VkS2V5ID0gc2VsZWN0aW9uU3RhdGUuZm9jdXNlZEtleSgpO1xuICAgIGlmIChmb2N1c2VkS2V5ICE9IG51bGwgJiYgIWNvbGxlY3Rpb24oKS5nZXRJdGVtKGZvY3VzZWRLZXkpKSB7XG4gICAgICBzZWxlY3Rpb25TdGF0ZS5zZXRGb2N1c2VkS2V5KHZvaWQgMCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBjb2xsZWN0aW9uLFxuICAgIHNlbGVjdGlvbk1hbmFnZXI6ICgpID0+IHNlbGVjdGlvbk1hbmFnZXJcbiAgfTtcbn1cbnZhciBMaXN0S2V5Ym9hcmREZWxlZ2F0ZSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgcmVmLCBjb2xsYXRvcikge1xuICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgdGhpcy5yZWYgPSByZWY7XG4gICAgdGhpcy5jb2xsYXRvciA9IGNvbGxhdG9yO1xuICB9XG4gIGdldEtleUJlbG93KGtleSkge1xuICAgIGxldCBrZXlBZnRlciA9IHRoaXMuY29sbGVjdGlvbigpLmdldEtleUFmdGVyKGtleSk7XG4gICAgd2hpbGUgKGtleUFmdGVyICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmNvbGxlY3Rpb24oKS5nZXRJdGVtKGtleUFmdGVyKTtcbiAgICAgIGlmIChpdGVtICYmIGl0ZW0udHlwZSA9PT0gXCJpdGVtXCIgJiYgIWl0ZW0uZGlzYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuIGtleUFmdGVyO1xuICAgICAgfVxuICAgICAga2V5QWZ0ZXIgPSB0aGlzLmNvbGxlY3Rpb24oKS5nZXRLZXlBZnRlcihrZXlBZnRlcik7XG4gICAgfVxuICB9XG4gIGdldEtleUFib3ZlKGtleSkge1xuICAgIGxldCBrZXlCZWZvcmUgPSB0aGlzLmNvbGxlY3Rpb24oKS5nZXRLZXlCZWZvcmUoa2V5KTtcbiAgICB3aGlsZSAoa2V5QmVmb3JlICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmNvbGxlY3Rpb24oKS5nZXRJdGVtKGtleUJlZm9yZSk7XG4gICAgICBpZiAoaXRlbSAmJiBpdGVtLnR5cGUgPT09IFwiaXRlbVwiICYmICFpdGVtLmRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybiBrZXlCZWZvcmU7XG4gICAgICB9XG4gICAgICBrZXlCZWZvcmUgPSB0aGlzLmNvbGxlY3Rpb24oKS5nZXRLZXlCZWZvcmUoa2V5QmVmb3JlKTtcbiAgICB9XG4gIH1cbiAgZ2V0Rmlyc3RLZXkoKSB7XG4gICAgbGV0IGtleSA9IHRoaXMuY29sbGVjdGlvbigpLmdldEZpcnN0S2V5KCk7XG4gICAgd2hpbGUgKGtleSAhPSBudWxsKSB7XG4gICAgICBjb25zdCBpdGVtID0gdGhpcy5jb2xsZWN0aW9uKCkuZ2V0SXRlbShrZXkpO1xuICAgICAgaWYgKGl0ZW0gJiYgaXRlbS50eXBlID09PSBcIml0ZW1cIiAmJiAhaXRlbS5kaXNhYmxlZCkge1xuICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgfVxuICAgICAga2V5ID0gdGhpcy5jb2xsZWN0aW9uKCkuZ2V0S2V5QWZ0ZXIoa2V5KTtcbiAgICB9XG4gIH1cbiAgZ2V0TGFzdEtleSgpIHtcbiAgICBsZXQga2V5ID0gdGhpcy5jb2xsZWN0aW9uKCkuZ2V0TGFzdEtleSgpO1xuICAgIHdoaWxlIChrZXkgIT0gbnVsbCkge1xuICAgICAgY29uc3QgaXRlbSA9IHRoaXMuY29sbGVjdGlvbigpLmdldEl0ZW0oa2V5KTtcbiAgICAgIGlmIChpdGVtICYmIGl0ZW0udHlwZSA9PT0gXCJpdGVtXCIgJiYgIWl0ZW0uZGlzYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH1cbiAgICAgIGtleSA9IHRoaXMuY29sbGVjdGlvbigpLmdldEtleUJlZm9yZShrZXkpO1xuICAgIH1cbiAgfVxuICBnZXRJdGVtKGtleSkge1xuICAgIHJldHVybiB0aGlzLnJlZj8uKCk/LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLWtleT1cIiR7a2V5fVwiXWApID8/IG51bGw7XG4gIH1cbiAgLy8gVE9ETzogbm90IHdvcmtpbmcgY29ycmVjdGx5XG4gIGdldEtleVBhZ2VBYm92ZShrZXkpIHtcbiAgICBjb25zdCBtZW51ID0gdGhpcy5yZWY/LigpO1xuICAgIGxldCBpdGVtID0gdGhpcy5nZXRJdGVtKGtleSk7XG4gICAgaWYgKCFtZW51IHx8ICFpdGVtKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHBhZ2VZID0gTWF0aC5tYXgoMCwgaXRlbS5vZmZzZXRUb3AgKyBpdGVtLm9mZnNldEhlaWdodCAtIG1lbnUub2Zmc2V0SGVpZ2h0KTtcbiAgICBsZXQga2V5QWJvdmUgPSBrZXk7XG4gICAgd2hpbGUgKGtleUFib3ZlICYmIGl0ZW0gJiYgaXRlbS5vZmZzZXRUb3AgPiBwYWdlWSkge1xuICAgICAga2V5QWJvdmUgPSB0aGlzLmdldEtleUFib3ZlKGtleUFib3ZlKTtcbiAgICAgIGl0ZW0gPSBrZXlBYm92ZSAhPSBudWxsID8gdGhpcy5nZXRJdGVtKGtleUFib3ZlKSA6IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBrZXlBYm92ZTtcbiAgfVxuICAvLyBUT0RPOiBub3Qgd29ya2luZyBjb3JyZWN0bHlcbiAgZ2V0S2V5UGFnZUJlbG93KGtleSkge1xuICAgIGNvbnN0IG1lbnUgPSB0aGlzLnJlZj8uKCk7XG4gICAgbGV0IGl0ZW0gPSB0aGlzLmdldEl0ZW0oa2V5KTtcbiAgICBpZiAoIW1lbnUgfHwgIWl0ZW0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcGFnZVkgPSBNYXRoLm1pbihtZW51LnNjcm9sbEhlaWdodCwgaXRlbS5vZmZzZXRUb3AgLSBpdGVtLm9mZnNldEhlaWdodCArIG1lbnUub2Zmc2V0SGVpZ2h0KTtcbiAgICBsZXQga2V5QmVsb3cgPSBrZXk7XG4gICAgd2hpbGUgKGtleUJlbG93ICYmIGl0ZW0gJiYgaXRlbS5vZmZzZXRUb3AgPCBwYWdlWSkge1xuICAgICAga2V5QmVsb3cgPSB0aGlzLmdldEtleUJlbG93KGtleUJlbG93KTtcbiAgICAgIGl0ZW0gPSBrZXlCZWxvdyAhPSBudWxsID8gdGhpcy5nZXRJdGVtKGtleUJlbG93KSA6IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBrZXlCZWxvdztcbiAgfVxuICBnZXRLZXlGb3JTZWFyY2goc2VhcmNoLCBmcm9tS2V5KSB7XG4gICAgY29uc3QgY29sbGF0b3IgPSB0aGlzLmNvbGxhdG9yPy4oKTtcbiAgICBpZiAoIWNvbGxhdG9yKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBrZXkgPSBmcm9tS2V5ICE9IG51bGwgPyB0aGlzLmdldEtleUJlbG93KGZyb21LZXkpIDogdGhpcy5nZXRGaXJzdEtleSgpO1xuICAgIHdoaWxlIChrZXkgIT0gbnVsbCkge1xuICAgICAgY29uc3QgaXRlbSA9IHRoaXMuY29sbGVjdGlvbigpLmdldEl0ZW0oa2V5KTtcbiAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgIGNvbnN0IHN1YnN0cmluZyA9IGl0ZW0udGV4dFZhbHVlLnNsaWNlKDAsIHNlYXJjaC5sZW5ndGgpO1xuICAgICAgICBpZiAoaXRlbS50ZXh0VmFsdWUgJiYgY29sbGF0b3IuY29tcGFyZShzdWJzdHJpbmcsIHNlYXJjaCkgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBrZXkgPSB0aGlzLmdldEtleUJlbG93KGtleSk7XG4gICAgfVxuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlU2VsZWN0YWJsZUxpc3QocHJvcHMsIHJlZiwgc2Nyb2xsUmVmKSB7XG4gIGNvbnN0IGNvbGxhdG9yID0gY3JlYXRlQ29sbGF0b3Ioe1xuICAgIHVzYWdlOiBcInNlYXJjaFwiLFxuICAgIHNlbnNpdGl2aXR5OiBcImJhc2VcIlxuICB9KTtcbiAgY29uc3QgZGVsZWdhdGUgPSBjcmVhdGVNZW1vKCgpID0+IHtcbiAgICBjb25zdCBrZXlib2FyZERlbGVnYXRlID0gYWNjZXNzKHByb3BzLmtleWJvYXJkRGVsZWdhdGUpO1xuICAgIGlmIChrZXlib2FyZERlbGVnYXRlKSB7XG4gICAgICByZXR1cm4ga2V5Ym9hcmREZWxlZ2F0ZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBMaXN0S2V5Ym9hcmREZWxlZ2F0ZShwcm9wcy5jb2xsZWN0aW9uLCByZWYsIGNvbGxhdG9yKTtcbiAgfSk7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RhYmxlQ29sbGVjdGlvbih7XG4gICAgc2VsZWN0aW9uTWFuYWdlcjogKCkgPT4gYWNjZXNzKHByb3BzLnNlbGVjdGlvbk1hbmFnZXIpLFxuICAgIGtleWJvYXJkRGVsZWdhdGU6IGRlbGVnYXRlLFxuICAgIGF1dG9Gb2N1czogKCkgPT4gYWNjZXNzKHByb3BzLmF1dG9Gb2N1cyksXG4gICAgZGVmZXJBdXRvRm9jdXM6ICgpID0+IGFjY2Vzcyhwcm9wcy5kZWZlckF1dG9Gb2N1cyksXG4gICAgc2hvdWxkRm9jdXNXcmFwOiAoKSA9PiBhY2Nlc3MocHJvcHMuc2hvdWxkRm9jdXNXcmFwKSxcbiAgICBkaXNhbGxvd0VtcHR5U2VsZWN0aW9uOiAoKSA9PiBhY2Nlc3MocHJvcHMuZGlzYWxsb3dFbXB0eVNlbGVjdGlvbiksXG4gICAgc2VsZWN0T25Gb2N1czogKCkgPT4gYWNjZXNzKHByb3BzLnNlbGVjdE9uRm9jdXMpLFxuICAgIGRpc2FsbG93VHlwZUFoZWFkOiAoKSA9PiBhY2Nlc3MocHJvcHMuZGlzYWxsb3dUeXBlQWhlYWQpLFxuICAgIHNob3VsZFVzZVZpcnR1YWxGb2N1czogKCkgPT4gYWNjZXNzKHByb3BzLnNob3VsZFVzZVZpcnR1YWxGb2N1cyksXG4gICAgYWxsb3dzVGFiTmF2aWdhdGlvbjogKCkgPT4gYWNjZXNzKHByb3BzLmFsbG93c1RhYk5hdmlnYXRpb24pLFxuICAgIGlzVmlydHVhbGl6ZWQ6ICgpID0+IGFjY2Vzcyhwcm9wcy5pc1ZpcnR1YWxpemVkKSxcbiAgICBzY3JvbGxUb0tleTogKGtleSkgPT4gYWNjZXNzKHByb3BzLnNjcm9sbFRvS2V5KT8uKGtleSlcbiAgfSwgcmVmLCBzY3JvbGxSZWYpO1xufVxuY3JlYXRlU3RvcmUoe1xuICB0b2FzdHM6IFtdXG59KTtcbmNyZWF0ZUNvbnRleHQoKTtcbnZhciBCVVRUT05fSU5QVVRfVFlQRVMgPSBbXCJidXR0b25cIiwgXCJjb2xvclwiLCBcImZpbGVcIiwgXCJpbWFnZVwiLCBcInJlc2V0XCIsIFwic3VibWl0XCJdO1xuZnVuY3Rpb24gaXNCdXR0b24oZWxlbWVudCkge1xuICBjb25zdCB0YWdOYW1lID0gZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gIGlmICh0YWdOYW1lID09PSBcImJ1dHRvblwiKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHRhZ05hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtZW50LnR5cGUpIHtcbiAgICByZXR1cm4gQlVUVE9OX0lOUFVUX1RZUEVTLmluZGV4T2YoZWxlbWVudC50eXBlKSAhPT0gLTE7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gQnV0dG9uUm9vdChwcm9wcykge1xuICBsZXQgcmVmO1xuICBwcm9wcyA9IG1lcmdlRGVmYXVsdFByb3BzKHtcbiAgICB0eXBlOiBcImJ1dHRvblwiXG4gIH0sIHByb3BzKTtcbiAgY29uc3QgW2xvY2FsLCBvdGhlcnNdID0gc3BsaXRQcm9wcyhwcm9wcywgW1wicmVmXCIsIFwidHlwZVwiLCBcImRpc2FibGVkXCJdKTtcbiAgY29uc3QgdGFnTmFtZSA9IGNyZWF0ZVRhZ05hbWUoKCkgPT4gcmVmLCAoKSA9PiBcImJ1dHRvblwiKTtcbiAgY29uc3QgaXNOYXRpdmVCdXR0b24gPSBjcmVhdGVNZW1vKCgpID0+IHtcbiAgICBjb25zdCBlbGVtZW50VGFnTmFtZSA9IHRhZ05hbWUoKTtcbiAgICBpZiAoZWxlbWVudFRhZ05hbWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gaXNCdXR0b24oe1xuICAgICAgdGFnTmFtZTogZWxlbWVudFRhZ05hbWUsXG4gICAgICB0eXBlOiBsb2NhbC50eXBlXG4gICAgfSk7XG4gIH0pO1xuICBjb25zdCBpc05hdGl2ZUlucHV0ID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHRhZ05hbWUoKSA9PT0gXCJpbnB1dFwiO1xuICB9KTtcbiAgY29uc3QgaXNOYXRpdmVMaW5rID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHRhZ05hbWUoKSA9PT0gXCJhXCIgJiYgcmVmPy5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpICE9IG51bGw7XG4gIH0pO1xuICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KFBvbHltb3JwaGljLCBtZXJnZVByb3BzKHtcbiAgICBhczogXCJidXR0b25cIixcbiAgICByZWYociQpIHtcbiAgICAgIGNvbnN0IF9yZWYkID0gbWVyZ2VSZWZzKChlbCkgPT4gcmVmID0gZWwsIGxvY2FsLnJlZik7XG4gICAgICB0eXBlb2YgX3JlZiQgPT09IFwiZnVuY3Rpb25cIiAmJiBfcmVmJChyJCk7XG4gICAgfSxcbiAgICBnZXQgdHlwZSgpIHtcbiAgICAgIHJldHVybiBpc05hdGl2ZUJ1dHRvbigpIHx8IGlzTmF0aXZlSW5wdXQoKSA/IGxvY2FsLnR5cGUgOiB2b2lkIDA7XG4gICAgfSxcbiAgICBnZXQgcm9sZSgpIHtcbiAgICAgIHJldHVybiAhaXNOYXRpdmVCdXR0b24oKSAmJiAhaXNOYXRpdmVMaW5rKCkgPyBcImJ1dHRvblwiIDogdm9pZCAwO1xuICAgIH0sXG4gICAgZ2V0IHRhYkluZGV4KCkge1xuICAgICAgcmV0dXJuICFpc05hdGl2ZUJ1dHRvbigpICYmICFpc05hdGl2ZUxpbmsoKSAmJiAhbG9jYWwuZGlzYWJsZWQgPyAwIDogdm9pZCAwO1xuICAgIH0sXG4gICAgZ2V0IGRpc2FibGVkKCkge1xuICAgICAgcmV0dXJuIGlzTmF0aXZlQnV0dG9uKCkgfHwgaXNOYXRpdmVJbnB1dCgpID8gbG9jYWwuZGlzYWJsZWQgOiB2b2lkIDA7XG4gICAgfSxcbiAgICBnZXQgW1wiYXJpYS1kaXNhYmxlZFwiXSgpIHtcbiAgICAgIHJldHVybiAhaXNOYXRpdmVCdXR0b24oKSAmJiAhaXNOYXRpdmVJbnB1dCgpICYmIGxvY2FsLmRpc2FibGVkID8gdHJ1ZSA6IHZvaWQgMDtcbiAgICB9LFxuICAgIGdldCBbXCJkYXRhLWRpc2FibGVkXCJdKCkge1xuICAgICAgcmV0dXJuIGxvY2FsLmRpc2FibGVkID8gXCJcIiA6IHZvaWQgMDtcbiAgICB9XG4gIH0sIG90aGVycykpO1xufVxuY3JlYXRlQ29udGV4dCgpO1xuY3JlYXRlQ29udGV4dCgpO1xudmFyIERvbUNvbGxlY3Rpb25Db250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuZnVuY3Rpb24gdXNlT3B0aW9uYWxEb21Db2xsZWN0aW9uQ29udGV4dCgpIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoRG9tQ29sbGVjdGlvbkNvbnRleHQpO1xufVxuZnVuY3Rpb24gdXNlRG9tQ29sbGVjdGlvbkNvbnRleHQoKSB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VPcHRpb25hbERvbUNvbGxlY3Rpb25Db250ZXh0KCk7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJba29iYWx0ZV06IGB1c2VEb21Db2xsZWN0aW9uQ29udGV4dGAgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGBEb21Db2xsZWN0aW9uUHJvdmlkZXJgIGNvbXBvbmVudFwiKTtcbiAgfVxuICByZXR1cm4gY29udGV4dDtcbn1cbmZ1bmN0aW9uIGlzRWxlbWVudFByZWNlZGluZyhhMiwgYjIpIHtcbiAgcmV0dXJuIEJvb2xlYW4oYjIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYTIpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9QUkVDRURJTkcpO1xufVxuZnVuY3Rpb24gZmluZERPTUluZGV4KGl0ZW1zLCBpdGVtKSB7XG4gIGNvbnN0IGl0ZW1FbCA9IGl0ZW0ucmVmKCk7XG4gIGlmICghaXRlbUVsKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIGxldCBsZW5ndGggPSBpdGVtcy5sZW5ndGg7XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGNvbnN0IGN1cnJlbnRJdGVtRWwgPSBpdGVtc1tsZW5ndGhdPy5yZWYoKTtcbiAgICBpZiAoIWN1cnJlbnRJdGVtRWwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoaXNFbGVtZW50UHJlY2VkaW5nKGN1cnJlbnRJdGVtRWwsIGl0ZW1FbCkpIHtcbiAgICAgIHJldHVybiBsZW5ndGggKyAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gMDtcbn1cbmZ1bmN0aW9uIHNvcnRCYXNlZE9uRE9NUG9zaXRpb24oaXRlbXMpIHtcbiAgY29uc3QgcGFpcnMgPSBpdGVtcy5tYXAoKGl0ZW0sIGluZGV4KSA9PiBbaW5kZXgsIGl0ZW1dKTtcbiAgbGV0IGlzT3JkZXJEaWZmZXJlbnQgPSBmYWxzZTtcbiAgcGFpcnMuc29ydCgoW2luZGV4QSwgYTJdLCBbaW5kZXhCLCBiMl0pID0+IHtcbiAgICBjb25zdCBlbGVtZW50QSA9IGEyLnJlZigpO1xuICAgIGNvbnN0IGVsZW1lbnRCID0gYjIucmVmKCk7XG4gICAgaWYgKGVsZW1lbnRBID09PSBlbGVtZW50Qikge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmICghZWxlbWVudEEgfHwgIWVsZW1lbnRCKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKGlzRWxlbWVudFByZWNlZGluZyhlbGVtZW50QSwgZWxlbWVudEIpKSB7XG4gICAgICBpZiAoaW5kZXhBID4gaW5kZXhCKSB7XG4gICAgICAgIGlzT3JkZXJEaWZmZXJlbnQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBpZiAoaW5kZXhBIDwgaW5kZXhCKSB7XG4gICAgICBpc09yZGVyRGlmZmVyZW50ID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIDE7XG4gIH0pO1xuICBpZiAoaXNPcmRlckRpZmZlcmVudCkge1xuICAgIHJldHVybiBwYWlycy5tYXAoKFtfLCBpdGVtXSkgPT4gaXRlbSk7XG4gIH1cbiAgcmV0dXJuIGl0ZW1zO1xufVxuZnVuY3Rpb24gc2V0SXRlbXNCYXNlZE9uRE9NUG9zaXRpb24oaXRlbXMsIHNldEl0ZW1zKSB7XG4gIGNvbnN0IHNvcnRlZEl0ZW1zID0gc29ydEJhc2VkT25ET01Qb3NpdGlvbihpdGVtcyk7XG4gIGlmIChpdGVtcyAhPT0gc29ydGVkSXRlbXMpIHtcbiAgICBzZXRJdGVtcyhzb3J0ZWRJdGVtcyk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldENvbW1vblBhcmVudChpdGVtcykge1xuICBjb25zdCBmaXJzdEl0ZW0gPSBpdGVtc1swXTtcbiAgY29uc3QgbGFzdEl0ZW1FbCA9IGl0ZW1zW2l0ZW1zLmxlbmd0aCAtIDFdPy5yZWYoKTtcbiAgbGV0IHBhcmVudEVsID0gZmlyc3RJdGVtPy5yZWYoKT8ucGFyZW50RWxlbWVudDtcbiAgd2hpbGUgKHBhcmVudEVsKSB7XG4gICAgaWYgKGxhc3RJdGVtRWwgJiYgcGFyZW50RWwuY29udGFpbnMobGFzdEl0ZW1FbCkpIHtcbiAgICAgIHJldHVybiBwYXJlbnRFbDtcbiAgICB9XG4gICAgcGFyZW50RWwgPSBwYXJlbnRFbC5wYXJlbnRFbGVtZW50O1xuICB9XG4gIHJldHVybiBnZXREb2N1bWVudChwYXJlbnRFbCkuYm9keTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRpbWVvdXRPYnNlcnZlcihpdGVtcywgc2V0SXRlbXMpIHtcbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBzZXRJdGVtc0Jhc2VkT25ET01Qb3NpdGlvbihpdGVtcygpLCBzZXRJdGVtcyk7XG4gICAgfSk7XG4gICAgb25DbGVhbnVwKCgpID0+IGNsZWFyVGltZW91dCh0aW1lb3V0KSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlU29ydEJhc2VkT25ET01Qb3NpdGlvbihpdGVtcywgc2V0SXRlbXMpIHtcbiAgaWYgKHR5cGVvZiBJbnRlcnNlY3Rpb25PYnNlcnZlciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY3JlYXRlVGltZW91dE9ic2VydmVyKGl0ZW1zLCBzZXRJdGVtcyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBwcmV2aW91c0l0ZW1zID0gW107XG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgY2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICBjb25zdCBoYXNQcmV2aW91c0l0ZW1zID0gISFwcmV2aW91c0l0ZW1zLmxlbmd0aDtcbiAgICAgIHByZXZpb3VzSXRlbXMgPSBpdGVtcygpO1xuICAgICAgaWYgKCFoYXNQcmV2aW91c0l0ZW1zKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNldEl0ZW1zQmFzZWRPbkRPTVBvc2l0aW9uKGl0ZW1zKCksIHNldEl0ZW1zKTtcbiAgICB9O1xuICAgIGNvbnN0IHJvb3QgPSBnZXRDb21tb25QYXJlbnQoaXRlbXMoKSk7XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoY2FsbGJhY2ssIHtcbiAgICAgIHJvb3RcbiAgICB9KTtcbiAgICBpdGVtcygpLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IGl0ZW1FbCA9IGl0ZW0ucmVmKCk7XG4gICAgICBpZiAoaXRlbUVsKSB7XG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUoaXRlbUVsKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvbkNsZWFudXAoKCkgPT4gb2JzZXJ2ZXIuZGlzY29ubmVjdCgpKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVEb21Db2xsZWN0aW9uKHByb3BzID0ge30pIHtcbiAgY29uc3QgW2l0ZW1zLCBzZXRJdGVtc10gPSBjcmVhdGVDb250cm9sbGFibGVBcnJheVNpZ25hbCh7XG4gICAgdmFsdWU6ICgpID0+IGFjY2Vzcyhwcm9wcy5pdGVtcyksXG4gICAgb25DaGFuZ2U6ICh2YWx1ZSkgPT4gcHJvcHMub25JdGVtc0NoYW5nZT8uKHZhbHVlKVxuICB9KTtcbiAgY3JlYXRlU29ydEJhc2VkT25ET01Qb3NpdGlvbihpdGVtcywgc2V0SXRlbXMpO1xuICBjb25zdCByZWdpc3Rlckl0ZW0gPSAoaXRlbSkgPT4ge1xuICAgIHNldEl0ZW1zKChwcmV2SXRlbXMpID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ID0gZmluZERPTUluZGV4KHByZXZJdGVtcywgaXRlbSk7XG4gICAgICByZXR1cm4gYWRkSXRlbVRvQXJyYXkocHJldkl0ZW1zLCBpdGVtLCBpbmRleCk7XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHNldEl0ZW1zKChwcmV2SXRlbXMpID0+IHtcbiAgICAgICAgY29uc3QgbmV4dEl0ZW1zID0gcHJldkl0ZW1zLmZpbHRlcigocHJldkl0ZW0pID0+IHByZXZJdGVtLnJlZigpICE9PSBpdGVtLnJlZigpKTtcbiAgICAgICAgaWYgKHByZXZJdGVtcy5sZW5ndGggPT09IG5leHRJdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gcHJldkl0ZW1zO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXh0SXRlbXM7XG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xuICBjb25zdCBEb21Db2xsZWN0aW9uUHJvdmlkZXIgPSAocHJvcHMyKSA9PiB7XG4gICAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChEb21Db2xsZWN0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgcmVnaXN0ZXJJdGVtXG4gICAgICB9LFxuICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICByZXR1cm4gcHJvcHMyLmNoaWxkcmVuO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICByZXR1cm4ge1xuICAgIERvbUNvbGxlY3Rpb25Qcm92aWRlclxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlRG9tQ29sbGVjdGlvbkl0ZW0ocHJvcHMpIHtcbiAgY29uc3QgY29udGV4dCA9IHVzZURvbUNvbGxlY3Rpb25Db250ZXh0KCk7XG4gIHByb3BzID0gbWVyZ2VEZWZhdWx0UHJvcHMoe1xuICAgIHNob3VsZFJlZ2lzdGVySXRlbTogdHJ1ZVxuICB9LCBwcm9wcyk7XG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFwcm9wcy5zaG91bGRSZWdpc3Rlckl0ZW0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdW5yZWdpc3RlciA9IGNvbnRleHQucmVnaXN0ZXJJdGVtKHByb3BzLmdldEl0ZW0oKSk7XG4gICAgb25DbGVhbnVwKHVucmVnaXN0ZXIpO1xuICB9KTtcbn1cbmNyZWF0ZUNvbnRleHQoKTtcbnZhciBEaXNtaXNzYWJsZUxheWVyQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbmZ1bmN0aW9uIHVzZU9wdGlvbmFsRGlzbWlzc2FibGVMYXllckNvbnRleHQoKSB7XG4gIHJldHVybiB1c2VDb250ZXh0KERpc21pc3NhYmxlTGF5ZXJDb250ZXh0KTtcbn1cbmZ1bmN0aW9uIERpc21pc3NhYmxlTGF5ZXIocHJvcHMpIHtcbiAgbGV0IHJlZjtcbiAgY29uc3QgcGFyZW50Q29udGV4dCA9IHVzZU9wdGlvbmFsRGlzbWlzc2FibGVMYXllckNvbnRleHQoKTtcbiAgY29uc3QgW2xvY2FsLCBvdGhlcnNdID0gc3BsaXRQcm9wcyhwcm9wcywgW1wicmVmXCIsIFwiZGlzYWJsZU91dHNpZGVQb2ludGVyRXZlbnRzXCIsIFwiZXhjbHVkZWRFbGVtZW50c1wiLCBcIm9uRXNjYXBlS2V5RG93blwiLCBcIm9uUG9pbnRlckRvd25PdXRzaWRlXCIsIFwib25Gb2N1c091dHNpZGVcIiwgXCJvbkludGVyYWN0T3V0c2lkZVwiLCBcIm9uRGlzbWlzc1wiLCBcImJ5cGFzc1RvcE1vc3RMYXllckNoZWNrXCJdKTtcbiAgY29uc3QgbmVzdGVkTGF5ZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW10pO1xuICBjb25zdCByZWdpc3Rlck5lc3RlZExheWVyID0gKGVsZW1lbnQpID0+IHtcbiAgICBuZXN0ZWRMYXllcnMuYWRkKGVsZW1lbnQpO1xuICAgIGNvbnN0IHBhcmVudFVucmVnaXN0ZXIgPSBwYXJlbnRDb250ZXh0Py5yZWdpc3Rlck5lc3RlZExheWVyKGVsZW1lbnQpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBuZXN0ZWRMYXllcnMuZGVsZXRlKGVsZW1lbnQpO1xuICAgICAgcGFyZW50VW5yZWdpc3Rlcj8uKCk7XG4gICAgfTtcbiAgfTtcbiAgY29uc3Qgc2hvdWxkRXhjbHVkZUVsZW1lbnQgPSAoZWxlbWVudCkgPT4ge1xuICAgIGlmICghcmVmKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBsb2NhbC5leGNsdWRlZEVsZW1lbnRzPy5zb21lKChub2RlKSA9PiBjb250YWlucyhub2RlKCksIGVsZW1lbnQpKSB8fCBbLi4ubmVzdGVkTGF5ZXJzXS5zb21lKChsYXllcikgPT4gY29udGFpbnMobGF5ZXIsIGVsZW1lbnQpKTtcbiAgfTtcbiAgY29uc3Qgb25Qb2ludGVyRG93bk91dHNpZGUgPSAoZTIpID0+IHtcbiAgICBpZiAoIXJlZiB8fCBsYXllclN0YWNrLmlzQmVsb3dQb2ludGVyQmxvY2tpbmdMYXllcihyZWYpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghbG9jYWwuYnlwYXNzVG9wTW9zdExheWVyQ2hlY2sgJiYgIWxheWVyU3RhY2suaXNUb3BNb3N0TGF5ZXIocmVmKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsb2NhbC5vblBvaW50ZXJEb3duT3V0c2lkZT8uKGUyKTtcbiAgICBsb2NhbC5vbkludGVyYWN0T3V0c2lkZT8uKGUyKTtcbiAgICBpZiAoIWUyLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIGxvY2FsLm9uRGlzbWlzcz8uKCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBvbkZvY3VzT3V0c2lkZSA9IChlMikgPT4ge1xuICAgIGxvY2FsLm9uRm9jdXNPdXRzaWRlPy4oZTIpO1xuICAgIGxvY2FsLm9uSW50ZXJhY3RPdXRzaWRlPy4oZTIpO1xuICAgIGlmICghZTIuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgbG9jYWwub25EaXNtaXNzPy4oKTtcbiAgICB9XG4gIH07XG4gIGNyZWF0ZUludGVyYWN0T3V0c2lkZSh7XG4gICAgc2hvdWxkRXhjbHVkZUVsZW1lbnQsXG4gICAgb25Qb2ludGVyRG93bk91dHNpZGUsXG4gICAgb25Gb2N1c091dHNpZGVcbiAgfSwgKCkgPT4gcmVmKTtcbiAgY3JlYXRlRXNjYXBlS2V5RG93bih7XG4gICAgb3duZXJEb2N1bWVudDogKCkgPT4gZ2V0RG9jdW1lbnQocmVmKSxcbiAgICBvbkVzY2FwZUtleURvd246IChlMikgPT4ge1xuICAgICAgaWYgKCFyZWYgfHwgIWxheWVyU3RhY2suaXNUb3BNb3N0TGF5ZXIocmVmKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsb2NhbC5vbkVzY2FwZUtleURvd24/LihlMik7XG4gICAgICBpZiAoIWUyLmRlZmF1bHRQcmV2ZW50ZWQgJiYgbG9jYWwub25EaXNtaXNzKSB7XG4gICAgICAgIGUyLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGxvY2FsLm9uRGlzbWlzcygpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIG9uTW91bnQoKCkgPT4ge1xuICAgIGlmICghcmVmKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxheWVyU3RhY2suYWRkTGF5ZXIoe1xuICAgICAgbm9kZTogcmVmLFxuICAgICAgaXNQb2ludGVyQmxvY2tpbmc6IGxvY2FsLmRpc2FibGVPdXRzaWRlUG9pbnRlckV2ZW50cyxcbiAgICAgIGRpc21pc3M6IGxvY2FsLm9uRGlzbWlzc1xuICAgIH0pO1xuICAgIGNvbnN0IHVucmVnaXN0ZXJGcm9tUGFyZW50TGF5ZXIgPSBwYXJlbnRDb250ZXh0Py5yZWdpc3Rlck5lc3RlZExheWVyKHJlZik7XG4gICAgbGF5ZXJTdGFjay5hc3NpZ25Qb2ludGVyRXZlbnRUb0xheWVycygpO1xuICAgIGxheWVyU3RhY2suZGlzYWJsZUJvZHlQb2ludGVyRXZlbnRzKHJlZik7XG4gICAgb25DbGVhbnVwKCgpID0+IHtcbiAgICAgIGlmICghcmVmKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxheWVyU3RhY2sucmVtb3ZlTGF5ZXIocmVmKTtcbiAgICAgIHVucmVnaXN0ZXJGcm9tUGFyZW50TGF5ZXI/LigpO1xuICAgICAgbGF5ZXJTdGFjay5hc3NpZ25Qb2ludGVyRXZlbnRUb0xheWVycygpO1xuICAgICAgbGF5ZXJTdGFjay5yZXN0b3JlQm9keVBvaW50ZXJFdmVudHMocmVmKTtcbiAgICB9KTtcbiAgfSk7XG4gIGNyZWF0ZUVmZmVjdChvbihbKCkgPT4gcmVmLCAoKSA9PiBsb2NhbC5kaXNhYmxlT3V0c2lkZVBvaW50ZXJFdmVudHNdLCAoW3JlZjIsIGRpc2FibGVPdXRzaWRlUG9pbnRlckV2ZW50c10pID0+IHtcbiAgICBpZiAoIXJlZjIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbGF5ZXIgPSBsYXllclN0YWNrLmZpbmQocmVmMik7XG4gICAgaWYgKGxheWVyICYmIGxheWVyLmlzUG9pbnRlckJsb2NraW5nICE9PSBkaXNhYmxlT3V0c2lkZVBvaW50ZXJFdmVudHMpIHtcbiAgICAgIGxheWVyLmlzUG9pbnRlckJsb2NraW5nID0gZGlzYWJsZU91dHNpZGVQb2ludGVyRXZlbnRzO1xuICAgICAgbGF5ZXJTdGFjay5hc3NpZ25Qb2ludGVyRXZlbnRUb0xheWVycygpO1xuICAgIH1cbiAgICBpZiAoZGlzYWJsZU91dHNpZGVQb2ludGVyRXZlbnRzKSB7XG4gICAgICBsYXllclN0YWNrLmRpc2FibGVCb2R5UG9pbnRlckV2ZW50cyhyZWYyKTtcbiAgICB9XG4gICAgb25DbGVhbnVwKCgpID0+IHtcbiAgICAgIGxheWVyU3RhY2sucmVzdG9yZUJvZHlQb2ludGVyRXZlbnRzKHJlZjIpO1xuICAgIH0pO1xuICB9LCB7XG4gICAgZGVmZXI6IHRydWVcbiAgfSkpO1xuICBjb25zdCBjb250ZXh0ID0ge1xuICAgIHJlZ2lzdGVyTmVzdGVkTGF5ZXJcbiAgfTtcbiAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChEaXNtaXNzYWJsZUxheWVyQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0LFxuICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgIHJldHVybiBjcmVhdGVDb21wb25lbnQoUG9seW1vcnBoaWMsIG1lcmdlUHJvcHMoe1xuICAgICAgICBhczogXCJkaXZcIixcbiAgICAgICAgcmVmKHIkKSB7XG4gICAgICAgICAgY29uc3QgX3JlZiQgPSBtZXJnZVJlZnMoKGVsKSA9PiByZWYgPSBlbCwgbG9jYWwucmVmKTtcbiAgICAgICAgICB0eXBlb2YgX3JlZiQgPT09IFwiZnVuY3Rpb25cIiAmJiBfcmVmJChyJCk7XG4gICAgICAgIH1cbiAgICAgIH0sIG90aGVycykpO1xuICAgIH1cbiAgfSk7XG59XG5jcmVhdGVDb250ZXh0KCk7XG5jcmVhdGVDb250ZXh0KCk7XG5jcmVhdGVDb250ZXh0KCk7XG5jcmVhdGVDb250ZXh0KCk7XG5jcmVhdGVDb250ZXh0KCk7XG52YXIgUG9wcGVyQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbmZ1bmN0aW9uIHVzZVBvcHBlckNvbnRleHQoKSB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KFBvcHBlckNvbnRleHQpO1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiW2tvYmFsdGVdOiBgdXNlUG9wcGVyQ29udGV4dGAgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGBQb3BwZXJgIGNvbXBvbmVudFwiKTtcbiAgfVxuICByZXR1cm4gY29udGV4dDtcbn1cbnZhciBfdG1wbCQkZiA9IC8qIEBfX1BVUkVfXyAqLyB0ZW1wbGF0ZShgPHN2ZyBkaXNwbGF5PVwiYmxvY2tcIiB2aWV3Qm94PVwiMCAwIDMwIDMwXCI+PGc+PHBhdGggZmlsbD1cIm5vbmVcIiBkPVwiTTIzLDI3LjhjMS4xLDEuMiwzLjQsMi4yLDUsMi4yaDJIMGgyYzEuNywwLDMuOS0xLDUtMi4ybDYuNi03LjJjMC43LTAuOCwyLTAuOCwyLjcsMEwyMywyNy44TDIzLDI3Ljh6XCI+PC9wYXRoPjxwYXRoIHN0cm9rZT1cIm5vbmVcIiBkPVwiTTIzLDI3LjhjMS4xLDEuMiwzLjQsMi4yLDUsMi4yaDJIMGgyYzEuNywwLDMuOS0xLDUtMi4ybDYuNi03LjJjMC43LTAuOCwyLTAuOCwyLjcsMEwyMywyNy44TDIzLDI3Ljh6XCI+YCk7XG52YXIgREVGQVVMVF9TSVpFID0gMzA7XG52YXIgSEFMRl9ERUZBVUxUX1NJWkUgPSBERUZBVUxUX1NJWkUgLyAyO1xudmFyIFJPVEFUSU9OX0RFRyA9IHtcbiAgdG9wOiAxODAsXG4gIHJpZ2h0OiAtOTAsXG4gIGJvdHRvbTogMCxcbiAgbGVmdDogOTBcbn07XG5mdW5jdGlvbiBQb3BwZXJBcnJvdyhwcm9wcykge1xuICBjb25zdCBjb250ZXh0ID0gdXNlUG9wcGVyQ29udGV4dCgpO1xuICBwcm9wcyA9IG1lcmdlRGVmYXVsdFByb3BzKHtcbiAgICBzaXplOiBERUZBVUxUX1NJWkVcbiAgfSwgcHJvcHMpO1xuICBjb25zdCBbbG9jYWwsIG90aGVyc10gPSBzcGxpdFByb3BzKHByb3BzLCBbXCJyZWZcIiwgXCJzdHlsZVwiLCBcImNoaWxkcmVuXCIsIFwic2l6ZVwiXSk7XG4gIGNvbnN0IGRpciA9ICgpID0+IGNvbnRleHQuY3VycmVudFBsYWNlbWVudCgpLnNwbGl0KFwiLVwiKVswXTtcbiAgY29uc3QgY29udGVudFN0eWxlID0gY3JlYXRlQ29tcHV0ZWRTdHlsZShjb250ZXh0LmNvbnRlbnRSZWYpO1xuICBjb25zdCBmaWxsID0gKCkgPT4gY29udGVudFN0eWxlKCk/LmdldFByb3BlcnR5VmFsdWUoXCJiYWNrZ3JvdW5kLWNvbG9yXCIpIHx8IFwibm9uZVwiO1xuICBjb25zdCBzdHJva2UgPSAoKSA9PiBjb250ZW50U3R5bGUoKT8uZ2V0UHJvcGVydHlWYWx1ZShgYm9yZGVyLSR7ZGlyKCl9LWNvbG9yYCkgfHwgXCJub25lXCI7XG4gIGNvbnN0IGJvcmRlcldpZHRoID0gKCkgPT4gY29udGVudFN0eWxlKCk/LmdldFByb3BlcnR5VmFsdWUoYGJvcmRlci0ke2RpcigpfS13aWR0aGApIHx8IFwiMHB4XCI7XG4gIGNvbnN0IHN0cm9rZVdpZHRoID0gKCkgPT4ge1xuICAgIHJldHVybiBwYXJzZUludChib3JkZXJXaWR0aCgpKSAqIDIgKiAoREVGQVVMVF9TSVpFIC8gbG9jYWwuc2l6ZSk7XG4gIH07XG4gIGNvbnN0IHJvdGF0ZSA9ICgpID0+IHtcbiAgICByZXR1cm4gYHJvdGF0ZSgke1JPVEFUSU9OX0RFR1tkaXIoKV19ICR7SEFMRl9ERUZBVUxUX1NJWkV9ICR7SEFMRl9ERUZBVUxUX1NJWkV9KWA7XG4gIH07XG4gIHJldHVybiBjcmVhdGVDb21wb25lbnQoUG9seW1vcnBoaWMsIG1lcmdlUHJvcHMoe1xuICAgIGFzOiBcImRpdlwiLFxuICAgIHJlZihyJCkge1xuICAgICAgY29uc3QgX3JlZiQgPSBtZXJnZVJlZnMoY29udGV4dC5zZXRBcnJvd1JlZiwgbG9jYWwucmVmKTtcbiAgICAgIHR5cGVvZiBfcmVmJCA9PT0gXCJmdW5jdGlvblwiICYmIF9yZWYkKHIkKTtcbiAgICB9LFxuICAgIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsXG4gICAgZ2V0IHN0eWxlKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLy8gc2VydmVyIHNpZGUgcmVuZGVyaW5nXG4gICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgIFwiZm9udC1zaXplXCI6IGAke2xvY2FsLnNpemV9cHhgLFxuICAgICAgICB3aWR0aDogXCIxZW1cIixcbiAgICAgICAgaGVpZ2h0OiBcIjFlbVwiLFxuICAgICAgICBcInBvaW50ZXItZXZlbnRzXCI6IFwibm9uZVwiLFxuICAgICAgICBmaWxsOiBmaWxsKCksXG4gICAgICAgIHN0cm9rZTogc3Ryb2tlKCksXG4gICAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IHN0cm9rZVdpZHRoKCksXG4gICAgICAgIC4uLmxvY2FsLnN0eWxlXG4gICAgICB9O1xuICAgIH1cbiAgfSwgb3RoZXJzLCB7XG4gICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgY29uc3QgX2VsJCA9IF90bXBsJCRmKCksIF9lbCQyID0gX2VsJC5maXJzdENoaWxkLCBfZWwkMyA9IF9lbCQyLmZpcnN0Q2hpbGQ7XG4gICAgICBfZWwkMy5uZXh0U2libGluZztcbiAgICAgIGNyZWF0ZVJlbmRlckVmZmVjdCgoKSA9PiBzZXRBdHRyaWJ1dGUoX2VsJDIsIFwidHJhbnNmb3JtXCIsIHJvdGF0ZSgpKSk7XG4gICAgICByZXR1cm4gX2VsJDtcbiAgICB9XG4gIH0pKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvbXB1dGVkU3R5bGUoZWxlbWVudCkge1xuICBjb25zdCBbc3R5bGUyLCBzZXRTdHlsZV0gPSBjcmVhdGVTaWduYWwoKTtcbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBlbCA9IGVsZW1lbnQoKTtcbiAgICBlbCAmJiBzZXRTdHlsZShnZXRXaW5kb3coZWwpLmdldENvbXB1dGVkU3R5bGUoZWwpKTtcbiAgfSk7XG4gIHJldHVybiBzdHlsZTI7XG59XG5mdW5jdGlvbiBQb3BwZXJQb3NpdGlvbmVyKHByb3BzKSB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VQb3BwZXJDb250ZXh0KCk7XG4gIGNvbnN0IFtsb2NhbCwgb3RoZXJzXSA9IHNwbGl0UHJvcHMocHJvcHMsIFtcInJlZlwiLCBcInN0eWxlXCJdKTtcbiAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChQb2x5bW9ycGhpYywgbWVyZ2VQcm9wcyh7XG4gICAgYXM6IFwiZGl2XCIsXG4gICAgcmVmKHIkKSB7XG4gICAgICBjb25zdCBfcmVmJCA9IG1lcmdlUmVmcyhjb250ZXh0LnNldFBvc2l0aW9uZXJSZWYsIGxvY2FsLnJlZik7XG4gICAgICB0eXBlb2YgX3JlZiQgPT09IFwiZnVuY3Rpb25cIiAmJiBfcmVmJChyJCk7XG4gICAgfSxcbiAgICBcImRhdGEtcG9wcGVyLXBvc2l0aW9uZXJcIjogXCJcIixcbiAgICBnZXQgc3R5bGUoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIFwibWluLXdpZHRoXCI6IFwibWF4LWNvbnRlbnRcIixcbiAgICAgICAgLi4ubG9jYWwuc3R5bGVcbiAgICAgIH07XG4gICAgfVxuICB9LCBvdGhlcnMpKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURPTVJlY3QoYW5jaG9yUmVjdCkge1xuICBjb25zdCB7XG4gICAgeCA9IDAsXG4gICAgeSA9IDAsXG4gICAgd2lkdGggPSAwLFxuICAgIGhlaWdodCA9IDBcbiAgfSA9IGFuY2hvclJlY3QgPz8ge307XG4gIGlmICh0eXBlb2YgRE9NUmVjdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIG5ldyBET01SZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICB9XG4gIGNvbnN0IHJlY3QgPSB7XG4gICAgeCxcbiAgICB5LFxuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICB0b3A6IHksXG4gICAgcmlnaHQ6IHggKyB3aWR0aCxcbiAgICBib3R0b206IHkgKyBoZWlnaHQsXG4gICAgbGVmdDogeFxuICB9O1xuICByZXR1cm4ge1xuICAgIC4uLnJlY3QsXG4gICAgdG9KU09OOiAoKSA9PiByZWN0XG4gIH07XG59XG5mdW5jdGlvbiBnZXRBbmNob3JFbGVtZW50KGFuY2hvciwgZ2V0QW5jaG9yUmVjdCkge1xuICBjb25zdCBjb250ZXh0RWxlbWVudCA9IGFuY2hvcjtcbiAgcmV0dXJuIHtcbiAgICBjb250ZXh0RWxlbWVudCxcbiAgICBnZXRCb3VuZGluZ0NsaWVudFJlY3Q6ICgpID0+IHtcbiAgICAgIGNvbnN0IGFuY2hvclJlY3QgPSBnZXRBbmNob3JSZWN0KGFuY2hvcik7XG4gICAgICBpZiAoYW5jaG9yUmVjdCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRE9NUmVjdChhbmNob3JSZWN0KTtcbiAgICAgIH1cbiAgICAgIGlmIChhbmNob3IpIHtcbiAgICAgICAgcmV0dXJuIGFuY2hvci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVET01SZWN0KCk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gaXNWYWxpZFBsYWNlbWVudChmbGlwMikge1xuICByZXR1cm4gL14oPzp0b3B8Ym90dG9tfGxlZnR8cmlnaHQpKD86LSg/OnN0YXJ0fGVuZCkpPyQvLnRlc3QoZmxpcDIpO1xufVxudmFyIFJFVkVSU0VfQkFTRV9QTEFDRU1FTlQgPSB7XG4gIHRvcDogXCJib3R0b21cIixcbiAgcmlnaHQ6IFwibGVmdFwiLFxuICBib3R0b206IFwidG9wXCIsXG4gIGxlZnQ6IFwicmlnaHRcIlxufTtcbmZ1bmN0aW9uIGdldFRyYW5zZm9ybU9yaWdpbihwbGFjZW1lbnQsIHJlYWRpbmdEaXJlY3Rpb24pIHtcbiAgY29uc3QgW2Jhc2VQbGFjZW1lbnQsIGFsaWdubWVudF0gPSBwbGFjZW1lbnQuc3BsaXQoXCItXCIpO1xuICBjb25zdCByZXZlcnNlUGxhY2VtZW50ID0gUkVWRVJTRV9CQVNFX1BMQUNFTUVOVFtiYXNlUGxhY2VtZW50XTtcbiAgaWYgKCFhbGlnbm1lbnQpIHtcbiAgICByZXR1cm4gYCR7cmV2ZXJzZVBsYWNlbWVudH0gY2VudGVyYDtcbiAgfVxuICBpZiAoYmFzZVBsYWNlbWVudCA9PT0gXCJsZWZ0XCIgfHwgYmFzZVBsYWNlbWVudCA9PT0gXCJyaWdodFwiKSB7XG4gICAgcmV0dXJuIGAke3JldmVyc2VQbGFjZW1lbnR9ICR7YWxpZ25tZW50ID09PSBcInN0YXJ0XCIgPyBcInRvcFwiIDogXCJib3R0b21cIn1gO1xuICB9XG4gIGlmIChhbGlnbm1lbnQgPT09IFwic3RhcnRcIikge1xuICAgIHJldHVybiBgJHtyZXZlcnNlUGxhY2VtZW50fSAke3JlYWRpbmdEaXJlY3Rpb24gPT09IFwicnRsXCIgPyBcInJpZ2h0XCIgOiBcImxlZnRcIn1gO1xuICB9XG4gIHJldHVybiBgJHtyZXZlcnNlUGxhY2VtZW50fSAke3JlYWRpbmdEaXJlY3Rpb24gPT09IFwicnRsXCIgPyBcImxlZnRcIiA6IFwicmlnaHRcIn1gO1xufVxuZnVuY3Rpb24gUG9wcGVyUm9vdChwcm9wcykge1xuICBwcm9wcyA9IG1lcmdlRGVmYXVsdFByb3BzKHtcbiAgICBnZXRBbmNob3JSZWN0OiAoYW5jaG9yKSA9PiBhbmNob3I/LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgIHBsYWNlbWVudDogXCJib3R0b21cIixcbiAgICBndXR0ZXI6IDAsXG4gICAgc2hpZnQ6IDAsXG4gICAgZmxpcDogdHJ1ZSxcbiAgICBzbGlkZTogdHJ1ZSxcbiAgICBvdmVybGFwOiBmYWxzZSxcbiAgICBzYW1lV2lkdGg6IGZhbHNlLFxuICAgIGZpdFZpZXdwb3J0OiBmYWxzZSxcbiAgICBoaWRlV2hlbkRldGFjaGVkOiBmYWxzZSxcbiAgICBkZXRhY2hlZFBhZGRpbmc6IDAsXG4gICAgYXJyb3dQYWRkaW5nOiA0LFxuICAgIG92ZXJmbG93UGFkZGluZzogOFxuICB9LCBwcm9wcyk7XG4gIGNvbnN0IFtwb3NpdGlvbmVyUmVmLCBzZXRQb3NpdGlvbmVyUmVmXSA9IGNyZWF0ZVNpZ25hbCgpO1xuICBjb25zdCBbYXJyb3dSZWYsIHNldEFycm93UmVmXSA9IGNyZWF0ZVNpZ25hbCgpO1xuICBjb25zdCBbY3VycmVudFBsYWNlbWVudCwgc2V0Q3VycmVudFBsYWNlbWVudF0gPSBjcmVhdGVTaWduYWwocHJvcHMucGxhY2VtZW50KTtcbiAgY29uc3QgYW5jaG9yUmVmID0gKCkgPT4gZ2V0QW5jaG9yRWxlbWVudChwcm9wcy5hbmNob3JSZWYoKSwgcHJvcHMuZ2V0QW5jaG9yUmVjdCk7XG4gIGNvbnN0IHtcbiAgICBkaXJlY3Rpb25cbiAgfSA9IHVzZUxvY2FsZSgpO1xuICBhc3luYyBmdW5jdGlvbiB1cGRhdGVQb3NpdGlvbigpIHtcbiAgICBjb25zdCByZWZlcmVuY2VFbCA9IGFuY2hvclJlZigpO1xuICAgIGNvbnN0IGZsb2F0aW5nRWwgPSBwb3NpdGlvbmVyUmVmKCk7XG4gICAgY29uc3QgYXJyb3dFbCA9IGFycm93UmVmKCk7XG4gICAgaWYgKCFyZWZlcmVuY2VFbCB8fCAhZmxvYXRpbmdFbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBhcnJvd09mZnNldCA9IChhcnJvd0VsPy5jbGllbnRIZWlnaHQgfHwgMCkgLyAyO1xuICAgIGNvbnN0IGZpbmFsR3V0dGVyID0gdHlwZW9mIHByb3BzLmd1dHRlciA9PT0gXCJudW1iZXJcIiA/IHByb3BzLmd1dHRlciArIGFycm93T2Zmc2V0IDogcHJvcHMuZ3V0dGVyID8/IGFycm93T2Zmc2V0O1xuICAgIGZsb2F0aW5nRWwuc3R5bGUuc2V0UHJvcGVydHkoXCItLWtiLXBvcHBlci1jb250ZW50LW92ZXJmbG93LXBhZGRpbmdcIiwgYCR7cHJvcHMub3ZlcmZsb3dQYWRkaW5nfXB4YCk7XG4gICAgcmVmZXJlbmNlRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgbWlkZGxld2FyZSA9IFtcbiAgICAgIC8vIGh0dHBzOi8vZmxvYXRpbmctdWkuY29tL2RvY3Mvb2Zmc2V0XG4gICAgICBvZmZzZXQoKHtcbiAgICAgICAgcGxhY2VtZW50XG4gICAgICB9KSA9PiB7XG4gICAgICAgIGNvbnN0IGhhc0FsaWdubWVudCA9ICEhcGxhY2VtZW50LnNwbGl0KFwiLVwiKVsxXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBtYWluQXhpczogZmluYWxHdXR0ZXIsXG4gICAgICAgICAgY3Jvc3NBeGlzOiAhaGFzQWxpZ25tZW50ID8gcHJvcHMuc2hpZnQgOiB2b2lkIDAsXG4gICAgICAgICAgYWxpZ25tZW50QXhpczogcHJvcHMuc2hpZnRcbiAgICAgICAgfTtcbiAgICAgIH0pXG4gICAgXTtcbiAgICBpZiAocHJvcHMuZmxpcCAhPT0gZmFsc2UpIHtcbiAgICAgIGNvbnN0IGZhbGxiYWNrUGxhY2VtZW50cyA9IHR5cGVvZiBwcm9wcy5mbGlwID09PSBcInN0cmluZ1wiID8gcHJvcHMuZmxpcC5zcGxpdChcIiBcIikgOiB2b2lkIDA7XG4gICAgICBpZiAoZmFsbGJhY2tQbGFjZW1lbnRzICE9PSB2b2lkIDAgJiYgIWZhbGxiYWNrUGxhY2VtZW50cy5ldmVyeShpc1ZhbGlkUGxhY2VtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgZmxpcGAgZXhwZWN0cyBhIHNwYWNlZC1kZWxpbWl0ZWQgbGlzdCBvZiBwbGFjZW1lbnRzXCIpO1xuICAgICAgfVxuICAgICAgbWlkZGxld2FyZS5wdXNoKGZsaXAoe1xuICAgICAgICBwYWRkaW5nOiBwcm9wcy5vdmVyZmxvd1BhZGRpbmcsXG4gICAgICAgIGZhbGxiYWNrUGxhY2VtZW50c1xuICAgICAgfSkpO1xuICAgIH1cbiAgICBpZiAocHJvcHMuc2xpZGUgfHwgcHJvcHMub3ZlcmxhcCkge1xuICAgICAgbWlkZGxld2FyZS5wdXNoKHNoaWZ0KHtcbiAgICAgICAgbWFpbkF4aXM6IHByb3BzLnNsaWRlLFxuICAgICAgICBjcm9zc0F4aXM6IHByb3BzLm92ZXJsYXAsXG4gICAgICAgIHBhZGRpbmc6IHByb3BzLm92ZXJmbG93UGFkZGluZ1xuICAgICAgfSkpO1xuICAgIH1cbiAgICBtaWRkbGV3YXJlLnB1c2goc2l6ZSh7XG4gICAgICBwYWRkaW5nOiBwcm9wcy5vdmVyZmxvd1BhZGRpbmcsXG4gICAgICBhcHBseSh7XG4gICAgICAgIGF2YWlsYWJsZVdpZHRoLFxuICAgICAgICBhdmFpbGFibGVIZWlnaHQsXG4gICAgICAgIHJlY3RzXG4gICAgICB9KSB7XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZVdpZHRoID0gTWF0aC5yb3VuZChyZWN0cy5yZWZlcmVuY2Uud2lkdGgpO1xuICAgICAgICBhdmFpbGFibGVXaWR0aCA9IE1hdGguZmxvb3IoYXZhaWxhYmxlV2lkdGgpO1xuICAgICAgICBhdmFpbGFibGVIZWlnaHQgPSBNYXRoLmZsb29yKGF2YWlsYWJsZUhlaWdodCk7XG4gICAgICAgIGZsb2F0aW5nRWwuc3R5bGUuc2V0UHJvcGVydHkoXCItLWtiLXBvcHBlci1hbmNob3Itd2lkdGhcIiwgYCR7cmVmZXJlbmNlV2lkdGh9cHhgKTtcbiAgICAgICAgZmxvYXRpbmdFbC5zdHlsZS5zZXRQcm9wZXJ0eShcIi0ta2ItcG9wcGVyLWNvbnRlbnQtYXZhaWxhYmxlLXdpZHRoXCIsIGAke2F2YWlsYWJsZVdpZHRofXB4YCk7XG4gICAgICAgIGZsb2F0aW5nRWwuc3R5bGUuc2V0UHJvcGVydHkoXCItLWtiLXBvcHBlci1jb250ZW50LWF2YWlsYWJsZS1oZWlnaHRcIiwgYCR7YXZhaWxhYmxlSGVpZ2h0fXB4YCk7XG4gICAgICAgIGlmIChwcm9wcy5zYW1lV2lkdGgpIHtcbiAgICAgICAgICBmbG9hdGluZ0VsLnN0eWxlLndpZHRoID0gYCR7cmVmZXJlbmNlV2lkdGh9cHhgO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wcy5maXRWaWV3cG9ydCkge1xuICAgICAgICAgIGZsb2F0aW5nRWwuc3R5bGUubWF4V2lkdGggPSBgJHthdmFpbGFibGVXaWR0aH1weGA7XG4gICAgICAgICAgZmxvYXRpbmdFbC5zdHlsZS5tYXhIZWlnaHQgPSBgJHthdmFpbGFibGVIZWlnaHR9cHhgO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkpO1xuICAgIGlmIChwcm9wcy5oaWRlV2hlbkRldGFjaGVkKSB7XG4gICAgICBtaWRkbGV3YXJlLnB1c2goaGlkZSh7XG4gICAgICAgIHBhZGRpbmc6IHByb3BzLmRldGFjaGVkUGFkZGluZ1xuICAgICAgfSkpO1xuICAgIH1cbiAgICBpZiAoYXJyb3dFbCkge1xuICAgICAgbWlkZGxld2FyZS5wdXNoKGFycm93KHtcbiAgICAgICAgZWxlbWVudDogYXJyb3dFbCxcbiAgICAgICAgcGFkZGluZzogcHJvcHMuYXJyb3dQYWRkaW5nXG4gICAgICB9KSk7XG4gICAgfVxuICAgIGNvbnN0IHBvcyA9IGF3YWl0IGNvbXB1dGVQb3NpdGlvbjIocmVmZXJlbmNlRWwsIGZsb2F0aW5nRWwsIHtcbiAgICAgIHBsYWNlbWVudDogcHJvcHMucGxhY2VtZW50LFxuICAgICAgc3RyYXRlZ3k6IFwiYWJzb2x1dGVcIixcbiAgICAgIG1pZGRsZXdhcmUsXG4gICAgICBwbGF0Zm9ybToge1xuICAgICAgICAuLi5wbGF0Zm9ybSxcbiAgICAgICAgaXNSVEw6ICgpID0+IGRpcmVjdGlvbigpID09PSBcInJ0bFwiXG4gICAgICB9XG4gICAgfSk7XG4gICAgc2V0Q3VycmVudFBsYWNlbWVudChwb3MucGxhY2VtZW50KTtcbiAgICBwcm9wcy5vbkN1cnJlbnRQbGFjZW1lbnRDaGFuZ2U/Lihwb3MucGxhY2VtZW50KTtcbiAgICBpZiAoIWZsb2F0aW5nRWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZmxvYXRpbmdFbC5zdHlsZS5zZXRQcm9wZXJ0eShcIi0ta2ItcG9wcGVyLWNvbnRlbnQtdHJhbnNmb3JtLW9yaWdpblwiLCBnZXRUcmFuc2Zvcm1PcmlnaW4ocG9zLnBsYWNlbWVudCwgZGlyZWN0aW9uKCkpKTtcbiAgICBjb25zdCB4ID0gTWF0aC5yb3VuZChwb3MueCk7XG4gICAgY29uc3QgeSA9IE1hdGgucm91bmQocG9zLnkpO1xuICAgIGxldCB2aXNpYmlsaXR5O1xuICAgIGlmIChwcm9wcy5oaWRlV2hlbkRldGFjaGVkKSB7XG4gICAgICB2aXNpYmlsaXR5ID0gcG9zLm1pZGRsZXdhcmVEYXRhLmhpZGU/LnJlZmVyZW5jZUhpZGRlbiA/IFwiaGlkZGVuXCIgOiBcInZpc2libGVcIjtcbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbihmbG9hdGluZ0VsLnN0eWxlLCB7XG4gICAgICB0b3A6IFwiMFwiLFxuICAgICAgbGVmdDogXCIwXCIsXG4gICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUzZCgke3h9cHgsICR7eX1weCwgMClgLFxuICAgICAgdmlzaWJpbGl0eVxuICAgIH0pO1xuICAgIGlmIChhcnJvd0VsICYmIHBvcy5taWRkbGV3YXJlRGF0YS5hcnJvdykge1xuICAgICAgY29uc3Qge1xuICAgICAgICB4OiBhcnJvd1gsXG4gICAgICAgIHk6IGFycm93WVxuICAgICAgfSA9IHBvcy5taWRkbGV3YXJlRGF0YS5hcnJvdztcbiAgICAgIGNvbnN0IGRpciA9IHBvcy5wbGFjZW1lbnQuc3BsaXQoXCItXCIpWzBdO1xuICAgICAgT2JqZWN0LmFzc2lnbihhcnJvd0VsLnN0eWxlLCB7XG4gICAgICAgIGxlZnQ6IGFycm93WCAhPSBudWxsID8gYCR7YXJyb3dYfXB4YCA6IFwiXCIsXG4gICAgICAgIHRvcDogYXJyb3dZICE9IG51bGwgPyBgJHthcnJvd1l9cHhgIDogXCJcIixcbiAgICAgICAgW2Rpcl06IFwiMTAwJVwiXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgY3JlYXRlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCByZWZlcmVuY2VFbCA9IGFuY2hvclJlZigpO1xuICAgIGNvbnN0IGZsb2F0aW5nRWwgPSBwb3NpdGlvbmVyUmVmKCk7XG4gICAgaWYgKCFyZWZlcmVuY2VFbCB8fCAhZmxvYXRpbmdFbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjbGVhbnVwQXV0b1VwZGF0ZSA9IGF1dG9VcGRhdGUocmVmZXJlbmNlRWwsIGZsb2F0aW5nRWwsIHVwZGF0ZVBvc2l0aW9uLCB7XG4gICAgICAvLyBKU0RPTSBkb2Vzbid0IHN1cHBvcnQgUmVzaXplT2JzZXJ2ZXJcbiAgICAgIGVsZW1lbnRSZXNpemU6IHR5cGVvZiBSZXNpemVPYnNlcnZlciA9PT0gXCJmdW5jdGlvblwiXG4gICAgfSk7XG4gICAgb25DbGVhbnVwKGNsZWFudXBBdXRvVXBkYXRlKTtcbiAgfSk7XG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgcG9zaXRpb25lciA9IHBvc2l0aW9uZXJSZWYoKTtcbiAgICBjb25zdCBjb250ZW50ID0gcHJvcHMuY29udGVudFJlZigpO1xuICAgIGlmICghcG9zaXRpb25lciB8fCAhY29udGVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG4gICAgICBwb3NpdGlvbmVyLnN0eWxlLnpJbmRleCA9IGdldENvbXB1dGVkU3R5bGUoY29udGVudCkuekluZGV4O1xuICAgIH0pO1xuICB9KTtcbiAgY29uc3QgY29udGV4dCA9IHtcbiAgICBjdXJyZW50UGxhY2VtZW50LFxuICAgIGNvbnRlbnRSZWY6ICgpID0+IHByb3BzLmNvbnRlbnRSZWYoKSxcbiAgICBzZXRQb3NpdGlvbmVyUmVmLFxuICAgIHNldEFycm93UmVmXG4gIH07XG4gIHJldHVybiBjcmVhdGVDb21wb25lbnQoUG9wcGVyQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0LFxuICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgIHJldHVybiBwcm9wcy5jaGlsZHJlbjtcbiAgICB9XG4gIH0pO1xufVxuY3JlYXRlQ29udGV4dCgpO1xuY3JlYXRlQ29udGV4dCgpO1xuY3JlYXRlQ29udGV4dCgpO1xudmFyIE1lbnVDb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuZnVuY3Rpb24gdXNlT3B0aW9uYWxNZW51Q29udGV4dCgpIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoTWVudUNvbnRleHQpO1xufVxuZnVuY3Rpb24gdXNlTWVudUNvbnRleHQoKSB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VPcHRpb25hbE1lbnVDb250ZXh0KCk7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJba29iYWx0ZV06IGB1c2VNZW51Q29udGV4dGAgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGBNZW51YCBjb21wb25lbnRcIik7XG4gIH1cbiAgcmV0dXJuIGNvbnRleHQ7XG59XG52YXIgTWVudVJvb3RDb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuZnVuY3Rpb24gdXNlTWVudVJvb3RDb250ZXh0KCkge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChNZW51Um9vdENvbnRleHQpO1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiW2tvYmFsdGVdOiBgdXNlTWVudVJvb3RDb250ZXh0YCBtdXN0IGJlIHVzZWQgd2l0aGluIGEgYE1lbnVSb290YCBjb21wb25lbnRcIik7XG4gIH1cbiAgcmV0dXJuIGNvbnRleHQ7XG59XG5mdW5jdGlvbiBnZXRQb2ludGVyR3JhY2VBcmVhKHBsYWNlbWVudCwgZXZlbnQsIGNvbnRlbnRFbCkge1xuICBjb25zdCBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KFwiLVwiKVswXTtcbiAgY29uc3QgY29udGVudFJlY3QgPSBjb250ZW50RWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IHBvbHlnb24gPSBbXTtcbiAgY29uc3QgcG9pbnRlclggPSBldmVudC5jbGllbnRYO1xuICBjb25zdCBwb2ludGVyWSA9IGV2ZW50LmNsaWVudFk7XG4gIHN3aXRjaCAoYmFzZVBsYWNlbWVudCkge1xuICAgIGNhc2UgXCJ0b3BcIjpcbiAgICAgIHBvbHlnb24ucHVzaChbcG9pbnRlclgsIHBvaW50ZXJZICsgNV0pO1xuICAgICAgcG9seWdvbi5wdXNoKFtjb250ZW50UmVjdC5sZWZ0LCBjb250ZW50UmVjdC5ib3R0b21dKTtcbiAgICAgIHBvbHlnb24ucHVzaChbY29udGVudFJlY3QubGVmdCwgY29udGVudFJlY3QudG9wXSk7XG4gICAgICBwb2x5Z29uLnB1c2goW2NvbnRlbnRSZWN0LnJpZ2h0LCBjb250ZW50UmVjdC50b3BdKTtcbiAgICAgIHBvbHlnb24ucHVzaChbY29udGVudFJlY3QucmlnaHQsIGNvbnRlbnRSZWN0LmJvdHRvbV0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInJpZ2h0XCI6XG4gICAgICBwb2x5Z29uLnB1c2goW3BvaW50ZXJYIC0gNSwgcG9pbnRlclldKTtcbiAgICAgIHBvbHlnb24ucHVzaChbY29udGVudFJlY3QubGVmdCwgY29udGVudFJlY3QudG9wXSk7XG4gICAgICBwb2x5Z29uLnB1c2goW2NvbnRlbnRSZWN0LnJpZ2h0LCBjb250ZW50UmVjdC50b3BdKTtcbiAgICAgIHBvbHlnb24ucHVzaChbY29udGVudFJlY3QucmlnaHQsIGNvbnRlbnRSZWN0LmJvdHRvbV0pO1xuICAgICAgcG9seWdvbi5wdXNoKFtjb250ZW50UmVjdC5sZWZ0LCBjb250ZW50UmVjdC5ib3R0b21dKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJib3R0b21cIjpcbiAgICAgIHBvbHlnb24ucHVzaChbcG9pbnRlclgsIHBvaW50ZXJZIC0gNV0pO1xuICAgICAgcG9seWdvbi5wdXNoKFtjb250ZW50UmVjdC5yaWdodCwgY29udGVudFJlY3QudG9wXSk7XG4gICAgICBwb2x5Z29uLnB1c2goW2NvbnRlbnRSZWN0LnJpZ2h0LCBjb250ZW50UmVjdC5ib3R0b21dKTtcbiAgICAgIHBvbHlnb24ucHVzaChbY29udGVudFJlY3QubGVmdCwgY29udGVudFJlY3QuYm90dG9tXSk7XG4gICAgICBwb2x5Z29uLnB1c2goW2NvbnRlbnRSZWN0LmxlZnQsIGNvbnRlbnRSZWN0LnRvcF0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImxlZnRcIjpcbiAgICAgIHBvbHlnb24ucHVzaChbcG9pbnRlclggKyA1LCBwb2ludGVyWV0pO1xuICAgICAgcG9seWdvbi5wdXNoKFtjb250ZW50UmVjdC5yaWdodCwgY29udGVudFJlY3QuYm90dG9tXSk7XG4gICAgICBwb2x5Z29uLnB1c2goW2NvbnRlbnRSZWN0LmxlZnQsIGNvbnRlbnRSZWN0LmJvdHRvbV0pO1xuICAgICAgcG9seWdvbi5wdXNoKFtjb250ZW50UmVjdC5sZWZ0LCBjb250ZW50UmVjdC50b3BdKTtcbiAgICAgIHBvbHlnb24ucHVzaChbY29udGVudFJlY3QucmlnaHQsIGNvbnRlbnRSZWN0LnRvcF0pO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHBvbHlnb247XG59XG5mdW5jdGlvbiBpc1BvaW50ZXJJbkdyYWNlQXJlYShldmVudCwgYXJlYSkge1xuICBpZiAoIWFyZWEpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGlzUG9pbnRJblBvbHlnb24oW2V2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFldLCBhcmVhKTtcbn1cbmZ1bmN0aW9uIE1lbnUocHJvcHMpIHtcbiAgY29uc3Qgcm9vdENvbnRleHQgPSB1c2VNZW51Um9vdENvbnRleHQoKTtcbiAgY29uc3QgcGFyZW50RG9tQ29sbGVjdGlvbkNvbnRleHQgPSB1c2VPcHRpb25hbERvbUNvbGxlY3Rpb25Db250ZXh0KCk7XG4gIGNvbnN0IHBhcmVudE1lbnVDb250ZXh0ID0gdXNlT3B0aW9uYWxNZW51Q29udGV4dCgpO1xuICBwcm9wcyA9IG1lcmdlRGVmYXVsdFByb3BzKHtcbiAgICBwbGFjZW1lbnQ6IFwiYm90dG9tLXN0YXJ0XCJcbiAgfSwgcHJvcHMpO1xuICBjb25zdCBbbG9jYWwsIG90aGVyc10gPSBzcGxpdFByb3BzKHByb3BzLCBbXCJvcGVuXCIsIFwiZGVmYXVsdE9wZW5cIiwgXCJvbk9wZW5DaGFuZ2VcIl0pO1xuICBsZXQgcG9pbnRlckdyYWNlVGltZW91dElkID0gMDtcbiAgbGV0IHBvaW50ZXJHcmFjZUludGVudCA9IG51bGw7XG4gIGxldCBwb2ludGVyRGlyID0gXCJyaWdodFwiO1xuICBjb25zdCBbdHJpZ2dlcklkLCBzZXRUcmlnZ2VySWRdID0gY3JlYXRlU2lnbmFsKCk7XG4gIGNvbnN0IFtjb250ZW50SWQsIHNldENvbnRlbnRJZF0gPSBjcmVhdGVTaWduYWwoKTtcbiAgY29uc3QgW3RyaWdnZXJSZWYsIHNldFRyaWdnZXJSZWZdID0gY3JlYXRlU2lnbmFsKCk7XG4gIGNvbnN0IFtjb250ZW50UmVmLCBzZXRDb250ZW50UmVmXSA9IGNyZWF0ZVNpZ25hbCgpO1xuICBjb25zdCBbZm9jdXNTdHJhdGVneSwgc2V0Rm9jdXNTdHJhdGVneV0gPSBjcmVhdGVTaWduYWwodHJ1ZSk7XG4gIGNvbnN0IFtjdXJyZW50UGxhY2VtZW50LCBzZXRDdXJyZW50UGxhY2VtZW50XSA9IGNyZWF0ZVNpZ25hbChvdGhlcnMucGxhY2VtZW50KTtcbiAgY29uc3QgW25lc3RlZE1lbnVzLCBzZXROZXN0ZWRNZW51c10gPSBjcmVhdGVTaWduYWwoW10pO1xuICBjb25zdCBbaXRlbXMsIHNldEl0ZW1zXSA9IGNyZWF0ZVNpZ25hbChbXSk7XG4gIGNvbnN0IHtcbiAgICBEb21Db2xsZWN0aW9uUHJvdmlkZXJcbiAgfSA9IGNyZWF0ZURvbUNvbGxlY3Rpb24oe1xuICAgIGl0ZW1zLFxuICAgIG9uSXRlbXNDaGFuZ2U6IHNldEl0ZW1zXG4gIH0pO1xuICBjb25zdCBkaXNjbG9zdXJlU3RhdGUgPSBjcmVhdGVEaXNjbG9zdXJlU3RhdGUoe1xuICAgIG9wZW46ICgpID0+IGxvY2FsLm9wZW4sXG4gICAgZGVmYXVsdE9wZW46ICgpID0+IGxvY2FsLmRlZmF1bHRPcGVuLFxuICAgIG9uT3BlbkNoYW5nZTogKGlzT3BlbikgPT4gbG9jYWwub25PcGVuQ2hhbmdlPy4oaXNPcGVuKVxuICB9KTtcbiAgY29uc3QgY29udGVudFByZXNlbmNlID0gY3JlYXRlUHJlc2VuY2UoKCkgPT4gcm9vdENvbnRleHQuZm9yY2VNb3VudCgpIHx8IGRpc2Nsb3N1cmVTdGF0ZS5pc09wZW4oKSk7XG4gIGNvbnN0IGxpc3RTdGF0ZSA9IGNyZWF0ZUxpc3RTdGF0ZSh7XG4gICAgc2VsZWN0aW9uTW9kZTogXCJub25lXCIsXG4gICAgZGF0YVNvdXJjZTogaXRlbXNcbiAgfSk7XG4gIGNvbnN0IG9wZW4gPSAoZm9jdXNTdHJhdGVneTIpID0+IHtcbiAgICBzZXRGb2N1c1N0cmF0ZWd5KGZvY3VzU3RyYXRlZ3kyKTtcbiAgICBkaXNjbG9zdXJlU3RhdGUub3BlbigpO1xuICB9O1xuICBjb25zdCBjbG9zZSA9IChyZWN1cnNpdmVseSA9IGZhbHNlKSA9PiB7XG4gICAgZGlzY2xvc3VyZVN0YXRlLmNsb3NlKCk7XG4gICAgaWYgKHJlY3Vyc2l2ZWx5ICYmIHBhcmVudE1lbnVDb250ZXh0KSB7XG4gICAgICBwYXJlbnRNZW51Q29udGV4dC5jbG9zZSh0cnVlKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHRvZ2dsZSA9IChmb2N1c1N0cmF0ZWd5MikgPT4ge1xuICAgIHNldEZvY3VzU3RyYXRlZ3koZm9jdXNTdHJhdGVneTIpO1xuICAgIGRpc2Nsb3N1cmVTdGF0ZS50b2dnbGUoKTtcbiAgfTtcbiAgY29uc3QgZm9jdXNDb250ZW50ID0gKCkgPT4ge1xuICAgIGNvbnN0IGNvbnRlbnQgPSBjb250ZW50UmVmKCk7XG4gICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgIGZvY3VzV2l0aG91dFNjcm9sbGluZyhjb250ZW50KTtcbiAgICAgIGxpc3RTdGF0ZS5zZWxlY3Rpb25NYW5hZ2VyKCkuc2V0Rm9jdXNlZCh0cnVlKTtcbiAgICAgIGxpc3RTdGF0ZS5zZWxlY3Rpb25NYW5hZ2VyKCkuc2V0Rm9jdXNlZEtleSh2b2lkIDApO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcmVnaXN0ZXJOZXN0ZWRNZW51ID0gKGVsZW1lbnQpID0+IHtcbiAgICBzZXROZXN0ZWRNZW51cygocHJldikgPT4gWy4uLnByZXYsIGVsZW1lbnRdKTtcbiAgICBjb25zdCBwYXJlbnRVbnJlZ2lzdGVyID0gcGFyZW50TWVudUNvbnRleHQ/LnJlZ2lzdGVyTmVzdGVkTWVudShlbGVtZW50KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc2V0TmVzdGVkTWVudXMoKHByZXYpID0+IHJlbW92ZUl0ZW1Gcm9tQXJyYXkocHJldiwgZWxlbWVudCkpO1xuICAgICAgcGFyZW50VW5yZWdpc3Rlcj8uKCk7XG4gICAgfTtcbiAgfTtcbiAgY29uc3QgaXNQb2ludGVyTW92aW5nVG9TdWJtZW51ID0gKGUyKSA9PiB7XG4gICAgY29uc3QgaXNNb3ZpbmdUb3dhcmRzID0gcG9pbnRlckRpciA9PT0gcG9pbnRlckdyYWNlSW50ZW50Py5zaWRlO1xuICAgIHJldHVybiBpc01vdmluZ1Rvd2FyZHMgJiYgaXNQb2ludGVySW5HcmFjZUFyZWEoZTIsIHBvaW50ZXJHcmFjZUludGVudD8uYXJlYSk7XG4gIH07XG4gIGNvbnN0IG9uSXRlbUVudGVyID0gKGUyKSA9PiB7XG4gICAgaWYgKGlzUG9pbnRlck1vdmluZ1RvU3VibWVudShlMikpIHtcbiAgICAgIGUyLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBvbkl0ZW1MZWF2ZSA9IChlMikgPT4ge1xuICAgIGlmIChpc1BvaW50ZXJNb3ZpbmdUb1N1Ym1lbnUoZTIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvY3VzQ29udGVudCgpO1xuICB9O1xuICBjb25zdCBvblRyaWdnZXJMZWF2ZSA9IChlMikgPT4ge1xuICAgIGlmIChpc1BvaW50ZXJNb3ZpbmdUb1N1Ym1lbnUoZTIpKSB7XG4gICAgICBlMi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfTtcbiAgY3JlYXRlSGlkZU91dHNpZGUoe1xuICAgIGlzRGlzYWJsZWQ6ICgpID0+IHtcbiAgICAgIHJldHVybiAhKHBhcmVudE1lbnVDb250ZXh0ID09IG51bGwgJiYgZGlzY2xvc3VyZVN0YXRlLmlzT3BlbigpICYmIHJvb3RDb250ZXh0LmlzTW9kYWwoKSk7XG4gICAgfSxcbiAgICB0YXJnZXRzOiAoKSA9PiBbY29udGVudFJlZigpLCAuLi5uZXN0ZWRNZW51cygpXS5maWx0ZXIoQm9vbGVhbilcbiAgfSk7XG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgY29udGVudEVsID0gY29udGVudFJlZigpO1xuICAgIGlmICghY29udGVudEVsIHx8ICFwYXJlbnRNZW51Q29udGV4dCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwYXJlbnRVbnJlZ2lzdGVyID0gcGFyZW50TWVudUNvbnRleHQucmVnaXN0ZXJOZXN0ZWRNZW51KGNvbnRlbnRFbCk7XG4gICAgb25DbGVhbnVwKCgpID0+IHtcbiAgICAgIHBhcmVudFVucmVnaXN0ZXIoKTtcbiAgICB9KTtcbiAgfSk7XG4gIGNvbnN0IGRhdGFzZXQgPSBjcmVhdGVNZW1vKCgpID0+ICh7XG4gICAgXCJkYXRhLWV4cGFuZGVkXCI6IGRpc2Nsb3N1cmVTdGF0ZS5pc09wZW4oKSA/IFwiXCIgOiB2b2lkIDAsXG4gICAgXCJkYXRhLWNsb3NlZFwiOiAhZGlzY2xvc3VyZVN0YXRlLmlzT3BlbigpID8gXCJcIiA6IHZvaWQgMFxuICB9KSk7XG4gIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgZGF0YXNldCxcbiAgICBpc09wZW46IGRpc2Nsb3N1cmVTdGF0ZS5pc09wZW4sXG4gICAgY29udGVudFByZXNlbmNlLFxuICAgIGN1cnJlbnRQbGFjZW1lbnQsXG4gICAgcG9pbnRlckdyYWNlVGltZW91dElkOiAoKSA9PiBwb2ludGVyR3JhY2VUaW1lb3V0SWQsXG4gICAgYXV0b0ZvY3VzOiBmb2N1c1N0cmF0ZWd5LFxuICAgIGxpc3RTdGF0ZTogKCkgPT4gbGlzdFN0YXRlLFxuICAgIHBhcmVudE1lbnVDb250ZXh0OiAoKSA9PiBwYXJlbnRNZW51Q29udGV4dCxcbiAgICB0cmlnZ2VyUmVmLFxuICAgIGNvbnRlbnRSZWYsXG4gICAgdHJpZ2dlcklkLFxuICAgIGNvbnRlbnRJZCxcbiAgICBzZXRUcmlnZ2VyUmVmLFxuICAgIHNldENvbnRlbnRSZWYsXG4gICAgb3BlbixcbiAgICBjbG9zZSxcbiAgICB0b2dnbGUsXG4gICAgZm9jdXNDb250ZW50LFxuICAgIG9uSXRlbUVudGVyLFxuICAgIG9uSXRlbUxlYXZlLFxuICAgIG9uVHJpZ2dlckxlYXZlLFxuICAgIHNldFBvaW50ZXJEaXI6IChkaXIpID0+IHBvaW50ZXJEaXIgPSBkaXIsXG4gICAgc2V0UG9pbnRlckdyYWNlVGltZW91dElkOiAoaWQpID0+IHBvaW50ZXJHcmFjZVRpbWVvdXRJZCA9IGlkLFxuICAgIHNldFBvaW50ZXJHcmFjZUludGVudDogKGludGVudCkgPT4gcG9pbnRlckdyYWNlSW50ZW50ID0gaW50ZW50LFxuICAgIHJlZ2lzdGVyTmVzdGVkTWVudSxcbiAgICByZWdpc3Rlckl0ZW1Ub1BhcmVudERvbUNvbGxlY3Rpb246IHBhcmVudERvbUNvbGxlY3Rpb25Db250ZXh0Py5yZWdpc3Rlckl0ZW0sXG4gICAgcmVnaXN0ZXJUcmlnZ2VySWQ6IGNyZWF0ZVJlZ2lzdGVySWQoc2V0VHJpZ2dlcklkKSxcbiAgICByZWdpc3RlckNvbnRlbnRJZDogY3JlYXRlUmVnaXN0ZXJJZChzZXRDb250ZW50SWQpXG4gIH07XG4gIHJldHVybiBjcmVhdGVDb21wb25lbnQoRG9tQ29sbGVjdGlvblByb3ZpZGVyLCB7XG4gICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChNZW51Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogY29udGV4dCxcbiAgICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVDb21wb25lbnQoUG9wcGVyUm9vdCwgbWVyZ2VQcm9wcyh7XG4gICAgICAgICAgICBhbmNob3JSZWY6IHRyaWdnZXJSZWYsXG4gICAgICAgICAgICBjb250ZW50UmVmLFxuICAgICAgICAgICAgb25DdXJyZW50UGxhY2VtZW50Q2hhbmdlOiBzZXRDdXJyZW50UGxhY2VtZW50XG4gICAgICAgICAgfSwgb3RoZXJzKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59XG52YXIgTWVudUl0ZW1Db250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuZnVuY3Rpb24gdXNlTWVudUl0ZW1Db250ZXh0KCkge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChNZW51SXRlbUNvbnRleHQpO1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiW2tvYmFsdGVdOiBgdXNlTWVudUl0ZW1Db250ZXh0YCBtdXN0IGJlIHVzZWQgd2l0aGluIGEgYE1lbnUuSXRlbWAgY29tcG9uZW50XCIpO1xuICB9XG4gIHJldHVybiBjb250ZXh0O1xufVxuZnVuY3Rpb24gTWVudUl0ZW1CYXNlKHByb3BzKSB7XG4gIGxldCByZWY7XG4gIGNvbnN0IHJvb3RDb250ZXh0ID0gdXNlTWVudVJvb3RDb250ZXh0KCk7XG4gIGNvbnN0IG1lbnVDb250ZXh0ID0gdXNlTWVudUNvbnRleHQoKTtcbiAgcHJvcHMgPSBtZXJnZURlZmF1bHRQcm9wcyh7XG4gICAgaWQ6IHJvb3RDb250ZXh0LmdlbmVyYXRlSWQoYGl0ZW0tJHtjcmVhdGVVbmlxdWVJZCgpfWApXG4gIH0sIHByb3BzKTtcbiAgY29uc3QgW2xvY2FsLCBvdGhlcnNdID0gc3BsaXRQcm9wcyhwcm9wcywgW1wicmVmXCIsIFwidGV4dFZhbHVlXCIsIFwiZGlzYWJsZWRcIiwgXCJjbG9zZU9uU2VsZWN0XCIsIFwiY2hlY2tlZFwiLCBcImluZGV0ZXJtaW5hdGVcIiwgXCJvblNlbGVjdFwiLCBcIm9uUG9pbnRlck1vdmVcIiwgXCJvblBvaW50ZXJMZWF2ZVwiLCBcIm9uUG9pbnRlckRvd25cIiwgXCJvblBvaW50ZXJVcFwiLCBcIm9uQ2xpY2tcIiwgXCJvbktleURvd25cIiwgXCJvbk1vdXNlRG93blwiLCBcIm9uRm9jdXNcIl0pO1xuICBjb25zdCBbbGFiZWxJZCwgc2V0TGFiZWxJZF0gPSBjcmVhdGVTaWduYWwoKTtcbiAgY29uc3QgW2Rlc2NyaXB0aW9uSWQsIHNldERlc2NyaXB0aW9uSWRdID0gY3JlYXRlU2lnbmFsKCk7XG4gIGNvbnN0IFtsYWJlbFJlZiwgc2V0TGFiZWxSZWZdID0gY3JlYXRlU2lnbmFsKCk7XG4gIGNvbnN0IHNlbGVjdGlvbk1hbmFnZXIgPSAoKSA9PiBtZW51Q29udGV4dC5saXN0U3RhdGUoKS5zZWxlY3Rpb25NYW5hZ2VyKCk7XG4gIGNvbnN0IGtleSA9ICgpID0+IG90aGVycy5pZDtcbiAgY29uc3QgaXNIaWdobGlnaHRlZCA9ICgpID0+IHNlbGVjdGlvbk1hbmFnZXIoKS5mb2N1c2VkS2V5KCkgPT09IGtleSgpO1xuICBjb25zdCBvblNlbGVjdCA9ICgpID0+IHtcbiAgICBsb2NhbC5vblNlbGVjdD8uKCk7XG4gICAgaWYgKGxvY2FsLmNsb3NlT25TZWxlY3QpIHtcbiAgICAgIG1lbnVDb250ZXh0LmNsb3NlKHRydWUpO1xuICAgIH1cbiAgfTtcbiAgY3JlYXRlRG9tQ29sbGVjdGlvbkl0ZW0oe1xuICAgIGdldEl0ZW06ICgpID0+ICh7XG4gICAgICByZWY6ICgpID0+IHJlZixcbiAgICAgIHR5cGU6IFwiaXRlbVwiLFxuICAgICAga2V5OiBrZXkoKSxcbiAgICAgIHRleHRWYWx1ZTogbG9jYWwudGV4dFZhbHVlID8/IGxhYmVsUmVmKCk/LnRleHRDb250ZW50ID8/IHJlZj8udGV4dENvbnRlbnQgPz8gXCJcIixcbiAgICAgIGRpc2FibGVkOiBsb2NhbC5kaXNhYmxlZCA/PyBmYWxzZVxuICAgIH0pXG4gIH0pO1xuICBjb25zdCBzZWxlY3RhYmxlSXRlbSA9IGNyZWF0ZVNlbGVjdGFibGVJdGVtKHtcbiAgICBrZXksXG4gICAgc2VsZWN0aW9uTWFuYWdlcixcbiAgICBzaG91bGRTZWxlY3RPblByZXNzVXA6IHRydWUsXG4gICAgYWxsb3dzRGlmZmVyZW50UHJlc3NPcmlnaW46IHRydWUsXG4gICAgZGlzYWJsZWQ6ICgpID0+IGxvY2FsLmRpc2FibGVkXG4gIH0sICgpID0+IHJlZik7XG4gIGNvbnN0IG9uUG9pbnRlck1vdmUgPSAoZTIpID0+IHtcbiAgICBjYWxsSGFuZGxlcihlMiwgbG9jYWwub25Qb2ludGVyTW92ZSk7XG4gICAgaWYgKGUyLnBvaW50ZXJUeXBlICE9PSBcIm1vdXNlXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGxvY2FsLmRpc2FibGVkKSB7XG4gICAgICBtZW51Q29udGV4dC5vbkl0ZW1MZWF2ZShlMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1lbnVDb250ZXh0Lm9uSXRlbUVudGVyKGUyKTtcbiAgICAgIGlmICghZTIuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICBmb2N1c1dpdGhvdXRTY3JvbGxpbmcoZTIuY3VycmVudFRhcmdldCk7XG4gICAgICAgIG1lbnVDb250ZXh0Lmxpc3RTdGF0ZSgpLnNlbGVjdGlvbk1hbmFnZXIoKS5zZXRGb2N1c2VkKHRydWUpO1xuICAgICAgICBtZW51Q29udGV4dC5saXN0U3RhdGUoKS5zZWxlY3Rpb25NYW5hZ2VyKCkuc2V0Rm9jdXNlZEtleShrZXkoKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBvblBvaW50ZXJMZWF2ZSA9IChlMikgPT4ge1xuICAgIGNhbGxIYW5kbGVyKGUyLCBsb2NhbC5vblBvaW50ZXJMZWF2ZSk7XG4gICAgaWYgKGUyLnBvaW50ZXJUeXBlICE9PSBcIm1vdXNlXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbWVudUNvbnRleHQub25JdGVtTGVhdmUoZTIpO1xuICB9O1xuICBjb25zdCBvblBvaW50ZXJVcCA9IChlMikgPT4ge1xuICAgIGNhbGxIYW5kbGVyKGUyLCBsb2NhbC5vblBvaW50ZXJVcCk7XG4gICAgaWYgKCFsb2NhbC5kaXNhYmxlZCAmJiBlMi5idXR0b24gPT09IDApIHtcbiAgICAgIG9uU2VsZWN0KCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBvbktleURvd24gPSAoZTIpID0+IHtcbiAgICBjYWxsSGFuZGxlcihlMiwgbG9jYWwub25LZXlEb3duKTtcbiAgICBpZiAoZTIucmVwZWF0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChsb2NhbC5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2l0Y2ggKGUyLmtleSkge1xuICAgICAgY2FzZSBcIkVudGVyXCI6XG4gICAgICBjYXNlIFwiIFwiOlxuICAgICAgICBvblNlbGVjdCgpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH07XG4gIGNvbnN0IGFyaWFDaGVja2VkID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgaWYgKGxvY2FsLmluZGV0ZXJtaW5hdGUpIHtcbiAgICAgIHJldHVybiBcIm1peGVkXCI7XG4gICAgfVxuICAgIGlmIChsb2NhbC5jaGVja2VkID09IG51bGwpIHtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIHJldHVybiBsb2NhbC5jaGVja2VkO1xuICB9KTtcbiAgY29uc3QgZGF0YXNldCA9IGNyZWF0ZU1lbW8oKCkgPT4gKHtcbiAgICBcImRhdGEtaW5kZXRlcm1pbmF0ZVwiOiBsb2NhbC5pbmRldGVybWluYXRlID8gXCJcIiA6IHZvaWQgMCxcbiAgICBcImRhdGEtY2hlY2tlZFwiOiBsb2NhbC5jaGVja2VkICYmICFsb2NhbC5pbmRldGVybWluYXRlID8gXCJcIiA6IHZvaWQgMCxcbiAgICBcImRhdGEtZGlzYWJsZWRcIjogbG9jYWwuZGlzYWJsZWQgPyBcIlwiIDogdm9pZCAwLFxuICAgIFwiZGF0YS1oaWdobGlnaHRlZFwiOiBpc0hpZ2hsaWdodGVkKCkgPyBcIlwiIDogdm9pZCAwXG4gIH0pKTtcbiAgY29uc3QgY29udGV4dCA9IHtcbiAgICBpc0NoZWNrZWQ6ICgpID0+IGxvY2FsLmNoZWNrZWQsXG4gICAgZGF0YXNldCxcbiAgICBzZXRMYWJlbFJlZixcbiAgICBnZW5lcmF0ZUlkOiBjcmVhdGVHZW5lcmF0ZUlkKCgpID0+IG90aGVycy5pZCksXG4gICAgcmVnaXN0ZXJMYWJlbDogY3JlYXRlUmVnaXN0ZXJJZChzZXRMYWJlbElkKSxcbiAgICByZWdpc3RlckRlc2NyaXB0aW9uOiBjcmVhdGVSZWdpc3RlcklkKHNldERlc2NyaXB0aW9uSWQpXG4gIH07XG4gIHJldHVybiBjcmVhdGVDb21wb25lbnQoTWVudUl0ZW1Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHQsXG4gICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChQb2x5bW9ycGhpYywgbWVyZ2VQcm9wcyh7XG4gICAgICAgIGFzOiBcImRpdlwiLFxuICAgICAgICByZWYociQpIHtcbiAgICAgICAgICBjb25zdCBfcmVmJCA9IG1lcmdlUmVmcygoZWwpID0+IHJlZiA9IGVsLCBsb2NhbC5yZWYpO1xuICAgICAgICAgIHR5cGVvZiBfcmVmJCA9PT0gXCJmdW5jdGlvblwiICYmIF9yZWYkKHIkKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IHRhYkluZGV4KCkge1xuICAgICAgICAgIHJldHVybiBzZWxlY3RhYmxlSXRlbS50YWJJbmRleCgpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgW1wiYXJpYS1jaGVja2VkXCJdKCkge1xuICAgICAgICAgIHJldHVybiBhcmlhQ2hlY2tlZCgpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgW1wiYXJpYS1kaXNhYmxlZFwiXSgpIHtcbiAgICAgICAgICByZXR1cm4gbG9jYWwuZGlzYWJsZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBbXCJhcmlhLWxhYmVsbGVkYnlcIl0oKSB7XG4gICAgICAgICAgcmV0dXJuIGxhYmVsSWQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IFtcImFyaWEtZGVzY3JpYmVkYnlcIl0oKSB7XG4gICAgICAgICAgcmV0dXJuIGRlc2NyaXB0aW9uSWQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IFtcImRhdGEta2V5XCJdKCkge1xuICAgICAgICAgIHJldHVybiBzZWxlY3RhYmxlSXRlbS5kYXRhS2V5KCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBvblBvaW50ZXJEb3duKCkge1xuICAgICAgICAgIHJldHVybiBjb21wb3NlRXZlbnRIYW5kbGVycyhbbG9jYWwub25Qb2ludGVyRG93biwgc2VsZWN0YWJsZUl0ZW0ub25Qb2ludGVyRG93bl0pO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgb25Qb2ludGVyVXAoKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbXBvc2VFdmVudEhhbmRsZXJzKFtvblBvaW50ZXJVcCwgc2VsZWN0YWJsZUl0ZW0ub25Qb2ludGVyVXBdKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IG9uQ2xpY2soKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbXBvc2VFdmVudEhhbmRsZXJzKFtsb2NhbC5vbkNsaWNrLCBzZWxlY3RhYmxlSXRlbS5vbkNsaWNrXSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBvbktleURvd24oKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbXBvc2VFdmVudEhhbmRsZXJzKFtvbktleURvd24sIHNlbGVjdGFibGVJdGVtLm9uS2V5RG93bl0pO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgb25Nb3VzZURvd24oKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbXBvc2VFdmVudEhhbmRsZXJzKFtsb2NhbC5vbk1vdXNlRG93biwgc2VsZWN0YWJsZUl0ZW0ub25Nb3VzZURvd25dKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IG9uRm9jdXMoKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbXBvc2VFdmVudEhhbmRsZXJzKFtsb2NhbC5vbkZvY3VzLCBzZWxlY3RhYmxlSXRlbS5vbkZvY3VzXSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uUG9pbnRlck1vdmUsXG4gICAgICAgIG9uUG9pbnRlckxlYXZlXG4gICAgICB9LCBkYXRhc2V0LCBvdGhlcnMpKTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gTWVudUNoZWNrYm94SXRlbShwcm9wcykge1xuICBwcm9wcyA9IG1lcmdlRGVmYXVsdFByb3BzKHtcbiAgICBjbG9zZU9uU2VsZWN0OiBmYWxzZVxuICB9LCBwcm9wcyk7XG4gIGNvbnN0IFtsb2NhbCwgb3RoZXJzXSA9IHNwbGl0UHJvcHMocHJvcHMsIFtcImNoZWNrZWRcIiwgXCJkZWZhdWx0Q2hlY2tlZFwiLCBcIm9uQ2hhbmdlXCIsIFwib25TZWxlY3RcIl0pO1xuICBjb25zdCBzdGF0ZTIgPSBjcmVhdGVUb2dnbGVTdGF0ZSh7XG4gICAgaXNTZWxlY3RlZDogKCkgPT4gbG9jYWwuY2hlY2tlZCxcbiAgICBkZWZhdWx0SXNTZWxlY3RlZDogKCkgPT4gbG9jYWwuZGVmYXVsdENoZWNrZWQsXG4gICAgb25TZWxlY3RlZENoYW5nZTogKGNoZWNrZWQpID0+IGxvY2FsLm9uQ2hhbmdlPy4oY2hlY2tlZCksXG4gICAgaXNEaXNhYmxlZDogKCkgPT4gb3RoZXJzLmRpc2FibGVkXG4gIH0pO1xuICBjb25zdCBvblNlbGVjdCA9ICgpID0+IHtcbiAgICBsb2NhbC5vblNlbGVjdD8uKCk7XG4gICAgc3RhdGUyLnRvZ2dsZSgpO1xuICB9O1xuICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KE1lbnVJdGVtQmFzZSwgbWVyZ2VQcm9wcyh7XG4gICAgcm9sZTogXCJtZW51aXRlbWNoZWNrYm94XCIsXG4gICAgZ2V0IGNoZWNrZWQoKSB7XG4gICAgICByZXR1cm4gc3RhdGUyLmlzU2VsZWN0ZWQoKTtcbiAgICB9LFxuICAgIG9uU2VsZWN0XG4gIH0sIG90aGVycykpO1xufVxuZnVuY3Rpb24gTWVudUNvbnRlbnRCYXNlKHByb3BzKSB7XG4gIGxldCByZWY7XG4gIGNvbnN0IHJvb3RDb250ZXh0ID0gdXNlTWVudVJvb3RDb250ZXh0KCk7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VNZW51Q29udGV4dCgpO1xuICBwcm9wcyA9IG1lcmdlRGVmYXVsdFByb3BzKHtcbiAgICBpZDogcm9vdENvbnRleHQuZ2VuZXJhdGVJZChgY29udGVudC0ke2NyZWF0ZVVuaXF1ZUlkKCl9YClcbiAgfSwgcHJvcHMpO1xuICBjb25zdCBbbG9jYWwsIG90aGVyc10gPSBzcGxpdFByb3BzKHByb3BzLCBbXCJyZWZcIiwgXCJpZFwiLCBcInN0eWxlXCIsIFwib25PcGVuQXV0b0ZvY3VzXCIsIFwib25DbG9zZUF1dG9Gb2N1c1wiLCBcIm9uRXNjYXBlS2V5RG93blwiLCBcIm9uRm9jdXNPdXRzaWRlXCIsIFwib25Qb2ludGVyRW50ZXJcIiwgXCJvblBvaW50ZXJNb3ZlXCIsIFwib25LZXlEb3duXCIsIFwib25Nb3VzZURvd25cIiwgXCJvbkZvY3VzSW5cIiwgXCJvbkZvY3VzT3V0XCJdKTtcbiAgbGV0IGxhc3RQb2ludGVyWCA9IDA7XG4gIGNvbnN0IGlzUm9vdE1vZGFsQ29udGVudCA9ICgpID0+IHtcbiAgICByZXR1cm4gY29udGV4dC5wYXJlbnRNZW51Q29udGV4dCgpID09IG51bGwgJiYgcm9vdENvbnRleHQuaXNNb2RhbCgpO1xuICB9O1xuICBjb25zdCBzZWxlY3RhYmxlTGlzdCA9IGNyZWF0ZVNlbGVjdGFibGVMaXN0KHtcbiAgICBzZWxlY3Rpb25NYW5hZ2VyOiBjb250ZXh0Lmxpc3RTdGF0ZSgpLnNlbGVjdGlvbk1hbmFnZXIsXG4gICAgY29sbGVjdGlvbjogY29udGV4dC5saXN0U3RhdGUoKS5jb2xsZWN0aW9uLFxuICAgIGF1dG9Gb2N1czogY29udGV4dC5hdXRvRm9jdXMsXG4gICAgZGVmZXJBdXRvRm9jdXM6IHRydWUsXG4gICAgLy8gZW5zdXJlIGFsbCBtZW51IGl0ZW1zIGFyZSBtb3VudGVkIGFuZCBjb2xsZWN0aW9uIGlzIG5vdCBlbXB0eSBiZWZvcmUgdHJ5aW5nIHRvIGF1dG9mb2N1cy5cbiAgICBzaG91bGRGb2N1c1dyYXA6IHRydWUsXG4gICAgZGlzYWxsb3dUeXBlQWhlYWQ6ICgpID0+ICFjb250ZXh0Lmxpc3RTdGF0ZSgpLnNlbGVjdGlvbk1hbmFnZXIoKS5pc0ZvY3VzZWQoKVxuICB9LCAoKSA9PiByZWYpO1xuICBjcmVhdGVGb2N1c1Njb3BlKHtcbiAgICB0cmFwRm9jdXM6ICgpID0+IGlzUm9vdE1vZGFsQ29udGVudCgpICYmIGNvbnRleHQuaXNPcGVuKCksXG4gICAgb25Nb3VudEF1dG9Gb2N1czogbG9jYWwub25PcGVuQXV0b0ZvY3VzLFxuICAgIG9uVW5tb3VudEF1dG9Gb2N1czogbG9jYWwub25DbG9zZUF1dG9Gb2N1c1xuICB9LCAoKSA9PiByZWYpO1xuICBjb25zdCBvbktleURvd24gPSAoZTIpID0+IHtcbiAgICBpZiAoIWNvbnRhaW5zKGUyLmN1cnJlbnRUYXJnZXQsIGUyLnRhcmdldCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGUyLmtleSA9PT0gXCJUYWJcIiAmJiBjb250ZXh0LmlzT3BlbigpKSB7XG4gICAgICBlMi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgb25Fc2NhcGVLZXlEb3duID0gKGUyKSA9PiB7XG4gICAgbG9jYWwub25Fc2NhcGVLZXlEb3duPy4oZTIpO1xuICAgIGNvbnRleHQuY2xvc2UodHJ1ZSk7XG4gIH07XG4gIGNvbnN0IG9uRm9jdXNPdXRzaWRlID0gKGUyKSA9PiB7XG4gICAgbG9jYWwub25Gb2N1c091dHNpZGU/LihlMik7XG4gICAgaWYgKHJvb3RDb250ZXh0LmlzTW9kYWwoKSkge1xuICAgICAgZTIucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG9uUG9pbnRlckVudGVyID0gKGUyKSA9PiB7XG4gICAgY2FsbEhhbmRsZXIoZTIsIGxvY2FsLm9uUG9pbnRlckVudGVyKTtcbiAgICBpZiAoIWNvbnRleHQuaXNPcGVuKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29udGV4dC5wYXJlbnRNZW51Q29udGV4dCgpPy5saXN0U3RhdGUoKS5zZWxlY3Rpb25NYW5hZ2VyKCkuc2V0Rm9jdXNlZChmYWxzZSk7XG4gICAgY29udGV4dC5wYXJlbnRNZW51Q29udGV4dCgpPy5saXN0U3RhdGUoKS5zZWxlY3Rpb25NYW5hZ2VyKCkuc2V0Rm9jdXNlZEtleSh2b2lkIDApO1xuICB9O1xuICBjb25zdCBvblBvaW50ZXJNb3ZlID0gKGUyKSA9PiB7XG4gICAgY2FsbEhhbmRsZXIoZTIsIGxvY2FsLm9uUG9pbnRlck1vdmUpO1xuICAgIGlmIChlMi5wb2ludGVyVHlwZSAhPT0gXCJtb3VzZVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldCA9IGUyLnRhcmdldDtcbiAgICBjb25zdCBwb2ludGVyWEhhc0NoYW5nZWQgPSBsYXN0UG9pbnRlclggIT09IGUyLmNsaWVudFg7XG4gICAgaWYgKGNvbnRhaW5zKGUyLmN1cnJlbnRUYXJnZXQsIHRhcmdldCkgJiYgcG9pbnRlclhIYXNDaGFuZ2VkKSB7XG4gICAgICBjb250ZXh0LnNldFBvaW50ZXJEaXIoZTIuY2xpZW50WCA+IGxhc3RQb2ludGVyWCA/IFwicmlnaHRcIiA6IFwibGVmdFwiKTtcbiAgICAgIGxhc3RQb2ludGVyWCA9IGUyLmNsaWVudFg7XG4gICAgfVxuICB9O1xuICBjcmVhdGVFZmZlY3QoKCkgPT4gb25DbGVhbnVwKGNvbnRleHQucmVnaXN0ZXJDb250ZW50SWQobG9jYWwuaWQpKSk7XG4gIHJldHVybiBjcmVhdGVDb21wb25lbnQoU2hvdywge1xuICAgIGdldCB3aGVuKCkge1xuICAgICAgcmV0dXJuIGNvbnRleHQuY29udGVudFByZXNlbmNlLmlzUHJlc2VudCgpO1xuICAgIH0sXG4gICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChQb3BwZXJQb3NpdGlvbmVyLCB7XG4gICAgICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KERpc21pc3NhYmxlTGF5ZXIsIG1lcmdlUHJvcHMoe1xuICAgICAgICAgICAgcmVmKHIkKSB7XG4gICAgICAgICAgICAgIGNvbnN0IF9yZWYkID0gbWVyZ2VSZWZzKChlbCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuc2V0Q29udGVudFJlZihlbCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5jb250ZW50UHJlc2VuY2Uuc2V0UmVmKGVsKTtcbiAgICAgICAgICAgICAgICByZWYgPSBlbDtcbiAgICAgICAgICAgICAgfSwgbG9jYWwucmVmKTtcbiAgICAgICAgICAgICAgdHlwZW9mIF9yZWYkID09PSBcImZ1bmN0aW9uXCIgJiYgX3JlZiQociQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJvbGU6IFwibWVudVwiLFxuICAgICAgICAgICAgZ2V0IGlkKCkge1xuICAgICAgICAgICAgICByZXR1cm4gbG9jYWwuaWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IHRhYkluZGV4KCkge1xuICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0YWJsZUxpc3QudGFiSW5kZXgoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgZGlzYWJsZU91dHNpZGVQb2ludGVyRXZlbnRzKCkge1xuICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlTWVtbygoKSA9PiAhIWlzUm9vdE1vZGFsQ29udGVudCgpKSgpICYmIGNvbnRleHQuaXNPcGVuKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IGV4Y2x1ZGVkRWxlbWVudHMoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBbY29udGV4dC50cmlnZ2VyUmVmXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBieXBhc3NUb3BNb3N0TGF5ZXJDaGVjazogdHJ1ZSxcbiAgICAgICAgICAgIGdldCBzdHlsZSgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBcIi0ta2ItbWVudS1jb250ZW50LXRyYW5zZm9ybS1vcmlnaW5cIjogXCJ2YXIoLS1rYi1wb3BwZXItY29udGVudC10cmFuc2Zvcm0tb3JpZ2luKVwiLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgICAgICAgICAgLi4ubG9jYWwuc3R5bGVcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgW1wiYXJpYS1sYWJlbGxlZGJ5XCJdKCkge1xuICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC50cmlnZ2VySWQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkVzY2FwZUtleURvd24sXG4gICAgICAgICAgICBvbkZvY3VzT3V0c2lkZSxcbiAgICAgICAgICAgIGdldCBvbkRpc21pc3MoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmNsb3NlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldCBvbktleURvd24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjb21wb3NlRXZlbnRIYW5kbGVycyhbbG9jYWwub25LZXlEb3duLCBzZWxlY3RhYmxlTGlzdC5vbktleURvd24sIG9uS2V5RG93bl0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldCBvbk1vdXNlRG93bigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNvbXBvc2VFdmVudEhhbmRsZXJzKFtsb2NhbC5vbk1vdXNlRG93biwgc2VsZWN0YWJsZUxpc3Qub25Nb3VzZURvd25dKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgb25Gb2N1c0luKCkge1xuICAgICAgICAgICAgICByZXR1cm4gY29tcG9zZUV2ZW50SGFuZGxlcnMoW2xvY2FsLm9uRm9jdXNJbiwgc2VsZWN0YWJsZUxpc3Qub25Gb2N1c0luXSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IG9uRm9jdXNPdXQoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjb21wb3NlRXZlbnRIYW5kbGVycyhbbG9jYWwub25Gb2N1c091dCwgc2VsZWN0YWJsZUxpc3Qub25Gb2N1c091dF0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uUG9pbnRlckVudGVyLFxuICAgICAgICAgICAgb25Qb2ludGVyTW92ZVxuICAgICAgICAgIH0sICgpID0+IGNvbnRleHQuZGF0YXNldCgpLCBvdGhlcnMpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIE1lbnVDb250ZW50KHByb3BzKSB7XG4gIGxldCByZWY7XG4gIGNvbnN0IHJvb3RDb250ZXh0ID0gdXNlTWVudVJvb3RDb250ZXh0KCk7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VNZW51Q29udGV4dCgpO1xuICBjb25zdCBbbG9jYWwsIG90aGVyc10gPSBzcGxpdFByb3BzKHByb3BzLCBbXCJyZWZcIl0pO1xuICBjcmVhdGVQcmV2ZW50U2Nyb2xsKHtcbiAgICBvd25lclJlZjogKCkgPT4gcmVmLFxuICAgIGlzRGlzYWJsZWQ6ICgpID0+ICEoY29udGV4dC5pc09wZW4oKSAmJiAocm9vdENvbnRleHQuaXNNb2RhbCgpIHx8IHJvb3RDb250ZXh0LnByZXZlbnRTY3JvbGwoKSkpXG4gIH0pO1xuICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KE1lbnVDb250ZW50QmFzZSwgbWVyZ2VQcm9wcyh7XG4gICAgcmVmKHIkKSB7XG4gICAgICBjb25zdCBfcmVmJCA9IG1lcmdlUmVmcygoZWwpID0+IHJlZiA9IGVsLCBsb2NhbC5yZWYpO1xuICAgICAgdHlwZW9mIF9yZWYkID09PSBcImZ1bmN0aW9uXCIgJiYgX3JlZiQociQpO1xuICAgIH1cbiAgfSwgb3RoZXJzKSk7XG59XG52YXIgTWVudUdyb3VwQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbmZ1bmN0aW9uIHVzZU1lbnVHcm91cENvbnRleHQoKSB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KE1lbnVHcm91cENvbnRleHQpO1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiW2tvYmFsdGVdOiBgdXNlTWVudUdyb3VwQ29udGV4dGAgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGBNZW51Lkdyb3VwYCBjb21wb25lbnRcIik7XG4gIH1cbiAgcmV0dXJuIGNvbnRleHQ7XG59XG5mdW5jdGlvbiBNZW51R3JvdXAocHJvcHMpIHtcbiAgY29uc3Qgcm9vdENvbnRleHQgPSB1c2VNZW51Um9vdENvbnRleHQoKTtcbiAgcHJvcHMgPSBtZXJnZURlZmF1bHRQcm9wcyh7XG4gICAgaWQ6IHJvb3RDb250ZXh0LmdlbmVyYXRlSWQoYGdyb3VwLSR7Y3JlYXRlVW5pcXVlSWQoKX1gKVxuICB9LCBwcm9wcyk7XG4gIGNvbnN0IFtsYWJlbElkLCBzZXRMYWJlbElkXSA9IGNyZWF0ZVNpZ25hbCgpO1xuICBjb25zdCBjb250ZXh0ID0ge1xuICAgIGdlbmVyYXRlSWQ6IGNyZWF0ZUdlbmVyYXRlSWQoKCkgPT4gcHJvcHMuaWQpLFxuICAgIHJlZ2lzdGVyTGFiZWxJZDogY3JlYXRlUmVnaXN0ZXJJZChzZXRMYWJlbElkKVxuICB9O1xuICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KE1lbnVHcm91cENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dCxcbiAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KFBvbHltb3JwaGljLCBtZXJnZVByb3BzKHtcbiAgICAgICAgYXM6IFwiZGl2XCIsXG4gICAgICAgIHJvbGU6IFwiZ3JvdXBcIixcbiAgICAgICAgZ2V0IFtcImFyaWEtbGFiZWxsZWRieVwiXSgpIHtcbiAgICAgICAgICByZXR1cm4gbGFiZWxJZCgpO1xuICAgICAgICB9XG4gICAgICB9LCBwcm9wcykpO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBNZW51R3JvdXBMYWJlbChwcm9wcykge1xuICBjb25zdCBjb250ZXh0ID0gdXNlTWVudUdyb3VwQ29udGV4dCgpO1xuICBwcm9wcyA9IG1lcmdlRGVmYXVsdFByb3BzKHtcbiAgICBpZDogY29udGV4dC5nZW5lcmF0ZUlkKFwibGFiZWxcIilcbiAgfSwgcHJvcHMpO1xuICBjb25zdCBbbG9jYWwsIG90aGVyc10gPSBzcGxpdFByb3BzKHByb3BzLCBbXCJpZFwiXSk7XG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiBvbkNsZWFudXAoY29udGV4dC5yZWdpc3RlckxhYmVsSWQobG9jYWwuaWQpKSk7XG4gIHJldHVybiBjcmVhdGVDb21wb25lbnQoUG9seW1vcnBoaWMsIG1lcmdlUHJvcHMoe1xuICAgIGFzOiBcInNwYW5cIixcbiAgICBnZXQgaWQoKSB7XG4gICAgICByZXR1cm4gbG9jYWwuaWQ7XG4gICAgfSxcbiAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG4gIH0sIG90aGVycykpO1xufVxuZnVuY3Rpb24gTWVudUljb24ocHJvcHMpIHtcbiAgY29uc3QgY29udGV4dCA9IHVzZU1lbnVDb250ZXh0KCk7XG4gIHByb3BzID0gbWVyZ2VEZWZhdWx0UHJvcHMoe1xuICAgIGNoaWxkcmVuOiBcIlxcdTI1QkNcIlxuICB9LCBwcm9wcyk7XG4gIHJldHVybiBjcmVhdGVDb21wb25lbnQoUG9seW1vcnBoaWMsIG1lcmdlUHJvcHMoe1xuICAgIGFzOiBcInNwYW5cIixcbiAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG4gIH0sICgpID0+IGNvbnRleHQuZGF0YXNldCgpLCBwcm9wcykpO1xufVxuZnVuY3Rpb24gTWVudUl0ZW0ocHJvcHMpIHtcbiAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChNZW51SXRlbUJhc2UsIG1lcmdlUHJvcHMoe1xuICAgIHJvbGU6IFwibWVudWl0ZW1cIixcbiAgICBjbG9zZU9uU2VsZWN0OiB0cnVlXG4gIH0sIHByb3BzKSk7XG59XG5mdW5jdGlvbiBNZW51SXRlbURlc2NyaXB0aW9uKHByb3BzKSB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VNZW51SXRlbUNvbnRleHQoKTtcbiAgcHJvcHMgPSBtZXJnZURlZmF1bHRQcm9wcyh7XG4gICAgaWQ6IGNvbnRleHQuZ2VuZXJhdGVJZChcImRlc2NyaXB0aW9uXCIpXG4gIH0sIHByb3BzKTtcbiAgY29uc3QgW2xvY2FsLCBvdGhlcnNdID0gc3BsaXRQcm9wcyhwcm9wcywgW1wiaWRcIl0pO1xuICBjcmVhdGVFZmZlY3QoKCkgPT4gb25DbGVhbnVwKGNvbnRleHQucmVnaXN0ZXJEZXNjcmlwdGlvbihsb2NhbC5pZCkpKTtcbiAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChQb2x5bW9ycGhpYywgbWVyZ2VQcm9wcyh7XG4gICAgYXM6IFwiZGl2XCIsXG4gICAgZ2V0IGlkKCkge1xuICAgICAgcmV0dXJuIGxvY2FsLmlkO1xuICAgIH1cbiAgfSwgKCkgPT4gY29udGV4dC5kYXRhc2V0KCksIG90aGVycykpO1xufVxuZnVuY3Rpb24gTWVudUl0ZW1JbmRpY2F0b3IocHJvcHMpIHtcbiAgY29uc3QgY29udGV4dCA9IHVzZU1lbnVJdGVtQ29udGV4dCgpO1xuICBwcm9wcyA9IG1lcmdlRGVmYXVsdFByb3BzKHtcbiAgICBpZDogY29udGV4dC5nZW5lcmF0ZUlkKFwiaW5kaWNhdG9yXCIpXG4gIH0sIHByb3BzKTtcbiAgY29uc3QgW2xvY2FsLCBvdGhlcnNdID0gc3BsaXRQcm9wcyhwcm9wcywgW1wiZm9yY2VNb3VudFwiXSk7XG4gIHJldHVybiBjcmVhdGVDb21wb25lbnQoU2hvdywge1xuICAgIGdldCB3aGVuKCkge1xuICAgICAgcmV0dXJuIGxvY2FsLmZvcmNlTW91bnQgfHwgY29udGV4dC5pc0NoZWNrZWQoKTtcbiAgICB9LFxuICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgIHJldHVybiBjcmVhdGVDb21wb25lbnQoUG9seW1vcnBoaWMsIG1lcmdlUHJvcHMoe1xuICAgICAgICBhczogXCJkaXZcIlxuICAgICAgfSwgKCkgPT4gY29udGV4dC5kYXRhc2V0KCksIG90aGVycykpO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBNZW51SXRlbUxhYmVsKHByb3BzKSB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VNZW51SXRlbUNvbnRleHQoKTtcbiAgcHJvcHMgPSBtZXJnZURlZmF1bHRQcm9wcyh7XG4gICAgaWQ6IGNvbnRleHQuZ2VuZXJhdGVJZChcImxhYmVsXCIpXG4gIH0sIHByb3BzKTtcbiAgY29uc3QgW2xvY2FsLCBvdGhlcnNdID0gc3BsaXRQcm9wcyhwcm9wcywgW1wicmVmXCIsIFwiaWRcIl0pO1xuICBjcmVhdGVFZmZlY3QoKCkgPT4gb25DbGVhbnVwKGNvbnRleHQucmVnaXN0ZXJMYWJlbChsb2NhbC5pZCkpKTtcbiAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChQb2x5bW9ycGhpYywgbWVyZ2VQcm9wcyh7XG4gICAgYXM6IFwiZGl2XCIsXG4gICAgcmVmKHIkKSB7XG4gICAgICBjb25zdCBfcmVmJCA9IG1lcmdlUmVmcyhjb250ZXh0LnNldExhYmVsUmVmLCBsb2NhbC5yZWYpO1xuICAgICAgdHlwZW9mIF9yZWYkID09PSBcImZ1bmN0aW9uXCIgJiYgX3JlZiQociQpO1xuICAgIH0sXG4gICAgZ2V0IGlkKCkge1xuICAgICAgcmV0dXJuIGxvY2FsLmlkO1xuICAgIH1cbiAgfSwgKCkgPT4gY29udGV4dC5kYXRhc2V0KCksIG90aGVycykpO1xufVxuZnVuY3Rpb24gTWVudVBvcnRhbChwcm9wcykge1xuICBjb25zdCBjb250ZXh0ID0gdXNlTWVudUNvbnRleHQoKTtcbiAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChTaG93LCB7XG4gICAgZ2V0IHdoZW4oKSB7XG4gICAgICByZXR1cm4gY29udGV4dC5jb250ZW50UHJlc2VuY2UuaXNQcmVzZW50KCk7XG4gICAgfSxcbiAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KFBvcnRhbCwgcHJvcHMpO1xuICAgIH1cbiAgfSk7XG59XG52YXIgTWVudVJhZGlvR3JvdXBDb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuZnVuY3Rpb24gdXNlTWVudVJhZGlvR3JvdXBDb250ZXh0KCkge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChNZW51UmFkaW9Hcm91cENvbnRleHQpO1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiW2tvYmFsdGVdOiBgdXNlTWVudVJhZGlvR3JvdXBDb250ZXh0YCBtdXN0IGJlIHVzZWQgd2l0aGluIGEgYE1lbnUuUmFkaW9Hcm91cGAgY29tcG9uZW50XCIpO1xuICB9XG4gIHJldHVybiBjb250ZXh0O1xufVxuZnVuY3Rpb24gTWVudVJhZGlvR3JvdXAocHJvcHMpIHtcbiAgY29uc3Qgcm9vdENvbnRleHQgPSB1c2VNZW51Um9vdENvbnRleHQoKTtcbiAgY29uc3QgZGVmYXVsdElkID0gcm9vdENvbnRleHQuZ2VuZXJhdGVJZChgcmFkaW9ncm91cC0ke2NyZWF0ZVVuaXF1ZUlkKCl9YCk7XG4gIHByb3BzID0gbWVyZ2VEZWZhdWx0UHJvcHMoe1xuICAgIGlkOiBkZWZhdWx0SWRcbiAgfSwgcHJvcHMpO1xuICBjb25zdCBbbG9jYWwsIG90aGVyc10gPSBzcGxpdFByb3BzKHByb3BzLCBbXCJ2YWx1ZVwiLCBcImRlZmF1bHRWYWx1ZVwiLCBcIm9uQ2hhbmdlXCIsIFwiZGlzYWJsZWRcIl0pO1xuICBjb25zdCBbc2VsZWN0ZWQsIHNldFNlbGVjdGVkXSA9IGNyZWF0ZUNvbnRyb2xsYWJsZVNpZ25hbCh7XG4gICAgdmFsdWU6ICgpID0+IGxvY2FsLnZhbHVlLFxuICAgIGRlZmF1bHRWYWx1ZTogKCkgPT4gbG9jYWwuZGVmYXVsdFZhbHVlLFxuICAgIG9uQ2hhbmdlOiAodmFsdWUpID0+IGxvY2FsLm9uQ2hhbmdlPy4odmFsdWUpXG4gIH0pO1xuICBjb25zdCBjb250ZXh0ID0ge1xuICAgIGlzRGlzYWJsZWQ6ICgpID0+IGxvY2FsLmRpc2FibGVkLFxuICAgIGlzU2VsZWN0ZWRWYWx1ZTogKHZhbHVlKSA9PiB2YWx1ZSA9PT0gc2VsZWN0ZWQoKSxcbiAgICBzZXRTZWxlY3RlZFZhbHVlOiBzZXRTZWxlY3RlZFxuICB9O1xuICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KE1lbnVSYWRpb0dyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0LFxuICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgIHJldHVybiBjcmVhdGVDb21wb25lbnQoTWVudUdyb3VwLCBvdGhlcnMpO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBNZW51UmFkaW9JdGVtKHByb3BzKSB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VNZW51UmFkaW9Hcm91cENvbnRleHQoKTtcbiAgcHJvcHMgPSBtZXJnZURlZmF1bHRQcm9wcyh7XG4gICAgY2xvc2VPblNlbGVjdDogZmFsc2VcbiAgfSwgcHJvcHMpO1xuICBjb25zdCBbbG9jYWwsIG90aGVyc10gPSBzcGxpdFByb3BzKHByb3BzLCBbXCJ2YWx1ZVwiLCBcIm9uU2VsZWN0XCJdKTtcbiAgY29uc3Qgb25TZWxlY3QgPSAoKSA9PiB7XG4gICAgbG9jYWwub25TZWxlY3Q/LigpO1xuICAgIGNvbnRleHQuc2V0U2VsZWN0ZWRWYWx1ZShsb2NhbC52YWx1ZSk7XG4gIH07XG4gIHJldHVybiBjcmVhdGVDb21wb25lbnQoTWVudUl0ZW1CYXNlLCBtZXJnZVByb3BzKHtcbiAgICByb2xlOiBcIm1lbnVpdGVtcmFkaW9cIixcbiAgICBnZXQgY2hlY2tlZCgpIHtcbiAgICAgIHJldHVybiBjb250ZXh0LmlzU2VsZWN0ZWRWYWx1ZShsb2NhbC52YWx1ZSk7XG4gICAgfSxcbiAgICBvblNlbGVjdFxuICB9LCBvdGhlcnMpKTtcbn1cbmZ1bmN0aW9uIE1lbnVSb290KHByb3BzKSB7XG4gIGNvbnN0IGRlZmF1bHRJZCA9IGBtZW51LSR7Y3JlYXRlVW5pcXVlSWQoKX1gO1xuICBwcm9wcyA9IG1lcmdlRGVmYXVsdFByb3BzKHtcbiAgICBpZDogZGVmYXVsdElkLFxuICAgIG1vZGFsOiB0cnVlLFxuICAgIHByZXZlbnRTY3JvbGw6IGZhbHNlXG4gIH0sIHByb3BzKTtcbiAgY29uc3QgW2xvY2FsLCBvdGhlcnNdID0gc3BsaXRQcm9wcyhwcm9wcywgW1wiaWRcIiwgXCJtb2RhbFwiLCBcInByZXZlbnRTY3JvbGxcIiwgXCJmb3JjZU1vdW50XCIsIFwib3BlblwiLCBcImRlZmF1bHRPcGVuXCIsIFwib25PcGVuQ2hhbmdlXCJdKTtcbiAgY29uc3QgZGlzY2xvc3VyZVN0YXRlID0gY3JlYXRlRGlzY2xvc3VyZVN0YXRlKHtcbiAgICBvcGVuOiAoKSA9PiBsb2NhbC5vcGVuLFxuICAgIGRlZmF1bHRPcGVuOiAoKSA9PiBsb2NhbC5kZWZhdWx0T3BlbixcbiAgICBvbk9wZW5DaGFuZ2U6IChpc09wZW4pID0+IGxvY2FsLm9uT3BlbkNoYW5nZT8uKGlzT3BlbilcbiAgfSk7XG4gIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgaXNNb2RhbDogKCkgPT4gbG9jYWwubW9kYWwgPz8gdHJ1ZSxcbiAgICBwcmV2ZW50U2Nyb2xsOiAoKSA9PiBsb2NhbC5wcmV2ZW50U2Nyb2xsID8/IGZhbHNlLFxuICAgIGZvcmNlTW91bnQ6ICgpID0+IGxvY2FsLmZvcmNlTW91bnQgPz8gZmFsc2UsXG4gICAgZ2VuZXJhdGVJZDogY3JlYXRlR2VuZXJhdGVJZCgoKSA9PiBsb2NhbC5pZClcbiAgfTtcbiAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChNZW51Um9vdENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dCxcbiAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KE1lbnUsIG1lcmdlUHJvcHMoe1xuICAgICAgICBnZXQgb3BlbigpIHtcbiAgICAgICAgICByZXR1cm4gZGlzY2xvc3VyZVN0YXRlLmlzT3BlbigpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgb25PcGVuQ2hhbmdlKCkge1xuICAgICAgICAgIHJldHVybiBkaXNjbG9zdXJlU3RhdGUuc2V0SXNPcGVuO1xuICAgICAgICB9XG4gICAgICB9LCBvdGhlcnMpKTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gTWVudVN1Yihwcm9wcykge1xuICBjb25zdCB7XG4gICAgZGlyZWN0aW9uXG4gIH0gPSB1c2VMb2NhbGUoKTtcbiAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChNZW51LCBtZXJnZVByb3BzKHtcbiAgICBnZXQgcGxhY2VtZW50KCkge1xuICAgICAgcmV0dXJuIGRpcmVjdGlvbigpID09PSBcInJ0bFwiID8gXCJsZWZ0LXN0YXJ0XCIgOiBcInJpZ2h0LXN0YXJ0XCI7XG4gICAgfSxcbiAgICBmbGlwOiB0cnVlXG4gIH0sIHByb3BzKSk7XG59XG52YXIgU1VCX0NMT1NFX0tFWVMgPSB7XG4gIGx0cjogW1wiQXJyb3dMZWZ0XCJdLFxuICBydGw6IFtcIkFycm93UmlnaHRcIl1cbn07XG5mdW5jdGlvbiBNZW51U3ViQ29udGVudChwcm9wcykge1xuICBjb25zdCBjb250ZXh0ID0gdXNlTWVudUNvbnRleHQoKTtcbiAgY29uc3QgW2xvY2FsLCBvdGhlcnNdID0gc3BsaXRQcm9wcyhwcm9wcywgW1wib25Gb2N1c091dHNpZGVcIiwgXCJvbktleURvd25cIiwgXCJvbkZvY3VzT3V0XCJdKTtcbiAgY29uc3Qge1xuICAgIGRpcmVjdGlvblxuICB9ID0gdXNlTG9jYWxlKCk7XG4gIGNvbnN0IG9uT3BlbkF1dG9Gb2N1cyA9IChlMikgPT4ge1xuICAgIGUyLnByZXZlbnREZWZhdWx0KCk7XG4gIH07XG4gIGNvbnN0IG9uQ2xvc2VBdXRvRm9jdXMgPSAoZTIpID0+IHtcbiAgICBlMi5wcmV2ZW50RGVmYXVsdCgpO1xuICB9O1xuICBjb25zdCBvbkZvY3VzT3V0c2lkZSA9IChlMikgPT4ge1xuICAgIGxvY2FsLm9uRm9jdXNPdXRzaWRlPy4oZTIpO1xuICAgIGNvbnN0IHRhcmdldCA9IGUyLnRhcmdldDtcbiAgICBpZiAoIWNvbnRhaW5zKGNvbnRleHQudHJpZ2dlclJlZigpLCB0YXJnZXQpKSB7XG4gICAgICBjb250ZXh0LmNsb3NlKCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBvbktleURvd24gPSAoZTIpID0+IHtcbiAgICBjYWxsSGFuZGxlcihlMiwgbG9jYWwub25LZXlEb3duKTtcbiAgICBjb25zdCBpc0tleURvd25JbnNpZGUgPSBjb250YWlucyhlMi5jdXJyZW50VGFyZ2V0LCBlMi50YXJnZXQpO1xuICAgIGNvbnN0IGlzQ2xvc2VLZXkgPSBTVUJfQ0xPU0VfS0VZU1tkaXJlY3Rpb24oKV0uaW5jbHVkZXMoZTIua2V5KTtcbiAgICBjb25zdCBpc1N1Yk1lbnUgPSBjb250ZXh0LnBhcmVudE1lbnVDb250ZXh0KCkgIT0gbnVsbDtcbiAgICBpZiAoaXNLZXlEb3duSW5zaWRlICYmIGlzQ2xvc2VLZXkgJiYgaXNTdWJNZW51KSB7XG4gICAgICBjb250ZXh0LmNsb3NlKCk7XG4gICAgICBmb2N1c1dpdGhvdXRTY3JvbGxpbmcoY29udGV4dC50cmlnZ2VyUmVmKCkpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChNZW51Q29udGVudEJhc2UsIG1lcmdlUHJvcHMoe1xuICAgIG9uT3BlbkF1dG9Gb2N1cyxcbiAgICBvbkNsb3NlQXV0b0ZvY3VzLFxuICAgIG9uRm9jdXNPdXRzaWRlLFxuICAgIG9uS2V5RG93blxuICB9LCBvdGhlcnMpKTtcbn1cbnZhciBTRUxFQ1RJT05fS0VZUyA9IFtcIkVudGVyXCIsIFwiIFwiXTtcbnZhciBTVUJfT1BFTl9LRVlTID0ge1xuICBsdHI6IFsuLi5TRUxFQ1RJT05fS0VZUywgXCJBcnJvd1JpZ2h0XCJdLFxuICBydGw6IFsuLi5TRUxFQ1RJT05fS0VZUywgXCJBcnJvd0xlZnRcIl1cbn07XG5mdW5jdGlvbiBNZW51U3ViVHJpZ2dlcihwcm9wcykge1xuICBsZXQgcmVmO1xuICBjb25zdCByb290Q29udGV4dCA9IHVzZU1lbnVSb290Q29udGV4dCgpO1xuICBjb25zdCBjb250ZXh0ID0gdXNlTWVudUNvbnRleHQoKTtcbiAgcHJvcHMgPSBtZXJnZURlZmF1bHRQcm9wcyh7XG4gICAgaWQ6IHJvb3RDb250ZXh0LmdlbmVyYXRlSWQoYHN1Yi10cmlnZ2VyLSR7Y3JlYXRlVW5pcXVlSWQoKX1gKVxuICB9LCBwcm9wcyk7XG4gIGNvbnN0IFtsb2NhbCwgb3RoZXJzXSA9IHNwbGl0UHJvcHMocHJvcHMsIFtcInJlZlwiLCBcImlkXCIsIFwidGV4dFZhbHVlXCIsIFwiZGlzYWJsZWRcIiwgXCJvblBvaW50ZXJNb3ZlXCIsIFwib25Qb2ludGVyTGVhdmVcIiwgXCJvblBvaW50ZXJEb3duXCIsIFwib25Qb2ludGVyVXBcIiwgXCJvbkNsaWNrXCIsIFwib25LZXlEb3duXCIsIFwib25Nb3VzZURvd25cIiwgXCJvbkZvY3VzXCJdKTtcbiAgbGV0IG9wZW5UaW1lb3V0SWQgPSBudWxsO1xuICBjb25zdCBjbGVhck9wZW5UaW1lb3V0ID0gKCkgPT4ge1xuICAgIGlmIChpc1NlcnZlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAob3BlblRpbWVvdXRJZCkge1xuICAgICAgd2luZG93LmNsZWFyVGltZW91dChvcGVuVGltZW91dElkKTtcbiAgICB9XG4gICAgb3BlblRpbWVvdXRJZCA9IG51bGw7XG4gIH07XG4gIGNvbnN0IHtcbiAgICBkaXJlY3Rpb25cbiAgfSA9IHVzZUxvY2FsZSgpO1xuICBjb25zdCBrZXkgPSAoKSA9PiBsb2NhbC5pZDtcbiAgY29uc3QgcGFyZW50U2VsZWN0aW9uTWFuYWdlciA9ICgpID0+IHtcbiAgICBjb25zdCBwYXJlbnRNZW51Q29udGV4dCA9IGNvbnRleHQucGFyZW50TWVudUNvbnRleHQoKTtcbiAgICBpZiAocGFyZW50TWVudUNvbnRleHQgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW2tvYmFsdGVdOiBgTWVudS5TdWJUcmlnZ2VyYCBtdXN0IGJlIHVzZWQgd2l0aGluIGEgYE1lbnUuU3ViYCBjb21wb25lbnRcIik7XG4gICAgfVxuICAgIHJldHVybiBwYXJlbnRNZW51Q29udGV4dC5saXN0U3RhdGUoKS5zZWxlY3Rpb25NYW5hZ2VyKCk7XG4gIH07XG4gIGNvbnN0IGNvbGxlY3Rpb24gPSAoKSA9PiBjb250ZXh0Lmxpc3RTdGF0ZSgpLmNvbGxlY3Rpb24oKTtcbiAgY29uc3QgaXNIaWdobGlnaHRlZCA9ICgpID0+IHBhcmVudFNlbGVjdGlvbk1hbmFnZXIoKS5mb2N1c2VkS2V5KCkgPT09IGtleSgpO1xuICBjb25zdCBzZWxlY3RhYmxlSXRlbSA9IGNyZWF0ZVNlbGVjdGFibGVJdGVtKHtcbiAgICBrZXksXG4gICAgc2VsZWN0aW9uTWFuYWdlcjogcGFyZW50U2VsZWN0aW9uTWFuYWdlcixcbiAgICBzaG91bGRTZWxlY3RPblByZXNzVXA6IHRydWUsXG4gICAgYWxsb3dzRGlmZmVyZW50UHJlc3NPcmlnaW46IHRydWUsXG4gICAgZGlzYWJsZWQ6ICgpID0+IGxvY2FsLmRpc2FibGVkXG4gIH0sICgpID0+IHJlZik7XG4gIGNvbnN0IG9uQ2xpY2sgPSAoZTIpID0+IHtcbiAgICBjYWxsSGFuZGxlcihlMiwgbG9jYWwub25DbGljayk7XG4gICAgaWYgKCFjb250ZXh0LmlzT3BlbigpICYmICFsb2NhbC5kaXNhYmxlZCkge1xuICAgICAgY29udGV4dC5vcGVuKHRydWUpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgb25Qb2ludGVyTW92ZSA9IChlMikgPT4ge1xuICAgIGNhbGxIYW5kbGVyKGUyLCBsb2NhbC5vblBvaW50ZXJNb3ZlKTtcbiAgICBpZiAoZTIucG9pbnRlclR5cGUgIT09IFwibW91c2VcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwYXJlbnRNZW51Q29udGV4dCA9IGNvbnRleHQucGFyZW50TWVudUNvbnRleHQoKTtcbiAgICBwYXJlbnRNZW51Q29udGV4dD8ub25JdGVtRW50ZXIoZTIpO1xuICAgIGlmIChlMi5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChsb2NhbC5kaXNhYmxlZCkge1xuICAgICAgcGFyZW50TWVudUNvbnRleHQ/Lm9uSXRlbUxlYXZlKGUyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFjb250ZXh0LmlzT3BlbigpICYmICFvcGVuVGltZW91dElkKSB7XG4gICAgICBjb250ZXh0LnBhcmVudE1lbnVDb250ZXh0KCk/LnNldFBvaW50ZXJHcmFjZUludGVudChudWxsKTtcbiAgICAgIG9wZW5UaW1lb3V0SWQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNvbnRleHQub3BlbihmYWxzZSk7XG4gICAgICAgIGNsZWFyT3BlblRpbWVvdXQoKTtcbiAgICAgIH0sIDEwMCk7XG4gICAgfVxuICAgIHBhcmVudE1lbnVDb250ZXh0Py5vbkl0ZW1FbnRlcihlMik7XG4gICAgaWYgKCFlMi5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBpZiAoY29udGV4dC5saXN0U3RhdGUoKS5zZWxlY3Rpb25NYW5hZ2VyKCkuaXNGb2N1c2VkKCkpIHtcbiAgICAgICAgY29udGV4dC5saXN0U3RhdGUoKS5zZWxlY3Rpb25NYW5hZ2VyKCkuc2V0Rm9jdXNlZChmYWxzZSk7XG4gICAgICAgIGNvbnRleHQubGlzdFN0YXRlKCkuc2VsZWN0aW9uTWFuYWdlcigpLnNldEZvY3VzZWRLZXkodm9pZCAwKTtcbiAgICAgIH1cbiAgICAgIGZvY3VzV2l0aG91dFNjcm9sbGluZyhlMi5jdXJyZW50VGFyZ2V0KTtcbiAgICAgIHBhcmVudE1lbnVDb250ZXh0Py5saXN0U3RhdGUoKS5zZWxlY3Rpb25NYW5hZ2VyKCkuc2V0Rm9jdXNlZCh0cnVlKTtcbiAgICAgIHBhcmVudE1lbnVDb250ZXh0Py5saXN0U3RhdGUoKS5zZWxlY3Rpb25NYW5hZ2VyKCkuc2V0Rm9jdXNlZEtleShrZXkoKSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBvblBvaW50ZXJMZWF2ZSA9IChlMikgPT4ge1xuICAgIGNhbGxIYW5kbGVyKGUyLCBsb2NhbC5vblBvaW50ZXJMZWF2ZSk7XG4gICAgaWYgKGUyLnBvaW50ZXJUeXBlICE9PSBcIm1vdXNlXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2xlYXJPcGVuVGltZW91dCgpO1xuICAgIGNvbnN0IHBhcmVudE1lbnVDb250ZXh0ID0gY29udGV4dC5wYXJlbnRNZW51Q29udGV4dCgpO1xuICAgIGNvbnN0IGNvbnRlbnRFbCA9IGNvbnRleHQuY29udGVudFJlZigpO1xuICAgIGlmIChjb250ZW50RWwpIHtcbiAgICAgIHBhcmVudE1lbnVDb250ZXh0Py5zZXRQb2ludGVyR3JhY2VJbnRlbnQoe1xuICAgICAgICBhcmVhOiBnZXRQb2ludGVyR3JhY2VBcmVhKGNvbnRleHQuY3VycmVudFBsYWNlbWVudCgpLCBlMiwgY29udGVudEVsKSxcbiAgICAgICAgLy8gU2FmZSBiZWNhdXNlIHN1YiBtZW51IGFsd2F5cyBvcGVuIFwibGVmdFwiIG9yIFwicmlnaHRcIi5cbiAgICAgICAgc2lkZTogY29udGV4dC5jdXJyZW50UGxhY2VtZW50KCkuc3BsaXQoXCItXCIpWzBdXG4gICAgICB9KTtcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQocGFyZW50TWVudUNvbnRleHQ/LnBvaW50ZXJHcmFjZVRpbWVvdXRJZCgpKTtcbiAgICAgIGNvbnN0IHBvaW50ZXJHcmFjZVRpbWVvdXRJZCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgcGFyZW50TWVudUNvbnRleHQ/LnNldFBvaW50ZXJHcmFjZUludGVudChudWxsKTtcbiAgICAgIH0sIDMwMCk7XG4gICAgICBwYXJlbnRNZW51Q29udGV4dD8uc2V0UG9pbnRlckdyYWNlVGltZW91dElkKHBvaW50ZXJHcmFjZVRpbWVvdXRJZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmVudE1lbnVDb250ZXh0Py5vblRyaWdnZXJMZWF2ZShlMik7XG4gICAgICBpZiAoZTIuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBwYXJlbnRNZW51Q29udGV4dD8uc2V0UG9pbnRlckdyYWNlSW50ZW50KG51bGwpO1xuICAgIH1cbiAgICBwYXJlbnRNZW51Q29udGV4dD8ub25JdGVtTGVhdmUoZTIpO1xuICB9O1xuICBjb25zdCBvbktleURvd24gPSAoZTIpID0+IHtcbiAgICBjYWxsSGFuZGxlcihlMiwgbG9jYWwub25LZXlEb3duKTtcbiAgICBpZiAoZTIucmVwZWF0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChsb2NhbC5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoU1VCX09QRU5fS0VZU1tkaXJlY3Rpb24oKV0uaW5jbHVkZXMoZTIua2V5KSkge1xuICAgICAgZTIuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBlMi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcGFyZW50U2VsZWN0aW9uTWFuYWdlcigpLnNldEZvY3VzZWQoZmFsc2UpO1xuICAgICAgcGFyZW50U2VsZWN0aW9uTWFuYWdlcigpLnNldEZvY3VzZWRLZXkodm9pZCAwKTtcbiAgICAgIGlmICghY29udGV4dC5pc09wZW4oKSkge1xuICAgICAgICBjb250ZXh0Lm9wZW4oXCJmaXJzdFwiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRleHQuZm9jdXNDb250ZW50KCk7XG4gICAgICBjb250ZXh0Lmxpc3RTdGF0ZSgpLnNlbGVjdGlvbk1hbmFnZXIoKS5zZXRGb2N1c2VkKHRydWUpO1xuICAgICAgY29udGV4dC5saXN0U3RhdGUoKS5zZWxlY3Rpb25NYW5hZ2VyKCkuc2V0Rm9jdXNlZEtleShjb2xsZWN0aW9uKCkuZ2V0Rmlyc3RLZXkoKSk7XG4gICAgfVxuICB9O1xuICBjcmVhdGVFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChjb250ZXh0LnJlZ2lzdGVySXRlbVRvUGFyZW50RG9tQ29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJba29iYWx0ZV06IGBNZW51LlN1YlRyaWdnZXJgIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBgTWVudS5TdWJgIGNvbXBvbmVudFwiKTtcbiAgICB9XG4gICAgY29uc3QgdW5yZWdpc3RlciA9IGNvbnRleHQucmVnaXN0ZXJJdGVtVG9QYXJlbnREb21Db2xsZWN0aW9uKHtcbiAgICAgIHJlZjogKCkgPT4gcmVmLFxuICAgICAgdHlwZTogXCJpdGVtXCIsXG4gICAgICBrZXk6IGtleSgpLFxuICAgICAgdGV4dFZhbHVlOiBsb2NhbC50ZXh0VmFsdWUgPz8gcmVmPy50ZXh0Q29udGVudCA/PyBcIlwiLFxuICAgICAgZGlzYWJsZWQ6IGxvY2FsLmRpc2FibGVkID8/IGZhbHNlXG4gICAgfSk7XG4gICAgb25DbGVhbnVwKHVucmVnaXN0ZXIpO1xuICB9KTtcbiAgY3JlYXRlRWZmZWN0KG9uKCgpID0+IGNvbnRleHQucGFyZW50TWVudUNvbnRleHQoKT8ucG9pbnRlckdyYWNlVGltZW91dElkKCksIChwb2ludGVyR3JhY2VUaW1lcikgPT4ge1xuICAgIG9uQ2xlYW51cCgoKSA9PiB7XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHBvaW50ZXJHcmFjZVRpbWVyKTtcbiAgICAgIGNvbnRleHQucGFyZW50TWVudUNvbnRleHQoKT8uc2V0UG9pbnRlckdyYWNlSW50ZW50KG51bGwpO1xuICAgIH0pO1xuICB9KSk7XG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiBvbkNsZWFudXAoY29udGV4dC5yZWdpc3RlclRyaWdnZXJJZChsb2NhbC5pZCkpKTtcbiAgb25DbGVhbnVwKCgpID0+IHtcbiAgICBjbGVhck9wZW5UaW1lb3V0KCk7XG4gIH0pO1xuICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KFBvbHltb3JwaGljLCBtZXJnZVByb3BzKHtcbiAgICBhczogXCJkaXZcIixcbiAgICByZWYociQpIHtcbiAgICAgIGNvbnN0IF9yZWYkID0gbWVyZ2VSZWZzKChlbCkgPT4ge1xuICAgICAgICBjb250ZXh0LnNldFRyaWdnZXJSZWYoZWwpO1xuICAgICAgICByZWYgPSBlbDtcbiAgICAgIH0sIGxvY2FsLnJlZik7XG4gICAgICB0eXBlb2YgX3JlZiQgPT09IFwiZnVuY3Rpb25cIiAmJiBfcmVmJChyJCk7XG4gICAgfSxcbiAgICBnZXQgaWQoKSB7XG4gICAgICByZXR1cm4gbG9jYWwuaWQ7XG4gICAgfSxcbiAgICByb2xlOiBcIm1lbnVpdGVtXCIsXG4gICAgZ2V0IHRhYkluZGV4KCkge1xuICAgICAgcmV0dXJuIHNlbGVjdGFibGVJdGVtLnRhYkluZGV4KCk7XG4gICAgfSxcbiAgICBcImFyaWEtaGFzcG9wdXBcIjogXCJ0cnVlXCIsXG4gICAgZ2V0IFtcImFyaWEtZXhwYW5kZWRcIl0oKSB7XG4gICAgICByZXR1cm4gY29udGV4dC5pc09wZW4oKTtcbiAgICB9LFxuICAgIGdldCBbXCJhcmlhLWNvbnRyb2xzXCJdKCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZU1lbW8oKCkgPT4gISFjb250ZXh0LmlzT3BlbigpKSgpID8gY29udGV4dC5jb250ZW50SWQoKSA6IHZvaWQgMDtcbiAgICB9LFxuICAgIGdldCBbXCJhcmlhLWRpc2FibGVkXCJdKCkge1xuICAgICAgcmV0dXJuIGxvY2FsLmRpc2FibGVkO1xuICAgIH0sXG4gICAgZ2V0IFtcImRhdGEta2V5XCJdKCkge1xuICAgICAgcmV0dXJuIHNlbGVjdGFibGVJdGVtLmRhdGFLZXkoKTtcbiAgICB9LFxuICAgIGdldCBbXCJkYXRhLWhpZ2hsaWdodGVkXCJdKCkge1xuICAgICAgcmV0dXJuIGlzSGlnaGxpZ2h0ZWQoKSA/IFwiXCIgOiB2b2lkIDA7XG4gICAgfSxcbiAgICBnZXQgW1wiZGF0YS1kaXNhYmxlZFwiXSgpIHtcbiAgICAgIHJldHVybiBsb2NhbC5kaXNhYmxlZCA/IFwiXCIgOiB2b2lkIDA7XG4gICAgfSxcbiAgICBnZXQgb25Qb2ludGVyRG93bigpIHtcbiAgICAgIHJldHVybiBjb21wb3NlRXZlbnRIYW5kbGVycyhbbG9jYWwub25Qb2ludGVyRG93biwgc2VsZWN0YWJsZUl0ZW0ub25Qb2ludGVyRG93bl0pO1xuICAgIH0sXG4gICAgZ2V0IG9uUG9pbnRlclVwKCkge1xuICAgICAgcmV0dXJuIGNvbXBvc2VFdmVudEhhbmRsZXJzKFtsb2NhbC5vblBvaW50ZXJVcCwgc2VsZWN0YWJsZUl0ZW0ub25Qb2ludGVyVXBdKTtcbiAgICB9LFxuICAgIGdldCBvbkNsaWNrKCkge1xuICAgICAgcmV0dXJuIGNvbXBvc2VFdmVudEhhbmRsZXJzKFtvbkNsaWNrLCBzZWxlY3RhYmxlSXRlbS5vbkNsaWNrXSk7XG4gICAgfSxcbiAgICBnZXQgb25LZXlEb3duKCkge1xuICAgICAgcmV0dXJuIGNvbXBvc2VFdmVudEhhbmRsZXJzKFtvbktleURvd24sIHNlbGVjdGFibGVJdGVtLm9uS2V5RG93bl0pO1xuICAgIH0sXG4gICAgZ2V0IG9uTW91c2VEb3duKCkge1xuICAgICAgcmV0dXJuIGNvbXBvc2VFdmVudEhhbmRsZXJzKFtsb2NhbC5vbk1vdXNlRG93biwgc2VsZWN0YWJsZUl0ZW0ub25Nb3VzZURvd25dKTtcbiAgICB9LFxuICAgIGdldCBvbkZvY3VzKCkge1xuICAgICAgcmV0dXJuIGNvbXBvc2VFdmVudEhhbmRsZXJzKFtsb2NhbC5vbkZvY3VzLCBzZWxlY3RhYmxlSXRlbS5vbkZvY3VzXSk7XG4gICAgfSxcbiAgICBvblBvaW50ZXJNb3ZlLFxuICAgIG9uUG9pbnRlckxlYXZlXG4gIH0sICgpID0+IGNvbnRleHQuZGF0YXNldCgpLCBvdGhlcnMpKTtcbn1cbmZ1bmN0aW9uIE1lbnVUcmlnZ2VyKHByb3BzKSB7XG4gIGNvbnN0IHJvb3RDb250ZXh0ID0gdXNlTWVudVJvb3RDb250ZXh0KCk7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VNZW51Q29udGV4dCgpO1xuICBwcm9wcyA9IG1lcmdlRGVmYXVsdFByb3BzKHtcbiAgICBpZDogcm9vdENvbnRleHQuZ2VuZXJhdGVJZChcInRyaWdnZXJcIilcbiAgfSwgcHJvcHMpO1xuICBjb25zdCBbbG9jYWwsIG90aGVyc10gPSBzcGxpdFByb3BzKHByb3BzLCBbXCJyZWZcIiwgXCJpZFwiLCBcImRpc2FibGVkXCIsIFwib25Qb2ludGVyRG93blwiLCBcIm9uQ2xpY2tcIiwgXCJvbktleURvd25cIl0pO1xuICBjb25zdCBvblBvaW50ZXJEb3duID0gKGUyKSA9PiB7XG4gICAgY2FsbEhhbmRsZXIoZTIsIGxvY2FsLm9uUG9pbnRlckRvd24pO1xuICAgIGUyLmN1cnJlbnRUYXJnZXQuZGF0YXNldC5wb2ludGVyVHlwZSA9IGUyLnBvaW50ZXJUeXBlO1xuICAgIGlmICghbG9jYWwuZGlzYWJsZWQgJiYgZTIucG9pbnRlclR5cGUgIT09IFwidG91Y2hcIiAmJiBlMi5idXR0b24gPT09IDApIHtcbiAgICAgIGNvbnRleHQudG9nZ2xlKHRydWUpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgb25DbGljayA9IChlMikgPT4ge1xuICAgIGNhbGxIYW5kbGVyKGUyLCBsb2NhbC5vbkNsaWNrKTtcbiAgICBpZiAoIWxvY2FsLmRpc2FibGVkICYmIGUyLmN1cnJlbnRUYXJnZXQuZGF0YXNldC5wb2ludGVyVHlwZSA9PT0gXCJ0b3VjaFwiKSB7XG4gICAgICBjb250ZXh0LnRvZ2dsZSh0cnVlKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG9uS2V5RG93biA9IChlMikgPT4ge1xuICAgIGNhbGxIYW5kbGVyKGUyLCBsb2NhbC5vbktleURvd24pO1xuICAgIGlmIChsb2NhbC5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2l0Y2ggKGUyLmtleSkge1xuICAgICAgY2FzZSBcIkVudGVyXCI6XG4gICAgICBjYXNlIFwiIFwiOlxuICAgICAgY2FzZSBcIkFycm93RG93blwiOlxuICAgICAgICBlMi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZTIucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29udGV4dC50b2dnbGUoXCJmaXJzdFwiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiQXJyb3dVcFwiOlxuICAgICAgICBlMi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZTIucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29udGV4dC50b2dnbGUoXCJsYXN0XCIpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH07XG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiBvbkNsZWFudXAoY29udGV4dC5yZWdpc3RlclRyaWdnZXJJZChsb2NhbC5pZCkpKTtcbiAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChCdXR0b25Sb290LCBtZXJnZVByb3BzKHtcbiAgICByZWYociQpIHtcbiAgICAgIGNvbnN0IF9yZWYkID0gbWVyZ2VSZWZzKGNvbnRleHQuc2V0VHJpZ2dlclJlZiwgbG9jYWwucmVmKTtcbiAgICAgIHR5cGVvZiBfcmVmJCA9PT0gXCJmdW5jdGlvblwiICYmIF9yZWYkKHIkKTtcbiAgICB9LFxuICAgIGdldCBpZCgpIHtcbiAgICAgIHJldHVybiBsb2NhbC5pZDtcbiAgICB9LFxuICAgIGdldCBkaXNhYmxlZCgpIHtcbiAgICAgIHJldHVybiBsb2NhbC5kaXNhYmxlZDtcbiAgICB9LFxuICAgIFwiYXJpYS1oYXNwb3B1cFwiOiBcInRydWVcIixcbiAgICBnZXQgW1wiYXJpYS1leHBhbmRlZFwiXSgpIHtcbiAgICAgIHJldHVybiBjb250ZXh0LmlzT3BlbigpO1xuICAgIH0sXG4gICAgZ2V0IFtcImFyaWEtY29udHJvbHNcIl0oKSB7XG4gICAgICByZXR1cm4gY3JlYXRlTWVtbygoKSA9PiAhIWNvbnRleHQuaXNPcGVuKCkpKCkgPyBjb250ZXh0LmNvbnRlbnRJZCgpIDogdm9pZCAwO1xuICAgIH0sXG4gICAgb25Qb2ludGVyRG93bixcbiAgICBvbkNsaWNrLFxuICAgIG9uS2V5RG93blxuICB9LCAoKSA9PiBjb250ZXh0LmRhdGFzZXQoKSwgb3RoZXJzKSk7XG59XG5mdW5jdGlvbiBTZXBhcmF0b3JSb290KHByb3BzKSB7XG4gIGxldCByZWY7XG4gIHByb3BzID0gbWVyZ2VEZWZhdWx0UHJvcHMoe1xuICAgIG9yaWVudGF0aW9uOiBcImhvcml6b250YWxcIlxuICB9LCBwcm9wcyk7XG4gIGNvbnN0IFtsb2NhbCwgb3RoZXJzXSA9IHNwbGl0UHJvcHMocHJvcHMsIFtcInJlZlwiLCBcIm9yaWVudGF0aW9uXCJdKTtcbiAgY29uc3QgdGFnTmFtZSA9IGNyZWF0ZVRhZ05hbWUoKCkgPT4gcmVmLCAoKSA9PiBcImhyXCIpO1xuICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KFBvbHltb3JwaGljLCBtZXJnZVByb3BzKHtcbiAgICBhczogXCJoclwiLFxuICAgIHJlZihyJCkge1xuICAgICAgY29uc3QgX3JlZiQgPSBtZXJnZVJlZnMoKGVsKSA9PiByZWYgPSBlbCwgbG9jYWwucmVmKTtcbiAgICAgIHR5cGVvZiBfcmVmJCA9PT0gXCJmdW5jdGlvblwiICYmIF9yZWYkKHIkKTtcbiAgICB9LFxuICAgIGdldCByb2xlKCkge1xuICAgICAgcmV0dXJuIHRhZ05hbWUoKSAhPT0gXCJoclwiID8gXCJzZXBhcmF0b3JcIiA6IHZvaWQgMDtcbiAgICB9LFxuICAgIGdldCBbXCJhcmlhLW9yaWVudGF0aW9uXCJdKCkge1xuICAgICAgcmV0dXJuIGxvY2FsLm9yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIgPyBcInZlcnRpY2FsXCIgOiB2b2lkIDA7XG4gICAgfSxcbiAgICBnZXQgW1wiZGF0YS1vcmllbnRhdGlvblwiXSgpIHtcbiAgICAgIHJldHVybiBsb2NhbC5vcmllbnRhdGlvbjtcbiAgICB9XG4gIH0sIG90aGVycykpO1xufVxuY3JlYXRlQ29udGV4dCgpO1xuY3JlYXRlQ29udGV4dCgpO1xuY3JlYXRlQ29udGV4dCgpO1xubmV3ICRkNmZkMjNiYzMzNzY2MGRmJGV4cG9ydCQ2NDgzOWU2MTUxMjBkZjE3KHtcbiAgYWNoOiB7XG4gICAgeWVhcjogXCJtd2FrYVwiLFxuICAgIG1vbnRoOiBcImR3ZVwiLFxuICAgIGRheTogXCJuaW5vXCJcbiAgfSxcbiAgYWY6IHtcbiAgICB5ZWFyOiBcImpqampcIixcbiAgICBtb250aDogXCJtbVwiLFxuICAgIGRheTogXCJkZFwiXG4gIH0sXG4gIGFtOiB7XG4gICAgeWVhcjogXCJcXHUxMkQzXFx1MTJEM1xcdTEyRDNcXHUxMkQzXCIsXG4gICAgbW9udGg6IFwiXFx1MTIxQVxcdTEyMUNcIixcbiAgICBkYXk6IFwiXFx1MTI0MFxcdTEyNDBcIlxuICB9LFxuICBhbjoge1xuICAgIHllYXI6IFwiYWFhYVwiLFxuICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgZGF5OiBcImRkXCJcbiAgfSxcbiAgYXI6IHtcbiAgICB5ZWFyOiBcIlxcdTA2MzNcXHUwNjQ2XFx1MDYyOVwiLFxuICAgIG1vbnRoOiBcIlxcdTA2MzRcXHUwNjQ3XFx1MDYzMVwiLFxuICAgIGRheTogXCJcXHUwNjRBXFx1MDY0OFxcdTA2NDVcIlxuICB9LFxuICBhc3Q6IHtcbiAgICB5ZWFyOiBcImFhYWFcIixcbiAgICBtb250aDogXCJtbVwiLFxuICAgIGRheTogXCJkZFwiXG4gIH0sXG4gIGF6OiB7XG4gICAgeWVhcjogXCJpaWlpXCIsXG4gICAgbW9udGg6IFwiYWFcIixcbiAgICBkYXk6IFwiZ2dcIlxuICB9LFxuICBiZToge1xuICAgIHllYXI6IFwiXFx1MDQzM1xcdTA0MzNcXHUwNDMzXFx1MDQzM1wiLFxuICAgIG1vbnRoOiBcIlxcdTA0M0NcXHUwNDNDXCIsXG4gICAgZGF5OiBcIlxcdTA0MzRcXHUwNDM0XCJcbiAgfSxcbiAgYmc6IHtcbiAgICB5ZWFyOiBcIlxcdTA0MzNcXHUwNDMzXFx1MDQzM1xcdTA0MzNcIixcbiAgICBtb250aDogXCJcXHUwNDNDXFx1MDQzQ1wiLFxuICAgIGRheTogXCJcXHUwNDM0XFx1MDQzNFwiXG4gIH0sXG4gIGJuOiB7XG4gICAgeWVhcjogXCJ5eXl5XCIsXG4gICAgbW9udGg6IFwiXFx1MDlBRVxcdTA5QkZcXHUwOUFFXFx1MDlCRlwiLFxuICAgIGRheTogXCJkZFwiXG4gIH0sXG4gIGJyOiB7XG4gICAgeWVhcjogXCJiYmJiXCIsXG4gICAgbW9udGg6IFwibW1cIixcbiAgICBkYXk6IFwiZGRcIlxuICB9LFxuICBiczoge1xuICAgIHllYXI6IFwiZ2dnZ1wiLFxuICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgZGF5OiBcImRkXCJcbiAgfSxcbiAgY2E6IHtcbiAgICB5ZWFyOiBcImFhYWFcIixcbiAgICBtb250aDogXCJtbVwiLFxuICAgIGRheTogXCJkZFwiXG4gIH0sXG4gIGNhazoge1xuICAgIHllYXI6IFwiampqalwiLFxuICAgIG1vbnRoOiBcImlpXCIsXG4gICAgZGF5OiBcInEncSdcIlxuICB9LFxuICBja2I6IHtcbiAgICB5ZWFyOiBcIlxcdTA2MzNcXHUwNjI3XFx1MDZCNVwiLFxuICAgIG1vbnRoOiBcIlxcdTA2NDVcXHUwNjI3XFx1MDY0NlxcdTA2QUZcIixcbiAgICBkYXk6IFwiXFx1MDY5NVxcdTA2QzZcXHUwNjk4XCJcbiAgfSxcbiAgY3M6IHtcbiAgICB5ZWFyOiBcInJycnJcIixcbiAgICBtb250aDogXCJtbVwiLFxuICAgIGRheTogXCJkZFwiXG4gIH0sXG4gIGN5OiB7XG4gICAgeWVhcjogXCJiYmJiXCIsXG4gICAgbW9udGg6IFwibW1cIixcbiAgICBkYXk6IFwiZGRcIlxuICB9LFxuICBkYToge1xuICAgIHllYXI6IFwiXFx4RTVcXHhFNVxceEU1XFx4RTVcIixcbiAgICBtb250aDogXCJtbVwiLFxuICAgIGRheTogXCJkZFwiXG4gIH0sXG4gIGRlOiB7XG4gICAgeWVhcjogXCJqampqXCIsXG4gICAgbW9udGg6IFwibW1cIixcbiAgICBkYXk6IFwidHRcIlxuICB9LFxuICBkc2I6IHtcbiAgICB5ZWFyOiBcImxsbGxcIixcbiAgICBtb250aDogXCJtbVwiLFxuICAgIGRheTogXCJcXHUwMTdBXFx1MDE3QVwiXG4gIH0sXG4gIGVsOiB7XG4gICAgeWVhcjogXCJcXHUwM0I1XFx1MDNCNVxcdTAzQjVcXHUwM0I1XCIsXG4gICAgbW9udGg6IFwiXFx1MDNCQ1xcdTAzQkNcIixcbiAgICBkYXk6IFwiXFx1MDNCN1xcdTAzQjdcIlxuICB9LFxuICBlbjoge1xuICAgIHllYXI6IFwieXl5eVwiLFxuICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgZGF5OiBcImRkXCJcbiAgfSxcbiAgZW86IHtcbiAgICB5ZWFyOiBcImpqampcIixcbiAgICBtb250aDogXCJtbVwiLFxuICAgIGRheTogXCJ0dFwiXG4gIH0sXG4gIGVzOiB7XG4gICAgeWVhcjogXCJhYWFhXCIsXG4gICAgbW9udGg6IFwibW1cIixcbiAgICBkYXk6IFwiZGRcIlxuICB9LFxuICBldDoge1xuICAgIHllYXI6IFwiYWFhYVwiLFxuICAgIG1vbnRoOiBcImtrXCIsXG4gICAgZGF5OiBcInBwXCJcbiAgfSxcbiAgZXU6IHtcbiAgICB5ZWFyOiBcInV1dXVcIixcbiAgICBtb250aDogXCJoaFwiLFxuICAgIGRheTogXCJlZVwiXG4gIH0sXG4gIGZhOiB7XG4gICAgeWVhcjogXCJcXHUwNjMzXFx1MDYyN1xcdTA2NDRcIixcbiAgICBtb250aDogXCJcXHUwNjQ1XFx1MDYyN1xcdTA2NDdcIixcbiAgICBkYXk6IFwiXFx1MDYzMVxcdTA2NDhcXHUwNjMyXCJcbiAgfSxcbiAgZmY6IHtcbiAgICB5ZWFyOiBcImhoaGhcIixcbiAgICBtb250aDogXCJsbFwiLFxuICAgIGRheTogXCJcXHhGMVxceEYxXCJcbiAgfSxcbiAgZmk6IHtcbiAgICB5ZWFyOiBcInZ2dnZcIixcbiAgICBtb250aDogXCJra1wiLFxuICAgIGRheTogXCJwcFwiXG4gIH0sXG4gIGZyOiB7XG4gICAgeWVhcjogXCJhYWFhXCIsXG4gICAgbW9udGg6IFwibW1cIixcbiAgICBkYXk6IFwiampcIlxuICB9LFxuICBmeToge1xuICAgIHllYXI6IFwiampqalwiLFxuICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgZGF5OiBcImRkXCJcbiAgfSxcbiAgZ2E6IHtcbiAgICB5ZWFyOiBcImJiYmJcIixcbiAgICBtb250aDogXCJtbVwiLFxuICAgIGRheTogXCJsbFwiXG4gIH0sXG4gIGdkOiB7XG4gICAgeWVhcjogXCJiYmJiXCIsXG4gICAgbW9udGg6IFwibW1cIixcbiAgICBkYXk6IFwibGxcIlxuICB9LFxuICBnbDoge1xuICAgIHllYXI6IFwiYWFhYVwiLFxuICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgZGF5OiBcImRkXCJcbiAgfSxcbiAgaGU6IHtcbiAgICB5ZWFyOiBcIlxcdTA1RTlcXHUwNUUwXFx1MDVENFwiLFxuICAgIG1vbnRoOiBcIlxcdTA1RDdcXHUwNUQ1XFx1MDVEM1xcdTA1RTlcIixcbiAgICBkYXk6IFwiXFx1MDVEOVxcdTA1RDVcXHUwNUREXCJcbiAgfSxcbiAgaHI6IHtcbiAgICB5ZWFyOiBcImdnZ2dcIixcbiAgICBtb250aDogXCJtbVwiLFxuICAgIGRheTogXCJkZFwiXG4gIH0sXG4gIGhzYjoge1xuICAgIHllYXI6IFwibGxsbFwiLFxuICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgZGF5OiBcImRkXCJcbiAgfSxcbiAgaHU6IHtcbiAgICB5ZWFyOiBcIlxceEU5XFx4RTlcXHhFOVxceEU5XCIsXG4gICAgbW9udGg6IFwiaGhcIixcbiAgICBkYXk6IFwibm5cIlxuICB9LFxuICBpYToge1xuICAgIHllYXI6IFwiYWFhYVwiLFxuICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgZGF5OiBcImRkXCJcbiAgfSxcbiAgaWQ6IHtcbiAgICB5ZWFyOiBcInR0dHRcIixcbiAgICBtb250aDogXCJiYlwiLFxuICAgIGRheTogXCJoaFwiXG4gIH0sXG4gIGl0OiB7XG4gICAgeWVhcjogXCJhYWFhXCIsXG4gICAgbW9udGg6IFwibW1cIixcbiAgICBkYXk6IFwiZ2dcIlxuICB9LFxuICBqYToge1xuICAgIHllYXI6IFwiIFxcdTVFNzQgXCIsXG4gICAgbW9udGg6IFwiXFx1NjcwOFwiLFxuICAgIGRheTogXCJcXHU2NUU1XCJcbiAgfSxcbiAga2E6IHtcbiAgICB5ZWFyOiBcIlxcdTEwRUNcXHUxMEVDXFx1MTBFQ1xcdTEwRUNcIixcbiAgICBtb250aDogXCJcXHUxMEQ3XFx1MTBEN1wiLFxuICAgIGRheTogXCJcXHUxMEUwXFx1MTBFMFwiXG4gIH0sXG4gIGtrOiB7XG4gICAgeWVhcjogXCJcXHUwNDM2XFx1MDQzNlxcdTA0MzZcXHUwNDM2XCIsXG4gICAgbW9udGg6IFwiXFx1MDQzMFxcdTA0MzBcIixcbiAgICBkYXk6IFwiXFx1MDQzQVxcdTA0M0FcIlxuICB9LFxuICBrbjoge1xuICAgIHllYXI6IFwiXFx1MENCNVxcdTBDQjVcXHUwQ0I1XFx1MENCNVwiLFxuICAgIG1vbnRoOiBcIlxcdTBDQUVcXHUwQ0JGXFx1MENBRVxcdTBDQzBcIixcbiAgICBkYXk6IFwiXFx1MENBNlxcdTBDQkZcXHUwQ0E2XFx1MENCRlwiXG4gIH0sXG4gIGtvOiB7XG4gICAgeWVhcjogXCJcXHVDNUYwXFx1QjNDNFwiLFxuICAgIG1vbnRoOiBcIlxcdUM2RDRcIixcbiAgICBkYXk6IFwiXFx1Qzc3Q1wiXG4gIH0sXG4gIGxiOiB7XG4gICAgeWVhcjogXCJqampqXCIsXG4gICAgbW9udGg6IFwibW1cIixcbiAgICBkYXk6IFwiZGRcIlxuICB9LFxuICBsbzoge1xuICAgIHllYXI6IFwiXFx1MEU5QlxcdTBFOUJcXHUwRTlCXFx1MEU5QlwiLFxuICAgIG1vbnRoOiBcIlxcdTBFOTRcXHUwRTk0XCIsXG4gICAgZGF5OiBcIlxcdTBFQTdcXHUwRUE3XCJcbiAgfSxcbiAgbHQ6IHtcbiAgICB5ZWFyOiBcIm1tbW1cIixcbiAgICBtb250aDogXCJtbVwiLFxuICAgIGRheTogXCJkZFwiXG4gIH0sXG4gIGx2OiB7XG4gICAgeWVhcjogXCJnZ2dnXCIsXG4gICAgbW9udGg6IFwibW1cIixcbiAgICBkYXk6IFwiZGRcIlxuICB9LFxuICBtZWg6IHtcbiAgICB5ZWFyOiBcImFhYWFcIixcbiAgICBtb250aDogXCJtbVwiLFxuICAgIGRheTogXCJkZFwiXG4gIH0sXG4gIG1sOiB7XG4gICAgeWVhcjogXCJcXHUwRDM1XFx1MEQ3Q1xcdTBEMzdcXHUwRDAyXCIsXG4gICAgbW9udGg6IFwiXFx1MEQyRVxcdTBEM0VcXHUwRDM4XFx1MEQwMlwiLFxuICAgIGRheTogXCJcXHUwRDI0XFx1MEQ0MFxcdTBEMkZcXHUwRDI0XFx1MEQzRlwiXG4gIH0sXG4gIG1zOiB7XG4gICAgeWVhcjogXCJ0dHR0XCIsXG4gICAgbW9udGg6IFwibW1cIixcbiAgICBkYXk6IFwiaGhcIlxuICB9LFxuICBubDoge1xuICAgIHllYXI6IFwiampqalwiLFxuICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgZGF5OiBcImRkXCJcbiAgfSxcbiAgbm46IHtcbiAgICB5ZWFyOiBcIlxceEU1XFx4RTVcXHhFNVxceEU1XCIsXG4gICAgbW9udGg6IFwibW1cIixcbiAgICBkYXk6IFwiZGRcIlxuICB9LFxuICBubzoge1xuICAgIHllYXI6IFwiXFx4RTVcXHhFNVxceEU1XFx4RTVcIixcbiAgICBtb250aDogXCJtbVwiLFxuICAgIGRheTogXCJkZFwiXG4gIH0sXG4gIG9jOiB7XG4gICAgeWVhcjogXCJhYWFhXCIsXG4gICAgbW9udGg6IFwibW1cIixcbiAgICBkYXk6IFwiampcIlxuICB9LFxuICBwbDoge1xuICAgIHllYXI6IFwicnJyclwiLFxuICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgZGF5OiBcImRkXCJcbiAgfSxcbiAgcHQ6IHtcbiAgICB5ZWFyOiBcImFhYWFcIixcbiAgICBtb250aDogXCJtbVwiLFxuICAgIGRheTogXCJkZFwiXG4gIH0sXG4gIHJtOiB7XG4gICAgeWVhcjogXCJvb29vXCIsXG4gICAgbW9udGg6IFwibW1cIixcbiAgICBkYXk6IFwiZGRcIlxuICB9LFxuICBybzoge1xuICAgIHllYXI6IFwiYWFhYVwiLFxuICAgIG1vbnRoOiBcImxsXCIsXG4gICAgZGF5OiBcInp6XCJcbiAgfSxcbiAgcnU6IHtcbiAgICB5ZWFyOiBcIlxcdTA0MzNcXHUwNDMzXFx1MDQzM1xcdTA0MzNcIixcbiAgICBtb250aDogXCJcXHUwNDNDXFx1MDQzQ1wiLFxuICAgIGRheTogXCJcXHUwNDM0XFx1MDQzNFwiXG4gIH0sXG4gIHNjOiB7XG4gICAgeWVhcjogXCJhYWFhXCIsXG4gICAgbW9udGg6IFwibW1cIixcbiAgICBkYXk6IFwiZGRcIlxuICB9LFxuICBzY246IHtcbiAgICB5ZWFyOiBcImFhYWFcIixcbiAgICBtb250aDogXCJtbVwiLFxuICAgIGRheTogXCJqalwiXG4gIH0sXG4gIHNrOiB7XG4gICAgeWVhcjogXCJycnJyXCIsXG4gICAgbW9udGg6IFwibW1cIixcbiAgICBkYXk6IFwiZGRcIlxuICB9LFxuICBzbDoge1xuICAgIHllYXI6IFwibGxsbFwiLFxuICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgZGF5OiBcImRkXCJcbiAgfSxcbiAgc3I6IHtcbiAgICB5ZWFyOiBcIlxcdTA0MzNcXHUwNDMzXFx1MDQzM1xcdTA0MzNcIixcbiAgICBtb250aDogXCJcXHUwNDNDXFx1MDQzQ1wiLFxuICAgIGRheTogXCJcXHUwNDM0XFx1MDQzNFwiXG4gIH0sXG4gIHN2OiB7XG4gICAgeWVhcjogXCJcXHhFNVxceEU1XFx4RTVcXHhFNVwiLFxuICAgIG1vbnRoOiBcIm1tXCIsXG4gICAgZGF5OiBcImRkXCJcbiAgfSxcbiAgc3psOiB7XG4gICAgeWVhcjogXCJycnJyXCIsXG4gICAgbW9udGg6IFwibW1cIixcbiAgICBkYXk6IFwiZGRcIlxuICB9LFxuICB0Zzoge1xuICAgIHllYXI6IFwiXFx1MDQ0MVxcdTA0NDFcXHUwNDQxXFx1MDQ0MVwiLFxuICAgIG1vbnRoOiBcIlxcdTA0M0NcXHUwNDNDXCIsXG4gICAgZGF5OiBcIlxcdTA0NDBcXHUwNDQwXCJcbiAgfSxcbiAgdGg6IHtcbiAgICB5ZWFyOiBcIlxcdTBFMUJcXHUwRTFCXFx1MEUxQlxcdTBFMUJcIixcbiAgICBtb250aDogXCJcXHUwRTE0XFx1MEUxNFwiLFxuICAgIGRheTogXCJcXHUwRTI3XFx1MEUyN1wiXG4gIH0sXG4gIHRyOiB7XG4gICAgeWVhcjogXCJ5eXl5XCIsXG4gICAgbW9udGg6IFwiYWFcIixcbiAgICBkYXk6IFwiZ2dcIlxuICB9LFxuICB1azoge1xuICAgIHllYXI6IFwiXFx1MDQ0MFxcdTA0NDBcXHUwNDQwXFx1MDQ0MFwiLFxuICAgIG1vbnRoOiBcIlxcdTA0M0NcXHUwNDNDXCIsXG4gICAgZGF5OiBcIlxcdTA0MzRcXHUwNDM0XCJcbiAgfSxcbiAgXCJ6aC1DTlwiOiB7XG4gICAgeWVhcjogXCJcXHU1RTc0XCIsXG4gICAgbW9udGg6IFwiXFx1NjcwOFwiLFxuICAgIGRheTogXCJcXHU2NUU1XCJcbiAgfSxcbiAgXCJ6aC1UV1wiOiB7XG4gICAgeWVhcjogXCJcXHU1RTc0XCIsXG4gICAgbW9udGg6IFwiXFx1NjcwOFwiLFxuICAgIGRheTogXCJcXHU2NUU1XCJcbiAgfVxufSwgXCJlblwiKTtcbmZ1bmN0aW9uIERyb3Bkb3duTWVudUNvbnRlbnQocHJvcHMpIHtcbiAgY29uc3Qgcm9vdENvbnRleHQgPSB1c2VNZW51Um9vdENvbnRleHQoKTtcbiAgY29uc3QgY29udGV4dCA9IHVzZU1lbnVDb250ZXh0KCk7XG4gIGNvbnN0IFtsb2NhbCwgb3RoZXJzXSA9IHNwbGl0UHJvcHMocHJvcHMsIFtcIm9uQ2xvc2VBdXRvRm9jdXNcIiwgXCJvbkludGVyYWN0T3V0c2lkZVwiXSk7XG4gIGxldCBoYXNJbnRlcmFjdGVkT3V0c2lkZSA9IGZhbHNlO1xuICBjb25zdCBvbkNsb3NlQXV0b0ZvY3VzID0gKGUyKSA9PiB7XG4gICAgbG9jYWwub25DbG9zZUF1dG9Gb2N1cz8uKGUyKTtcbiAgICBpZiAoIWhhc0ludGVyYWN0ZWRPdXRzaWRlKSB7XG4gICAgICBmb2N1c1dpdGhvdXRTY3JvbGxpbmcoY29udGV4dC50cmlnZ2VyUmVmKCkpO1xuICAgIH1cbiAgICBoYXNJbnRlcmFjdGVkT3V0c2lkZSA9IGZhbHNlO1xuICAgIGUyLnByZXZlbnREZWZhdWx0KCk7XG4gIH07XG4gIGNvbnN0IG9uSW50ZXJhY3RPdXRzaWRlID0gKGUyKSA9PiB7XG4gICAgbG9jYWwub25JbnRlcmFjdE91dHNpZGU/LihlMik7XG4gICAgaWYgKCFyb290Q29udGV4dC5pc01vZGFsKCkgfHwgZTIuZGV0YWlsLmlzQ29udGV4dE1lbnUpIHtcbiAgICAgIGhhc0ludGVyYWN0ZWRPdXRzaWRlID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBjcmVhdGVDb21wb25lbnQoTWVudUNvbnRlbnQsIG1lcmdlUHJvcHMoe1xuICAgIG9uQ2xvc2VBdXRvRm9jdXMsXG4gICAgb25JbnRlcmFjdE91dHNpZGVcbiAgfSwgb3RoZXJzKSk7XG59XG5mdW5jdGlvbiBEcm9wZG93bk1lbnVSb290KHByb3BzKSB7XG4gIGNvbnN0IGRlZmF1bHRJZCA9IGBkcm9wZG93bm1lbnUtJHtjcmVhdGVVbmlxdWVJZCgpfWA7XG4gIHByb3BzID0gbWVyZ2VEZWZhdWx0UHJvcHMoe1xuICAgIGlkOiBkZWZhdWx0SWRcbiAgfSwgcHJvcHMpO1xuICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KE1lbnVSb290LCBwcm9wcyk7XG59XG52YXIgaW5kZXgkZiA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBBcnJvdzogUG9wcGVyQXJyb3csXG4gIENoZWNrYm94SXRlbTogTWVudUNoZWNrYm94SXRlbSxcbiAgQ29udGVudDogRHJvcGRvd25NZW51Q29udGVudCxcbiAgR3JvdXA6IE1lbnVHcm91cCxcbiAgR3JvdXBMYWJlbDogTWVudUdyb3VwTGFiZWwsXG4gIEljb246IE1lbnVJY29uLFxuICBJdGVtOiBNZW51SXRlbSxcbiAgSXRlbURlc2NyaXB0aW9uOiBNZW51SXRlbURlc2NyaXB0aW9uLFxuICBJdGVtSW5kaWNhdG9yOiBNZW51SXRlbUluZGljYXRvcixcbiAgSXRlbUxhYmVsOiBNZW51SXRlbUxhYmVsLFxuICBQb3J0YWw6IE1lbnVQb3J0YWwsXG4gIFJhZGlvR3JvdXA6IE1lbnVSYWRpb0dyb3VwLFxuICBSYWRpb0l0ZW06IE1lbnVSYWRpb0l0ZW0sXG4gIFJvb3Q6IERyb3Bkb3duTWVudVJvb3QsXG4gIFNlcGFyYXRvcjogU2VwYXJhdG9yUm9vdCxcbiAgU3ViOiBNZW51U3ViLFxuICBTdWJDb250ZW50OiBNZW51U3ViQ29udGVudCxcbiAgU3ViVHJpZ2dlcjogTWVudVN1YlRyaWdnZXIsXG4gIFRyaWdnZXI6IE1lbnVUcmlnZ2VyXG59KTtcbmNyZWF0ZUNvbnRleHQoKTtcbmNyZWF0ZUNvbnRleHQoKTtcbmNyZWF0ZUNvbnRleHQoKTtcbmNyZWF0ZUNvbnRleHQoKTtcbmNyZWF0ZUNvbnRleHQoKTtcbnZhciBSYWRpb0dyb3VwQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbmZ1bmN0aW9uIHVzZVJhZGlvR3JvdXBDb250ZXh0KCkge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChSYWRpb0dyb3VwQ29udGV4dCk7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJba29iYWx0ZV06IGB1c2VSYWRpb0dyb3VwQ29udGV4dGAgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGBSYWRpb0dyb3VwYCBjb21wb25lbnRcIik7XG4gIH1cbiAgcmV0dXJuIGNvbnRleHQ7XG59XG52YXIgUmFkaW9Hcm91cEl0ZW1Db250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuZnVuY3Rpb24gdXNlUmFkaW9Hcm91cEl0ZW1Db250ZXh0KCkge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChSYWRpb0dyb3VwSXRlbUNvbnRleHQpO1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiW2tvYmFsdGVdOiBgdXNlUmFkaW9Hcm91cEl0ZW1Db250ZXh0YCBtdXN0IGJlIHVzZWQgd2l0aGluIGEgYFJhZGlvR3JvdXAuSXRlbWAgY29tcG9uZW50XCIpO1xuICB9XG4gIHJldHVybiBjb250ZXh0O1xufVxuZnVuY3Rpb24gUmFkaW9Hcm91cEl0ZW0ocHJvcHMpIHtcbiAgY29uc3QgZm9ybUNvbnRyb2xDb250ZXh0ID0gdXNlRm9ybUNvbnRyb2xDb250ZXh0KCk7XG4gIGNvbnN0IHJhZGlvR3JvdXBDb250ZXh0ID0gdXNlUmFkaW9Hcm91cENvbnRleHQoKTtcbiAgY29uc3QgZGVmYXVsdElkID0gYCR7Zm9ybUNvbnRyb2xDb250ZXh0LmdlbmVyYXRlSWQoXCJpdGVtXCIpfS0ke2NyZWF0ZVVuaXF1ZUlkKCl9YDtcbiAgcHJvcHMgPSBtZXJnZURlZmF1bHRQcm9wcyh7XG4gICAgaWQ6IGRlZmF1bHRJZFxuICB9LCBwcm9wcyk7XG4gIGNvbnN0IFtsb2NhbCwgb3RoZXJzXSA9IHNwbGl0UHJvcHMocHJvcHMsIFtcInZhbHVlXCIsIFwiZGlzYWJsZWRcIiwgXCJvblBvaW50ZXJEb3duXCJdKTtcbiAgY29uc3QgW2lucHV0SWQsIHNldElucHV0SWRdID0gY3JlYXRlU2lnbmFsKCk7XG4gIGNvbnN0IFtsYWJlbElkLCBzZXRMYWJlbElkXSA9IGNyZWF0ZVNpZ25hbCgpO1xuICBjb25zdCBbZGVzY3JpcHRpb25JZCwgc2V0RGVzY3JpcHRpb25JZF0gPSBjcmVhdGVTaWduYWwoKTtcbiAgY29uc3QgW2lucHV0UmVmLCBzZXRJbnB1dFJlZl0gPSBjcmVhdGVTaWduYWwoKTtcbiAgY29uc3QgW2lzRm9jdXNlZCwgc2V0SXNGb2N1c2VkXSA9IGNyZWF0ZVNpZ25hbChmYWxzZSk7XG4gIGNvbnN0IGlzU2VsZWN0ZWQgPSBjcmVhdGVNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gcmFkaW9Hcm91cENvbnRleHQuaXNTZWxlY3RlZFZhbHVlKGxvY2FsLnZhbHVlKTtcbiAgfSk7XG4gIGNvbnN0IGlzRGlzYWJsZWQgPSBjcmVhdGVNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gbG9jYWwuZGlzYWJsZWQgfHwgZm9ybUNvbnRyb2xDb250ZXh0LmlzRGlzYWJsZWQoKSB8fCBmYWxzZTtcbiAgfSk7XG4gIGNvbnN0IG9uUG9pbnRlckRvd24gPSAoZTIpID0+IHtcbiAgICBjYWxsSGFuZGxlcihlMiwgbG9jYWwub25Qb2ludGVyRG93bik7XG4gICAgaWYgKGlzRm9jdXNlZCgpKSB7XG4gICAgICBlMi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgZGF0YXNldCA9IGNyZWF0ZU1lbW8oKCkgPT4gKHtcbiAgICAuLi5mb3JtQ29udHJvbENvbnRleHQuZGF0YXNldCgpLFxuICAgIFwiZGF0YS1kaXNhYmxlZFwiOiBpc0Rpc2FibGVkKCkgPyBcIlwiIDogdm9pZCAwLFxuICAgIFwiZGF0YS1jaGVja2VkXCI6IGlzU2VsZWN0ZWQoKSA/IFwiXCIgOiB2b2lkIDBcbiAgfSkpO1xuICBjb25zdCBjb250ZXh0ID0ge1xuICAgIHZhbHVlOiAoKSA9PiBsb2NhbC52YWx1ZSxcbiAgICBkYXRhc2V0LFxuICAgIGlzU2VsZWN0ZWQsXG4gICAgaXNEaXNhYmxlZCxcbiAgICBpbnB1dElkLFxuICAgIGxhYmVsSWQsXG4gICAgZGVzY3JpcHRpb25JZCxcbiAgICBpbnB1dFJlZixcbiAgICBzZWxlY3Q6ICgpID0+IHJhZGlvR3JvdXBDb250ZXh0LnNldFNlbGVjdGVkVmFsdWUobG9jYWwudmFsdWUpLFxuICAgIGdlbmVyYXRlSWQ6IGNyZWF0ZUdlbmVyYXRlSWQoKCkgPT4gb3RoZXJzLmlkKSxcbiAgICByZWdpc3RlcklucHV0OiBjcmVhdGVSZWdpc3RlcklkKHNldElucHV0SWQpLFxuICAgIHJlZ2lzdGVyTGFiZWw6IGNyZWF0ZVJlZ2lzdGVySWQoc2V0TGFiZWxJZCksXG4gICAgcmVnaXN0ZXJEZXNjcmlwdGlvbjogY3JlYXRlUmVnaXN0ZXJJZChzZXREZXNjcmlwdGlvbklkKSxcbiAgICBzZXRJc0ZvY3VzZWQsXG4gICAgc2V0SW5wdXRSZWZcbiAgfTtcbiAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChSYWRpb0dyb3VwSXRlbUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dCxcbiAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KFBvbHltb3JwaGljLCBtZXJnZVByb3BzKHtcbiAgICAgICAgYXM6IFwiZGl2XCIsXG4gICAgICAgIHJvbGU6IFwiZ3JvdXBcIixcbiAgICAgICAgb25Qb2ludGVyRG93blxuICAgICAgfSwgZGF0YXNldCwgb3RoZXJzKSk7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIFJhZGlvR3JvdXBJdGVtQ29udHJvbChwcm9wcykge1xuICBjb25zdCBjb250ZXh0ID0gdXNlUmFkaW9Hcm91cEl0ZW1Db250ZXh0KCk7XG4gIHByb3BzID0gbWVyZ2VEZWZhdWx0UHJvcHMoe1xuICAgIGlkOiBjb250ZXh0LmdlbmVyYXRlSWQoXCJjb250cm9sXCIpXG4gIH0sIHByb3BzKTtcbiAgY29uc3QgW2xvY2FsLCBvdGhlcnNdID0gc3BsaXRQcm9wcyhwcm9wcywgW1wib25DbGlja1wiLCBcIm9uS2V5RG93blwiXSk7XG4gIGNvbnN0IG9uQ2xpY2sgPSAoZTIpID0+IHtcbiAgICBjYWxsSGFuZGxlcihlMiwgbG9jYWwub25DbGljayk7XG4gICAgY29udGV4dC5zZWxlY3QoKTtcbiAgICBjb250ZXh0LmlucHV0UmVmKCk/LmZvY3VzKCk7XG4gIH07XG4gIGNvbnN0IG9uS2V5RG93biA9IChlMikgPT4ge1xuICAgIGNhbGxIYW5kbGVyKGUyLCBsb2NhbC5vbktleURvd24pO1xuICAgIGlmIChlMi5rZXkgPT09IEV2ZW50S2V5LlNwYWNlKSB7XG4gICAgICBjb250ZXh0LnNlbGVjdCgpO1xuICAgICAgY29udGV4dC5pbnB1dFJlZigpPy5mb2N1cygpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChQb2x5bW9ycGhpYywgbWVyZ2VQcm9wcyh7XG4gICAgYXM6IFwiZGl2XCIsXG4gICAgb25DbGljayxcbiAgICBvbktleURvd25cbiAgfSwgKCkgPT4gY29udGV4dC5kYXRhc2V0KCksIG90aGVycykpO1xufVxuZnVuY3Rpb24gUmFkaW9Hcm91cEl0ZW1EZXNjcmlwdGlvbihwcm9wcykge1xuICBjb25zdCBjb250ZXh0ID0gdXNlUmFkaW9Hcm91cEl0ZW1Db250ZXh0KCk7XG4gIHByb3BzID0gbWVyZ2VEZWZhdWx0UHJvcHMoe1xuICAgIGlkOiBjb250ZXh0LmdlbmVyYXRlSWQoXCJkZXNjcmlwdGlvblwiKVxuICB9LCBwcm9wcyk7XG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiBvbkNsZWFudXAoY29udGV4dC5yZWdpc3RlckRlc2NyaXB0aW9uKHByb3BzLmlkKSkpO1xuICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KFBvbHltb3JwaGljLCBtZXJnZVByb3BzKHtcbiAgICBhczogXCJkaXZcIlxuICB9LCAoKSA9PiBjb250ZXh0LmRhdGFzZXQoKSwgcHJvcHMpKTtcbn1cbmZ1bmN0aW9uIFJhZGlvR3JvdXBJdGVtSW5kaWNhdG9yKHByb3BzKSB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VSYWRpb0dyb3VwSXRlbUNvbnRleHQoKTtcbiAgcHJvcHMgPSBtZXJnZURlZmF1bHRQcm9wcyh7XG4gICAgaWQ6IGNvbnRleHQuZ2VuZXJhdGVJZChcImluZGljYXRvclwiKVxuICB9LCBwcm9wcyk7XG4gIGNvbnN0IFtsb2NhbCwgb3RoZXJzXSA9IHNwbGl0UHJvcHMocHJvcHMsIFtcInJlZlwiLCBcImZvcmNlTW91bnRcIl0pO1xuICBjb25zdCBwcmVzZW5jZSA9IGNyZWF0ZVByZXNlbmNlKCgpID0+IGxvY2FsLmZvcmNlTW91bnQgfHwgY29udGV4dC5pc1NlbGVjdGVkKCkpO1xuICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KFNob3csIHtcbiAgICBnZXQgd2hlbigpIHtcbiAgICAgIHJldHVybiBwcmVzZW5jZS5pc1ByZXNlbnQoKTtcbiAgICB9LFxuICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgIHJldHVybiBjcmVhdGVDb21wb25lbnQoUG9seW1vcnBoaWMsIG1lcmdlUHJvcHMoe1xuICAgICAgICBhczogXCJkaXZcIixcbiAgICAgICAgcmVmKHIkKSB7XG4gICAgICAgICAgY29uc3QgX3JlZiQgPSBtZXJnZVJlZnMocHJlc2VuY2Uuc2V0UmVmLCBsb2NhbC5yZWYpO1xuICAgICAgICAgIHR5cGVvZiBfcmVmJCA9PT0gXCJmdW5jdGlvblwiICYmIF9yZWYkKHIkKTtcbiAgICAgICAgfVxuICAgICAgfSwgKCkgPT4gY29udGV4dC5kYXRhc2V0KCksIG90aGVycykpO1xuICAgIH1cbiAgfSk7XG59XG52YXIgX3RtcGwkJDcgPSAvKiBAX19QVVJFX18gKi8gdGVtcGxhdGUoYDxpbnB1dCB0eXBlPVwicmFkaW9cIj5gKTtcbmZ1bmN0aW9uIFJhZGlvR3JvdXBJdGVtSW5wdXQocHJvcHMpIHtcbiAgY29uc3QgZm9ybUNvbnRyb2xDb250ZXh0ID0gdXNlRm9ybUNvbnRyb2xDb250ZXh0KCk7XG4gIGNvbnN0IHJhZGlvR3JvdXBDb250ZXh0ID0gdXNlUmFkaW9Hcm91cENvbnRleHQoKTtcbiAgY29uc3QgcmFkaW9Db250ZXh0ID0gdXNlUmFkaW9Hcm91cEl0ZW1Db250ZXh0KCk7XG4gIHByb3BzID0gbWVyZ2VEZWZhdWx0UHJvcHMoe1xuICAgIGlkOiByYWRpb0NvbnRleHQuZ2VuZXJhdGVJZChcImlucHV0XCIpXG4gIH0sIHByb3BzKTtcbiAgY29uc3QgW2xvY2FsLCBvdGhlcnNdID0gc3BsaXRQcm9wcyhwcm9wcywgW1wicmVmXCIsIFwic3R5bGVcIiwgXCJhcmlhLWxhYmVsbGVkYnlcIiwgXCJhcmlhLWRlc2NyaWJlZGJ5XCIsIFwib25DaGFuZ2VcIiwgXCJvbkZvY3VzXCIsIFwib25CbHVyXCJdKTtcbiAgY29uc3QgYXJpYUxhYmVsbGVkQnkgPSAoKSA9PiB7XG4gICAgcmV0dXJuIFtcbiAgICAgIGxvY2FsW1wiYXJpYS1sYWJlbGxlZGJ5XCJdLFxuICAgICAgcmFkaW9Db250ZXh0LmxhYmVsSWQoKSxcbiAgICAgIC8vIElmIHRoZXJlIGlzIGJvdGggYW4gYXJpYS1sYWJlbCBhbmQgYXJpYS1sYWJlbGxlZGJ5LCBhZGQgdGhlIGlucHV0IGl0c2VsZiBoYXMgYW4gYXJpYS1sYWJlbGxlZGJ5XG4gICAgICBsb2NhbFtcImFyaWEtbGFiZWxsZWRieVwiXSAhPSBudWxsICYmIG90aGVyc1tcImFyaWEtbGFiZWxcIl0gIT0gbnVsbCA/IG90aGVycy5pZCA6IHZvaWQgMFxuICAgIF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpIHx8IHZvaWQgMDtcbiAgfTtcbiAgY29uc3QgYXJpYURlc2NyaWJlZEJ5ID0gKCkgPT4ge1xuICAgIHJldHVybiBbbG9jYWxbXCJhcmlhLWRlc2NyaWJlZGJ5XCJdLCByYWRpb0NvbnRleHQuZGVzY3JpcHRpb25JZCgpLCByYWRpb0dyb3VwQ29udGV4dC5hcmlhRGVzY3JpYmVkQnkoKV0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpIHx8IHZvaWQgMDtcbiAgfTtcbiAgY29uc3Qgb25DaGFuZ2UgPSAoZTIpID0+IHtcbiAgICBjYWxsSGFuZGxlcihlMiwgbG9jYWwub25DaGFuZ2UpO1xuICAgIGUyLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHJhZGlvR3JvdXBDb250ZXh0LnNldFNlbGVjdGVkVmFsdWUocmFkaW9Db250ZXh0LnZhbHVlKCkpO1xuICAgIGNvbnN0IHRhcmdldCA9IGUyLnRhcmdldDtcbiAgICB0YXJnZXQuY2hlY2tlZCA9IHJhZGlvQ29udGV4dC5pc1NlbGVjdGVkKCk7XG4gIH07XG4gIGNvbnN0IG9uRm9jdXMgPSAoZTIpID0+IHtcbiAgICBjYWxsSGFuZGxlcihlMiwgbG9jYWwub25Gb2N1cyk7XG4gICAgcmFkaW9Db250ZXh0LnNldElzRm9jdXNlZCh0cnVlKTtcbiAgfTtcbiAgY29uc3Qgb25CbHVyID0gKGUyKSA9PiB7XG4gICAgY2FsbEhhbmRsZXIoZTIsIGxvY2FsLm9uQmx1cik7XG4gICAgcmFkaW9Db250ZXh0LnNldElzRm9jdXNlZChmYWxzZSk7XG4gIH07XG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiBvbkNsZWFudXAocmFkaW9Db250ZXh0LnJlZ2lzdGVySW5wdXQob3RoZXJzLmlkKSkpO1xuICByZXR1cm4gKCgpID0+IHtcbiAgICBjb25zdCBfZWwkID0gX3RtcGwkJDcoKTtcbiAgICBfZWwkLmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIG9uQmx1cik7XG4gICAgX2VsJC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgb25Gb2N1cyk7XG4gICAgX2VsJC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIG9uQ2hhbmdlKTtcbiAgICBjb25zdCBfcmVmJCA9IG1lcmdlUmVmcyhyYWRpb0NvbnRleHQuc2V0SW5wdXRSZWYsIGxvY2FsLnJlZik7XG4gICAgdHlwZW9mIF9yZWYkID09PSBcImZ1bmN0aW9uXCIgJiYgdXNlKF9yZWYkLCBfZWwkKTtcbiAgICBzcHJlYWQoX2VsJCwgbWVyZ2VQcm9wcyh7XG4gICAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1Db250cm9sQ29udGV4dC5uYW1lKCk7XG4gICAgICB9LFxuICAgICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gcmFkaW9Db250ZXh0LnZhbHVlKCk7XG4gICAgICB9LFxuICAgICAgZ2V0IGNoZWNrZWQoKSB7XG4gICAgICAgIHJldHVybiByYWRpb0NvbnRleHQuaXNTZWxlY3RlZCgpO1xuICAgICAgfSxcbiAgICAgIGdldCByZXF1aXJlZCgpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1Db250cm9sQ29udGV4dC5pc1JlcXVpcmVkKCk7XG4gICAgICB9LFxuICAgICAgZ2V0IGRpc2FibGVkKCkge1xuICAgICAgICByZXR1cm4gcmFkaW9Db250ZXh0LmlzRGlzYWJsZWQoKTtcbiAgICAgIH0sXG4gICAgICBnZXQgcmVhZG9ubHkoKSB7XG4gICAgICAgIHJldHVybiBmb3JtQ29udHJvbENvbnRleHQuaXNSZWFkT25seSgpO1xuICAgICAgfSxcbiAgICAgIGdldCBzdHlsZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi52aXN1YWxseUhpZGRlblN0eWxlcyxcbiAgICAgICAgICAuLi5sb2NhbC5zdHlsZVxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIGdldCBbXCJhcmlhLWxhYmVsbGVkYnlcIl0oKSB7XG4gICAgICAgIHJldHVybiBhcmlhTGFiZWxsZWRCeSgpO1xuICAgICAgfSxcbiAgICAgIGdldCBbXCJhcmlhLWRlc2NyaWJlZGJ5XCJdKCkge1xuICAgICAgICByZXR1cm4gYXJpYURlc2NyaWJlZEJ5KCk7XG4gICAgICB9XG4gICAgfSwgKCkgPT4gcmFkaW9Db250ZXh0LmRhdGFzZXQoKSwgb3RoZXJzKSwgZmFsc2UsIGZhbHNlKTtcbiAgICByZXR1cm4gX2VsJDtcbiAgfSkoKTtcbn1cbnZhciBfdG1wbCQkNiA9IC8qIEBfX1BVUkVfXyAqLyB0ZW1wbGF0ZShgPGxhYmVsPmApO1xuZnVuY3Rpb24gUmFkaW9Hcm91cEl0ZW1MYWJlbChwcm9wcykge1xuICBjb25zdCBjb250ZXh0ID0gdXNlUmFkaW9Hcm91cEl0ZW1Db250ZXh0KCk7XG4gIHByb3BzID0gbWVyZ2VEZWZhdWx0UHJvcHMoe1xuICAgIGlkOiBjb250ZXh0LmdlbmVyYXRlSWQoXCJsYWJlbFwiKVxuICB9LCBwcm9wcyk7XG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiBvbkNsZWFudXAoY29udGV4dC5yZWdpc3RlckxhYmVsKHByb3BzLmlkKSkpO1xuICByZXR1cm4gKCgpID0+IHtcbiAgICBjb25zdCBfZWwkID0gX3RtcGwkJDYoKTtcbiAgICBzcHJlYWQoX2VsJCwgbWVyZ2VQcm9wcyh7XG4gICAgICBnZXQgW1wiZm9yXCJdKCkge1xuICAgICAgICByZXR1cm4gY29udGV4dC5pbnB1dElkKCk7XG4gICAgICB9XG4gICAgfSwgKCkgPT4gY29udGV4dC5kYXRhc2V0KCksIHByb3BzKSwgZmFsc2UsIGZhbHNlKTtcbiAgICByZXR1cm4gX2VsJDtcbiAgfSkoKTtcbn1cbmZ1bmN0aW9uIFJhZGlvR3JvdXBMYWJlbChwcm9wcykge1xuICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KEZvcm1Db250cm9sTGFiZWwsIG1lcmdlUHJvcHMoe1xuICAgIGFzOiBcInNwYW5cIlxuICB9LCBwcm9wcykpO1xufVxuZnVuY3Rpb24gUmFkaW9Hcm91cFJvb3QocHJvcHMpIHtcbiAgbGV0IHJlZjtcbiAgY29uc3QgZGVmYXVsdElkID0gYHJhZGlvZ3JvdXAtJHtjcmVhdGVVbmlxdWVJZCgpfWA7XG4gIHByb3BzID0gbWVyZ2VEZWZhdWx0UHJvcHMoe1xuICAgIGlkOiBkZWZhdWx0SWQsXG4gICAgb3JpZW50YXRpb246IFwidmVydGljYWxcIlxuICB9LCBwcm9wcyk7XG4gIGNvbnN0IFtsb2NhbCwgZm9ybUNvbnRyb2xQcm9wcywgb3RoZXJzXSA9IHNwbGl0UHJvcHMocHJvcHMsIFtcInJlZlwiLCBcInZhbHVlXCIsIFwiZGVmYXVsdFZhbHVlXCIsIFwib25DaGFuZ2VcIiwgXCJvcmllbnRhdGlvblwiLCBcImFyaWEtbGFiZWxsZWRieVwiLCBcImFyaWEtZGVzY3JpYmVkYnlcIl0sIEZPUk1fQ09OVFJPTF9QUk9QX05BTUVTKTtcbiAgY29uc3QgW3NlbGVjdGVkLCBzZXRTZWxlY3RlZF0gPSBjcmVhdGVDb250cm9sbGFibGVTaWduYWwoe1xuICAgIHZhbHVlOiAoKSA9PiBsb2NhbC52YWx1ZSxcbiAgICBkZWZhdWx0VmFsdWU6ICgpID0+IGxvY2FsLmRlZmF1bHRWYWx1ZSxcbiAgICBvbkNoYW5nZTogKHZhbHVlKSA9PiBsb2NhbC5vbkNoYW5nZT8uKHZhbHVlKVxuICB9KTtcbiAgY29uc3Qge1xuICAgIGZvcm1Db250cm9sQ29udGV4dFxuICB9ID0gY3JlYXRlRm9ybUNvbnRyb2woZm9ybUNvbnRyb2xQcm9wcyk7XG4gIGNyZWF0ZUZvcm1SZXNldExpc3RlbmVyKCgpID0+IHJlZiwgKCkgPT4gc2V0U2VsZWN0ZWQobG9jYWwuZGVmYXVsdFZhbHVlID8/IFwiXCIpKTtcbiAgY29uc3QgYXJpYUxhYmVsbGVkQnkgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGZvcm1Db250cm9sQ29udGV4dC5nZXRBcmlhTGFiZWxsZWRCeShhY2Nlc3MoZm9ybUNvbnRyb2xQcm9wcy5pZCksIG90aGVyc1tcImFyaWEtbGFiZWxcIl0sIGxvY2FsW1wiYXJpYS1sYWJlbGxlZGJ5XCJdKTtcbiAgfTtcbiAgY29uc3QgYXJpYURlc2NyaWJlZEJ5ID0gKCkgPT4ge1xuICAgIHJldHVybiBmb3JtQ29udHJvbENvbnRleHQuZ2V0QXJpYURlc2NyaWJlZEJ5KGxvY2FsW1wiYXJpYS1kZXNjcmliZWRieVwiXSk7XG4gIH07XG4gIGNvbnN0IGlzU2VsZWN0ZWRWYWx1ZSA9ICh2YWx1ZSkgPT4ge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gc2VsZWN0ZWQoKTtcbiAgfTtcbiAgY29uc3QgY29udGV4dCA9IHtcbiAgICBhcmlhRGVzY3JpYmVkQnksXG4gICAgaXNTZWxlY3RlZFZhbHVlLFxuICAgIHNldFNlbGVjdGVkVmFsdWU6ICh2YWx1ZSkgPT4ge1xuICAgICAgaWYgKGZvcm1Db250cm9sQ29udGV4dC5pc1JlYWRPbmx5KCkgfHwgZm9ybUNvbnRyb2xDb250ZXh0LmlzRGlzYWJsZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZXRTZWxlY3RlZCh2YWx1ZSk7XG4gICAgICByZWY/LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbdHlwZT0ncmFkaW8nXVwiKS5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgICBjb25zdCByYWRpbyA9IGVsO1xuICAgICAgICByYWRpby5jaGVja2VkID0gaXNTZWxlY3RlZFZhbHVlKHJhZGlvLnZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChGb3JtQ29udHJvbENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogZm9ybUNvbnRyb2xDb250ZXh0LFxuICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgIHJldHVybiBjcmVhdGVDb21wb25lbnQoUmFkaW9Hcm91cENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IGNvbnRleHQsXG4gICAgICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KFBvbHltb3JwaGljLCBtZXJnZVByb3BzKHtcbiAgICAgICAgICAgIGFzOiBcImRpdlwiLFxuICAgICAgICAgICAgcmVmKHIkKSB7XG4gICAgICAgICAgICAgIGNvbnN0IF9yZWYkID0gbWVyZ2VSZWZzKChlbCkgPT4gcmVmID0gZWwsIGxvY2FsLnJlZik7XG4gICAgICAgICAgICAgIHR5cGVvZiBfcmVmJCA9PT0gXCJmdW5jdGlvblwiICYmIF9yZWYkKHIkKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByb2xlOiBcInJhZGlvZ3JvdXBcIixcbiAgICAgICAgICAgIGdldCBpZCgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGFjY2Vzcyhmb3JtQ29udHJvbFByb3BzLmlkKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgW1wiYXJpYS1pbnZhbGlkXCJdKCkge1xuICAgICAgICAgICAgICByZXR1cm4gZm9ybUNvbnRyb2xDb250ZXh0LnZhbGlkYXRpb25TdGF0ZSgpID09PSBcImludmFsaWRcIiB8fCB2b2lkIDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IFtcImFyaWEtcmVxdWlyZWRcIl0oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmb3JtQ29udHJvbENvbnRleHQuaXNSZXF1aXJlZCgpIHx8IHZvaWQgMDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgW1wiYXJpYS1kaXNhYmxlZFwiXSgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZvcm1Db250cm9sQ29udGV4dC5pc0Rpc2FibGVkKCkgfHwgdm9pZCAwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldCBbXCJhcmlhLXJlYWRvbmx5XCJdKCkge1xuICAgICAgICAgICAgICByZXR1cm4gZm9ybUNvbnRyb2xDb250ZXh0LmlzUmVhZE9ubHkoKSB8fCB2b2lkIDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IFtcImFyaWEtb3JpZW50YXRpb25cIl0oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBsb2NhbC5vcmllbnRhdGlvbjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgW1wiYXJpYS1sYWJlbGxlZGJ5XCJdKCkge1xuICAgICAgICAgICAgICByZXR1cm4gYXJpYUxhYmVsbGVkQnkoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgW1wiYXJpYS1kZXNjcmliZWRieVwiXSgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGFyaWFEZXNjcmliZWRCeSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sICgpID0+IGZvcm1Db250cm9sQ29udGV4dC5kYXRhc2V0KCksIG90aGVycykpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufVxudmFyIGluZGV4JDkgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgRGVzY3JpcHRpb246IEZvcm1Db250cm9sRGVzY3JpcHRpb24sXG4gIEVycm9yTWVzc2FnZTogRm9ybUNvbnRyb2xFcnJvck1lc3NhZ2UsXG4gIEl0ZW06IFJhZGlvR3JvdXBJdGVtLFxuICBJdGVtQ29udHJvbDogUmFkaW9Hcm91cEl0ZW1Db250cm9sLFxuICBJdGVtRGVzY3JpcHRpb246IFJhZGlvR3JvdXBJdGVtRGVzY3JpcHRpb24sXG4gIEl0ZW1JbmRpY2F0b3I6IFJhZGlvR3JvdXBJdGVtSW5kaWNhdG9yLFxuICBJdGVtSW5wdXQ6IFJhZGlvR3JvdXBJdGVtSW5wdXQsXG4gIEl0ZW1MYWJlbDogUmFkaW9Hcm91cEl0ZW1MYWJlbCxcbiAgTGFiZWw6IFJhZGlvR3JvdXBMYWJlbCxcbiAgUm9vdDogUmFkaW9Hcm91cFJvb3Rcbn0pO1xuY3JlYXRlQ29udGV4dCgpO1xuY3JlYXRlQ29udGV4dCgpO1xuY3JlYXRlQ29udGV4dCgpO1xuY3JlYXRlQ29udGV4dCgpO1xuY3JlYXRlQ29udGV4dCgpO1xuY3JlYXRlQ29udGV4dCgpO1xuY3JlYXRlQ29udGV4dCgpO1xuY3JlYXRlQ29udGV4dCgpO1xuZGVsZWdhdGVFdmVudHMoW1wiZm9jdXNpblwiLCBcImZvY3Vzb3V0XCIsIFwicG9pbnRlcm1vdmVcIl0pO1xuZGVsZWdhdGVFdmVudHMoW1wia2V5ZG93blwiLCBcInBvaW50ZXJkb3duXCIsIFwicG9pbnRlcm1vdmVcIiwgXCJwb2ludGVydXBcIl0pO1xuY3JlYXRlQ29udGV4dCgpO1xuXG4vLyBzcmMvdGhlbWUudHNcbnZhciBTaGFkb3dWYXJpYW50cyA9IHtcbiAgeHM6IFwiMCAxcHggMnB4IDAgcmdiKDAgMCAwIC8gMC4wNSlcIixcbiAgc206IFwiMCAxcHggM3B4IDAgY29sb3IsIDAgMXB4IDJweCAtMXB4IGNvbG9yXCIsXG4gIG1kOiBcIjAgNHB4IDZweCAtMXB4IGNvbG9yLCAwIDJweCA0cHggLTJweCBjb2xvclwiLFxuICBsZzogXCIwIDEwcHggMTVweCAtM3B4IGNvbG9yLCAwIDRweCA2cHggLTRweCBjb2xvclwiLFxuICB4bDogXCIwIDIwcHggMjVweCAtNXB4IGNvbG9yLCAwIDhweCAxMHB4IC02cHggY29sb3JcIixcbiAgXCIyeGxcIjogXCIwIDI1cHggNTBweCAtMTJweCBjb2xvclwiLFxuICBpbm5lcjogXCJpbnNldCAwIDJweCA0cHggMCBjb2xvclwiLFxuICBub25lOiBcIm5vbmVcIlxufTtcbnZhciBnZXRTaGFkb3cgPSAodmFyaWFudCwgY29sb3IgPSBcIlwiKSA9PiB7XG4gIHJldHVybiBTaGFkb3dWYXJpYW50c1t2YXJpYW50XS5yZXBsYWNlKC9jb2xvci9nLCBjb2xvcik7XG59O1xudmFyIFNoYWRvdyA9IHtcbiAgeHM6IChjb2xvciA9IFwicmdiKDAgMCAwIC8gMC4xKVwiKSA9PiBnZXRTaGFkb3coXCJ4c1wiLCBjb2xvciksXG4gIHNtOiAoY29sb3IgPSBcInJnYigwIDAgMCAvIDAuMSlcIikgPT4gZ2V0U2hhZG93KFwic21cIiwgY29sb3IpLFxuICBtZDogKGNvbG9yID0gXCJyZ2IoMCAwIDAgLyAwLjEpXCIpID0+IGdldFNoYWRvdyhcIm1kXCIsIGNvbG9yKSxcbiAgbGc6IChjb2xvciA9IFwicmdiKDAgMCAwIC8gMC4xKVwiKSA9PiBnZXRTaGFkb3coXCJsZ1wiLCBjb2xvciksXG4gIHhsOiAoY29sb3IgPSBcInJnYigwIDAgMCAvIDAuMSlcIikgPT4gZ2V0U2hhZG93KFwieGxcIiwgY29sb3IpLFxuICBcIjJ4bFwiOiAoY29sb3IgPSBcInJnYigwIDAgMCAvIDAuMjUpXCIpID0+IGdldFNoYWRvdyhcIjJ4bFwiLCBjb2xvciksXG4gIGlubmVyOiAoY29sb3IgPSBcInJnYigwIDAgMCAvIDAuMDUpXCIpID0+IGdldFNoYWRvdyhcImlubmVyXCIsIGNvbG9yKSxcbiAgbm9uZTogKCkgPT4gZ2V0U2hhZG93KFwibm9uZVwiKVxufTtcbnZhciB0b2tlbnMgPSB7XG4gIGNvbG9yczoge1xuICAgIGluaGVyaXQ6IFwiaW5oZXJpdFwiLFxuICAgIGN1cnJlbnQ6IFwiY3VycmVudENvbG9yXCIsXG4gICAgdHJhbnNwYXJlbnQ6IFwidHJhbnNwYXJlbnRcIixcbiAgICBibGFjazogXCIjMDAwMDAwXCIsXG4gICAgd2hpdGU6IFwiI2ZmZmZmZlwiLFxuICAgIG5ldXRyYWw6IHtcbiAgICAgIDUwOiBcIiNmOWZhZmJcIixcbiAgICAgIDEwMDogXCIjZjJmNGY3XCIsXG4gICAgICAyMDA6IFwiI2VhZWNmMFwiLFxuICAgICAgMzAwOiBcIiNkMGQ1ZGRcIixcbiAgICAgIDQwMDogXCIjOThhMmIzXCIsXG4gICAgICA1MDA6IFwiIzY2NzA4NVwiLFxuICAgICAgNjAwOiBcIiM0NzU0NjdcIixcbiAgICAgIDcwMDogXCIjMzQ0MDU0XCIsXG4gICAgICA4MDA6IFwiIzFkMjkzOVwiLFxuICAgICAgOTAwOiBcIiMxMDE4MjhcIlxuICAgIH0sXG4gICAgZGFya0dyYXk6IHtcbiAgICAgIDUwOiBcIiM1MjVjN2FcIixcbiAgICAgIDEwMDogXCIjNDk1MzZlXCIsXG4gICAgICAyMDA6IFwiIzQxNDk2MlwiLFxuICAgICAgMzAwOiBcIiMzOTQwNTZcIixcbiAgICAgIDQwMDogXCIjMzEzNzQ5XCIsXG4gICAgICA1MDA6IFwiIzI5MmUzZFwiLFxuICAgICAgNjAwOiBcIiMyMTI1MzBcIixcbiAgICAgIDcwMDogXCIjMTkxYzI0XCIsXG4gICAgICA4MDA6IFwiIzExMTMxOFwiLFxuICAgICAgOTAwOiBcIiMwYjBkMTBcIlxuICAgIH0sXG4gICAgZ3JheToge1xuICAgICAgNTA6IFwiI2Y5ZmFmYlwiLFxuICAgICAgMTAwOiBcIiNmMmY0ZjdcIixcbiAgICAgIDIwMDogXCIjZWFlY2YwXCIsXG4gICAgICAzMDA6IFwiI2QwZDVkZFwiLFxuICAgICAgNDAwOiBcIiM5OGEyYjNcIixcbiAgICAgIDUwMDogXCIjNjY3MDg1XCIsXG4gICAgICA2MDA6IFwiIzQ3NTQ2N1wiLFxuICAgICAgNzAwOiBcIiMzNDQwNTRcIixcbiAgICAgIDgwMDogXCIjMWQyOTM5XCIsXG4gICAgICA5MDA6IFwiIzEwMTgyOFwiXG4gICAgfSxcbiAgICBibHVlOiB7XG4gICAgICAyNTogXCIjRjVGQUZGXCIsXG4gICAgICA1MDogXCIjRUZGOEZGXCIsXG4gICAgICAxMDA6IFwiI0QxRTlGRlwiLFxuICAgICAgMjAwOiBcIiNCMkRERkZcIixcbiAgICAgIDMwMDogXCIjODRDQUZGXCIsXG4gICAgICA0MDA6IFwiIzUzQjFGRFwiLFxuICAgICAgNTAwOiBcIiMyRTkwRkFcIixcbiAgICAgIDYwMDogXCIjMTU3MEVGXCIsXG4gICAgICA3MDA6IFwiIzE3NUNEM1wiLFxuICAgICAgODAwOiBcIiMxODQ5QTlcIixcbiAgICAgIDkwMDogXCIjMTk0MTg1XCJcbiAgICB9LFxuICAgIGdyZWVuOiB7XG4gICAgICAyNTogXCIjRjZGRUY5XCIsXG4gICAgICA1MDogXCIjRUNGREYzXCIsXG4gICAgICAxMDA6IFwiI0QxRkFERlwiLFxuICAgICAgMjAwOiBcIiNBNkY0QzVcIixcbiAgICAgIDMwMDogXCIjNkNFOUE2XCIsXG4gICAgICA0MDA6IFwiIzMyRDU4M1wiLFxuICAgICAgNTAwOiBcIiMxMkI3NkFcIixcbiAgICAgIDYwMDogXCIjMDM5ODU1XCIsXG4gICAgICA3MDA6IFwiIzAyN0E0OFwiLFxuICAgICAgODAwOiBcIiMwNTYwM0FcIixcbiAgICAgIDkwMDogXCIjMDU0RjMxXCJcbiAgICB9LFxuICAgIHJlZDoge1xuICAgICAgNTA6IFwiI2ZlZjJmMlwiLFxuICAgICAgMTAwOiBcIiNmZWUyZTJcIixcbiAgICAgIDIwMDogXCIjZmVjYWNhXCIsXG4gICAgICAzMDA6IFwiI2ZjYTVhNVwiLFxuICAgICAgNDAwOiBcIiNmODcxNzFcIixcbiAgICAgIDUwMDogXCIjZWY0NDQ0XCIsXG4gICAgICA2MDA6IFwiI2RjMjYyNlwiLFxuICAgICAgNzAwOiBcIiNiOTFjMWNcIixcbiAgICAgIDgwMDogXCIjOTkxYjFiXCIsXG4gICAgICA5MDA6IFwiIzdmMWQxZFwiLFxuICAgICAgOTUwOiBcIiM0NTBhMGFcIlxuICAgIH0sXG4gICAgeWVsbG93OiB7XG4gICAgICAyNTogXCIjRkZGQ0Y1XCIsXG4gICAgICA1MDogXCIjRkZGQUVCXCIsXG4gICAgICAxMDA6IFwiI0ZFRjBDN1wiLFxuICAgICAgMjAwOiBcIiNGRURGODlcIixcbiAgICAgIDMwMDogXCIjRkVDODRCXCIsXG4gICAgICA0MDA6IFwiI0ZEQjAyMlwiLFxuICAgICAgNTAwOiBcIiNGNzkwMDlcIixcbiAgICAgIDYwMDogXCIjREM2ODAzXCIsXG4gICAgICA3MDA6IFwiI0I1NDcwOFwiLFxuICAgICAgODAwOiBcIiM5MzM3MERcIixcbiAgICAgIDkwMDogXCIjN0EyRTBFXCJcbiAgICB9LFxuICAgIHB1cnBsZToge1xuICAgICAgMjU6IFwiI0ZBRkFGRlwiLFxuICAgICAgNTA6IFwiI0Y0RjNGRlwiLFxuICAgICAgMTAwOiBcIiNFQkU5RkVcIixcbiAgICAgIDIwMDogXCIjRDlENkZFXCIsXG4gICAgICAzMDA6IFwiI0JEQjRGRVwiLFxuICAgICAgNDAwOiBcIiM5QjhBRkJcIixcbiAgICAgIDUwMDogXCIjN0E1QUY4XCIsXG4gICAgICA2MDA6IFwiIzY5MzhFRlwiLFxuICAgICAgNzAwOiBcIiM1OTI1RENcIixcbiAgICAgIDgwMDogXCIjNEExRkI4XCIsXG4gICAgICA5MDA6IFwiIzNFMUM5NlwiXG4gICAgfSxcbiAgICB0ZWFsOiB7XG4gICAgICAyNTogXCIjRjZGRUZDXCIsXG4gICAgICA1MDogXCIjRjBGREY5XCIsXG4gICAgICAxMDA6IFwiI0NDRkJFRlwiLFxuICAgICAgMjAwOiBcIiM5OUY2RTBcIixcbiAgICAgIDMwMDogXCIjNUZFOUQwXCIsXG4gICAgICA0MDA6IFwiIzJFRDNCN1wiLFxuICAgICAgNTAwOiBcIiMxNUI3OUVcIixcbiAgICAgIDYwMDogXCIjMEU5Mzg0XCIsXG4gICAgICA3MDA6IFwiIzEwNzU2OVwiLFxuICAgICAgODAwOiBcIiMxMjVENTZcIixcbiAgICAgIDkwMDogXCIjMTM0RTQ4XCJcbiAgICB9LFxuICAgIHBpbms6IHtcbiAgICAgIDI1OiBcIiNmZGYyZjhcIixcbiAgICAgIDUwOiBcIiNmY2U3ZjNcIixcbiAgICAgIDEwMDogXCIjZmJjZmU4XCIsXG4gICAgICAyMDA6IFwiI2Y5YThkNFwiLFxuICAgICAgMzAwOiBcIiNmNDcyYjZcIixcbiAgICAgIDQwMDogXCIjZWM0ODk5XCIsXG4gICAgICA1MDA6IFwiI2RiMjc3N1wiLFxuICAgICAgNjAwOiBcIiNiZTE4NWRcIixcbiAgICAgIDcwMDogXCIjOWQxNzRkXCIsXG4gICAgICA4MDA6IFwiIzgzMTg0M1wiLFxuICAgICAgOTAwOiBcIiM1MDA3MjRcIlxuICAgIH0sXG4gICAgY3lhbjoge1xuICAgICAgMjU6IFwiI2VjZmVmZlwiLFxuICAgICAgNTA6IFwiI2NmZmFmZVwiLFxuICAgICAgMTAwOiBcIiNhNWYzZmNcIixcbiAgICAgIDIwMDogXCIjNjdlOGY5XCIsXG4gICAgICAzMDA6IFwiIzIyZDNlZVwiLFxuICAgICAgNDAwOiBcIiMwNmI2ZDRcIixcbiAgICAgIDUwMDogXCIjMDg5MWIyXCIsXG4gICAgICA2MDA6IFwiIzBlNzQ5MFwiLFxuICAgICAgNzAwOiBcIiMxNTVlNzVcIixcbiAgICAgIDgwMDogXCIjMTY0ZTYzXCIsXG4gICAgICA5MDA6IFwiIzA4MzM0NFwiXG4gICAgfVxuICB9LFxuICBhbHBoYToge1xuICAgIDEwMDogXCJmZlwiLFxuICAgIDkwOiBcImU1XCIsXG4gICAgODA6IFwiY2NcIixcbiAgICA3MDogXCJiM1wiLFxuICAgIDYwOiBcIjk5XCIsXG4gICAgNTA6IFwiODBcIixcbiAgICA0MDogXCI2NlwiLFxuICAgIDMwOiBcIjRkXCIsXG4gICAgMjA6IFwiMzNcIixcbiAgICAxMDogXCIxYVwiLFxuICAgIDA6IFwiMDBcIlxuICB9LFxuICBmb250OiB7XG4gICAgc2l6ZToge1xuICAgICAgXCIyeHNcIjogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDAuNjI1KVwiLFxuICAgICAgeHM6IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAwLjc1KVwiLFxuICAgICAgc206IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAwLjg3NSlcIixcbiAgICAgIG1kOiBcInZhcigtLXRzcWQtZm9udC1zaXplKVwiLFxuICAgICAgbGc6IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAxLjEyNSlcIixcbiAgICAgIHhsOiBcImNhbGModmFyKC0tdHNxZC1mb250LXNpemUpICogMS4yNSlcIixcbiAgICAgIFwiMnhsXCI6IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAxLjUpXCIsXG4gICAgICBcIjN4bFwiOiBcImNhbGModmFyKC0tdHNxZC1mb250LXNpemUpICogMS44NzUpXCIsXG4gICAgICBcIjR4bFwiOiBcImNhbGModmFyKC0tdHNxZC1mb250LXNpemUpICogMi4yNSlcIixcbiAgICAgIFwiNXhsXCI6IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAzKVwiLFxuICAgICAgXCI2eGxcIjogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDMuNzUpXCIsXG4gICAgICBcIjd4bFwiOiBcImNhbGModmFyKC0tdHNxZC1mb250LXNpemUpICogNC41KVwiLFxuICAgICAgXCI4eGxcIjogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDYpXCIsXG4gICAgICBcIjl4bFwiOiBcImNhbGModmFyKC0tdHNxZC1mb250LXNpemUpICogOClcIlxuICAgIH0sXG4gICAgbGluZUhlaWdodDoge1xuICAgICAgeHM6IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAxKVwiLFxuICAgICAgc206IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAxLjI1KVwiLFxuICAgICAgbWQ6IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAxLjUpXCIsXG4gICAgICBsZzogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDEuNzUpXCIsXG4gICAgICB4bDogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDIpXCIsXG4gICAgICBcIjJ4bFwiOiBcImNhbGModmFyKC0tdHNxZC1mb250LXNpemUpICogMi4yNSlcIixcbiAgICAgIFwiM3hsXCI6IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAyLjUpXCIsXG4gICAgICBcIjR4bFwiOiBcImNhbGModmFyKC0tdHNxZC1mb250LXNpemUpICogMi43NSlcIixcbiAgICAgIFwiNXhsXCI6IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAzKVwiLFxuICAgICAgXCI2eGxcIjogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDMuMjUpXCIsXG4gICAgICBcIjd4bFwiOiBcImNhbGModmFyKC0tdHNxZC1mb250LXNpemUpICogMy41KVwiLFxuICAgICAgXCI4eGxcIjogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDMuNzUpXCIsXG4gICAgICBcIjl4bFwiOiBcImNhbGModmFyKC0tdHNxZC1mb250LXNpemUpICogNClcIlxuICAgIH0sXG4gICAgd2VpZ2h0OiB7XG4gICAgICB0aGluOiBcIjEwMFwiLFxuICAgICAgZXh0cmFsaWdodDogXCIyMDBcIixcbiAgICAgIGxpZ2h0OiBcIjMwMFwiLFxuICAgICAgbm9ybWFsOiBcIjQwMFwiLFxuICAgICAgbWVkaXVtOiBcIjUwMFwiLFxuICAgICAgc2VtaWJvbGQ6IFwiNjAwXCIsXG4gICAgICBib2xkOiBcIjcwMFwiLFxuICAgICAgZXh0cmFib2xkOiBcIjgwMFwiLFxuICAgICAgYmxhY2s6IFwiOTAwXCJcbiAgICB9XG4gIH0sXG4gIGJyZWFrcG9pbnRzOiB7XG4gICAgeHM6IFwiMzIwcHhcIixcbiAgICBzbTogXCI2NDBweFwiLFxuICAgIG1kOiBcIjc2OHB4XCIsXG4gICAgbGc6IFwiMTAyNHB4XCIsXG4gICAgeGw6IFwiMTI4MHB4XCIsXG4gICAgXCIyeGxcIjogXCIxNTM2cHhcIlxuICB9LFxuICBib3JkZXI6IHtcbiAgICByYWRpdXM6IHtcbiAgICAgIG5vbmU6IFwiMHB4XCIsXG4gICAgICB4czogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDAuMTI1KVwiLFxuICAgICAgc206IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAwLjI1KVwiLFxuICAgICAgbWQ6IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAwLjM3NSlcIixcbiAgICAgIGxnOiBcImNhbGModmFyKC0tdHNxZC1mb250LXNpemUpICogMC41KVwiLFxuICAgICAgeGw6IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAwLjc1KVwiLFxuICAgICAgXCIyeGxcIjogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDEpXCIsXG4gICAgICBcIjN4bFwiOiBcImNhbGModmFyKC0tdHNxZC1mb250LXNpemUpICogMS41KVwiLFxuICAgICAgZnVsbDogXCI5OTk5cHhcIlxuICAgIH1cbiAgfSxcbiAgc2l6ZToge1xuICAgIDA6IFwiMHB4XCIsXG4gICAgMC4yNTogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDAuMDYyNSlcIixcbiAgICAwLjU6IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAwLjEyNSlcIixcbiAgICAxOiBcImNhbGModmFyKC0tdHNxZC1mb250LXNpemUpICogMC4yNSlcIixcbiAgICAxLjU6IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAwLjM3NSlcIixcbiAgICAyOiBcImNhbGModmFyKC0tdHNxZC1mb250LXNpemUpICogMC41KVwiLFxuICAgIDIuNTogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDAuNjI1KVwiLFxuICAgIDM6IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAwLjc1KVwiLFxuICAgIDMuNTogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDAuODc1KVwiLFxuICAgIDQ6IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAxKVwiLFxuICAgIDQuNTogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDEuMTI1KVwiLFxuICAgIDU6IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAxLjI1KVwiLFxuICAgIDUuNTogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDEuMzc1KVwiLFxuICAgIDY6IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAxLjUpXCIsXG4gICAgNi41OiBcImNhbGModmFyKC0tdHNxZC1mb250LXNpemUpICogMS42MjUpXCIsXG4gICAgNzogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDEuNzUpXCIsXG4gICAgODogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDIpXCIsXG4gICAgOTogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDIuMjUpXCIsXG4gICAgMTA6IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAyLjUpXCIsXG4gICAgMTE6IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAyLjc1KVwiLFxuICAgIDEyOiBcImNhbGModmFyKC0tdHNxZC1mb250LXNpemUpICogMylcIixcbiAgICAxNDogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDMuNSlcIixcbiAgICAxNjogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDQpXCIsXG4gICAgMjA6IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiA1KVwiLFxuICAgIDI0OiBcImNhbGModmFyKC0tdHNxZC1mb250LXNpemUpICogNilcIixcbiAgICAyODogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDcpXCIsXG4gICAgMzI6IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiA4KVwiLFxuICAgIDM2OiBcImNhbGModmFyKC0tdHNxZC1mb250LXNpemUpICogOSlcIixcbiAgICA0MDogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDEwKVwiLFxuICAgIDQ0OiBcImNhbGModmFyKC0tdHNxZC1mb250LXNpemUpICogMTEpXCIsXG4gICAgNDg6IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAxMilcIixcbiAgICA1MjogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDEzKVwiLFxuICAgIDU2OiBcImNhbGModmFyKC0tdHNxZC1mb250LXNpemUpICogMTQpXCIsXG4gICAgNjA6IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAxNSlcIixcbiAgICA2NDogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDE2KVwiLFxuICAgIDcyOiBcImNhbGModmFyKC0tdHNxZC1mb250LXNpemUpICogMTgpXCIsXG4gICAgODA6IFwiY2FsYyh2YXIoLS10c3FkLWZvbnQtc2l6ZSkgKiAyMClcIixcbiAgICA5NjogXCJjYWxjKHZhcigtLXRzcWQtZm9udC1zaXplKSAqIDI0KVwiXG4gIH0sXG4gIHNoYWRvdzogU2hhZG93LFxuICB6SW5kaWNlczoge1xuICAgIGhpZGU6IC0xLFxuICAgIGF1dG86IFwiYXV0b1wiLFxuICAgIGJhc2U6IDAsXG4gICAgZG9ja2VkOiAxMCxcbiAgICBkcm9wZG93bjogMWUzLFxuICAgIHN0aWNreTogMTEwMCxcbiAgICBiYW5uZXI6IDEyMDAsXG4gICAgb3ZlcmxheTogMTMwMCxcbiAgICBtb2RhbDogMTQwMCxcbiAgICBwb3BvdmVyOiAxNTAwLFxuICAgIHNraXBMaW5rOiAxNjAwLFxuICAgIHRvYXN0OiAxNzAwLFxuICAgIHRvb2x0aXA6IDE4MDBcbiAgfVxufTtcblxuLy8gc3JjL2ljb25zL2luZGV4LnRzeFxudmFyIF90bXBsJCA9IC8qIEBfX1BVUkVfXyAqLyB0ZW1wbGF0ZShgPHN2ZyB3aWR0aD0xNCBoZWlnaHQ9MTQgdmlld0JveD1cIjAgMCAxNCAxNFwiZmlsbD1ub25lIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnPjxwYXRoIGQ9XCJNMTMgMTNMOS4wMDAwNyA5TTEwLjMzMzMgNS42NjY2N0MxMC4zMzMzIDguMjQ0IDguMjQ0IDEwLjMzMzMgNS42NjY2NyAxMC4zMzMzQzMuMDg5MzQgMTAuMzMzMyAxIDguMjQ0IDEgNS42NjY2N0MxIDMuMDg5MzQgMy4wODkzNCAxIDUuNjY2NjcgMUM4LjI0NCAxIDEwLjMzMzMgMy4wODkzNCAxMC4zMzMzIDUuNjY2NjdaXCJzdHJva2U9Y3VycmVudENvbG9yIHN0cm9rZS13aWR0aD0xLjY2NjY3IHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1yb3VuZD5gKTtcbnZhciBfdG1wbCQyID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8c3ZnIHdpZHRoPTI0IGhlaWdodD0yNCB2aWV3Qm94PVwiMCAwIDI0IDI0XCJmaWxsPW5vbmUgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmc+PHBhdGggZD1cIk05IDNIMTVNMyA2SDIxTTE5IDZMMTguMjk4NyAxNi41MTkzQzE4LjE5MzUgMTguMDk3NSAxOC4xNDA5IDE4Ljg4NjcgMTcuOCAxOS40ODVDMTcuNDk5OSAyMC4wMTE4IDE3LjA0NzIgMjAuNDM1MyAxNi41MDE3IDIwLjY5OTdDMTUuODgyIDIxIDE1LjA5MTEgMjEgMTMuNTA5MyAyMUgxMC40OTA3QzguOTA4OTEgMjEgOC4xMTgwMyAyMSA3LjQ5ODM0IDIwLjY5OTdDNi45NTI3NiAyMC40MzUzIDYuNTAwMDkgMjAuMDExOCA2LjE5OTk4IDE5LjQ4NUM1Ljg1OTExIDE4Ljg4NjcgNS44MDY1IDE4LjA5NzUgNS43MDEyOSAxNi41MTkzTDUgNk0xMCAxMC41VjE1LjVNMTQgMTAuNVYxNS41XCJzdHJva2U9Y3VycmVudENvbG9yIHN0cm9rZS13aWR0aD0yIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1yb3VuZD5gKTtcbnZhciBfdG1wbCQzID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8c3ZnIHdpZHRoPTEwIGhlaWdodD02IHZpZXdCb3g9XCIwIDAgMTAgNlwiZmlsbD1ub25lIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnPjxwYXRoIGQ9XCJNMSAxTDUgNUw5IDFcInN0cm9rZT1jdXJyZW50Q29sb3Igc3Ryb2tlLXdpZHRoPTEuNjY2Njcgc3Ryb2tlLWxpbmVjYXA9cm91bmQgc3Ryb2tlLWxpbmVqb2luPXJvdW5kPmApO1xudmFyIF90bXBsJDQgPSAvKiBAX19QVVJFX18gKi8gdGVtcGxhdGUoYDxzdmcgd2lkdGg9MTIgaGVpZ2h0PTEyIHZpZXdCb3g9XCIwIDAgMTYgMTZcImZpbGw9bm9uZSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zz48cGF0aCBkPVwiTTggMTMuMzMzM1YyLjY2NjY3TTggMi42NjY2N0w0IDYuNjY2NjdNOCAyLjY2NjY3TDEyIDYuNjY2NjdcInN0cm9rZT1jdXJyZW50Q29sb3Igc3Ryb2tlLXdpZHRoPTEuNjY2Njcgc3Ryb2tlLWxpbmVjYXA9cm91bmQgc3Ryb2tlLWxpbmVqb2luPXJvdW5kPmApO1xudmFyIF90bXBsJDUgPSAvKiBAX19QVVJFX18gKi8gdGVtcGxhdGUoYDxzdmcgd2lkdGg9MTIgaGVpZ2h0PTEyIHZpZXdCb3g9XCIwIDAgMTYgMTZcImZpbGw9bm9uZSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zz48cGF0aCBkPVwiTTggMi42NjY2N1YxMy4zMzMzTTggMTMuMzMzM0w0IDkuMzMzMzNNOCAxMy4zMzMzTDEyIDkuMzMzMzNcInN0cm9rZT1jdXJyZW50Q29sb3Igc3Ryb2tlLXdpZHRoPTEuNjY2Njcgc3Ryb2tlLWxpbmVjYXA9cm91bmQgc3Ryb2tlLWxpbmVqb2luPXJvdW5kPmApO1xudmFyIF90bXBsJDYgPSAvKiBAX19QVVJFX18gKi8gdGVtcGxhdGUoYDxzdmcgdmlld0JveD1cIjAgMCAyNCAyNFwiaGVpZ2h0PTEyIHdpZHRoPTEyIGZpbGw9bm9uZSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zz48cGF0aCBkPVwiTTEyIDJ2Mm0wIDE2djJNNCAxMkgybTQuMzE0LTUuNjg2TDQuOSA0LjltMTIuNzg2IDEuNDE0TDE5LjEgNC45TTYuMzE0IDE3LjY5IDQuOSAxOS4xMDRtMTIuNzg2LTEuNDE0IDEuNDE0IDEuNDE0TTIyIDEyaC0ybS0zIDBhNSA1IDAgMSAxLTEwIDAgNSA1IDAgMCAxIDEwIDBaXCJzdHJva2U9Y3VycmVudENvbG9yIHN0cm9rZS13aWR0aD0yIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1yb3VuZD5gKTtcbnZhciBfdG1wbCQ3ID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8c3ZnIHZpZXdCb3g9XCIwIDAgMjQgMjRcImhlaWdodD0xMiB3aWR0aD0xMiBmaWxsPW5vbmUgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmc+PHBhdGggZD1cIk0yMiAxNS44NDRhMTAuNDI0IDEwLjQyNCAwIDAgMS00LjMwNi45MjVjLTUuNzc5IDAtMTAuNDYzLTQuNjg0LTEwLjQ2My0xMC40NjIgMC0xLjUzNi4zMy0yLjk5NC45MjUtNC4zMDdBMTAuNDY0IDEwLjQ2NCAwIDAgMCAyIDExLjUzOEMyIDE3LjMxNiA2LjY4NCAyMiAxMi40NjIgMjJjNC4yNDMgMCA3Ljg5Ni0yLjUyNiA5LjUzOC02LjE1NlpcInN0cm9rZT1jdXJyZW50Q29sb3Igc3Ryb2tlLXdpZHRoPTIgc3Ryb2tlLWxpbmVjYXA9cm91bmQgc3Ryb2tlLWxpbmVqb2luPXJvdW5kPmApO1xudmFyIF90bXBsJDggPSAvKiBAX19QVVJFX18gKi8gdGVtcGxhdGUoYDxzdmcgdmlld0JveD1cIjAgMCAyNCAyNFwiaGVpZ2h0PTEyIHdpZHRoPTEyIGZpbGw9bm9uZSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zz48cGF0aCBkPVwiTTggMjFoOG0tNC00djRtLTUuMi00aDEwLjRjMS42OCAwIDIuNTIgMCAzLjE2Mi0uMzI3YTMgMyAwIDAgMCAxLjMxMS0xLjMxMUMyMiAxNC43MiAyMiAxMy44OCAyMiAxMi4yVjcuOGMwLTEuNjggMC0yLjUyLS4zMjctMy4xNjJhMyAzIDAgMCAwLTEuMzExLTEuMzExQzE5LjcyIDMgMTguODggMyAxNy4yIDNINi44Yy0xLjY4IDAtMi41MiAwLTMuMTYyLjMyN2EzIDMgMCAwIDAtMS4zMTEgMS4zMTFDMiA1LjI4IDIgNi4xMiAyIDcuOHY0LjRjMCAxLjY4IDAgMi41Mi4zMjcgMy4xNjJhMyAzIDAgMCAwIDEuMzExIDEuMzExQzQuMjggMTcgNS4xMiAxNyA2LjggMTdaXCJzdHJva2U9Y3VycmVudENvbG9yIHN0cm9rZS13aWR0aD0yIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1yb3VuZD5gKTtcbnZhciBfdG1wbCQ5ID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8c3ZnIHN0cm9rZT1jdXJyZW50Q29sb3IgZmlsbD1jdXJyZW50Q29sb3Igc3Ryb2tlLXdpZHRoPTAgdmlld0JveD1cIjAgMCAyNCAyNFwiaGVpZ2h0PTFlbSB3aWR0aD0xZW0geG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmc+PHBhdGggZmlsbD1ub25lIGQ9XCJNMCAwaDI0djI0SDB6XCI+PC9wYXRoPjxwYXRoIGQ9XCJNMSA5bDIgMmM0Ljk3LTQuOTcgMTMuMDMtNC45NyAxOCAwbDItMkMxNi45MyAyLjkzIDcuMDggMi45MyAxIDl6bTggOGwzIDMgMy0zYTQuMjM3IDQuMjM3IDAgMDAtNiAwem0tNC00bDIgMmE3LjA3NCA3LjA3NCAwIDAxMTAgMGwyLTJDMTUuMTQgOS4xNCA4Ljg3IDkuMTQgNSAxM3pcIj5gKTtcbnZhciBfdG1wbCQxMCA9IC8qIEBfX1BVUkVfXyAqLyB0ZW1wbGF0ZShgPHN2ZyBzdHJva2Utd2lkdGg9MCB2aWV3Qm94PVwiMCAwIDI0IDI0XCJoZWlnaHQ9MWVtIHdpZHRoPTFlbSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zz48cGF0aCBmaWxsPW5vbmUgZD1cIk0yNCAuMDFjMC0uMDEgMC0uMDEgMCAwTDAgMHYyNGgyNFYuMDF6TTAgMGgyNHYyNEgwVjB6bTAgMGgyNHYyNEgwVjB6XCI+PC9wYXRoPjxwYXRoIGQ9XCJNMjIuOTkgOUMxOS4xNSA1LjE2IDEzLjggMy43NiA4Ljg0IDQuNzhsMi41MiAyLjUyYzMuNDctLjE3IDYuOTkgMS4wNSA5LjYzIDMuN2wyLTJ6bS00IDRhOS43OTMgOS43OTMgMCAwMC00LjQ5LTIuNTZsMy41MyAzLjUzLjk2LS45N3pNMiAzLjA1TDUuMDcgNi4xQzMuNiA2LjgyIDIuMjIgNy43OCAxIDlsMS45OSAyYzEuMjQtMS4yNCAyLjY3LTIuMTYgNC4yLTIuNzdsMi4yNCAyLjI0QTkuNjg0IDkuNjg0IDAgMDA1IDEzdi4wMUw2Ljk5IDE1YTcuMDQyIDcuMDQyIDAgMDE0LjkyLTIuMDZMMTguOTggMjBsMS4yNy0xLjI2TDMuMjkgMS43OSAyIDMuMDV6TTkgMTdsMyAzIDMtM2E0LjIzNyA0LjIzNyAwIDAwLTYgMHpcIj5gKTtcbnZhciBfdG1wbCQxMSA9IC8qIEBfX1BVUkVfXyAqLyB0ZW1wbGF0ZShgPHN2ZyB3aWR0aD0yNCBoZWlnaHQ9MjQgdmlld0JveD1cIjAgMCAyNCAyNFwiZmlsbD1ub25lIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnPjxwYXRoIGQ9XCJNOS4zOTUxIDE5LjM3MTFMOS45Nzk1NSAyMC42ODU2QzEwLjE1MzMgMjEuMDc2OCAxMC40MzY4IDIxLjQwOTMgMTAuNzk1OCAyMS42NDI2QzExLjE1NDcgMjEuODc1OSAxMS41NzM3IDIyLjAwMDEgMTIuMDAxOCAyMkMxMi40Mjk5IDIyLjAwMDEgMTIuODQ4OCAyMS44NzU5IDEzLjIwNzggMjEuNjQyNkMxMy41NjY3IDIxLjQwOTMgMTMuODUwMyAyMS4wNzY4IDE0LjAyNCAyMC42ODU2TDE0LjYwODQgMTkuMzcxMUMxNC44MTY1IDE4LjkwNDcgMTUuMTY2NCAxOC41MTU5IDE1LjYwODQgMTguMjZDMTYuMDUzMiAxOC4wMDM0IDE2LjU2NzggMTcuODk0MSAxNy4wNzg0IDE3Ljk0NzhMMTguNTA4NCAxOC4xQzE4LjkzNDEgMTguMTQ1IDE5LjM2MzcgMTguMDY1NiAxOS43NDUxIDE3Ljg3MTNDMjAuMTI2NSAxNy42NzcxIDIwLjQ0MzQgMTcuMzc2MyAyMC42NTczIDE3LjAwNTZDMjAuODcxNSAxNi42MzUgMjAuOTczNSAxNi4yMTAzIDIwLjk1MTEgMTUuNzgyOUMyMC45Mjg2IDE1LjM1NTUgMjAuNzgyNSAxNC45NDM4IDIwLjUzMDcgMTQuNTk3OEwxOS42ODQgMTMuNDM0NEMxOS4zODI1IDEzLjAxNzEgMTkuMjIxNCAxMi41MTQ4IDE5LjIyNCAxMkMxOS4yMjM5IDExLjQ4NjYgMTkuMzg2NSAxMC45ODY0IDE5LjY4ODQgMTAuNTcxMUwyMC41MzUxIDkuNDA3NzhDMjAuNzg3IDkuMDYxNzUgMjAuOTMzIDguNjUwMDcgMjAuOTU1NSA4LjIyMjY3QzIwLjk3OCA3Ljc5NTI4IDIwLjg3NTkgNy4zNzA1NCAyMC42NjE4IDdDMjAuNDQ3OSA2LjYyOTIzIDIwLjEzMSA2LjMyODQ5IDE5Ljc0OTYgNi4xMzQyM0MxOS4zNjgxIDUuOTM5OTcgMTguOTM4NiA1Ljg2MDUzIDE4LjUxMjkgNS45MDU1NkwxNy4wODI5IDYuMDU3NzhDMTYuNTcyMiA2LjExMTQxIDE2LjA1NzcgNi4wMDIxMiAxNS42MTI5IDUuNzQ1NTZDMTUuMTcgNS40ODgyNSAxNC44MiA1LjA5NzM2IDE0LjYxMjkgNC42Mjg4OUwxNC4wMjQgMy4zMTQ0NEMxMy44NTAzIDIuOTIzMTcgMTMuNTY2NyAyLjU5MDcyIDEzLjIwNzggMi4zNTc0QzEyLjg0ODggMi4xMjQwOCAxMi40Mjk5IDEuOTk5OTMgMTIuMDAxOCAyQzExLjU3MzcgMS45OTk5MyAxMS4xNTQ3IDIuMTI0MDggMTAuNzk1OCAyLjM1NzRDMTAuNDM2OCAyLjU5MDcyIDEwLjE1MzMgMi45MjMxNyA5Ljk3OTU1IDMuMzE0NDRMOS4zOTUxIDQuNjI4ODlDOS4xODgwMyA1LjA5NzM2IDguODM3OTggNS40ODgyNSA4LjM5NTEgNS43NDU1NkM3Ljk1MDMyIDYuMDAyMTIgNy40MzU3NyA2LjExMTQxIDYuOTI1MSA2LjA1Nzc4TDUuNDkwNjYgNS45MDU1NkM1LjA2NDk5IDUuODYwNTMgNC42MzU0IDUuOTM5OTcgNC4yNTM5NyA2LjEzNDIzQzMuODcyNTUgNi4zMjg0OSAzLjU1NTY3IDYuNjI5MjMgMy4zNDE3NyA3QzMuMTI3NTkgNy4zNzA1NCAzLjAyNTU1IDcuNzk1MjggMy4wNDgwNCA4LjIyMjY3QzMuMDcwNTIgOC42NTAwNyAzLjIxNjU2IDkuMDYxNzUgMy40Njg0NCA5LjQwNzc4TDQuMzE1MSAxMC41NzExQzQuNjE3MDQgMTAuOTg2NCA0Ljc3OTY0IDExLjQ4NjYgNC43Nzk1NSAxMkM0Ljc3OTY0IDEyLjUxMzQgNC42MTcwNCAxMy4wMTM3IDQuMzE1MSAxMy40Mjg5TDMuNDY4NDQgMTQuNTkyMkMzLjIxNjU2IDE0LjkzODIgMy4wNzA1MiAxNS4zNDk5IDMuMDQ4MDQgMTUuNzc3M0MzLjAyNTU1IDE2LjIwNDcgMy4xMjc1OSAxNi42Mjk1IDMuMzQxNzcgMTdDMy41NTU4OSAxNy4zNzA2IDMuODcyOCAxNy42NzEyIDQuMjU0MTcgMTcuODY1NEM0LjYzNTU0IDE4LjA1OTYgNS4wNjUwMiAxOC4xMzkyIDUuNDkwNjYgMTguMDk0NEw2LjkyMDY2IDE3Ljk0MjJDNy40MzEzMyAxNy44ODg2IDcuOTQ1ODcgMTcuOTk3OSA4LjM5MDY2IDE4LjI1NDRDOC44MzUxOSAxOC41MTEgOS4xODY4NyAxOC45MDIgOS4zOTUxIDE5LjM3MTFaXCJzdHJva2U9Y3VycmVudENvbG9yIHN0cm9rZS13aWR0aD0yIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1yb3VuZD48L3BhdGg+PHBhdGggZD1cIk0xMiAxNUMxMy42NTY4IDE1IDE1IDEzLjY1NjkgMTUgMTJDMTUgMTAuMzQzMSAxMy42NTY4IDkgMTIgOUMxMC4zNDMxIDkgOC45OTk5OCAxMC4zNDMxIDguOTk5OTggMTJDOC45OTk5OCAxMy42NTY5IDEwLjM0MzEgMTUgMTIgMTVaXCJzdHJva2U9Y3VycmVudENvbG9yIHN0cm9rZS13aWR0aD0yIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1yb3VuZD5gKTtcbnZhciBfdG1wbCQxMiA9IC8qIEBfX1BVUkVfXyAqLyB0ZW1wbGF0ZShgPHN2ZyB3aWR0aD0yNCBoZWlnaHQ9MjQgdmlld0JveD1cIjAgMCAyNCAyNFwiZmlsbD1ub25lIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnPjxwYXRoIGNsYXNzPWNvcGllciBkPVwiTTggOFY1LjJDOCA0LjA3OTkgOCAzLjUxOTg0IDguMjE3OTkgMy4wOTIwMkM4LjQwOTczIDIuNzE1NjkgOC43MTU2OSAyLjQwOTczIDkuMDkyMDIgMi4yMTc5OUM5LjUxOTg0IDIgMTAuMDc5OSAyIDExLjIgMkgxOC44QzE5LjkyMDEgMiAyMC40ODAyIDIgMjAuOTA4IDIuMjE3OTlDMjEuMjg0MyAyLjQwOTczIDIxLjU5MDMgMi43MTU2OSAyMS43ODIgMy4wOTIwMkMyMiAzLjUxOTg0IDIyIDQuMDc5OSAyMiA1LjJWMTIuOEMyMiAxMy45MjAxIDIyIDE0LjQ4MDIgMjEuNzgyIDE0LjkwOEMyMS41OTAzIDE1LjI4NDMgMjEuMjg0MyAxNS41OTAzIDIwLjkwOCAxNS43ODJDMjAuNDgwMiAxNiAxOS45MjAxIDE2IDE4LjggMTZIMTZNNS4yIDIySDEyLjhDMTMuOTIwMSAyMiAxNC40ODAyIDIyIDE0LjkwOCAyMS43ODJDMTUuMjg0MyAyMS41OTAzIDE1LjU5MDMgMjEuMjg0MyAxNS43ODIgMjAuOTA4QzE2IDIwLjQ4MDIgMTYgMTkuOTIwMSAxNiAxOC44VjExLjJDMTYgMTAuMDc5OSAxNiA5LjUxOTg0IDE1Ljc4MiA5LjA5MjAyQzE1LjU5MDMgOC43MTU2OSAxNS4yODQzIDguNDA5NzMgMTQuOTA4IDguMjE3OTlDMTQuNDgwMiA4IDEzLjkyMDEgOCAxMi44IDhINS4yQzQuMDc5OSA4IDMuNTE5ODQgOCAzLjA5MjAyIDguMjE3OTlDMi43MTU2OSA4LjQwOTczIDIuNDA5NzMgOC43MTU2OSAyLjIxNzk5IDkuMDkyMDJDMiA5LjUxOTg0IDIgMTAuMDc5OSAyIDExLjJWMTguOEMyIDE5LjkyMDEgMiAyMC40ODAyIDIuMjE3OTkgMjAuOTA4QzIuNDA5NzMgMjEuMjg0MyAyLjcxNTY5IDIxLjU5MDMgMy4wOTIwMiAyMS43ODJDMy41MTk4NCAyMiA0LjA3OTg5IDIyIDUuMiAyMlpcInN0cm9rZS13aWR0aD0yIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1yb3VuZCBzdHJva2U9Y3VycmVudENvbG9yPmApO1xudmFyIF90bXBsJDEzID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8c3ZnIHdpZHRoPTI0IGhlaWdodD0yNCB2aWV3Qm94PVwiMCAwIDI0IDI0XCJmaWxsPW5vbmUgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmc+PHBhdGggZD1cIk03LjUgMTJMMTAuNSAxNUwxNi41IDlNNy44IDIxSDE2LjJDMTcuODgwMiAyMSAxOC43MjAyIDIxIDE5LjM2MiAyMC42NzNDMTkuOTI2NSAyMC4zODU0IDIwLjM4NTQgMTkuOTI2NSAyMC42NzMgMTkuMzYyQzIxIDE4LjcyMDIgMjEgMTcuODgwMiAyMSAxNi4yVjcuOEMyMSA2LjExOTg0IDIxIDUuMjc5NzYgMjAuNjczIDQuNjM4MDNDMjAuMzg1NCA0LjA3MzU0IDE5LjkyNjUgMy42MTQ2IDE5LjM2MiAzLjMyNjk4QzE4LjcyMDIgMyAxNy44ODAyIDMgMTYuMiAzSDcuOEM2LjExOTg0IDMgNS4yNzk3NiAzIDQuNjM4MDMgMy4zMjY5OEM0LjA3MzU0IDMuNjE0NiAzLjYxNDYgNC4wNzM1NCAzLjMyNjk4IDQuNjM4MDNDMyA1LjI3OTc2IDMgNi4xMTk4NCAzIDcuOFYxNi4yQzMgMTcuODgwMiAzIDE4LjcyMDIgMy4zMjY5OCAxOS4zNjJDMy42MTQ2IDE5LjkyNjUgNC4wNzM1NCAyMC4zODU0IDQuNjM4MDMgMjAuNjczQzUuMjc5NzYgMjEgNi4xMTk4NCAyMSA3LjggMjFaXCJzdHJva2Utd2lkdGg9MiBzdHJva2UtbGluZWNhcD1yb3VuZCBzdHJva2UtbGluZWpvaW49cm91bmQ+YCk7XG52YXIgX3RtcGwkMTQgPSAvKiBAX19QVVJFX18gKi8gdGVtcGxhdGUoYDxzdmcgd2lkdGg9MjQgaGVpZ2h0PTI0IHZpZXdCb3g9XCIwIDAgMjQgMjRcImZpbGw9bm9uZSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zz48cGF0aCBkPVwiTTkgOUwxNSAxNU0xNSA5TDkgMTVNNy44IDIxSDE2LjJDMTcuODgwMiAyMSAxOC43MjAyIDIxIDE5LjM2MiAyMC42NzNDMTkuOTI2NSAyMC4zODU0IDIwLjM4NTQgMTkuOTI2NSAyMC42NzMgMTkuMzYyQzIxIDE4LjcyMDIgMjEgMTcuODgwMiAyMSAxNi4yVjcuOEMyMSA2LjExOTg0IDIxIDUuMjc5NzYgMjAuNjczIDQuNjM4MDNDMjAuMzg1NCA0LjA3MzU0IDE5LjkyNjUgMy42MTQ2IDE5LjM2MiAzLjMyNjk4QzE4LjcyMDIgMyAxNy44ODAyIDMgMTYuMiAzSDcuOEM2LjExOTg0IDMgNS4yNzk3NiAzIDQuNjM4MDMgMy4zMjY5OEM0LjA3MzU0IDMuNjE0NiAzLjYxNDYgNC4wNzM1NCAzLjMyNjk4IDQuNjM4MDNDMyA1LjI3OTc2IDMgNi4xMTk4NCAzIDcuOFYxNi4yQzMgMTcuODgwMiAzIDE4LjcyMDIgMy4zMjY5OCAxOS4zNjJDMy42MTQ2IDE5LjkyNjUgNC4wNzM1NCAyMC4zODU0IDQuNjM4MDMgMjAuNjczQzUuMjc5NzYgMjEgNi4xMTk4NCAyMSA3LjggMjFaXCJzdHJva2U9I0YwNDQzOCBzdHJva2Utd2lkdGg9MiBzdHJva2UtbGluZWNhcD1yb3VuZCBzdHJva2UtbGluZWpvaW49cm91bmQ+YCk7XG52YXIgX3RtcGwkMTUgPSAvKiBAX19QVVJFX18gKi8gdGVtcGxhdGUoYDxzdmcgd2lkdGg9MjQgaGVpZ2h0PTI0IHZpZXdCb3g9XCIwIDAgMjQgMjRcImZpbGw9bm9uZSBzdHJva2U9Y3VycmVudENvbG9yIHN0cm9rZS13aWR0aD0yIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnPjxyZWN0IGNsYXNzPWxpc3Qgd2lkdGg9MjAgaGVpZ2h0PTIwIHk9MiB4PTIgcng9Mj48L3JlY3Q+PGxpbmUgY2xhc3M9bGlzdC1pdGVtIHkxPTcgeTI9NyB4MT02IHgyPTE4PjwvbGluZT48bGluZSBjbGFzcz1saXN0LWl0ZW0geTI9MTIgeTE9MTIgeDE9NiB4Mj0xOD48L2xpbmU+PGxpbmUgY2xhc3M9bGlzdC1pdGVtIHkxPTE3IHkyPTE3IHgxPTYgeDI9MTg+YCk7XG52YXIgX3RtcGwkMTYgPSAvKiBAX19QVVJFX18gKi8gdGVtcGxhdGUoYDxzdmcgdmlld0JveD1cIjAgMCAyNCAyNFwiaGVpZ2h0PTIwIHdpZHRoPTIwIGZpbGw9bm9uZSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zz48cGF0aCBkPVwiTTMgNy44YzAtMS42OCAwLTIuNTIuMzI3LTMuMTYyYTMgMyAwIDAgMSAxLjMxMS0xLjMxMUM1LjI4IDMgNi4xMiAzIDcuOCAzaDguNGMxLjY4IDAgMi41MiAwIDMuMTYyLjMyN2EzIDMgMCAwIDEgMS4zMTEgMS4zMTFDMjEgNS4yOCAyMSA2LjEyIDIxIDcuOHY4LjRjMCAxLjY4IDAgMi41Mi0uMzI3IDMuMTYyYTMgMyAwIDAgMS0xLjMxMSAxLjMxMUMxOC43MiAyMSAxNy44OCAyMSAxNi4yIDIxSDcuOGMtMS42OCAwLTIuNTIgMC0zLjE2Mi0uMzI3YTMgMyAwIDAgMS0xLjMxMS0xLjMxMUMzIDE4LjcyIDMgMTcuODggMyAxNi4yVjcuOFpcInN0cm9rZS13aWR0aD0yIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1yb3VuZD5gKTtcbnZhciBfdG1wbCQxNyA9IC8qIEBfX1BVUkVfXyAqLyB0ZW1wbGF0ZShgPHN2ZyB3aWR0aD0xNCBoZWlnaHQ9MTQgdmlld0JveD1cIjAgMCAyNCAyNFwiZmlsbD1ub25lIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnPjxwYXRoIGQ9XCJNNy41IDEyTDEwLjUgMTVMMTYuNSA5TTIyIDEyQzIyIDE3LjUyMjggMTcuNTIyOCAyMiAxMiAyMkM2LjQ3NzE1IDIyIDIgMTcuNTIyOCAyIDEyQzIgNi40NzcxNSA2LjQ3NzE1IDIgMTIgMkMxNy41MjI4IDIgMjIgNi40NzcxNSAyMiAxMlpcInN0cm9rZT1jdXJyZW50Q29sb3Igc3Ryb2tlLXdpZHRoPTIgc3Ryb2tlLWxpbmVjYXA9cm91bmQgc3Ryb2tlLWxpbmVqb2luPXJvdW5kPmApO1xudmFyIF90bXBsJDE4ID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8c3ZnIHdpZHRoPTE0IGhlaWdodD0xNCB2aWV3Qm94PVwiMCAwIDI0IDI0XCJmaWxsPW5vbmUgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmc+PHBhdGggZD1cIk0xMiAyVjZNMTIgMThWMjJNNiAxMkgyTTIyIDEySDE4TTE5LjA3ODQgMTkuMDc4NEwxNi4yNSAxNi4yNU0xOS4wNzg0IDQuOTk5OTRMMTYuMjUgNy44MjgzN000LjkyMTU3IDE5LjA3ODRMNy43NSAxNi4yNU00LjkyMTU3IDQuOTk5OTRMNy43NSA3LjgyODM3XCJzdHJva2U9Y3VycmVudENvbG9yIHN0cm9rZS13aWR0aD0yIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1yb3VuZD48L3BhdGg+PGFuaW1hdGVUcmFuc2Zvcm0gYXR0cmlidXRlTmFtZT10cmFuc2Zvcm0gYXR0cmlidXRlVHlwZT1YTUwgdHlwZT1yb3RhdGUgZnJvbT0wIHRvPTM2MCBkdXI9MnMgcmVwZWF0Q291bnQ9aW5kZWZpbml0ZT5gKTtcbnZhciBfdG1wbCQxOSA9IC8qIEBfX1BVUkVfXyAqLyB0ZW1wbGF0ZShgPHN2ZyB3aWR0aD0xNCBoZWlnaHQ9MTQgdmlld0JveD1cIjAgMCAyNCAyNFwiZmlsbD1ub25lIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnPjxwYXRoIGQ9XCJNMTUgOUw5IDE1TTkgOUwxNSAxNU0yMiAxMkMyMiAxNy41MjI4IDE3LjUyMjggMjIgMTIgMjJDNi40NzcxNSAyMiAyIDE3LjUyMjggMiAxMkMyIDYuNDc3MTUgNi40NzcxNSAyIDEyIDJDMTcuNTIyOCAyIDIyIDYuNDc3MTUgMjIgMTJaXCJzdHJva2U9Y3VycmVudENvbG9yIHN0cm9rZS13aWR0aD0yIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1yb3VuZD5gKTtcbnZhciBfdG1wbCQyMCA9IC8qIEBfX1BVUkVfXyAqLyB0ZW1wbGF0ZShgPHN2ZyB3aWR0aD0xNCBoZWlnaHQ9MTQgdmlld0JveD1cIjAgMCAyNCAyNFwiZmlsbD1ub25lIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnPjxwYXRoIGQ9XCJNOS41IDE1VjlNMTQuNSAxNVY5TTIyIDEyQzIyIDE3LjUyMjggMTcuNTIyOCAyMiAxMiAyMkM2LjQ3NzE1IDIyIDIgMTcuNTIyOCAyIDEyQzIgNi40NzcxNSA2LjQ3NzE1IDIgMTIgMkMxNy41MjI4IDIgMjIgNi40NzcxNSAyMiAxMlpcInN0cm9rZT1jdXJyZW50Q29sb3Igc3Ryb2tlLXdpZHRoPTIgc3Ryb2tlLWxpbmVjYXA9cm91bmQgc3Ryb2tlLWxpbmVqb2luPXJvdW5kPmApO1xudmFyIF90bXBsJDIxID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8c3ZnIHZlcnNpb249MS4wIHZpZXdCb3g9XCIwIDAgNjMzIDYzM1wiPjxsaW5lYXJHcmFkaWVudCB4MT0tNjY2LjQ1IHgyPS02NjYuNDUgeTE9MTYzLjI4IHkyPTE2My45OSBncmFkaWVudFRyYW5zZm9ybT1cIm1hdHJpeCg2MzMgMCAwIDYzMyA0MjIxNzcgLTEwMzM1OClcImdyYWRpZW50VW5pdHM9dXNlclNwYWNlT25Vc2U+PHN0b3Agc3RvcC1jb2xvcj0jNkJEQUZGIG9mZnNldD0wPjwvc3RvcD48c3RvcCBzdG9wLWNvbG9yPSNGOUZGQjUgb2Zmc2V0PS4zMj48L3N0b3A+PHN0b3Agc3RvcC1jb2xvcj0jRkZBNzcwIG9mZnNldD0uNzE+PC9zdG9wPjxzdG9wIHN0b3AtY29sb3I9I0ZGNzM3MyBvZmZzZXQ9MT48L3N0b3A+PC9saW5lYXJHcmFkaWVudD48Y2lyY2xlIGN4PTMxNi41IGN5PTMxNi41IHI9MzE2LjU+PC9jaXJjbGU+PGRlZnM+PGZpbHRlciB4PS0xMzcuNSB5PTQxMiB3aWR0aD00NTQgaGVpZ2h0PTM5Ni45IGZpbHRlclVuaXRzPXVzZXJTcGFjZU9uVXNlPjxmZUNvbG9yTWF0cml4IHZhbHVlcz1cIjEgMCAwIDAgMCAgMCAxIDAgMCAwICAwIDAgMSAwIDAgIDAgMCAwIDEgMFwiPjwvZmVDb2xvck1hdHJpeD48L2ZpbHRlcj48L2RlZnM+PG1hc2sgeD0tMTM3LjUgeT00MTIgd2lkdGg9NDU0IGhlaWdodD0zOTYuOSBtYXNrVW5pdHM9dXNlclNwYWNlT25Vc2U+PGc+PGNpcmNsZSBjeD0zMTYuNSBjeT0zMTYuNSByPTMxNi41IGZpbGw9I2ZmZj48L2NpcmNsZT48L2c+PC9tYXNrPjxnPjxlbGxpcHNlIGN4PTg5LjUgY3k9NjEwLjUgcng9MjE0LjUgcnk9MTg2IGZpbGw9IzAxNTA2NCBzdHJva2U9IzAwQ0ZFMiBzdHJva2Utd2lkdGg9MjU+PC9lbGxpcHNlPjwvZz48ZGVmcz48ZmlsdGVyIHg9MzE2LjUgeT00MTIgd2lkdGg9NDU0IGhlaWdodD0zOTYuOSBmaWx0ZXJVbml0cz11c2VyU3BhY2VPblVzZT48ZmVDb2xvck1hdHJpeCB2YWx1ZXM9XCIxIDAgMCAwIDAgIDAgMSAwIDAgMCAgMCAwIDEgMCAwICAwIDAgMCAxIDBcIj48L2ZlQ29sb3JNYXRyaXg+PC9maWx0ZXI+PC9kZWZzPjxtYXNrIHg9MzE2LjUgeT00MTIgd2lkdGg9NDU0IGhlaWdodD0zOTYuOSBtYXNrVW5pdHM9dXNlclNwYWNlT25Vc2U+PGc+PGNpcmNsZSBjeD0zMTYuNSBjeT0zMTYuNSByPTMxNi41IGZpbGw9I2ZmZj48L2NpcmNsZT48L2c+PC9tYXNrPjxnPjxlbGxpcHNlIGN4PTU0My41IGN5PTYxMC41IHJ4PTIxNC41IHJ5PTE4NiBmaWxsPSMwMTUwNjQgc3Ryb2tlPSMwMENGRTIgc3Ryb2tlLXdpZHRoPTI1PjwvZWxsaXBzZT48L2c+PGRlZnM+PGZpbHRlciB4PS0xMzcuNSB5PTQ1MCB3aWR0aD00NTQgaGVpZ2h0PTM5Ni45IGZpbHRlclVuaXRzPXVzZXJTcGFjZU9uVXNlPjxmZUNvbG9yTWF0cml4IHZhbHVlcz1cIjEgMCAwIDAgMCAgMCAxIDAgMCAwICAwIDAgMSAwIDAgIDAgMCAwIDEgMFwiPjwvZmVDb2xvck1hdHJpeD48L2ZpbHRlcj48L2RlZnM+PG1hc2sgeD0tMTM3LjUgeT00NTAgd2lkdGg9NDU0IGhlaWdodD0zOTYuOSBtYXNrVW5pdHM9dXNlclNwYWNlT25Vc2U+PGc+PGNpcmNsZSBjeD0zMTYuNSBjeT0zMTYuNSByPTMxNi41IGZpbGw9I2ZmZj48L2NpcmNsZT48L2c+PC9tYXNrPjxnPjxlbGxpcHNlIGN4PTg5LjUgY3k9NjQ4LjUgcng9MjE0LjUgcnk9MTg2IGZpbGw9IzAxNTA2NCBzdHJva2U9IzAwQThCOCBzdHJva2Utd2lkdGg9MjU+PC9lbGxpcHNlPjwvZz48ZGVmcz48ZmlsdGVyIHg9MzE2LjUgeT00NTAgd2lkdGg9NDU0IGhlaWdodD0zOTYuOSBmaWx0ZXJVbml0cz11c2VyU3BhY2VPblVzZT48ZmVDb2xvck1hdHJpeCB2YWx1ZXM9XCIxIDAgMCAwIDAgIDAgMSAwIDAgMCAgMCAwIDEgMCAwICAwIDAgMCAxIDBcIj48L2ZlQ29sb3JNYXRyaXg+PC9maWx0ZXI+PC9kZWZzPjxtYXNrIHg9MzE2LjUgeT00NTAgd2lkdGg9NDU0IGhlaWdodD0zOTYuOSBtYXNrVW5pdHM9dXNlclNwYWNlT25Vc2U+PGc+PGNpcmNsZSBjeD0zMTYuNSBjeT0zMTYuNSByPTMxNi41IGZpbGw9I2ZmZj48L2NpcmNsZT48L2c+PC9tYXNrPjxnPjxlbGxpcHNlIGN4PTU0My41IGN5PTY0OC41IHJ4PTIxNC41IHJ5PTE4NiBmaWxsPSMwMTUwNjQgc3Ryb2tlPSMwMEE4Qjggc3Ryb2tlLXdpZHRoPTI1PjwvZWxsaXBzZT48L2c+PGRlZnM+PGZpbHRlciB4PS0xMzcuNSB5PTQ4NiB3aWR0aD00NTQgaGVpZ2h0PTM5Ni45IGZpbHRlclVuaXRzPXVzZXJTcGFjZU9uVXNlPjxmZUNvbG9yTWF0cml4IHZhbHVlcz1cIjEgMCAwIDAgMCAgMCAxIDAgMCAwICAwIDAgMSAwIDAgIDAgMCAwIDEgMFwiPjwvZmVDb2xvck1hdHJpeD48L2ZpbHRlcj48L2RlZnM+PG1hc2sgeD0tMTM3LjUgeT00ODYgd2lkdGg9NDU0IGhlaWdodD0zOTYuOSBtYXNrVW5pdHM9dXNlclNwYWNlT25Vc2U+PGc+PGNpcmNsZSBjeD0zMTYuNSBjeT0zMTYuNSByPTMxNi41IGZpbGw9I2ZmZj48L2NpcmNsZT48L2c+PC9tYXNrPjxnPjxlbGxpcHNlIGN4PTg5LjUgY3k9Njg0LjUgcng9MjE0LjUgcnk9MTg2IGZpbGw9IzAxNTA2NCBzdHJva2U9IzAwNzc4MiBzdHJva2Utd2lkdGg9MjU+PC9lbGxpcHNlPjwvZz48ZGVmcz48ZmlsdGVyIHg9MzE2LjUgeT00ODYgd2lkdGg9NDU0IGhlaWdodD0zOTYuOSBmaWx0ZXJVbml0cz11c2VyU3BhY2VPblVzZT48ZmVDb2xvck1hdHJpeCB2YWx1ZXM9XCIxIDAgMCAwIDAgIDAgMSAwIDAgMCAgMCAwIDEgMCAwICAwIDAgMCAxIDBcIj48L2ZlQ29sb3JNYXRyaXg+PC9maWx0ZXI+PC9kZWZzPjxtYXNrIHg9MzE2LjUgeT00ODYgd2lkdGg9NDU0IGhlaWdodD0zOTYuOSBtYXNrVW5pdHM9dXNlclNwYWNlT25Vc2U+PGc+PGNpcmNsZSBjeD0zMTYuNSBjeT0zMTYuNSByPTMxNi41IGZpbGw9I2ZmZj48L2NpcmNsZT48L2c+PC9tYXNrPjxnPjxlbGxpcHNlIGN4PTU0My41IGN5PTY4NC41IHJ4PTIxNC41IHJ5PTE4NiBmaWxsPSMwMTUwNjQgc3Ryb2tlPSMwMDc3ODIgc3Ryb2tlLXdpZHRoPTI1PjwvZWxsaXBzZT48L2c+PGRlZnM+PGZpbHRlciB4PTI3Mi4yIHk9MzA4IHdpZHRoPTE3Ni45IGhlaWdodD0xMjkuMyBmaWx0ZXJVbml0cz11c2VyU3BhY2VPblVzZT48ZmVDb2xvck1hdHJpeCB2YWx1ZXM9XCIxIDAgMCAwIDAgIDAgMSAwIDAgMCAgMCAwIDEgMCAwICAwIDAgMCAxIDBcIj48L2ZlQ29sb3JNYXRyaXg+PC9maWx0ZXI+PC9kZWZzPjxtYXNrIHg9MjcyLjIgeT0zMDggd2lkdGg9MTc2LjkgaGVpZ2h0PTEyOS4zIG1hc2tVbml0cz11c2VyU3BhY2VPblVzZT48Zz48Y2lyY2xlIGN4PTMxNi41IGN5PTMxNi41IHI9MzE2LjUgZmlsbD0jZmZmPjwvY2lyY2xlPjwvZz48L21hc2s+PGc+PGxpbmUgeDE9NDM2IHgyPTQzMSB5MT00MDMuMiB5Mj00MzEuOCBmaWxsPW5vbmUgc3Ryb2tlPSMwMDAgc3Ryb2tlLWxpbmVjYXA9cm91bmQgc3Ryb2tlLWxpbmVqb2luPWJldmVsIHN0cm9rZS13aWR0aD0xMT48L2xpbmU+PGxpbmUgeDE9MjkxIHgyPTI4MCB5MT0zNDEuNSB5Mj00MDMuNSBmaWxsPW5vbmUgc3Ryb2tlPSMwMDAgc3Ryb2tlLWxpbmVjYXA9cm91bmQgc3Ryb2tlLWxpbmVqb2luPWJldmVsIHN0cm9rZS13aWR0aD0xMT48L2xpbmU+PGxpbmUgeDE9MzMyLjkgeDI9MzI4LjYgeTE9Mzg0LjEgeTI9NDExLjIgZmlsbD1ub25lIHN0cm9rZT0jMDAwIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1iZXZlbCBzdHJva2Utd2lkdGg9MTE+PC9saW5lPjxsaW5lYXJHcmFkaWVudCB4MT0tNjcwLjc1IHgyPS02NzEuNTkgeTE9MTY0LjQgeTI9MTY0LjQ5IGdyYWRpZW50VHJhbnNmb3JtPVwibWF0cml4KC0xODQuMTYgLTMyLjQ3MiAtMTEuNDYxIDY0Ljk5NyAtMTIxMzU5IC0zMjEyNilcImdyYWRpZW50VW5pdHM9dXNlclNwYWNlT25Vc2U+PHN0b3Agc3RvcC1jb2xvcj0jRUUyNzAwIG9mZnNldD0wPjwvc3RvcD48c3RvcCBzdG9wLWNvbG9yPSNGRjAwOEUgb2Zmc2V0PTE+PC9zdG9wPjwvbGluZWFyR3JhZGllbnQ+PHBhdGggZD1cIm0zNDQuMSAzNjMgOTcuNyAxNy4yYzUuOCAyLjEgOC4yIDYuMSA3LjEgMTIuMXMtNC43IDkuMi0xMSA5LjlsLTEwNi0xOC43LTU3LjUtNTkuMmMtMy4yLTQuOC0yLjktOS4xIDAuOC0xMi44czguMy00LjQgMTMuNy0yLjFsNTUuMiA1My42elwiY2xpcC1ydWxlPWV2ZW5vZGQgZmlsbC1ydWxlPWV2ZW5vZGQ+PC9wYXRoPjxsaW5lIHgxPTQyOC4yIHgyPTQyOS4xIHkxPTM4NC41IHkyPTM3OCBmaWxsPW5vbmUgc3Ryb2tlPSNmZmYgc3Ryb2tlLWxpbmVjYXA9cm91bmQgc3Ryb2tlLWxpbmVqb2luPWJldmVsIHN0cm9rZS13aWR0aD03PjwvbGluZT48bGluZSB4MT0zOTUuMiB4Mj0zOTYuMSB5MT0zNzkuNSB5Mj0zNzMgZmlsbD1ub25lIHN0cm9rZT0jZmZmIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1iZXZlbCBzdHJva2Utd2lkdGg9Nz48L2xpbmU+PGxpbmUgeDE9MzYyLjIgeDI9MzYzLjEgeTE9MzczLjUgeTI9MzY3LjQgZmlsbD1ub25lIHN0cm9rZT0jZmZmIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1iZXZlbCBzdHJva2Utd2lkdGg9Nz48L2xpbmU+PGxpbmUgeDE9MzI0LjIgeDI9MzI4LjQgeTE9MzUxLjMgeTI9MzQ3LjQgZmlsbD1ub25lIHN0cm9rZT0jZmZmIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1iZXZlbCBzdHJva2Utd2lkdGg9Nz48L2xpbmU+PGxpbmUgeDE9MzAzLjIgeDI9MzA3LjQgeTE9MzMxLjMgeTI9MzI3LjQgZmlsbD1ub25lIHN0cm9rZT0jZmZmIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1iZXZlbCBzdHJva2Utd2lkdGg9Nz48L2xpbmU+PC9nPjxkZWZzPjxmaWx0ZXIgeD03My4yIHk9MTEzLjggd2lkdGg9MjgwLjYgaGVpZ2h0PTMxNy40IGZpbHRlclVuaXRzPXVzZXJTcGFjZU9uVXNlPjxmZUNvbG9yTWF0cml4IHZhbHVlcz1cIjEgMCAwIDAgMCAgMCAxIDAgMCAwICAwIDAgMSAwIDAgIDAgMCAwIDEgMFwiPjwvZmVDb2xvck1hdHJpeD48L2ZpbHRlcj48L2RlZnM+PG1hc2sgeD03My4yIHk9MTEzLjggd2lkdGg9MjgwLjYgaGVpZ2h0PTMxNy40IG1hc2tVbml0cz11c2VyU3BhY2VPblVzZT48Zz48Y2lyY2xlIGN4PTMxNi41IGN5PTMxNi41IHI9MzE2LjUgZmlsbD0jZmZmPjwvY2lyY2xlPjwvZz48L21hc2s+PGc+PGxpbmVhckdyYWRpZW50IHgxPS02NzIuMTYgeDI9LTY3Mi4xNiB5MT0xNjUuMDMgeTI9MTY2LjAzIGdyYWRpZW50VHJhbnNmb3JtPVwibWF0cml4KC0xMDAuMTggNDguODYxIDk3Ljk3NiAyMDAuODggLTgzMzQyIC05My4wNTkpXCJncmFkaWVudFVuaXRzPXVzZXJTcGFjZU9uVXNlPjxzdG9wIHN0b3AtY29sb3I9I0ExNzUwMCBvZmZzZXQ9MD48L3N0b3A+PHN0b3Agc3RvcC1jb2xvcj0jNUQyMTAwIG9mZnNldD0xPjwvc3RvcD48L2xpbmVhckdyYWRpZW50PjxwYXRoIGQ9XCJtMTkyLjMgMjAzYzguMSAzNy4zIDE0IDczLjYgMTcuOCAxMDkuMSAzLjggMzUuNCAyLjggNzUuMS0zIDExOS4ybDYxLjItMTYuN2MtMTUuNi01OS0yNS4yLTk3LjktMjguNi0xMTYuNnMtMTAuOC01MS45LTIyLjEtOTkuNmwtMjUuMyA0LjZcImNsaXAtcnVsZT1ldmVub2RkIGZpbGwtcnVsZT1ldmVub2RkPjwvcGF0aD48ZyBzdHJva2U9IzJGOEEwMD48bGluZWFyR3JhZGllbnQgeDE9LTY2MC4yMyB4Mj0tNjYwLjIzIHkxPTE2Ni43MiB5Mj0xNjcuNzIgZ3JhZGllbnRUcmFuc2Zvcm09XCJtYXRyaXgoOTIuNjgzIDQuODU3MyAtMi4wMjU5IDM4LjY1NyA2MTY4MCAtMzA4OC42KVwiZ3JhZGllbnRVbml0cz11c2VyU3BhY2VPblVzZT48c3RvcCBzdG9wLWNvbG9yPSMyRjhBMDAgb2Zmc2V0PTA+PC9zdG9wPjxzdG9wIHN0b3AtY29sb3I9IzkwRkY1NyBvZmZzZXQ9MT48L3N0b3A+PC9saW5lYXJHcmFkaWVudD48cGF0aCBkPVwibTE5NSAxODMuOXMtMTIuNi0yMi4xLTM2LjUtMjkuOWMtMTUuOS01LjItMzQuNC0xLjUtNTUuNSAxMS4xIDE1LjkgMTQuMyAyOS41IDIyLjYgNDAuNyAyNC45IDE2LjggMy42IDUxLjMtNi4xIDUxLjMtNi4xelwiY2xpcC1ydWxlPWV2ZW5vZGQgZmlsbC1ydWxlPWV2ZW5vZGQgc3Ryb2tlLXdpZHRoPTEzPjwvcGF0aD48bGluZWFyR3JhZGllbnQgeDE9LTY2MS4zNiB4Mj0tNjYxLjM2IHkxPTE2NC4xOCB5Mj0xNjUuMTggZ3JhZGllbnRUcmFuc2Zvcm09XCJtYXRyaXgoMTEwIDUuNzY0OCAtNi4zNTk5IDEyMS4zNSA3MzkzMyAtMTU5MzMpXCJncmFkaWVudFVuaXRzPXVzZXJTcGFjZU9uVXNlPjxzdG9wIHN0b3AtY29sb3I9IzJGOEEwMCBvZmZzZXQ9MD48L3N0b3A+PHN0b3Agc3RvcC1jb2xvcj0jOTBGRjU3IG9mZnNldD0xPjwvc3RvcD48L2xpbmVhckdyYWRpZW50PjxwYXRoIGQ9XCJtMTk0LjkgMTg0LjVzLTQ3LjUtOC41LTgzLjIgMTUuN2MtMjMuOCAxNi4yLTM0LjMgNDkuMy0zMS42IDk5LjQgMzAuMy0yNy44IDUyLjEtNDguNSA2NS4yLTYxLjkgMTkuOC0yMC4yIDQ5LjYtNTMuMiA0OS42LTUzLjJ6XCJjbGlwLXJ1bGU9ZXZlbm9kZCBmaWxsLXJ1bGU9ZXZlbm9kZCBzdHJva2Utd2lkdGg9MTM+PC9wYXRoPjxsaW5lYXJHcmFkaWVudCB4MT0tNjU2Ljc5IHgyPS02NTYuNzkgeTE9MTY1LjE1IHkyPTE2Ni4xNSBncmFkaWVudFRyYW5zZm9ybT1cIm1hdHJpeCg2Mi45NTQgMy4yOTkzIC0zLjUwMjMgNjYuODI4IDQyMTU2IC04NzU0LjEpXCJncmFkaWVudFVuaXRzPXVzZXJTcGFjZU9uVXNlPjxzdG9wIHN0b3AtY29sb3I9IzJGOEEwMCBvZmZzZXQ9MD48L3N0b3A+PHN0b3Agc3RvcC1jb2xvcj0jOTBGRjU3IG9mZnNldD0xPjwvc3RvcD48L2xpbmVhckdyYWRpZW50PjxwYXRoIGQ9XCJtMTk1IDE4My45Yy0wLjgtMjEuOSA2LTM4IDIwLjYtNDguMnMyOS44LTE1LjQgNDUuNS0xNS4zYy02LjEgMjEuNC0xNC41IDM1LjgtMjUuMiA0My40cy0yNC40IDE0LjItNDAuOSAyMC4xelwiY2xpcC1ydWxlPWV2ZW5vZGQgZmlsbC1ydWxlPWV2ZW5vZGQgc3Ryb2tlLXdpZHRoPTEzPjwvcGF0aD48bGluZWFyR3JhZGllbnQgeDE9LTY2My4wNyB4Mj0tNjYzLjA3IHkxPTE2NS40NCB5Mj0xNjYuNDQgZ3JhZGllbnRUcmFuc2Zvcm09XCJtYXRyaXgoMTUyLjQ3IDcuOTkwNyAtMy4wOTM2IDU5LjAyOSAxMDE4ODQgLTQzMTguNylcImdyYWRpZW50VW5pdHM9dXNlclNwYWNlT25Vc2U+PHN0b3Agc3RvcC1jb2xvcj0jMkY4QTAwIG9mZnNldD0wPjwvc3RvcD48c3RvcCBzdG9wLWNvbG9yPSM5MEZGNTcgb2Zmc2V0PTE+PC9zdG9wPjwvbGluZWFyR3JhZGllbnQ+PHBhdGggZD1cIm0xOTQuOSAxODQuNWMzMS45LTMwIDY0LjEtMzkuNyA5Ni43LTI5czUwLjggMzAuNCA1NC42IDU5LjFjLTM1LjItNS41LTYwLjQtOS42LTc1LjgtMTIuMS0xNS4zLTIuNi00MC41LTguNi03NS41LTE4elwiY2xpcC1ydWxlPWV2ZW5vZGQgZmlsbC1ydWxlPWV2ZW5vZGQgc3Ryb2tlLXdpZHRoPTEzPjwvcGF0aD48bGluZWFyR3JhZGllbnQgeDE9LTY2Mi41NyB4Mj0tNjYyLjU3IHkxPTE2NC40NCB5Mj0xNjUuNDQgZ3JhZGllbnRUcmFuc2Zvcm09XCJtYXRyaXgoMTM2LjQ2IDcuMTUxNyAtNS4yMTYzIDk5LjUzMyA5MTUzNiAtMTE0NDIpXCJncmFkaWVudFVuaXRzPXVzZXJTcGFjZU9uVXNlPjxzdG9wIHN0b3AtY29sb3I9IzJGOEEwMCBvZmZzZXQ9MD48L3N0b3A+PHN0b3Agc3RvcC1jb2xvcj0jOTBGRjU3IG9mZnNldD0xPjwvc3RvcD48L2xpbmVhckdyYWRpZW50PjxwYXRoIGQ9XCJtMTk0LjkgMTg0LjVjMzUuOC03LjYgNjUuNi0wLjIgODkuMiAyMnMzNy43IDQ5IDQyLjMgODAuM2MtMzkuOC05LjctNjguMy0yMy44LTg1LjUtNDIuNHMtMzIuNS0zOC41LTQ2LTU5Ljl6XCJjbGlwLXJ1bGU9ZXZlbm9kZCBmaWxsLXJ1bGU9ZXZlbm9kZCBzdHJva2Utd2lkdGg9MTM+PC9wYXRoPjxsaW5lYXJHcmFkaWVudCB4MT0tNjU2LjQzIHgyPS02NTYuNDMgeTE9MTYzLjg2IHkyPTE2NC44NiBncmFkaWVudFRyYW5zZm9ybT1cIm1hdHJpeCg2MC44NjYgMy4xODk5IC04Ljc3NzMgMTY3LjQ4IDQxNTYwIC0yNTE2OClcImdyYWRpZW50VW5pdHM9dXNlclNwYWNlT25Vc2U+PHN0b3Agc3RvcC1jb2xvcj0jMkY4QTAwIG9mZnNldD0wPjwvc3RvcD48c3RvcCBzdG9wLWNvbG9yPSM5MEZGNTcgb2Zmc2V0PTE+PC9zdG9wPjwvbGluZWFyR3JhZGllbnQ+PHBhdGggZD1cIm0xOTQuOSAxODQuNWMtMzMuNiAxMy44LTUzLjYgMzUuNy02MC4xIDY1LjZzLTMuNiA2My4xIDguNyA5OS42YzI3LjQtNDAuMyA0My4yLTY5LjYgNDcuNC04OHM1LjYtNDQuMSA0LTc3LjJ6XCJjbGlwLXJ1bGU9ZXZlbm9kZCBmaWxsLXJ1bGU9ZXZlbm9kZCBzdHJva2Utd2lkdGg9MTM+PC9wYXRoPjxwYXRoIGQ9XCJtMTk2LjUgMTgyLjNjLTE0LjggMjEuNi0yNS4xIDQxLjQtMzAuOCA1OS40cy05LjUgMzMtMTEuMSA0NS4xXCJmaWxsPW5vbmUgc3Ryb2tlLWxpbmVjYXA9cm91bmQgc3Ryb2tlLXdpZHRoPTg+PC9wYXRoPjxwYXRoIGQ9XCJtMTk0LjkgMTg1LjdjLTI0LjQgMS43LTQzLjggOS01OC4xIDIxLjhzLTI0LjcgMjUuNC0zMS4zIDM3LjhcImZpbGw9bm9uZSBzdHJva2UtbGluZWNhcD1yb3VuZCBzdHJva2Utd2lkdGg9OD48L3BhdGg+PHBhdGggZD1cIm0yMDQuNSAxNzYuNGMyOS43LTYuNyA1Mi04LjQgNjctNS4xczI2LjkgOC42IDM1LjggMTUuOVwiZmlsbD1ub25lIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS13aWR0aD04PjwvcGF0aD48cGF0aCBkPVwibTE5Ni41IDE4MS40YzIwLjMgOS45IDM4LjIgMjAuNSA1My45IDMxLjlzMjcuNCAyMi4xIDM1LjEgMzJcImZpbGw9bm9uZSBzdHJva2UtbGluZWNhcD1yb3VuZCBzdHJva2Utd2lkdGg9OD48L3BhdGg+PC9nPjwvZz48ZGVmcz48ZmlsdGVyIHg9NTAuNSB5PTM5OSB3aWR0aD01MzIgaGVpZ2h0PTYzMyBmaWx0ZXJVbml0cz11c2VyU3BhY2VPblVzZT48ZmVDb2xvck1hdHJpeCB2YWx1ZXM9XCIxIDAgMCAwIDAgIDAgMSAwIDAgMCAgMCAwIDEgMCAwICAwIDAgMCAxIDBcIj48L2ZlQ29sb3JNYXRyaXg+PC9maWx0ZXI+PC9kZWZzPjxtYXNrIHg9NTAuNSB5PTM5OSB3aWR0aD01MzIgaGVpZ2h0PTYzMyBtYXNrVW5pdHM9dXNlclNwYWNlT25Vc2U+PGc+PGNpcmNsZSBjeD0zMTYuNSBjeT0zMTYuNSByPTMxNi41IGZpbGw9I2ZmZj48L2NpcmNsZT48L2c+PC9tYXNrPjxnPjxsaW5lYXJHcmFkaWVudCB4MT0tNjY2LjA2IHgyPS02NjYuMjMgeTE9MTYzLjM2IHkyPTE2My43NSBncmFkaWVudFRyYW5zZm9ybT1cIm1hdHJpeCg1MzIgMCAwIDYzMyAzNTQ3NjAgLTEwMjk1OSlcImdyYWRpZW50VW5pdHM9dXNlclNwYWNlT25Vc2U+PHN0b3Agc3RvcC1jb2xvcj0jRkZGNDAwIG9mZnNldD0wPjwvc3RvcD48c3RvcCBzdG9wLWNvbG9yPSMzQzg3MDAgb2Zmc2V0PTE+PC9zdG9wPjwvbGluZWFyR3JhZGllbnQ+PGVsbGlwc2UgY3g9MzE2LjUgY3k9NzE1LjUgcng9MjY2IHJ5PTMxNi41PjwvZWxsaXBzZT48L2c+PGRlZnM+PGZpbHRlciB4PTM5MSB5PS0yNCB3aWR0aD0yODggaGVpZ2h0PTI4MyBmaWx0ZXJVbml0cz11c2VyU3BhY2VPblVzZT48ZmVDb2xvck1hdHJpeCB2YWx1ZXM9XCIxIDAgMCAwIDAgIDAgMSAwIDAgMCAgMCAwIDEgMCAwICAwIDAgMCAxIDBcIj48L2ZlQ29sb3JNYXRyaXg+PC9maWx0ZXI+PC9kZWZzPjxtYXNrIHg9MzkxIHk9LTI0IHdpZHRoPTI4OCBoZWlnaHQ9MjgzIG1hc2tVbml0cz11c2VyU3BhY2VPblVzZT48Zz48Y2lyY2xlIGN4PTMxNi41IGN5PTMxNi41IHI9MzE2LjUgZmlsbD0jZmZmPjwvY2lyY2xlPjwvZz48L21hc2s+PGc+PGxpbmVhckdyYWRpZW50IHgxPS02NjQuNTYgeDI9LTY2NC41NiB5MT0xNjMuNzkgeTI9MTY0Ljc5IGdyYWRpZW50VHJhbnNmb3JtPVwibWF0cml4KDIyNyAwIDAgMjI3IDE1MTQyMSAtMzcyMDQpXCJncmFkaWVudFVuaXRzPXVzZXJTcGFjZU9uVXNlPjxzdG9wIHN0b3AtY29sb3I9I0ZGREYwMCBvZmZzZXQ9MD48L3N0b3A+PHN0b3Agc3RvcC1jb2xvcj0jRkY5RDAwIG9mZnNldD0xPjwvc3RvcD48L2xpbmVhckdyYWRpZW50PjxjaXJjbGUgY3g9NTY1LjUgY3k9ODkuNSByPTExMy41PjwvY2lyY2xlPjxsaW5lYXJHcmFkaWVudCB4MT0tNjQ0LjUgeDI9LTY0NS43NyB5MT0zNDIgeTI9MzQyIGdyYWRpZW50VHJhbnNmb3JtPVwibWF0cml4KDMwIDAgMCAxIDE5NzcwIC0yNTMpXCJncmFkaWVudFVuaXRzPXVzZXJTcGFjZU9uVXNlPjxzdG9wIHN0b3AtY29sb3I9I0ZGQTQwMCBvZmZzZXQ9MD48L3N0b3A+PHN0b3Agc3RvcC1jb2xvcj0jRkY1RTAwIG9mZnNldD0xPjwvc3RvcD48L2xpbmVhckdyYWRpZW50PjxsaW5lIHgxPTQyNyB4Mj0zOTcgeTE9ODkgeTI9ODkgZmlsbD1ub25lIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1iZXZlbCBzdHJva2Utd2lkdGg9MTI+PC9saW5lPjxsaW5lYXJHcmFkaWVudCB4MT0tNjQxLjU2IHgyPS02NDIuODMgeTE9MTk2LjAyIHkyPTE5Ni4wNyBncmFkaWVudFRyYW5zZm9ybT1cIm1hdHJpeCgyNi41IDAgMCA1LjUgMTc0MzkgLTEwMjUuNSlcImdyYWRpZW50VW5pdHM9dXNlclNwYWNlT25Vc2U+PHN0b3Agc3RvcC1jb2xvcj0jRkZBNDAwIG9mZnNldD0wPjwvc3RvcD48c3RvcCBzdG9wLWNvbG9yPSNGRjVFMDAgb2Zmc2V0PTE+PC9zdG9wPjwvbGluZWFyR3JhZGllbnQ+PGxpbmUgeDE9NDMwLjUgeDI9NDA0IHkxPTU1LjUgeTI9NTAgZmlsbD1ub25lIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1iZXZlbCBzdHJva2Utd2lkdGg9MTI+PC9saW5lPjxsaW5lYXJHcmFkaWVudCB4MT0tNjQzLjczIHgyPS02NDUgeTE9MTg1LjgzIHkyPTE4NS45IGdyYWRpZW50VHJhbnNmb3JtPVwibWF0cml4KDI5IDAgMCA4IDE5MTA3IC0xMzYxKVwiZ3JhZGllbnRVbml0cz11c2VyU3BhY2VPblVzZT48c3RvcCBzdG9wLWNvbG9yPSNGRkE0MDAgb2Zmc2V0PTA+PC9zdG9wPjxzdG9wIHN0b3AtY29sb3I9I0ZGNUUwMCBvZmZzZXQ9MT48L3N0b3A+PC9saW5lYXJHcmFkaWVudD48bGluZSB4MT00MzEgeDI9NDAyIHkxPTEyMiB5Mj0xMzAgZmlsbD1ub25lIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1iZXZlbCBzdHJva2Utd2lkdGg9MTI+PC9saW5lPjxsaW5lYXJHcmFkaWVudCB4MT0tNjM4Ljk0IHgyPS02NDAuMjIgeTE9MTc3LjA5IHkyPTE3Ny4zOSBncmFkaWVudFRyYW5zZm9ybT1cIm1hdHJpeCgyNCAwIDAgMTMgMTU3ODMgLTIxNDUpXCJncmFkaWVudFVuaXRzPXVzZXJTcGFjZU9uVXNlPjxzdG9wIHN0b3AtY29sb3I9I0ZGQTQwMCBvZmZzZXQ9MD48L3N0b3A+PHN0b3Agc3RvcC1jb2xvcj0jRkY1RTAwIG9mZnNldD0xPjwvc3RvcD48L2xpbmVhckdyYWRpZW50PjxsaW5lIHgxPTQ0MiB4Mj00MTggeTE9MTUzIHkyPTE2NiBmaWxsPW5vbmUgc3Ryb2tlLWxpbmVjYXA9cm91bmQgc3Ryb2tlLWxpbmVqb2luPWJldmVsIHN0cm9rZS13aWR0aD0xMj48L2xpbmU+PGxpbmVhckdyYWRpZW50IHgxPS02MzMuNDIgeDI9LTYzNC43IHkxPTE3Mi40MSB5Mj0xNzMuMzEgZ3JhZGllbnRUcmFuc2Zvcm09XCJtYXRyaXgoMjAgMCAwIDE5IDEzMTM3IC0zMDk2KVwiZ3JhZGllbnRVbml0cz11c2VyU3BhY2VPblVzZT48c3RvcCBzdG9wLWNvbG9yPSNGRkE0MDAgb2Zmc2V0PTA+PC9zdG9wPjxzdG9wIHN0b3AtY29sb3I9I0ZGNUUwMCBvZmZzZXQ9MT48L3N0b3A+PC9saW5lYXJHcmFkaWVudD48bGluZSB4MT00NjQgeDI9NDQ0IHkxPTE4MCB5Mj0xOTkgZmlsbD1ub25lIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1iZXZlbCBzdHJva2Utd2lkdGg9MTI+PC9saW5lPjxsaW5lYXJHcmFkaWVudCB4MT0tNjE5LjA1IHgyPS02MTkuNTIgeTE9MTcwLjgyIHkyPTE3MS44MiBncmFkaWVudFRyYW5zZm9ybT1cIm1hdHJpeCgxMy44MyAwIDAgMjIuODUgOTA1MCAtMzcwMy40KVwiZ3JhZGllbnRVbml0cz11c2VyU3BhY2VPblVzZT48c3RvcCBzdG9wLWNvbG9yPSNGRkE0MDAgb2Zmc2V0PTA+PC9zdG9wPjxzdG9wIHN0b3AtY29sb3I9I0ZGNUUwMCBvZmZzZXQ9MT48L3N0b3A+PC9saW5lYXJHcmFkaWVudD48bGluZSB4MT00OTEuNCB4Mj00NzcuNSB5MT0yMDMgeTI9MjI1LjkgZmlsbD1ub25lIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1iZXZlbCBzdHJva2Utd2lkdGg9MTI+PC9saW5lPjxsaW5lYXJHcmFkaWVudCB4MT0tNTc4LjUgeDI9LTU3OC42MyB5MT0xNzAuMzEgeTI9MTcxLjMxIGdyYWRpZW50VHJhbnNmb3JtPVwibWF0cml4KDcuNSAwIDAgMjQuNSA0ODYwIC0zOTUzKVwiZ3JhZGllbnRVbml0cz11c2VyU3BhY2VPblVzZT48c3RvcCBzdG9wLWNvbG9yPSNGRkE0MDAgb2Zmc2V0PTA+PC9zdG9wPjxzdG9wIHN0b3AtY29sb3I9I0ZGNUUwMCBvZmZzZXQ9MT48L3N0b3A+PC9saW5lYXJHcmFkaWVudD48bGluZSB4MT01MjQuNSB4Mj01MTcgeTE9MjE5LjUgeTI9MjQ0IGZpbGw9bm9uZSBzdHJva2UtbGluZWNhcD1yb3VuZCBzdHJva2UtbGluZWpvaW49YmV2ZWwgc3Ryb2tlLXdpZHRoPTEyPjwvbGluZT48bGluZWFyR3JhZGllbnQgeDE9NjY2LjUgeDI9NjY2LjUgeTE9MTcwLjMxIHkyPTE3MS4zMSBncmFkaWVudFRyYW5zZm9ybT1cIm1hdHJpeCguNSAwIDAgMjQuNSAyMzEuNSAtMzk0NClcImdyYWRpZW50VW5pdHM9dXNlclNwYWNlT25Vc2U+PHN0b3Agc3RvcC1jb2xvcj0jRkZBNDAwIG9mZnNldD0wPjwvc3RvcD48c3RvcCBzdG9wLWNvbG9yPSNGRjVFMDAgb2Zmc2V0PTE+PC9zdG9wPjwvbGluZWFyR3JhZGllbnQ+PGxpbmUgeDE9NTY0LjUgeDI9NTY1IHkxPTIyOC41IHkyPTI1MyBmaWxsPW5vbmUgc3Ryb2tlLWxpbmVjYXA9cm91bmQgc3Ryb2tlLWxpbmVqb2luPWJldmVsIHN0cm9rZS13aWR0aD0xMj5gKTtcbmZ1bmN0aW9uIFNlYXJjaCgpIHtcbiAgcmV0dXJuIF90bXBsJCgpO1xufVxuZnVuY3Rpb24gVHJhc2goKSB7XG4gIHJldHVybiBfdG1wbCQyKCk7XG59XG5mdW5jdGlvbiBDaGV2cm9uRG93bigpIHtcbiAgcmV0dXJuIF90bXBsJDMoKTtcbn1cbmZ1bmN0aW9uIEFycm93VXAoKSB7XG4gIHJldHVybiBfdG1wbCQ0KCk7XG59XG5mdW5jdGlvbiBBcnJvd0Rvd24oKSB7XG4gIHJldHVybiBfdG1wbCQ1KCk7XG59XG5mdW5jdGlvbiBBcnJvd0xlZnQoKSB7XG4gIHJldHVybiAoKCkgPT4ge1xuICAgIGNvbnN0IF9lbCQ2ID0gX3RtcGwkNSgpO1xuICAgIF9lbCQ2LnN0eWxlLnNldFByb3BlcnR5KFwidHJhbnNmb3JtXCIsIFwicm90YXRlKDkwZGVnKVwiKTtcbiAgICByZXR1cm4gX2VsJDY7XG4gIH0pKCk7XG59XG5mdW5jdGlvbiBBcnJvd1JpZ2h0KCkge1xuICByZXR1cm4gKCgpID0+IHtcbiAgICBjb25zdCBfZWwkNyA9IF90bXBsJDUoKTtcbiAgICBfZWwkNy5zdHlsZS5zZXRQcm9wZXJ0eShcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSgtOTBkZWcpXCIpO1xuICAgIHJldHVybiBfZWwkNztcbiAgfSkoKTtcbn1cbmZ1bmN0aW9uIFN1bigpIHtcbiAgcmV0dXJuIF90bXBsJDYoKTtcbn1cbmZ1bmN0aW9uIE1vb24oKSB7XG4gIHJldHVybiBfdG1wbCQ3KCk7XG59XG5mdW5jdGlvbiBNb25pdG9yKCkge1xuICByZXR1cm4gX3RtcGwkOCgpO1xufVxuZnVuY3Rpb24gV2lmaSgpIHtcbiAgcmV0dXJuIF90bXBsJDkoKTtcbn1cbmZ1bmN0aW9uIE9mZmxpbmUoKSB7XG4gIHJldHVybiBfdG1wbCQxMCgpO1xufVxuZnVuY3Rpb24gU2V0dGluZ3MoKSB7XG4gIHJldHVybiBfdG1wbCQxMSgpO1xufVxuZnVuY3Rpb24gQ29waWVyKCkge1xuICByZXR1cm4gX3RtcGwkMTIoKTtcbn1cbmZ1bmN0aW9uIENvcGllZENvcGllcihwcm9wcykge1xuICByZXR1cm4gKCgpID0+IHtcbiAgICBjb25zdCBfZWwkMTUgPSBfdG1wbCQxMygpLCBfZWwkMTYgPSBfZWwkMTUuZmlyc3RDaGlsZDtcbiAgICBjcmVhdGVSZW5kZXJFZmZlY3QoKCkgPT4gc2V0QXR0cmlidXRlKF9lbCQxNiwgXCJzdHJva2VcIiwgcHJvcHMudGhlbWUgPT09IFwiZGFya1wiID8gXCIjMTJCNzZBXCIgOiBcIiMwMjdBNDhcIikpO1xuICAgIHJldHVybiBfZWwkMTU7XG4gIH0pKCk7XG59XG5mdW5jdGlvbiBFcnJvckNvcGllcigpIHtcbiAgcmV0dXJuIF90bXBsJDE0KCk7XG59XG5mdW5jdGlvbiBMaXN0KCkge1xuICByZXR1cm4gX3RtcGwkMTUoKTtcbn1cbmZ1bmN0aW9uIENoZWNrKHByb3BzKSB7XG4gIHJldHVybiBbY3JlYXRlQ29tcG9uZW50KFNob3csIHtcbiAgICBnZXQgd2hlbigpIHtcbiAgICAgIHJldHVybiBwcm9wcy5jaGVja2VkO1xuICAgIH0sXG4gICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgY29uc3QgX2VsJDE5ID0gX3RtcGwkMTMoKSwgX2VsJDIwID0gX2VsJDE5LmZpcnN0Q2hpbGQ7XG4gICAgICBjcmVhdGVSZW5kZXJFZmZlY3QoKCkgPT4gc2V0QXR0cmlidXRlKF9lbCQyMCwgXCJzdHJva2VcIiwgcHJvcHMudGhlbWUgPT09IFwiZGFya1wiID8gXCIjOUI4QUZCXCIgOiBcIiM2OTM4RUZcIikpO1xuICAgICAgcmV0dXJuIF9lbCQxOTtcbiAgICB9XG4gIH0pLCBjcmVhdGVDb21wb25lbnQoU2hvdywge1xuICAgIGdldCB3aGVuKCkge1xuICAgICAgcmV0dXJuICFwcm9wcy5jaGVja2VkO1xuICAgIH0sXG4gICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgY29uc3QgX2VsJDIxID0gX3RtcGwkMTYoKSwgX2VsJDIyID0gX2VsJDIxLmZpcnN0Q2hpbGQ7XG4gICAgICBjcmVhdGVSZW5kZXJFZmZlY3QoKCkgPT4gc2V0QXR0cmlidXRlKF9lbCQyMiwgXCJzdHJva2VcIiwgcHJvcHMudGhlbWUgPT09IFwiZGFya1wiID8gXCIjOUI4QUZCXCIgOiBcIiM2OTM4RUZcIikpO1xuICAgICAgcmV0dXJuIF9lbCQyMTtcbiAgICB9XG4gIH0pXTtcbn1cbmZ1bmN0aW9uIENoZWNrQ2lyY2xlKCkge1xuICByZXR1cm4gX3RtcGwkMTcoKTtcbn1cbmZ1bmN0aW9uIExvYWRpbmdDaXJjbGUoKSB7XG4gIHJldHVybiBfdG1wbCQxOCgpO1xufVxuZnVuY3Rpb24gWENpcmNsZSgpIHtcbiAgcmV0dXJuIF90bXBsJDE5KCk7XG59XG5mdW5jdGlvbiBQYXVzZUNpcmNsZSgpIHtcbiAgcmV0dXJuIF90bXBsJDIwKCk7XG59XG5mdW5jdGlvbiBUYW5zdGFja0xvZ28oKSB7XG4gIGNvbnN0IGlkID0gY3JlYXRlVW5pcXVlSWQoKTtcbiAgcmV0dXJuICgoKSA9PiB7XG4gICAgY29uc3QgX2VsJDI3ID0gX3RtcGwkMjEoKSwgX2VsJDI4ID0gX2VsJDI3LmZpcnN0Q2hpbGQsIF9lbCQyOSA9IF9lbCQyOC5uZXh0U2libGluZywgX2VsJDMwID0gX2VsJDI5Lm5leHRTaWJsaW5nLCBfZWwkMzEgPSBfZWwkMzAuZmlyc3RDaGlsZCwgX2VsJDMyID0gX2VsJDMwLm5leHRTaWJsaW5nLCBfZWwkMzMgPSBfZWwkMzIuZmlyc3RDaGlsZCwgX2VsJDM0ID0gX2VsJDMyLm5leHRTaWJsaW5nLCBfZWwkMzUgPSBfZWwkMzQubmV4dFNpYmxpbmcsIF9lbCQzNiA9IF9lbCQzNS5maXJzdENoaWxkLCBfZWwkMzcgPSBfZWwkMzUubmV4dFNpYmxpbmcsIF9lbCQzOCA9IF9lbCQzNy5maXJzdENoaWxkLCBfZWwkMzkgPSBfZWwkMzcubmV4dFNpYmxpbmcsIF9lbCQ0MCA9IF9lbCQzOS5uZXh0U2libGluZywgX2VsJDQxID0gX2VsJDQwLmZpcnN0Q2hpbGQsIF9lbCQ0MiA9IF9lbCQ0MC5uZXh0U2libGluZywgX2VsJDQzID0gX2VsJDQyLmZpcnN0Q2hpbGQsIF9lbCQ0NCA9IF9lbCQ0Mi5uZXh0U2libGluZywgX2VsJDQ1ID0gX2VsJDQ0Lm5leHRTaWJsaW5nLCBfZWwkNDYgPSBfZWwkNDUuZmlyc3RDaGlsZCwgX2VsJDQ3ID0gX2VsJDQ1Lm5leHRTaWJsaW5nLCBfZWwkNDggPSBfZWwkNDcuZmlyc3RDaGlsZCwgX2VsJDQ5ID0gX2VsJDQ3Lm5leHRTaWJsaW5nLCBfZWwkNTAgPSBfZWwkNDkubmV4dFNpYmxpbmcsIF9lbCQ1MSA9IF9lbCQ1MC5maXJzdENoaWxkLCBfZWwkNTIgPSBfZWwkNTAubmV4dFNpYmxpbmcsIF9lbCQ1MyA9IF9lbCQ1Mi5maXJzdENoaWxkLCBfZWwkNTQgPSBfZWwkNTIubmV4dFNpYmxpbmcsIF9lbCQ1NSA9IF9lbCQ1NC5uZXh0U2libGluZywgX2VsJDU2ID0gX2VsJDU1LmZpcnN0Q2hpbGQsIF9lbCQ1NyA9IF9lbCQ1NS5uZXh0U2libGluZywgX2VsJDU4ID0gX2VsJDU3LmZpcnN0Q2hpbGQsIF9lbCQ1OSA9IF9lbCQ1Ny5uZXh0U2libGluZywgX2VsJDYwID0gX2VsJDU5Lm5leHRTaWJsaW5nLCBfZWwkNjEgPSBfZWwkNjAuZmlyc3RDaGlsZCwgX2VsJDYyID0gX2VsJDYwLm5leHRTaWJsaW5nLCBfZWwkNjMgPSBfZWwkNjIuZmlyc3RDaGlsZCwgX2VsJDY0ID0gX2VsJDYyLm5leHRTaWJsaW5nLCBfZWwkNjUgPSBfZWwkNjQuZmlyc3RDaGlsZCwgX2VsJDY2ID0gX2VsJDY1Lm5leHRTaWJsaW5nLCBfZWwkNjcgPSBfZWwkNjYubmV4dFNpYmxpbmcsIF9lbCQ2OCA9IF9lbCQ2Ny5uZXh0U2libGluZywgX2VsJDY5ID0gX2VsJDY4Lm5leHRTaWJsaW5nLCBfZWwkNzAgPSBfZWwkNjQubmV4dFNpYmxpbmcsIF9lbCQ3MSA9IF9lbCQ3MC5maXJzdENoaWxkLCBfZWwkNzIgPSBfZWwkNzAubmV4dFNpYmxpbmcsIF9lbCQ3MyA9IF9lbCQ3Mi5maXJzdENoaWxkLCBfZWwkNzQgPSBfZWwkNzIubmV4dFNpYmxpbmcsIF9lbCQ3NSA9IF9lbCQ3NC5maXJzdENoaWxkLCBfZWwkNzYgPSBfZWwkNzUubmV4dFNpYmxpbmcsIF9lbCQ3NyA9IF9lbCQ3Ni5uZXh0U2libGluZywgX2VsJDc4ID0gX2VsJDc3LmZpcnN0Q2hpbGQsIF9lbCQ3OSA9IF9lbCQ3OC5uZXh0U2libGluZywgX2VsJDgwID0gX2VsJDc5Lm5leHRTaWJsaW5nLCBfZWwkODEgPSBfZWwkODAubmV4dFNpYmxpbmcsIF9lbCQ4MiA9IF9lbCQ4MS5uZXh0U2libGluZywgX2VsJDgzID0gX2VsJDgyLm5leHRTaWJsaW5nLCBfZWwkODQgPSBfZWwkODMubmV4dFNpYmxpbmcsIF9lbCQ4NSA9IF9lbCQ4NC5uZXh0U2libGluZywgX2VsJDg2ID0gX2VsJDg1Lm5leHRTaWJsaW5nLCBfZWwkODcgPSBfZWwkODYubmV4dFNpYmxpbmcsIF9lbCQ4OCA9IF9lbCQ4Ny5uZXh0U2libGluZywgX2VsJDg5ID0gX2VsJDg4Lm5leHRTaWJsaW5nLCBfZWwkOTAgPSBfZWwkNzQubmV4dFNpYmxpbmcsIF9lbCQ5MSA9IF9lbCQ5MC5maXJzdENoaWxkLCBfZWwkOTIgPSBfZWwkOTAubmV4dFNpYmxpbmcsIF9lbCQ5MyA9IF9lbCQ5Mi5maXJzdENoaWxkLCBfZWwkOTQgPSBfZWwkOTIubmV4dFNpYmxpbmcsIF9lbCQ5NSA9IF9lbCQ5NC5maXJzdENoaWxkLCBfZWwkOTYgPSBfZWwkOTUubmV4dFNpYmxpbmcsIF9lbCQ5NyA9IF9lbCQ5NC5uZXh0U2libGluZywgX2VsJDk4ID0gX2VsJDk3LmZpcnN0Q2hpbGQsIF9lbCQ5OSA9IF9lbCQ5Ny5uZXh0U2libGluZywgX2VsJDEwMCA9IF9lbCQ5OS5maXJzdENoaWxkLCBfZWwkMTAxID0gX2VsJDk5Lm5leHRTaWJsaW5nLCBfZWwkMTAyID0gX2VsJDEwMS5maXJzdENoaWxkLCBfZWwkMTAzID0gX2VsJDEwMi5uZXh0U2libGluZywgX2VsJDEwNCA9IF9lbCQxMDMubmV4dFNpYmxpbmcsIF9lbCQxMDUgPSBfZWwkMTA0Lm5leHRTaWJsaW5nLCBfZWwkMTA2ID0gX2VsJDEwNS5uZXh0U2libGluZywgX2VsJDEwNyA9IF9lbCQxMDYubmV4dFNpYmxpbmcsIF9lbCQxMDggPSBfZWwkMTA3Lm5leHRTaWJsaW5nLCBfZWwkMTA5ID0gX2VsJDEwOC5uZXh0U2libGluZywgX2VsJDExMCA9IF9lbCQxMDkubmV4dFNpYmxpbmcsIF9lbCQxMTEgPSBfZWwkMTEwLm5leHRTaWJsaW5nLCBfZWwkMTEyID0gX2VsJDExMS5uZXh0U2libGluZywgX2VsJDExMyA9IF9lbCQxMTIubmV4dFNpYmxpbmcsIF9lbCQxMTQgPSBfZWwkMTEzLm5leHRTaWJsaW5nLCBfZWwkMTE1ID0gX2VsJDExNC5uZXh0U2libGluZywgX2VsJDExNiA9IF9lbCQxMTUubmV4dFNpYmxpbmcsIF9lbCQxMTcgPSBfZWwkMTE2Lm5leHRTaWJsaW5nLCBfZWwkMTE4ID0gX2VsJDExNy5uZXh0U2libGluZywgX2VsJDExOSA9IF9lbCQxMTgubmV4dFNpYmxpbmc7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQyOCwgXCJpZFwiLCBgYS0ke2lkfWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkMjksIFwiZmlsbFwiLCBgdXJsKCNhLSR7aWR9KWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkMzEsIFwiaWRcIiwgYGFtLSR7aWR9YCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQzMiwgXCJpZFwiLCBgYi0ke2lkfWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkMzMsIFwiZmlsdGVyXCIsIGB1cmwoI2FtLSR7aWR9KWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkMzQsIFwibWFza1wiLCBgdXJsKCNiLSR7aWR9KWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkMzYsIFwiaWRcIiwgYGFoLSR7aWR9YCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQzNywgXCJpZFwiLCBgay0ke2lkfWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkMzgsIFwiZmlsdGVyXCIsIGB1cmwoI2FoLSR7aWR9KWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkMzksIFwibWFza1wiLCBgdXJsKCNrLSR7aWR9KWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkNDEsIFwiaWRcIiwgYGFlLSR7aWR9YCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQ0MiwgXCJpZFwiLCBgai0ke2lkfWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkNDMsIFwiZmlsdGVyXCIsIGB1cmwoI2FlLSR7aWR9KWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkNDQsIFwibWFza1wiLCBgdXJsKCNqLSR7aWR9KWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkNDYsIFwiaWRcIiwgYGFpLSR7aWR9YCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQ0NywgXCJpZFwiLCBgaS0ke2lkfWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkNDgsIFwiZmlsdGVyXCIsIGB1cmwoI2FpLSR7aWR9KWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkNDksIFwibWFza1wiLCBgdXJsKCNpLSR7aWR9KWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkNTEsIFwiaWRcIiwgYGFqLSR7aWR9YCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQ1MiwgXCJpZFwiLCBgaC0ke2lkfWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkNTMsIFwiZmlsdGVyXCIsIGB1cmwoI2FqLSR7aWR9KWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkNTQsIFwibWFza1wiLCBgdXJsKCNoLSR7aWR9KWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkNTYsIFwiaWRcIiwgYGFnLSR7aWR9YCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQ1NywgXCJpZFwiLCBgZy0ke2lkfWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkNTgsIFwiZmlsdGVyXCIsIGB1cmwoI2FnLSR7aWR9KWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkNTksIFwibWFza1wiLCBgdXJsKCNnLSR7aWR9KWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkNjEsIFwiaWRcIiwgYGFmLSR7aWR9YCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQ2MiwgXCJpZFwiLCBgZi0ke2lkfWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkNjMsIFwiZmlsdGVyXCIsIGB1cmwoI2FmLSR7aWR9KWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkNjQsIFwibWFza1wiLCBgdXJsKCNmLSR7aWR9KWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkNjgsIFwiaWRcIiwgYG0tJHtpZH1gKTtcbiAgICBzZXRBdHRyaWJ1dGUoX2VsJDY5LCBcImZpbGxcIiwgYHVybCgjbS0ke2lkfSlgKTtcbiAgICBzZXRBdHRyaWJ1dGUoX2VsJDcxLCBcImlkXCIsIGBhay0ke2lkfWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkNzIsIFwiaWRcIiwgYGUtJHtpZH1gKTtcbiAgICBzZXRBdHRyaWJ1dGUoX2VsJDczLCBcImZpbHRlclwiLCBgdXJsKCNhay0ke2lkfSlgKTtcbiAgICBzZXRBdHRyaWJ1dGUoX2VsJDc0LCBcIm1hc2tcIiwgYHVybCgjZS0ke2lkfSlgKTtcbiAgICBzZXRBdHRyaWJ1dGUoX2VsJDc1LCBcImlkXCIsIGBuLSR7aWR9YCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQ3NiwgXCJmaWxsXCIsIGB1cmwoI24tJHtpZH0pYCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQ3OCwgXCJpZFwiLCBgci0ke2lkfWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkNzksIFwiZmlsbFwiLCBgdXJsKCNyLSR7aWR9KWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkODAsIFwiaWRcIiwgYHMtJHtpZH1gKTtcbiAgICBzZXRBdHRyaWJ1dGUoX2VsJDgxLCBcImZpbGxcIiwgYHVybCgjcy0ke2lkfSlgKTtcbiAgICBzZXRBdHRyaWJ1dGUoX2VsJDgyLCBcImlkXCIsIGBxLSR7aWR9YCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQ4MywgXCJmaWxsXCIsIGB1cmwoI3EtJHtpZH0pYCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQ4NCwgXCJpZFwiLCBgcC0ke2lkfWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkODUsIFwiZmlsbFwiLCBgdXJsKCNwLSR7aWR9KWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkODYsIFwiaWRcIiwgYG8tJHtpZH1gKTtcbiAgICBzZXRBdHRyaWJ1dGUoX2VsJDg3LCBcImZpbGxcIiwgYHVybCgjby0ke2lkfSlgKTtcbiAgICBzZXRBdHRyaWJ1dGUoX2VsJDg4LCBcImlkXCIsIGBsLSR7aWR9YCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQ4OSwgXCJmaWxsXCIsIGB1cmwoI2wtJHtpZH0pYCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQ5MSwgXCJpZFwiLCBgYWwtJHtpZH1gKTtcbiAgICBzZXRBdHRyaWJ1dGUoX2VsJDkyLCBcImlkXCIsIGBkLSR7aWR9YCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQ5MywgXCJmaWx0ZXJcIiwgYHVybCgjYWwtJHtpZH0pYCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQ5NCwgXCJtYXNrXCIsIGB1cmwoI2QtJHtpZH0pYCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQ5NSwgXCJpZFwiLCBgdS0ke2lkfWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkOTYsIFwiZmlsbFwiLCBgdXJsKCN1LSR7aWR9KWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkOTgsIFwiaWRcIiwgYGFkLSR7aWR9YCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQ5OSwgXCJpZFwiLCBgYy0ke2lkfWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkMTAwLCBcImZpbHRlclwiLCBgdXJsKCNhZC0ke2lkfSlgKTtcbiAgICBzZXRBdHRyaWJ1dGUoX2VsJDEwMSwgXCJtYXNrXCIsIGB1cmwoI2MtJHtpZH0pYCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQxMDIsIFwiaWRcIiwgYHQtJHtpZH1gKTtcbiAgICBzZXRBdHRyaWJ1dGUoX2VsJDEwMywgXCJmaWxsXCIsIGB1cmwoI3QtJHtpZH0pYCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQxMDQsIFwiaWRcIiwgYHYtJHtpZH1gKTtcbiAgICBzZXRBdHRyaWJ1dGUoX2VsJDEwNSwgXCJzdHJva2VcIiwgYHVybCgjdi0ke2lkfSlgKTtcbiAgICBzZXRBdHRyaWJ1dGUoX2VsJDEwNiwgXCJpZFwiLCBgYWEtJHtpZH1gKTtcbiAgICBzZXRBdHRyaWJ1dGUoX2VsJDEwNywgXCJzdHJva2VcIiwgYHVybCgjYWEtJHtpZH0pYCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQxMDgsIFwiaWRcIiwgYHctJHtpZH1gKTtcbiAgICBzZXRBdHRyaWJ1dGUoX2VsJDEwOSwgXCJzdHJva2VcIiwgYHVybCgjdy0ke2lkfSlgKTtcbiAgICBzZXRBdHRyaWJ1dGUoX2VsJDExMCwgXCJpZFwiLCBgYWMtJHtpZH1gKTtcbiAgICBzZXRBdHRyaWJ1dGUoX2VsJDExMSwgXCJzdHJva2VcIiwgYHVybCgjYWMtJHtpZH0pYCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQxMTIsIFwiaWRcIiwgYGFiLSR7aWR9YCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQxMTMsIFwic3Ryb2tlXCIsIGB1cmwoI2FiLSR7aWR9KWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkMTE0LCBcImlkXCIsIGB5LSR7aWR9YCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQxMTUsIFwic3Ryb2tlXCIsIGB1cmwoI3ktJHtpZH0pYCk7XG4gICAgc2V0QXR0cmlidXRlKF9lbCQxMTYsIFwiaWRcIiwgYHgtJHtpZH1gKTtcbiAgICBzZXRBdHRyaWJ1dGUoX2VsJDExNywgXCJzdHJva2VcIiwgYHVybCgjeC0ke2lkfSlgKTtcbiAgICBzZXRBdHRyaWJ1dGUoX2VsJDExOCwgXCJpZFwiLCBgei0ke2lkfWApO1xuICAgIHNldEF0dHJpYnV0ZShfZWwkMTE5LCBcInN0cm9rZVwiLCBgdXJsKCN6LSR7aWR9KWApO1xuICAgIHJldHVybiBfZWwkMjc7XG4gIH0pKCk7XG59XG5cbi8vIHNyYy9Db250ZXh0LnRzXG52YXIgUXVlcnlEZXZ0b29sc0NvbnRleHQgPSBjcmVhdGVDb250ZXh0KHtcbiAgY2xpZW50OiB2b2lkIDAsXG4gIG9ubGluZU1hbmFnZXI6IHZvaWQgMCxcbiAgcXVlcnlGbGF2b3I6IFwiXCIsXG4gIHZlcnNpb246IFwiXCJcbn0pO1xuZnVuY3Rpb24gdXNlUXVlcnlEZXZ0b29sc0NvbnRleHQoKSB7XG4gIHJldHVybiB1c2VDb250ZXh0KFF1ZXJ5RGV2dG9vbHNDb250ZXh0KTtcbn1cbnZhciBUaGVtZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0KFxuICAoKSA9PiBcImRhcmtcIlxuKTtcbmZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICByZXR1cm4gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xufVxuXG4vLyBzcmMvRXhwbG9yZXIudHN4XG52YXIgX3RtcGwkMjIgPSAvKiBAX19QVVJFX18gKi8gdGVtcGxhdGUoYDxzcGFuPjxzdmcgd2lkdGg9MTYgaGVpZ2h0PTE2IHZpZXdCb3g9XCIwIDAgMTYgMTZcImZpbGw9bm9uZSB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zz48cGF0aCBkPVwiTTYgMTJMMTAgOEw2IDRcInN0cm9rZS13aWR0aD0yIHN0cm9rZS1saW5lY2FwPXJvdW5kIHN0cm9rZS1saW5lam9pbj1yb3VuZD5gKTtcbnZhciBfdG1wbCQyMyA9IC8qIEBfX1BVUkVfXyAqLyB0ZW1wbGF0ZShgPGJ1dHRvbiB0aXRsZT1cIkNvcHkgb2JqZWN0IHRvIGNsaXBib2FyZFwiPmApO1xudmFyIF90bXBsJDMyID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8YnV0dG9uIHRpdGxlPVwiUmVtb3ZlIGFsbCBpdGVtc1wiYXJpYS1sYWJlbD1cIlJlbW92ZSBhbGwgaXRlbXNcIj5gKTtcbnZhciBfdG1wbCQ0MiA9IC8qIEBfX1BVUkVfXyAqLyB0ZW1wbGF0ZShgPGJ1dHRvbiB0aXRsZT1cIkRlbGV0ZSBpdGVtXCJhcmlhLWxhYmVsPVwiRGVsZXRlIGl0ZW1cIj5gKTtcbnZhciBfdG1wbCQ1MiA9IC8qIEBfX1BVUkVfXyAqLyB0ZW1wbGF0ZShgPGJ1dHRvbiB0aXRsZT1cIlRvZ2dsZSB2YWx1ZVwiYXJpYS1sYWJlbD1cIlRvZ2dsZSB2YWx1ZVwiPmApO1xudmFyIF90bXBsJDYyID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8ZGl2PmApO1xudmFyIF90bXBsJDcyID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8ZGl2PjxidXR0b24+IDxzcGFuPjwvc3Bhbj4gPHNwYW4+IGApO1xudmFyIF90bXBsJDgyID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8aW5wdXQ+YCk7XG52YXIgX3RtcGwkOTIgPSAvKiBAX19QVVJFX18gKi8gdGVtcGxhdGUoYDxzcGFuPmApO1xudmFyIF90bXBsJDEwMiA9IC8qIEBfX1BVUkVfXyAqLyB0ZW1wbGF0ZShgPGRpdj48c3Bhbj46YCk7XG52YXIgX3RtcGwkMTEyID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8ZGl2PjxkaXY+PGJ1dHRvbj4gWzwhPi4uLjwhPl1gKTtcbmZ1bmN0aW9uIGNodW5rQXJyYXkoYXJyYXksIHNpemUyKSB7XG4gIGlmIChzaXplMiA8IDEpXG4gICAgcmV0dXJuIFtdO1xuICBsZXQgaTIgPSAwO1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgd2hpbGUgKGkyIDwgYXJyYXkubGVuZ3RoKSB7XG4gICAgcmVzdWx0LnB1c2goYXJyYXkuc2xpY2UoaTIsIGkyICsgc2l6ZTIpKTtcbiAgICBpMiA9IGkyICsgc2l6ZTI7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbnZhciBFeHBhbmRlciA9IChwcm9wcykgPT4ge1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIGNvbnN0IHN0eWxlcyA9IGNyZWF0ZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB0aGVtZSgpID09PSBcImRhcmtcIiA/IGRhcmtTdHlsZXMgOiBsaWdodFN0eWxlcztcbiAgfSk7XG4gIHJldHVybiAoKCkgPT4ge1xuICAgIGNvbnN0IF9lbCQgPSBfdG1wbCQyMigpO1xuICAgIGNyZWF0ZVJlbmRlckVmZmVjdCgoKSA9PiBjbGFzc05hbWUoX2VsJCwgY2xzeChzdHlsZXMoKS5leHBhbmRlciwgdWBcbiAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgke3Byb3BzLmV4cGFuZGVkID8gOTAgOiAwfWRlZyk7XG4gICAgICAgIGAsIHByb3BzLmV4cGFuZGVkICYmIHVgXG4gICAgICAgICAgICAmIHN2ZyB7XG4gICAgICAgICAgICAgIHRvcDogLTFweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBgKSkpO1xuICAgIHJldHVybiBfZWwkO1xuICB9KSgpO1xufTtcbnZhciBDb3B5QnV0dG9uID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgY29uc3Qgc3R5bGVzID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHRoZW1lKCkgPT09IFwiZGFya1wiID8gZGFya1N0eWxlcyA6IGxpZ2h0U3R5bGVzO1xuICB9KTtcbiAgY29uc3QgW2NvcHlTdGF0ZSwgc2V0Q29weVN0YXRlXSA9IGNyZWF0ZVNpZ25hbChcIk5vQ29weVwiKTtcbiAgcmV0dXJuICgoKSA9PiB7XG4gICAgY29uc3QgX2VsJDIgPSBfdG1wbCQyMygpO1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoX2VsJDIsIFwiY2xpY2tcIiwgY29weVN0YXRlKCkgPT09IFwiTm9Db3B5XCIgPyAoKSA9PiB7XG4gICAgICBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dChzdHJpbmdpZnkocHJvcHMudmFsdWUpKS50aGVuKCgpID0+IHtcbiAgICAgICAgc2V0Q29weVN0YXRlKFwiU3VjY2Vzc0NvcHlcIik7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHNldENvcHlTdGF0ZShcIk5vQ29weVwiKTtcbiAgICAgICAgfSwgMTUwMCk7XG4gICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gY29weTogXCIsIGVycik7XG4gICAgICAgIHNldENvcHlTdGF0ZShcIkVycm9yQ29weVwiKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgc2V0Q29weVN0YXRlKFwiTm9Db3B5XCIpO1xuICAgICAgICB9LCAxNTAwKTtcbiAgICAgIH0pO1xuICAgIH0gOiB2b2lkIDAsIHRydWUpO1xuICAgIGluc2VydChfZWwkMiwgY3JlYXRlQ29tcG9uZW50KFN3aXRjaCwge1xuICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICByZXR1cm4gW2NyZWF0ZUNvbXBvbmVudChNYXRjaCwge1xuICAgICAgICAgIGdldCB3aGVuKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvcHlTdGF0ZSgpID09PSBcIk5vQ29weVwiO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChDb3BpZXIsIHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLCBjcmVhdGVDb21wb25lbnQoTWF0Y2gsIHtcbiAgICAgICAgICBnZXQgd2hlbigpIHtcbiAgICAgICAgICAgIHJldHVybiBjb3B5U3RhdGUoKSA9PT0gXCJTdWNjZXNzQ29weVwiO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChDb3BpZWRDb3BpZXIsIHtcbiAgICAgICAgICAgICAgZ2V0IHRoZW1lKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGVtZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLCBjcmVhdGVDb21wb25lbnQoTWF0Y2gsIHtcbiAgICAgICAgICBnZXQgd2hlbigpIHtcbiAgICAgICAgICAgIHJldHVybiBjb3B5U3RhdGUoKSA9PT0gXCJFcnJvckNvcHlcIjtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVDb21wb25lbnQoRXJyb3JDb3BpZXIsIHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXTtcbiAgICAgIH1cbiAgICB9KSk7XG4gICAgY3JlYXRlUmVuZGVyRWZmZWN0KChfcCQpID0+IHtcbiAgICAgIGNvbnN0IF92JCA9IHN0eWxlcygpLmFjdGlvbkJ1dHRvbiwgX3YkMiA9IGAke2NvcHlTdGF0ZSgpID09PSBcIk5vQ29weVwiID8gXCJDb3B5IG9iamVjdCB0byBjbGlwYm9hcmRcIiA6IGNvcHlTdGF0ZSgpID09PSBcIlN1Y2Nlc3NDb3B5XCIgPyBcIk9iamVjdCBjb3BpZWQgdG8gY2xpcGJvYXJkXCIgOiBcIkVycm9yIGNvcHlpbmcgb2JqZWN0IHRvIGNsaXBib2FyZFwifWA7XG4gICAgICBfdiQgIT09IF9wJC5fdiQgJiYgY2xhc3NOYW1lKF9lbCQyLCBfcCQuX3YkID0gX3YkKTtcbiAgICAgIF92JDIgIT09IF9wJC5fdiQyICYmIHNldEF0dHJpYnV0ZShfZWwkMiwgXCJhcmlhLWxhYmVsXCIsIF9wJC5fdiQyID0gX3YkMik7XG4gICAgICByZXR1cm4gX3AkO1xuICAgIH0sIHtcbiAgICAgIF92JDogdm9pZCAwLFxuICAgICAgX3YkMjogdm9pZCAwXG4gICAgfSk7XG4gICAgcmV0dXJuIF9lbCQyO1xuICB9KSgpO1xufTtcbnZhciBDbGVhckFycmF5QnV0dG9uID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgY29uc3Qgc3R5bGVzID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHRoZW1lKCkgPT09IFwiZGFya1wiID8gZGFya1N0eWxlcyA6IGxpZ2h0U3R5bGVzO1xuICB9KTtcbiAgY29uc3QgcXVlcnlDbGllbnQgPSB1c2VRdWVyeURldnRvb2xzQ29udGV4dCgpLmNsaWVudDtcbiAgcmV0dXJuICgoKSA9PiB7XG4gICAgY29uc3QgX2VsJDMgPSBfdG1wbCQzMigpO1xuICAgIF9lbCQzLiQkY2xpY2sgPSAoKSA9PiB7XG4gICAgICBjb25zdCBvbGREYXRhID0gcHJvcHMuYWN0aXZlUXVlcnkuc3RhdGUuZGF0YTtcbiAgICAgIGNvbnN0IG5ld0RhdGEgPSB1cGRhdGVOZXN0ZWREYXRhQnlQYXRoKG9sZERhdGEsIHByb3BzLmRhdGFQYXRoLCBbXSk7XG4gICAgICBxdWVyeUNsaWVudC5zZXRRdWVyeURhdGEocHJvcHMuYWN0aXZlUXVlcnkucXVlcnlLZXksIG5ld0RhdGEpO1xuICAgIH07XG4gICAgaW5zZXJ0KF9lbCQzLCBjcmVhdGVDb21wb25lbnQoTGlzdCwge30pKTtcbiAgICBjcmVhdGVSZW5kZXJFZmZlY3QoKCkgPT4gY2xhc3NOYW1lKF9lbCQzLCBzdHlsZXMoKS5hY3Rpb25CdXR0b24pKTtcbiAgICByZXR1cm4gX2VsJDM7XG4gIH0pKCk7XG59O1xudmFyIERlbGV0ZUl0ZW1CdXR0b24gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCBzdHlsZXMgPSBjcmVhdGVNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gdGhlbWUoKSA9PT0gXCJkYXJrXCIgPyBkYXJrU3R5bGVzIDogbGlnaHRTdHlsZXM7XG4gIH0pO1xuICBjb25zdCBxdWVyeUNsaWVudCA9IHVzZVF1ZXJ5RGV2dG9vbHNDb250ZXh0KCkuY2xpZW50O1xuICByZXR1cm4gKCgpID0+IHtcbiAgICBjb25zdCBfZWwkNCA9IF90bXBsJDQyKCk7XG4gICAgX2VsJDQuJCRjbGljayA9ICgpID0+IHtcbiAgICAgIGNvbnN0IG9sZERhdGEgPSBwcm9wcy5hY3RpdmVRdWVyeS5zdGF0ZS5kYXRhO1xuICAgICAgY29uc3QgbmV3RGF0YSA9IGRlbGV0ZU5lc3RlZERhdGFCeVBhdGgob2xkRGF0YSwgcHJvcHMuZGF0YVBhdGgpO1xuICAgICAgcXVlcnlDbGllbnQuc2V0UXVlcnlEYXRhKHByb3BzLmFjdGl2ZVF1ZXJ5LnF1ZXJ5S2V5LCBuZXdEYXRhKTtcbiAgICB9O1xuICAgIGluc2VydChfZWwkNCwgY3JlYXRlQ29tcG9uZW50KFRyYXNoLCB7fSkpO1xuICAgIGNyZWF0ZVJlbmRlckVmZmVjdCgoKSA9PiBjbGFzc05hbWUoX2VsJDQsIGNsc3goc3R5bGVzKCkuYWN0aW9uQnV0dG9uKSkpO1xuICAgIHJldHVybiBfZWwkNDtcbiAgfSkoKTtcbn07XG52YXIgVG9nZ2xlVmFsdWVCdXR0b24gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCBzdHlsZXMgPSBjcmVhdGVNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gdGhlbWUoKSA9PT0gXCJkYXJrXCIgPyBkYXJrU3R5bGVzIDogbGlnaHRTdHlsZXM7XG4gIH0pO1xuICBjb25zdCBxdWVyeUNsaWVudCA9IHVzZVF1ZXJ5RGV2dG9vbHNDb250ZXh0KCkuY2xpZW50O1xuICByZXR1cm4gKCgpID0+IHtcbiAgICBjb25zdCBfZWwkNSA9IF90bXBsJDUyKCk7XG4gICAgX2VsJDUuJCRjbGljayA9ICgpID0+IHtcbiAgICAgIGNvbnN0IG9sZERhdGEgPSBwcm9wcy5hY3RpdmVRdWVyeS5zdGF0ZS5kYXRhO1xuICAgICAgY29uc3QgbmV3RGF0YSA9IHVwZGF0ZU5lc3RlZERhdGFCeVBhdGgob2xkRGF0YSwgcHJvcHMuZGF0YVBhdGgsICFwcm9wcy52YWx1ZSk7XG4gICAgICBxdWVyeUNsaWVudC5zZXRRdWVyeURhdGEocHJvcHMuYWN0aXZlUXVlcnkucXVlcnlLZXksIG5ld0RhdGEpO1xuICAgIH07XG4gICAgaW5zZXJ0KF9lbCQ1LCBjcmVhdGVDb21wb25lbnQoQ2hlY2ssIHtcbiAgICAgIGdldCB0aGVtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoZW1lKCk7XG4gICAgICB9LFxuICAgICAgZ2V0IGNoZWNrZWQoKSB7XG4gICAgICAgIHJldHVybiBwcm9wcy52YWx1ZTtcbiAgICAgIH1cbiAgICB9KSk7XG4gICAgY3JlYXRlUmVuZGVyRWZmZWN0KCgpID0+IGNsYXNzTmFtZShfZWwkNSwgY2xzeChzdHlsZXMoKS5hY3Rpb25CdXR0b24sIHVgXG4gICAgICAgICAgd2lkdGg6ICR7dG9rZW5zLnNpemVbMy41XX07XG4gICAgICAgICAgaGVpZ2h0OiAke3Rva2Vucy5zaXplWzMuNV19O1xuICAgICAgICBgKSkpO1xuICAgIHJldHVybiBfZWwkNTtcbiAgfSkoKTtcbn07XG5mdW5jdGlvbiBpc0l0ZXJhYmxlKHgpIHtcbiAgcmV0dXJuIFN5bWJvbC5pdGVyYXRvciBpbiB4O1xufVxuZnVuY3Rpb24gRXhwbG9yZXIocHJvcHMpIHtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCBzdHlsZXMgPSBjcmVhdGVNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gdGhlbWUoKSA9PT0gXCJkYXJrXCIgPyBkYXJrU3R5bGVzIDogbGlnaHRTdHlsZXM7XG4gIH0pO1xuICBjb25zdCBxdWVyeUNsaWVudCA9IHVzZVF1ZXJ5RGV2dG9vbHNDb250ZXh0KCkuY2xpZW50O1xuICBjb25zdCBbZXhwYW5kZWQsIHNldEV4cGFuZGVkXSA9IGNyZWF0ZVNpZ25hbCgocHJvcHMuZGVmYXVsdEV4cGFuZGVkIHx8IFtdKS5pbmNsdWRlcyhwcm9wcy5sYWJlbCkpO1xuICBjb25zdCB0b2dnbGVFeHBhbmRlZCA9ICgpID0+IHNldEV4cGFuZGVkKChvbGQpID0+ICFvbGQpO1xuICBjb25zdCBbZXhwYW5kZWRQYWdlcywgc2V0RXhwYW5kZWRQYWdlc10gPSBjcmVhdGVTaWduYWwoW10pO1xuICBjb25zdCBzdWJFbnRyaWVzID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMudmFsdWUpKSB7XG4gICAgICByZXR1cm4gcHJvcHMudmFsdWUubWFwKChkLCBpMikgPT4gKHtcbiAgICAgICAgbGFiZWw6IGkyLnRvU3RyaW5nKCksXG4gICAgICAgIHZhbHVlOiBkXG4gICAgICB9KSk7XG4gICAgfSBlbHNlIGlmIChwcm9wcy52YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgcHJvcHMudmFsdWUgPT09IFwib2JqZWN0XCIgJiYgaXNJdGVyYWJsZShwcm9wcy52YWx1ZSkgJiYgdHlwZW9mIHByb3BzLnZhbHVlW1N5bWJvbC5pdGVyYXRvcl0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgaWYgKHByb3BzLnZhbHVlIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHByb3BzLnZhbHVlLCAoW2tleSwgdmFsXSkgPT4gKHtcbiAgICAgICAgICBsYWJlbDoga2V5LFxuICAgICAgICAgIHZhbHVlOiB2YWxcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEFycmF5LmZyb20ocHJvcHMudmFsdWUsICh2YWwsIGkyKSA9PiAoe1xuICAgICAgICBsYWJlbDogaTIudG9TdHJpbmcoKSxcbiAgICAgICAgdmFsdWU6IHZhbFxuICAgICAgfSkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHByb3BzLnZhbHVlID09PSBcIm9iamVjdFwiICYmIHByb3BzLnZhbHVlICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMocHJvcHMudmFsdWUpLm1hcCgoW2tleSwgdmFsXSkgPT4gKHtcbiAgICAgICAgbGFiZWw6IGtleSxcbiAgICAgICAgdmFsdWU6IHZhbFxuICAgICAgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gW107XG4gIH0pO1xuICBjb25zdCB0eXBlID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMudmFsdWUpKSB7XG4gICAgICByZXR1cm4gXCJhcnJheVwiO1xuICAgIH0gZWxzZSBpZiAocHJvcHMudmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHByb3BzLnZhbHVlID09PSBcIm9iamVjdFwiICYmIGlzSXRlcmFibGUocHJvcHMudmFsdWUpICYmIHR5cGVvZiBwcm9wcy52YWx1ZVtTeW1ib2wuaXRlcmF0b3JdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybiBcIkl0ZXJhYmxlXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcHJvcHMudmFsdWUgPT09IFwib2JqZWN0XCIgJiYgcHJvcHMudmFsdWUgIT09IG51bGwpIHtcbiAgICAgIHJldHVybiBcIm9iamVjdFwiO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHByb3BzLnZhbHVlO1xuICB9KTtcbiAgY29uc3Qgc3ViRW50cnlQYWdlcyA9IGNyZWF0ZU1lbW8oKCkgPT4gY2h1bmtBcnJheShzdWJFbnRyaWVzKCksIDEwMCkpO1xuICBjb25zdCBjdXJyZW50RGF0YVBhdGggPSBwcm9wcy5kYXRhUGF0aCA/PyBbXTtcbiAgcmV0dXJuICgoKSA9PiB7XG4gICAgY29uc3QgX2VsJDYgPSBfdG1wbCQ2MigpO1xuICAgIGluc2VydChfZWwkNiwgY3JlYXRlQ29tcG9uZW50KFNob3csIHtcbiAgICAgIGdldCB3aGVuKCkge1xuICAgICAgICByZXR1cm4gc3ViRW50cnlQYWdlcygpLmxlbmd0aDtcbiAgICAgIH0sXG4gICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgIHJldHVybiBbKCgpID0+IHtcbiAgICAgICAgICBjb25zdCBfZWwkNyA9IF90bXBsJDcyKCksIF9lbCQ4ID0gX2VsJDcuZmlyc3RDaGlsZCwgX2VsJDkgPSBfZWwkOC5maXJzdENoaWxkLCBfZWwkMTAgPSBfZWwkOS5uZXh0U2libGluZywgX2VsJDExID0gX2VsJDEwLm5leHRTaWJsaW5nLCBfZWwkMTIgPSBfZWwkMTEubmV4dFNpYmxpbmcsIF9lbCQxMyA9IF9lbCQxMi5maXJzdENoaWxkO1xuICAgICAgICAgIF9lbCQ4LiQkY2xpY2sgPSAoKSA9PiB0b2dnbGVFeHBhbmRlZCgpO1xuICAgICAgICAgIGluc2VydChfZWwkOCwgY3JlYXRlQ29tcG9uZW50KEV4cGFuZGVyLCB7XG4gICAgICAgICAgICBnZXQgZXhwYW5kZWQoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBleHBhbmRlZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLCBfZWwkOSk7XG4gICAgICAgICAgaW5zZXJ0KF9lbCQxMCwgKCkgPT4gcHJvcHMubGFiZWwpO1xuICAgICAgICAgIGluc2VydChfZWwkMTIsICgpID0+IFN0cmluZyh0eXBlKCkpLnRvTG93ZXJDYXNlKCkgPT09IFwiaXRlcmFibGVcIiA/IFwiKEl0ZXJhYmxlKSBcIiA6IFwiXCIsIF9lbCQxMyk7XG4gICAgICAgICAgaW5zZXJ0KF9lbCQxMiwgKCkgPT4gc3ViRW50cmllcygpLmxlbmd0aCwgX2VsJDEzKTtcbiAgICAgICAgICBpbnNlcnQoX2VsJDEyLCAoKSA9PiBzdWJFbnRyaWVzKCkubGVuZ3RoID4gMSA/IGBpdGVtc2AgOiBgaXRlbWAsIG51bGwpO1xuICAgICAgICAgIGluc2VydChfZWwkNywgY3JlYXRlQ29tcG9uZW50KFNob3csIHtcbiAgICAgICAgICAgIGdldCB3aGVuKCkge1xuICAgICAgICAgICAgICByZXR1cm4gcHJvcHMuZWRpdGFibGU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICAgICAgICBjb25zdCBfZWwkMTQgPSBfdG1wbCQ2MigpO1xuICAgICAgICAgICAgICBpbnNlcnQoX2VsJDE0LCBjcmVhdGVDb21wb25lbnQoQ29weUJ1dHRvbiwge1xuICAgICAgICAgICAgICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcy52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pLCBudWxsKTtcbiAgICAgICAgICAgICAgaW5zZXJ0KF9lbCQxNCwgY3JlYXRlQ29tcG9uZW50KFNob3csIHtcbiAgICAgICAgICAgICAgICBnZXQgd2hlbigpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcy5pdGVtc0RlbGV0YWJsZSAmJiBwcm9wcy5hY3RpdmVRdWVyeSAhPT0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChEZWxldGVJdGVtQnV0dG9uLCB7XG4gICAgICAgICAgICAgICAgICAgIGdldCBhY3RpdmVRdWVyeSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHMuYWN0aXZlUXVlcnk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGFQYXRoOiBjdXJyZW50RGF0YVBhdGhcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSksIG51bGwpO1xuICAgICAgICAgICAgICBpbnNlcnQoX2VsJDE0LCBjcmVhdGVDb21wb25lbnQoU2hvdywge1xuICAgICAgICAgICAgICAgIGdldCB3aGVuKCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHR5cGUoKSA9PT0gXCJhcnJheVwiICYmIHByb3BzLmFjdGl2ZVF1ZXJ5ICE9PSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KENsZWFyQXJyYXlCdXR0b24sIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0IGFjdGl2ZVF1ZXJ5KCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcy5hY3RpdmVRdWVyeTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVBhdGg6IGN1cnJlbnREYXRhUGF0aFxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSwgbnVsbCk7XG4gICAgICAgICAgICAgIGNyZWF0ZVJlbmRlckVmZmVjdCgoKSA9PiBjbGFzc05hbWUoX2VsJDE0LCBzdHlsZXMoKS5hY3Rpb25zKSk7XG4gICAgICAgICAgICAgIHJldHVybiBfZWwkMTQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksIG51bGwpO1xuICAgICAgICAgIGNyZWF0ZVJlbmRlckVmZmVjdCgoX3AkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBfdiQzID0gc3R5bGVzKCkuZXhwYW5kZXJCdXR0b25Db250YWluZXIsIF92JDQgPSBzdHlsZXMoKS5leHBhbmRlckJ1dHRvbiwgX3YkNSA9IHN0eWxlcygpLmluZm87XG4gICAgICAgICAgICBfdiQzICE9PSBfcCQuX3YkMyAmJiBjbGFzc05hbWUoX2VsJDcsIF9wJC5fdiQzID0gX3YkMyk7XG4gICAgICAgICAgICBfdiQ0ICE9PSBfcCQuX3YkNCAmJiBjbGFzc05hbWUoX2VsJDgsIF9wJC5fdiQ0ID0gX3YkNCk7XG4gICAgICAgICAgICBfdiQ1ICE9PSBfcCQuX3YkNSAmJiBjbGFzc05hbWUoX2VsJDEyLCBfcCQuX3YkNSA9IF92JDUpO1xuICAgICAgICAgICAgcmV0dXJuIF9wJDtcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBfdiQzOiB2b2lkIDAsXG4gICAgICAgICAgICBfdiQ0OiB2b2lkIDAsXG4gICAgICAgICAgICBfdiQ1OiB2b2lkIDBcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gX2VsJDc7XG4gICAgICAgIH0pKCksIGNyZWF0ZUNvbXBvbmVudChTaG93LCB7XG4gICAgICAgICAgZ2V0IHdoZW4oKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhwYW5kZWQoKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgICAgICAgIHJldHVybiBbY3JlYXRlQ29tcG9uZW50KFNob3csIHtcbiAgICAgICAgICAgICAgZ2V0IHdoZW4oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1YkVudHJ5UGFnZXMoKS5sZW5ndGggPT09IDE7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBfZWwkMTUgPSBfdG1wbCQ2MigpO1xuICAgICAgICAgICAgICAgIGluc2VydChfZWwkMTUsIGNyZWF0ZUNvbXBvbmVudChLZXksIHtcbiAgICAgICAgICAgICAgICAgIGdldCBlYWNoKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3ViRW50cmllcygpO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGJ5OiAoaXRlbSkgPT4gaXRlbS5sYWJlbCxcbiAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiAoZW50cnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChFeHBsb3Jlciwge1xuICAgICAgICAgICAgICAgICAgICAgIGdldCBkZWZhdWx0RXhwYW5kZWQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHMuZGVmYXVsdEV4cGFuZGVkO1xuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgZ2V0IGxhYmVsKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVudHJ5KCkubGFiZWw7XG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW50cnkoKS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIGdldCBlZGl0YWJsZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcy5lZGl0YWJsZTtcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIGdldCBkYXRhUGF0aCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbLi4uY3VycmVudERhdGFQYXRoLCBlbnRyeSgpLmxhYmVsXTtcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIGdldCBhY3RpdmVRdWVyeSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcy5hY3RpdmVRdWVyeTtcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIGdldCBpdGVtc0RlbGV0YWJsZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlKCkgPT09IFwiYXJyYXlcIiB8fCB0eXBlKCkgPT09IFwiSXRlcmFibGVcIiB8fCB0eXBlKCkgPT09IFwib2JqZWN0XCI7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgY3JlYXRlUmVuZGVyRWZmZWN0KCgpID0+IGNsYXNzTmFtZShfZWwkMTUsIHN0eWxlcygpLnN1YkVudHJ5KSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9lbCQxNTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksIGNyZWF0ZUNvbXBvbmVudChTaG93LCB7XG4gICAgICAgICAgICAgIGdldCB3aGVuKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdWJFbnRyeVBhZ2VzKCkubGVuZ3RoID4gMTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IF9lbCQxNiA9IF90bXBsJDYyKCk7XG4gICAgICAgICAgICAgICAgaW5zZXJ0KF9lbCQxNiwgY3JlYXRlQ29tcG9uZW50KEluZGV4LCB7XG4gICAgICAgICAgICAgICAgICBnZXQgZWFjaCgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1YkVudHJ5UGFnZXMoKTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBjaGlsZHJlbjogKGVudHJpZXMyLCBpbmRleCkgPT4gKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgX2VsJDIyID0gX3RtcGwkMTEyKCksIF9lbCQyMyA9IF9lbCQyMi5maXJzdENoaWxkLCBfZWwkMjQgPSBfZWwkMjMuZmlyc3RDaGlsZCwgX2VsJDI1ID0gX2VsJDI0LmZpcnN0Q2hpbGQsIF9lbCQyOSA9IF9lbCQyNS5uZXh0U2libGluZywgX2VsJDI3ID0gX2VsJDI5Lm5leHRTaWJsaW5nLCBfZWwkMzAgPSBfZWwkMjcubmV4dFNpYmxpbmc7IF9lbCQzMC5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgX2VsJDI0LiQkY2xpY2sgPSAoKSA9PiBzZXRFeHBhbmRlZFBhZ2VzKChvbGQpID0+IG9sZC5pbmNsdWRlcyhpbmRleCkgPyBvbGQuZmlsdGVyKChkKSA9PiBkICE9PSBpbmRleCkgOiBbLi4ub2xkLCBpbmRleF0pO1xuICAgICAgICAgICAgICAgICAgICBpbnNlcnQoX2VsJDI0LCBjcmVhdGVDb21wb25lbnQoRXhwYW5kZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgICBnZXQgZXhwYW5kZWQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhwYW5kZWRQYWdlcygpLmluY2x1ZGVzKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pLCBfZWwkMjUpO1xuICAgICAgICAgICAgICAgICAgICBpbnNlcnQoX2VsJDI0LCBpbmRleCAqIDEwMCwgX2VsJDI5KTtcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0KF9lbCQyNCwgaW5kZXggKiAxMDAgKyAxMDAgLSAxLCBfZWwkMzApO1xuICAgICAgICAgICAgICAgICAgICBpbnNlcnQoX2VsJDIzLCBjcmVhdGVDb21wb25lbnQoU2hvdywge1xuICAgICAgICAgICAgICAgICAgICAgIGdldCB3aGVuKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4cGFuZGVkUGFnZXMoKS5pbmNsdWRlcyhpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBfZWwkMzEgPSBfdG1wbCQ2MigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0KF9lbCQzMSwgY3JlYXRlQ29tcG9uZW50KEtleSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQgZWFjaCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW50cmllczIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnk6IChlbnRyeSkgPT4gZW50cnkubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiAoZW50cnkpID0+IGNyZWF0ZUNvbXBvbmVudChFeHBsb3Jlciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldCBkZWZhdWx0RXhwYW5kZWQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHMuZGVmYXVsdEV4cGFuZGVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0IGxhYmVsKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVudHJ5KCkubGFiZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW50cnkoKS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldCBlZGl0YWJsZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcy5lZGl0YWJsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldCBkYXRhUGF0aCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbLi4uY3VycmVudERhdGFQYXRoLCBlbnRyeSgpLmxhYmVsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldCBhY3RpdmVRdWVyeSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcy5hY3RpdmVRdWVyeTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVSZW5kZXJFZmZlY3QoKCkgPT4gY2xhc3NOYW1lKF9lbCQzMSwgc3R5bGVzKCkuc3ViRW50cnkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfZWwkMzE7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZVJlbmRlckVmZmVjdCgoX3AkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgX3YkMTAgPSBzdHlsZXMoKS5lbnRyeSwgX3YkMTEgPSBzdHlsZXMoKS5leHBhbmRlckJ1dHRvbjtcbiAgICAgICAgICAgICAgICAgICAgICBfdiQxMCAhPT0gX3AkLl92JDEwICYmIGNsYXNzTmFtZShfZWwkMjMsIF9wJC5fdiQxMCA9IF92JDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICBfdiQxMSAhPT0gX3AkLl92JDExICYmIGNsYXNzTmFtZShfZWwkMjQsIF9wJC5fdiQxMSA9IF92JDExKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3AkO1xuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgX3YkMTA6IHZvaWQgMCxcbiAgICAgICAgICAgICAgICAgICAgICBfdiQxMTogdm9pZCAwXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2VsJDIyO1xuICAgICAgICAgICAgICAgICAgfSkoKVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBjcmVhdGVSZW5kZXJFZmZlY3QoKCkgPT4gY2xhc3NOYW1lKF9lbCQxNiwgc3R5bGVzKCkuc3ViRW50cnkpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2VsJDE2O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KV07XG4gICAgICAgICAgfVxuICAgICAgICB9KV07XG4gICAgICB9XG4gICAgfSksIG51bGwpO1xuICAgIGluc2VydChfZWwkNiwgY3JlYXRlQ29tcG9uZW50KFNob3csIHtcbiAgICAgIGdldCB3aGVuKCkge1xuICAgICAgICByZXR1cm4gc3ViRW50cnlQYWdlcygpLmxlbmd0aCA9PT0gMDtcbiAgICAgIH0sXG4gICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgIGNvbnN0IF9lbCQxNyA9IF90bXBsJDEwMigpLCBfZWwkMTggPSBfZWwkMTcuZmlyc3RDaGlsZCwgX2VsJDE5ID0gX2VsJDE4LmZpcnN0Q2hpbGQ7XG4gICAgICAgIGluc2VydChfZWwkMTgsICgpID0+IHByb3BzLmxhYmVsLCBfZWwkMTkpO1xuICAgICAgICBpbnNlcnQoX2VsJDE3LCBjcmVhdGVDb21wb25lbnQoU2hvdywge1xuICAgICAgICAgIGdldCB3aGVuKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZU1lbW8oKCkgPT4gISEocHJvcHMuZWRpdGFibGUgJiYgcHJvcHMuYWN0aXZlUXVlcnkgIT09IHZvaWQgMCkpKCkgJiYgKHR5cGUoKSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlKCkgPT09IFwibnVtYmVyXCIgfHwgdHlwZSgpID09PSBcImJvb2xlYW5cIik7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBnZXQgZmFsbGJhY2soKSB7XG4gICAgICAgICAgICByZXR1cm4gKCgpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgX2VsJDMyID0gX3RtcGwkOTIoKTtcbiAgICAgICAgICAgICAgaW5zZXJ0KF9lbCQzMiwgKCkgPT4gZGlzcGxheVZhbHVlKHByb3BzLnZhbHVlKSk7XG4gICAgICAgICAgICAgIGNyZWF0ZVJlbmRlckVmZmVjdCgoKSA9PiBjbGFzc05hbWUoX2VsJDMyLCBzdHlsZXMoKS52YWx1ZSkpO1xuICAgICAgICAgICAgICByZXR1cm4gX2VsJDMyO1xuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgICAgICAgIHJldHVybiBbY3JlYXRlQ29tcG9uZW50KFNob3csIHtcbiAgICAgICAgICAgICAgZ2V0IHdoZW4oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZU1lbW8oKCkgPT4gISEocHJvcHMuZWRpdGFibGUgJiYgcHJvcHMuYWN0aXZlUXVlcnkgIT09IHZvaWQgMCkpKCkgJiYgKHR5cGUoKSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlKCkgPT09IFwibnVtYmVyXCIpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgX2VsJDIwID0gX3RtcGwkODIoKTtcbiAgICAgICAgICAgICAgICBfZWwkMjAuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoY2hhbmdlRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IG9sZERhdGEgPSBwcm9wcy5hY3RpdmVRdWVyeS5zdGF0ZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgY29uc3QgbmV3RGF0YSA9IHVwZGF0ZU5lc3RlZERhdGFCeVBhdGgob2xkRGF0YSwgY3VycmVudERhdGFQYXRoLCB0eXBlKCkgPT09IFwibnVtYmVyXCIgPyBjaGFuZ2VFdmVudC50YXJnZXQudmFsdWVBc051bWJlciA6IGNoYW5nZUV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICBxdWVyeUNsaWVudC5zZXRRdWVyeURhdGEocHJvcHMuYWN0aXZlUXVlcnkucXVlcnlLZXksIG5ld0RhdGEpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNyZWF0ZVJlbmRlckVmZmVjdCgoX3AkKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBfdiQ2ID0gdHlwZSgpID09PSBcIm51bWJlclwiID8gXCJudW1iZXJcIiA6IFwidGV4dFwiLCBfdiQ3ID0gY2xzeChzdHlsZXMoKS52YWx1ZSwgc3R5bGVzKCkuZWRpdGFibGVJbnB1dCk7XG4gICAgICAgICAgICAgICAgICBfdiQ2ICE9PSBfcCQuX3YkNiAmJiBzZXRBdHRyaWJ1dGUoX2VsJDIwLCBcInR5cGVcIiwgX3AkLl92JDYgPSBfdiQ2KTtcbiAgICAgICAgICAgICAgICAgIF92JDcgIT09IF9wJC5fdiQ3ICYmIGNsYXNzTmFtZShfZWwkMjAsIF9wJC5fdiQ3ID0gX3YkNyk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gX3AkO1xuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgIF92JDY6IHZvaWQgMCxcbiAgICAgICAgICAgICAgICAgIF92JDc6IHZvaWQgMFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNyZWF0ZVJlbmRlckVmZmVjdCgoKSA9PiBfZWwkMjAudmFsdWUgPSBwcm9wcy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9lbCQyMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksIGNyZWF0ZUNvbXBvbmVudChTaG93LCB7XG4gICAgICAgICAgICAgIGdldCB3aGVuKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlKCkgPT09IFwiYm9vbGVhblwiO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgX2VsJDIxID0gX3RtcGwkOTIoKTtcbiAgICAgICAgICAgICAgICBpbnNlcnQoX2VsJDIxLCBjcmVhdGVDb21wb25lbnQoVG9nZ2xlVmFsdWVCdXR0b24sIHtcbiAgICAgICAgICAgICAgICAgIGdldCBhY3RpdmVRdWVyeSgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb3BzLmFjdGl2ZVF1ZXJ5O1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGRhdGFQYXRoOiBjdXJyZW50RGF0YVBhdGgsXG4gICAgICAgICAgICAgICAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcy52YWx1ZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgaW5zZXJ0KF9lbCQyMSwgKCkgPT4gZGlzcGxheVZhbHVlKHByb3BzLnZhbHVlKSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgY3JlYXRlUmVuZGVyRWZmZWN0KCgpID0+IGNsYXNzTmFtZShfZWwkMjEsIGNsc3goc3R5bGVzKCkudmFsdWUsIHN0eWxlcygpLmFjdGlvbnMsIHN0eWxlcygpLmVkaXRhYmxlSW5wdXQpKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9lbCQyMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSldO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksIG51bGwpO1xuICAgICAgICBpbnNlcnQoX2VsJDE3LCBjcmVhdGVDb21wb25lbnQoU2hvdywge1xuICAgICAgICAgIGdldCB3aGVuKCkge1xuICAgICAgICAgICAgcmV0dXJuIHByb3BzLmVkaXRhYmxlICYmIHByb3BzLml0ZW1zRGVsZXRhYmxlICYmIHByb3BzLmFjdGl2ZVF1ZXJ5ICE9PSB2b2lkIDA7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KERlbGV0ZUl0ZW1CdXR0b24sIHtcbiAgICAgICAgICAgICAgZ2V0IGFjdGl2ZVF1ZXJ5KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcy5hY3RpdmVRdWVyeTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZGF0YVBhdGg6IGN1cnJlbnREYXRhUGF0aFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSwgbnVsbCk7XG4gICAgICAgIGNyZWF0ZVJlbmRlckVmZmVjdCgoX3AkKSA9PiB7XG4gICAgICAgICAgY29uc3QgX3YkOCA9IHN0eWxlcygpLnJvdywgX3YkOSA9IHN0eWxlcygpLmxhYmVsO1xuICAgICAgICAgIF92JDggIT09IF9wJC5fdiQ4ICYmIGNsYXNzTmFtZShfZWwkMTcsIF9wJC5fdiQ4ID0gX3YkOCk7XG4gICAgICAgICAgX3YkOSAhPT0gX3AkLl92JDkgJiYgY2xhc3NOYW1lKF9lbCQxOCwgX3AkLl92JDkgPSBfdiQ5KTtcbiAgICAgICAgICByZXR1cm4gX3AkO1xuICAgICAgICB9LCB7XG4gICAgICAgICAgX3YkODogdm9pZCAwLFxuICAgICAgICAgIF92JDk6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIF9lbCQxNztcbiAgICAgIH1cbiAgICB9KSwgbnVsbCk7XG4gICAgY3JlYXRlUmVuZGVyRWZmZWN0KCgpID0+IGNsYXNzTmFtZShfZWwkNiwgc3R5bGVzKCkuZW50cnkpKTtcbiAgICByZXR1cm4gX2VsJDY7XG4gIH0pKCk7XG59XG52YXIgc3R5bGVzRmFjdG9yeSA9ICh0aGVtZSkgPT4ge1xuICBjb25zdCB7XG4gICAgY29sb3JzLFxuICAgIGZvbnQsXG4gICAgc2l6ZTogc2l6ZTIsXG4gICAgYm9yZGVyXG4gIH0gPSB0b2tlbnM7XG4gIGNvbnN0IHQyID0gKGxpZ2h0LCBkYXJrKSA9PiB0aGVtZSA9PT0gXCJsaWdodFwiID8gbGlnaHQgOiBkYXJrO1xuICByZXR1cm4ge1xuICAgIGVudHJ5OiB1YFxuICAgICAgJiAqIHtcbiAgICAgICAgZm9udC1zaXplOiAke2ZvbnQuc2l6ZS54c307XG4gICAgICAgIGZvbnQtZmFtaWx5OiAnTWVubG8nLCAnRmlyYSBDb2RlJywgbW9ub3NwYWNlO1xuICAgICAgfVxuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgIHdvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7XG4gICAgYCxcbiAgICBzdWJFbnRyeTogdWBcbiAgICAgIG1hcmdpbjogMCAwIDAgMC41ZW07XG4gICAgICBwYWRkaW5nLWxlZnQ6IDAuNzVlbTtcbiAgICAgIGJvcmRlci1sZWZ0OiAycHggc29saWQgJHt0Mihjb2xvcnMuZ3JheVszMDBdLCBjb2xvcnMuZGFya0dyYXlbNDAwXSl9O1xuICAgICAgLyogb3V0bGluZTogMXB4IHNvbGlkICR7Y29sb3JzLnRlYWxbNDAwXX07ICovXG4gICAgYCxcbiAgICBleHBhbmRlcjogdWBcbiAgICAgICYgcGF0aCB7XG4gICAgICAgIHN0cm9rZTogJHtjb2xvcnMuZ3JheVs0MDBdfTtcbiAgICAgIH1cbiAgICAgICYgc3ZnIHtcbiAgICAgICAgd2lkdGg6ICR7c2l6ZTJbM119O1xuICAgICAgICBoZWlnaHQ6ICR7c2l6ZTJbM119O1xuICAgICAgfVxuICAgICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZTtcbiAgICAgIC8qIG91dGxpbmU6IDFweCBzb2xpZCAke2NvbG9ycy5ibHVlWzQwMF19OyAqL1xuICAgIGAsXG4gICAgZXhwYW5kZXJCdXR0b25Db250YWluZXI6IHVgXG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGxpbmUtaGVpZ2h0OiAke3NpemUyWzRdfTtcbiAgICAgIG1pbi1oZWlnaHQ6ICR7c2l6ZTJbNF19O1xuICAgICAgZ2FwOiAke3NpemUyWzJdfTtcbiAgICBgLFxuICAgIGV4cGFuZGVyQnV0dG9uOiB1YFxuICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgY29sb3I6IGluaGVyaXQ7XG4gICAgICBmb250OiBpbmhlcml0O1xuICAgICAgb3V0bGluZTogaW5oZXJpdDtcbiAgICAgIGhlaWdodDogJHtzaXplMls1XX07XG4gICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgIHBhZGRpbmc6IDA7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBnYXA6ICR7c2l6ZTJbMV19O1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgLyogb3V0bGluZTogMXB4IHNvbGlkICR7Y29sb3JzLmdyZWVuWzQwMF19OyAqL1xuXG4gICAgICAmOmZvY3VzLXZpc2libGUge1xuICAgICAgICBib3JkZXItcmFkaXVzOiAke2JvcmRlci5yYWRpdXMueHN9O1xuICAgICAgICBvdXRsaW5lOiAycHggc29saWQgJHtjb2xvcnMuYmx1ZVs4MDBdfTtcbiAgICAgIH1cblxuICAgICAgJiBzdmcge1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIGxlZnQ6IDFweDtcbiAgICAgIH1cbiAgICBgLFxuICAgIGluZm86IHVgXG4gICAgICBjb2xvcjogJHt0Mihjb2xvcnMuZ3JheVs1MDBdLCBjb2xvcnMuZ3JheVs1MDBdKX07XG4gICAgICBmb250LXNpemU6ICR7Zm9udC5zaXplLnhzfTtcbiAgICAgIG1hcmdpbi1sZWZ0OiAke3NpemUyWzFdfTtcbiAgICAgIC8qIG91dGxpbmU6IDFweCBzb2xpZCAke2NvbG9ycy55ZWxsb3dbNDAwXX07ICovXG4gICAgYCxcbiAgICBsYWJlbDogdWBcbiAgICAgIGNvbG9yOiAke3QyKGNvbG9ycy5ncmF5WzcwMF0sIGNvbG9ycy5ncmF5WzMwMF0pfTtcbiAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgYCxcbiAgICB2YWx1ZTogdWBcbiAgICAgIGNvbG9yOiAke3QyKGNvbG9ycy5wdXJwbGVbNjAwXSwgY29sb3JzLnB1cnBsZVs0MDBdKX07XG4gICAgICBmbGV4LWdyb3c6IDE7XG4gICAgYCxcbiAgICBhY3Rpb25zOiB1YFxuICAgICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gICAgICBnYXA6ICR7c2l6ZTJbMl19O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBgLFxuICAgIHJvdzogdWBcbiAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgICAgZ2FwOiAke3NpemUyWzJdfTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luOiAke3NpemUyWzAuMjVdfSAwcHg7XG4gICAgICBsaW5lLWhlaWdodDogJHtzaXplMls0LjVdfTtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYCxcbiAgICBlZGl0YWJsZUlucHV0OiB1YFxuICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgcGFkZGluZzogJHtzaXplMlswLjVdfSAke3NpemUyWzFdfSAke3NpemUyWzAuNV19ICR7c2l6ZTJbMS41XX07XG4gICAgICBmbGV4LWdyb3c6IDE7XG4gICAgICBib3JkZXItcmFkaXVzOiAke2JvcmRlci5yYWRpdXMueHN9O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0Mihjb2xvcnMuZ3JheVsyMDBdLCBjb2xvcnMuZGFya0dyYXlbNTAwXSl9O1xuXG4gICAgICAmOmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0Mihjb2xvcnMuZ3JheVszMDBdLCBjb2xvcnMuZGFya0dyYXlbNjAwXSl9O1xuICAgICAgfVxuICAgIGAsXG4gICAgYWN0aW9uQnV0dG9uOiB1YFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICBjb2xvcjogJHt0Mihjb2xvcnMuZ3JheVs1MDBdLCBjb2xvcnMuZ3JheVs1MDBdKX07XG4gICAgICBib3JkZXI6IG5vbmU7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgIHBhZGRpbmc6IDBweDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIHdpZHRoOiAke3NpemUyWzNdfTtcbiAgICAgIGhlaWdodDogJHtzaXplMlszXX07XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICB6LWluZGV4OiAxO1xuXG4gICAgICAmOmhvdmVyIHN2ZyB7XG4gICAgICAgIGNvbG9yOiAke3QyKGNvbG9ycy5ncmF5WzYwMF0sIGNvbG9ycy5ncmF5WzQwMF0pfTtcbiAgICAgIH1cblxuICAgICAgJjpmb2N1cy12aXNpYmxlIHtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogJHtib3JkZXIucmFkaXVzLnhzfTtcbiAgICAgICAgb3V0bGluZTogMnB4IHNvbGlkICR7Y29sb3JzLmJsdWVbODAwXX07XG4gICAgICAgIG91dGxpbmUtb2Zmc2V0OiAycHg7XG4gICAgICB9XG4gICAgYFxuICB9O1xufTtcbnZhciBsaWdodFN0eWxlcyA9IHN0eWxlc0ZhY3RvcnkoXCJsaWdodFwiKTtcbnZhciBkYXJrU3R5bGVzID0gc3R5bGVzRmFjdG9yeShcImRhcmtcIik7XG5kZWxlZ2F0ZUV2ZW50cyhbXCJjbGlja1wiXSk7XG5cbi8vIHNyYy9EZXZ0b29scy50c3hcbnZhciBfdG1wbCQyNCA9IC8qIEBfX1BVUkVfXyAqLyB0ZW1wbGF0ZShgPGRpdj48ZGl2IGFyaWEtaGlkZGVuPXRydWU+PC9kaXY+PGJ1dHRvbiBhcmlhLWxhYmVsPVwiT3BlbiBUYW5zdGFjayBxdWVyeSBkZXZ0b29sc1wiPmApO1xudmFyIF90bXBsJDI1ID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8ZGl2PmApO1xudmFyIF90bXBsJDMzID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8YXNpZGUgYXJpYS1sYWJlbD1cIlRhbnN0YWNrIHF1ZXJ5IGRldnRvb2xzXCI+PGRpdj48L2Rpdj48YnV0dG9uIGFyaWEtbGFiZWw9XCJDbG9zZSB0YW5zdGFjayBxdWVyeSBkZXZ0b29sc1wiPmApO1xudmFyIF90bXBsJDQzID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8c2VsZWN0PmApO1xudmFyIF90bXBsJDUzID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8c3Bhbj5Bc2NgKTtcbnZhciBfdG1wbCQ2MyA9IC8qIEBfX1BVUkVfXyAqLyB0ZW1wbGF0ZShgPHNwYW4+RGVzY2ApO1xudmFyIF90bXBsJDczID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8ZGl2PlNldHRpbmdzYCk7XG52YXIgX3RtcGwkODMgPSAvKiBAX19QVVJFX18gKi8gdGVtcGxhdGUoYDxzcGFuPlBvc2l0aW9uYCk7XG52YXIgX3RtcGwkOTMgPSAvKiBAX19QVVJFX18gKi8gdGVtcGxhdGUoYDxzcGFuPlRvcGApO1xudmFyIF90bXBsJDEwMyA9IC8qIEBfX1BVUkVfXyAqLyB0ZW1wbGF0ZShgPHNwYW4+Qm90dG9tYCk7XG52YXIgX3RtcGwkMTEzID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8c3Bhbj5MZWZ0YCk7XG52YXIgX3RtcGwkMTIyID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8c3Bhbj5SaWdodGApO1xudmFyIF90bXBsJDEzMiA9IC8qIEBfX1BVUkVfXyAqLyB0ZW1wbGF0ZShgPHNwYW4+VGhlbWVgKTtcbnZhciBfdG1wbCQxNDIgPSAvKiBAX19QVVJFX18gKi8gdGVtcGxhdGUoYDxzcGFuPkxpZ2h0YCk7XG52YXIgX3RtcGwkMTUyID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8c3Bhbj5EYXJrYCk7XG52YXIgX3RtcGwkMTYyID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8c3Bhbj5TeXN0ZW1gKTtcbnZhciBfdG1wbCQxNzIgPSAvKiBAX19QVVJFX18gKi8gdGVtcGxhdGUoYDxkaXY+PGRpdiBjbGFzcz10c3FkLXF1ZXJpZXMtY29udGFpbmVyPmApO1xudmFyIF90bXBsJDE4MiA9IC8qIEBfX1BVUkVfXyAqLyB0ZW1wbGF0ZShgPGRpdj48ZGl2IGNsYXNzPXRzcWQtbXV0YXRpb25zLWNvbnRhaW5lcj5gKTtcbnZhciBfdG1wbCQxOTIgPSAvKiBAX19QVVJFX18gKi8gdGVtcGxhdGUoYDxkaXY+PGRpdj48ZGl2PjxidXR0b24gYXJpYS1sYWJlbD1cIkNsb3NlIFRhbnN0YWNrIHF1ZXJ5IGRldnRvb2xzXCI+PHNwYW4+VEFOU1RBQ0s8L3NwYW4+PHNwYW4+IHY8L3NwYW4+PC9idXR0b24+PC9kaXY+PC9kaXY+PGRpdj48ZGl2PjxkaXY+PGlucHV0IGFyaWEtbGFiZWw9XCJGaWx0ZXIgcXVlcmllcyBieSBxdWVyeSBrZXlcInR5cGU9dGV4dCBwbGFjZWhvbGRlcj1GaWx0ZXIgY2xhc3M9dHNxZC1xdWVyeS1maWx0ZXItdGV4dGZpZWxkPjwvZGl2PjxkaXY+PC9kaXY+PGJ1dHRvbiBjbGFzcz10c3FkLXF1ZXJ5LWZpbHRlci1zb3J0LW9yZGVyLWJ0bj48L2J1dHRvbj48L2Rpdj48ZGl2PjxidXR0b24gYXJpYS1sYWJlbD1cIkNsZWFyIHF1ZXJ5IGNhY2hlXCI+PC9idXR0b24+PGJ1dHRvbj5gKTtcbnZhciBfdG1wbCQyMDIgPSAvKiBAX19QVVJFX18gKi8gdGVtcGxhdGUoYDxvcHRpb24+U29ydCBieSBgKTtcbnZhciBfdG1wbCQyMTIgPSAvKiBAX19QVVJFX18gKi8gdGVtcGxhdGUoYDxkaXYgY2xhc3M9dHNxZC1xdWVyeS1kaXNhYmxlZC1pbmRpY2F0b3I+ZGlzYWJsZWRgKTtcbnZhciBfdG1wbCQyMjIgPSAvKiBAX19QVVJFX18gKi8gdGVtcGxhdGUoYDxidXR0b24+PGRpdj48L2Rpdj48Y29kZSBjbGFzcz10c3FkLXF1ZXJ5LWhhc2g+YCk7XG52YXIgX3RtcGwkMjMyID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8ZGl2IHJvbGU9dG9vbHRpcCBpZD10c3FkLXN0YXR1cy10b29sdGlwPmApO1xudmFyIF90bXBsJDI0MiA9IC8qIEBfX1BVUkVfXyAqLyB0ZW1wbGF0ZShgPHNwYW4+YCk7XG52YXIgX3RtcGwkMjUyID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8YnV0dG9uPjxzcGFuPjwvc3Bhbj48c3Bhbj5gKTtcbnZhciBfdG1wbCQyNiA9IC8qIEBfX1BVUkVfXyAqLyB0ZW1wbGF0ZShgPGJ1dHRvbj48c3Bhbj48L3NwYW4+IEVycm9yYCk7XG52YXIgX3RtcGwkMjcgPSAvKiBAX19QVVJFX18gKi8gdGVtcGxhdGUoYDxkaXY+PHNwYW4+PC9zcGFuPlRyaWdnZXIgRXJyb3I8c2VsZWN0PjxvcHRpb24gdmFsdWU9XCJcImRpc2FibGVkIHNlbGVjdGVkPmApO1xudmFyIF90bXBsJDI4ID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8ZGl2PjxkaXY+UXVlcnkgRGV0YWlsczwvZGl2PjxkaXY+PGRpdiBjbGFzcz10c3FkLXF1ZXJ5LWRldGFpbHMtc3VtbWFyeT48cHJlPjxjb2RlPjwvY29kZT48L3ByZT48c3Bhbj48L3NwYW4+PC9kaXY+PGRpdiBjbGFzcz10c3FkLXF1ZXJ5LWRldGFpbHMtb2JzZXJ2ZXJzLWNvdW50PjxzcGFuPk9ic2VydmVyczo8L3NwYW4+PHNwYW4+PC9zcGFuPjwvZGl2PjxkaXYgY2xhc3M9dHNxZC1xdWVyeS1kZXRhaWxzLWxhc3QtdXBkYXRlZD48c3Bhbj5MYXN0IFVwZGF0ZWQ6PC9zcGFuPjxzcGFuPjwvc3Bhbj48L2Rpdj48L2Rpdj48ZGl2PkFjdGlvbnM8L2Rpdj48ZGl2PjxidXR0b24+PHNwYW4+PC9zcGFuPlJlZmV0Y2g8L2J1dHRvbj48YnV0dG9uPjxzcGFuPjwvc3Bhbj5JbnZhbGlkYXRlPC9idXR0b24+PGJ1dHRvbj48c3Bhbj48L3NwYW4+UmVzZXQ8L2J1dHRvbj48YnV0dG9uPjxzcGFuPjwvc3Bhbj5SZW1vdmU8L2J1dHRvbj48YnV0dG9uPjxzcGFuPjwvc3Bhbj4gTG9hZGluZzwvYnV0dG9uPjwvZGl2PjxkaXY+RGF0YSBFeHBsb3JlcjwvZGl2PjxkaXYgY2xhc3M9XCJ0c3FkLXF1ZXJ5LWRldGFpbHMtZXhwbG9yZXItY29udGFpbmVyIHRzcWQtcXVlcnktZGV0YWlscy1kYXRhLWV4cGxvcmVyXCI+PC9kaXY+PGRpdj5RdWVyeSBFeHBsb3JlcjwvZGl2PjxkaXYgY2xhc3M9XCJ0c3FkLXF1ZXJ5LWRldGFpbHMtZXhwbG9yZXItY29udGFpbmVyIHRzcWQtcXVlcnktZGV0YWlscy1xdWVyeS1leHBsb3JlclwiPmApO1xudmFyIF90bXBsJDI5ID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8b3B0aW9uPmApO1xudmFyIF90bXBsJDMwID0gLyogQF9fUFVSRV9fICovIHRlbXBsYXRlKGA8ZGl2PjxkaXY+TXV0YXRpb24gRGV0YWlsczwvZGl2PjxkaXY+PGRpdiBjbGFzcz10c3FkLXF1ZXJ5LWRldGFpbHMtc3VtbWFyeT48cHJlPjxjb2RlPjwvY29kZT48L3ByZT48c3Bhbj48L3NwYW4+PC9kaXY+PGRpdiBjbGFzcz10c3FkLXF1ZXJ5LWRldGFpbHMtbGFzdC11cGRhdGVkPjxzcGFuPlN1Ym1pdHRlZCBBdDo8L3NwYW4+PHNwYW4+PC9zcGFuPjwvZGl2PjwvZGl2PjxkaXY+VmFyaWFibGVzIERldGFpbHM8L2Rpdj48ZGl2IGNsYXNzPVwidHNxZC1xdWVyeS1kZXRhaWxzLWV4cGxvcmVyLWNvbnRhaW5lciB0c3FkLXF1ZXJ5LWRldGFpbHMtcXVlcnktZXhwbG9yZXJcIj48L2Rpdj48ZGl2PkNvbnRleHQgRGV0YWlsczwvZGl2PjxkaXYgY2xhc3M9XCJ0c3FkLXF1ZXJ5LWRldGFpbHMtZXhwbG9yZXItY29udGFpbmVyIHRzcWQtcXVlcnktZGV0YWlscy1xdWVyeS1leHBsb3JlclwiPjwvZGl2PjxkaXY+RGF0YSBFeHBsb3JlcjwvZGl2PjxkaXYgY2xhc3M9XCJ0c3FkLXF1ZXJ5LWRldGFpbHMtZXhwbG9yZXItY29udGFpbmVyIHRzcWQtcXVlcnktZGV0YWlscy1xdWVyeS1leHBsb3JlclwiPjwvZGl2PjxkaXY+TXV0YXRpb25zIEV4cGxvcmVyPC9kaXY+PGRpdiBjbGFzcz1cInRzcWQtcXVlcnktZGV0YWlscy1leHBsb3Jlci1jb250YWluZXIgdHNxZC1xdWVyeS1kZXRhaWxzLXF1ZXJ5LWV4cGxvcmVyXCI+YCk7XG52YXIgZmlyc3RCcmVha3BvaW50ID0gMTAyNDtcbnZhciBzZWNvbmRCcmVha3BvaW50ID0gNzk2O1xudmFyIHRoaXJkQnJlYWtwb2ludCA9IDcwMDtcbnZhciBCVVRUT05fUE9TSVRJT04gPSBcImJvdHRvbS1yaWdodFwiO1xudmFyIFBPU0lUSU9OID0gXCJib3R0b21cIjtcbnZhciBUSEVNRV9QUkVGRVJFTkNFID0gXCJzeXN0ZW1cIjtcbnZhciBJTklUSUFMX0lTX09QRU4gPSBmYWxzZTtcbnZhciBERUZBVUxUX0hFSUdIVCA9IDUwMDtcbnZhciBERUZBVUxUX1dJRFRIID0gNTAwO1xudmFyIERFRkFVTFRfU09SVF9GTl9OQU1FID0gT2JqZWN0LmtleXMoc29ydEZucylbMF07XG52YXIgREVGQVVMVF9TT1JUX09SREVSID0gMTtcbnZhciBERUZBVUxUX01VVEFUSU9OX1NPUlRfRk5fTkFNRSA9IE9iamVjdC5rZXlzKG11dGF0aW9uU29ydEZucylbMF07XG52YXIgW3NlbGVjdGVkUXVlcnlIYXNoLCBzZXRTZWxlY3RlZFF1ZXJ5SGFzaF0gPSBjcmVhdGVTaWduYWwobnVsbCk7XG52YXIgW3NlbGVjdGVkTXV0YXRpb25JZCwgc2V0U2VsZWN0ZWRNdXRhdGlvbklkXSA9IGNyZWF0ZVNpZ25hbChudWxsKTtcbnZhciBbcGFuZWxXaWR0aCwgc2V0UGFuZWxXaWR0aF0gPSBjcmVhdGVTaWduYWwoMCk7XG52YXIgRGV2dG9vbHNDb21wb25lbnQgPSAocHJvcHMpID0+IHtcbiAgY29uc3QgW2xvY2FsU3RvcmUsIHNldExvY2FsU3RvcmVdID0gY3JlYXRlTG9jYWxTdG9yYWdlKHtcbiAgICBwcmVmaXg6IFwiVGFuc3RhY2tRdWVyeURldnRvb2xzXCJcbiAgfSk7XG4gIGNvbnN0IGNvbG9yU2NoZW1lID0gZ2V0UHJlZmVycmVkQ29sb3JTY2hlbWUoKTtcbiAgY29uc3QgdGhlbWUgPSBjcmVhdGVNZW1vKCgpID0+IHtcbiAgICBjb25zdCBwcmVmZXJlbmNlID0gbG9jYWxTdG9yZS50aGVtZV9wcmVmZXJlbmNlIHx8IFRIRU1FX1BSRUZFUkVOQ0U7XG4gICAgaWYgKHByZWZlcmVuY2UgIT09IFwic3lzdGVtXCIpXG4gICAgICByZXR1cm4gcHJlZmVyZW5jZTtcbiAgICByZXR1cm4gY29sb3JTY2hlbWUoKTtcbiAgfSk7XG4gIHJldHVybiBjcmVhdGVDb21wb25lbnQoUXVlcnlEZXZ0b29sc0NvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogcHJvcHMsXG4gICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChUaGVtZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHRoZW1lLFxuICAgICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChEZXZ0b29scywge1xuICAgICAgICAgICAgbG9jYWxTdG9yZSxcbiAgICAgICAgICAgIHNldExvY2FsU3RvcmVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgRGV2dG9vbHNfZGVmYXVsdCA9IERldnRvb2xzQ29tcG9uZW50O1xudmFyIERldnRvb2xzID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgY29uc3Qgc3R5bGVzID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHRoZW1lKCkgPT09IFwiZGFya1wiID8gZGFya1N0eWxlczIgOiBsaWdodFN0eWxlczI7XG4gIH0pO1xuICBjb25zdCBidXR0b25Qb3NpdGlvbiA9IGNyZWF0ZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB1c2VRdWVyeURldnRvb2xzQ29udGV4dCgpLmJ1dHRvblBvc2l0aW9uIHx8IEJVVFRPTl9QT1NJVElPTjtcbiAgfSk7XG4gIGNvbnN0IGlzT3BlbiA9IGNyZWF0ZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiBwcm9wcy5sb2NhbFN0b3JlLm9wZW4gPT09IFwidHJ1ZVwiID8gdHJ1ZSA6IHByb3BzLmxvY2FsU3RvcmUub3BlbiA9PT0gXCJmYWxzZVwiID8gZmFsc2UgOiB1c2VRdWVyeURldnRvb2xzQ29udGV4dCgpLmluaXRpYWxJc09wZW4gfHwgSU5JVElBTF9JU19PUEVOO1xuICB9KTtcbiAgY29uc3QgcG9zaXRpb24gPSBjcmVhdGVNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gcHJvcHMubG9jYWxTdG9yZS5wb3NpdGlvbiB8fCB1c2VRdWVyeURldnRvb2xzQ29udGV4dCgpLnBvc2l0aW9uIHx8IFBPU0lUSU9OO1xuICB9KTtcbiAgbGV0IHRyYW5zaXRpb25zQ29udGFpbmVyUmVmO1xuICBjcmVhdGVFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHJvb3QgPSB0cmFuc2l0aW9uc0NvbnRhaW5lclJlZi5wYXJlbnRFbGVtZW50O1xuICAgIGNvbnN0IGhlaWdodCA9IHByb3BzLmxvY2FsU3RvcmUuaGVpZ2h0IHx8IERFRkFVTFRfSEVJR0hUO1xuICAgIGNvbnN0IHdpZHRoID0gcHJvcHMubG9jYWxTdG9yZS53aWR0aCB8fCBERUZBVUxUX1dJRFRIO1xuICAgIGNvbnN0IHBhbmVsUG9zaXRpb24gPSBwb3NpdGlvbigpO1xuICAgIHJvb3Quc3R5bGUuc2V0UHJvcGVydHkoXCItLXRzcWQtcGFuZWwtaGVpZ2h0XCIsIGAke3BhbmVsUG9zaXRpb24gPT09IFwidG9wXCIgPyBcIi1cIiA6IFwiXCJ9JHtoZWlnaHR9cHhgKTtcbiAgICByb290LnN0eWxlLnNldFByb3BlcnR5KFwiLS10c3FkLXBhbmVsLXdpZHRoXCIsIGAke3BhbmVsUG9zaXRpb24gPT09IFwibGVmdFwiID8gXCItXCIgOiBcIlwifSR7d2lkdGh9cHhgKTtcbiAgfSk7XG4gIG9uTW91bnQoKCkgPT4ge1xuICAgIGNvbnN0IG9uRm9jdXMgPSAoKSA9PiB7XG4gICAgICBjb25zdCByb290ID0gdHJhbnNpdGlvbnNDb250YWluZXJSZWYucGFyZW50RWxlbWVudDtcbiAgICAgIGNvbnN0IGZvbnRTaXplID0gZ2V0Q29tcHV0ZWRTdHlsZShyb290KS5mb250U2l6ZTtcbiAgICAgIHJvb3Quc3R5bGUuc2V0UHJvcGVydHkoXCItLXRzcWQtZm9udC1zaXplXCIsIGZvbnRTaXplKTtcbiAgICB9O1xuICAgIG9uRm9jdXMoKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIG9uRm9jdXMpO1xuICAgIG9uQ2xlYW51cCgoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIG9uRm9jdXMpO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuICgoKSA9PiB7XG4gICAgY29uc3QgX2VsJCA9IF90bXBsJDI1KCk7XG4gICAgY29uc3QgX3JlZiQgPSB0cmFuc2l0aW9uc0NvbnRhaW5lclJlZjtcbiAgICB0eXBlb2YgX3JlZiQgPT09IFwiZnVuY3Rpb25cIiA/IHVzZShfcmVmJCwgX2VsJCkgOiB0cmFuc2l0aW9uc0NvbnRhaW5lclJlZiA9IF9lbCQ7XG4gICAgaW5zZXJ0KF9lbCQsIGNyZWF0ZUNvbXBvbmVudChUcmFuc2l0aW9uR3JvdXAsIHtcbiAgICAgIG5hbWU6IFwidHNxZC1wYW5lbC10cmFuc2l0aW9uXCIsXG4gICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVDb21wb25lbnQoU2hvdywge1xuICAgICAgICAgIGdldCB3aGVuKCkge1xuICAgICAgICAgICAgcmV0dXJuIGlzT3BlbigpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChEZXZ0b29sc1BhbmVsLCB7XG4gICAgICAgICAgICAgIGdldCBsb2NhbFN0b3JlKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcy5sb2NhbFN0b3JlO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBnZXQgc2V0TG9jYWxTdG9yZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHMuc2V0TG9jYWxTdG9yZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KSwgbnVsbCk7XG4gICAgaW5zZXJ0KF9lbCQsIGNyZWF0ZUNvbXBvbmVudChUcmFuc2l0aW9uR3JvdXAsIHtcbiAgICAgIG5hbWU6IFwidHNxZC1idXR0b24tdHJhbnNpdGlvblwiLFxuICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KFNob3csIHtcbiAgICAgICAgICBnZXQgd2hlbigpIHtcbiAgICAgICAgICAgIHJldHVybiAhaXNPcGVuKCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgICAgICBjb25zdCBfZWwkMiA9IF90bXBsJDI0KCksIF9lbCQzID0gX2VsJDIuZmlyc3RDaGlsZCwgX2VsJDQgPSBfZWwkMy5uZXh0U2libGluZztcbiAgICAgICAgICAgIGluc2VydChfZWwkMywgY3JlYXRlQ29tcG9uZW50KFRhbnN0YWNrTG9nbywge30pKTtcbiAgICAgICAgICAgIF9lbCQ0LiQkY2xpY2sgPSAoKSA9PiBwcm9wcy5zZXRMb2NhbFN0b3JlKFwib3BlblwiLCBcInRydWVcIik7XG4gICAgICAgICAgICBpbnNlcnQoX2VsJDQsIGNyZWF0ZUNvbXBvbmVudChUYW5zdGFja0xvZ28sIHt9KSk7XG4gICAgICAgICAgICBjcmVhdGVSZW5kZXJFZmZlY3QoKCkgPT4gY2xhc3NOYW1lKF9lbCQyLCBjbHN4KHN0eWxlcygpLmRldnRvb2xzQnRuLCBzdHlsZXMoKVtgZGV2dG9vbHNCdG4tcG9zaXRpb24tJHtidXR0b25Qb3NpdGlvbigpfWBdKSkpO1xuICAgICAgICAgICAgcmV0dXJuIF9lbCQyO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSksIG51bGwpO1xuICAgIGNyZWF0ZVJlbmRlckVmZmVjdCgoKSA9PiBjbGFzc05hbWUoX2VsJCwgY2xzeCh1YFxuICAgICAgICAgICYgLnRzcWQtcGFuZWwtdHJhbnNpdGlvbi1leGl0LWFjdGl2ZSxcbiAgICAgICAgICAmIC50c3FkLXBhbmVsLXRyYW5zaXRpb24tZW50ZXItYWN0aXZlIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb246XG4gICAgICAgICAgICAgIG9wYWNpdHkgMC4zcyxcbiAgICAgICAgICAgICAgdHJhbnNmb3JtIDAuM3M7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJiAudHNxZC1wYW5lbC10cmFuc2l0aW9uLWV4aXQtdG8sXG4gICAgICAgICAgJiAudHNxZC1wYW5lbC10cmFuc2l0aW9uLWVudGVyIHtcbiAgICAgICAgICAgICR7cG9zaXRpb24oKSA9PT0gXCJ0b3BcIiB8fCBwb3NpdGlvbigpID09PSBcImJvdHRvbVwiID8gYHRyYW5zZm9ybTogdHJhbnNsYXRlWSh2YXIoLS10c3FkLXBhbmVsLWhlaWdodCkpO2AgOiBgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKHZhcigtLXRzcWQtcGFuZWwtd2lkdGgpKTtgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgICYgLnRzcWQtYnV0dG9uLXRyYW5zaXRpb24tZXhpdC1hY3RpdmUsXG4gICAgICAgICAgJiAudHNxZC1idXR0b24tdHJhbnNpdGlvbi1lbnRlci1hY3RpdmUge1xuICAgICAgICAgICAgdHJhbnNpdGlvbjpcbiAgICAgICAgICAgICAgb3BhY2l0eSAwLjNzLFxuICAgICAgICAgICAgICB0cmFuc2Zvcm0gMC4zcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAmIC50c3FkLWJ1dHRvbi10cmFuc2l0aW9uLWV4aXQtdG8sXG4gICAgICAgICAgJiAudHNxZC1idXR0b24tdHJhbnNpdGlvbi1lbnRlciB7XG4gICAgICAgICAgICB0cmFuc2Zvcm06ICR7YnV0dG9uUG9zaXRpb24oKSA9PT0gXCJ0b3AtbGVmdFwiID8gYHRyYW5zbGF0ZVgoLTcycHgpO2AgOiBidXR0b25Qb3NpdGlvbigpID09PSBcInRvcC1yaWdodFwiID8gYHRyYW5zbGF0ZVgoNzJweCk7YCA6IGB0cmFuc2xhdGVZKDcycHgpO2B9O1xuICAgICAgICAgIH1cbiAgICAgICAgYCwgXCJ0c3FkLXRyYW5zaXRpb25zLWNvbnRhaW5lclwiKSkpO1xuICAgIHJldHVybiBfZWwkO1xuICB9KSgpO1xufTtcbnZhciBEZXZ0b29sc1BhbmVsID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgY29uc3Qgc3R5bGVzID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHRoZW1lKCkgPT09IFwiZGFya1wiID8gZGFya1N0eWxlczIgOiBsaWdodFN0eWxlczI7XG4gIH0pO1xuICBjb25zdCBbaXNSZXNpemluZywgc2V0SXNSZXNpemluZ10gPSBjcmVhdGVTaWduYWwoZmFsc2UpO1xuICBjb25zdCBwb3NpdGlvbiA9IGNyZWF0ZU1lbW8oKCkgPT4gcHJvcHMubG9jYWxTdG9yZS5wb3NpdGlvbiB8fCB1c2VRdWVyeURldnRvb2xzQ29udGV4dCgpLnBvc2l0aW9uIHx8IFBPU0lUSU9OKTtcbiAgY29uc3QgaGFuZGxlRHJhZ1N0YXJ0ID0gKGV2ZW50KSA9PiB7XG4gICAgY29uc3QgcGFuZWxFbGVtZW50ID0gZXZlbnQuY3VycmVudFRhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgIGlmICghcGFuZWxFbGVtZW50KVxuICAgICAgcmV0dXJuO1xuICAgIHNldElzUmVzaXppbmcodHJ1ZSk7XG4gICAgY29uc3Qge1xuICAgICAgaGVpZ2h0LFxuICAgICAgd2lkdGhcbiAgICB9ID0gcGFuZWxFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IHN0YXJ0WCA9IGV2ZW50LmNsaWVudFg7XG4gICAgY29uc3Qgc3RhcnRZID0gZXZlbnQuY2xpZW50WTtcbiAgICBsZXQgbmV3U2l6ZSA9IDA7XG4gICAgY29uc3QgbWluSGVpZ2h0ID0gY29udmVydFJlbVRvUGl4ZWxzKDMuNSk7XG4gICAgY29uc3QgbWluV2lkdGggPSBjb252ZXJ0UmVtVG9QaXhlbHMoMTIpO1xuICAgIGNvbnN0IHJ1bkRyYWcgPSAobW92ZUV2ZW50KSA9PiB7XG4gICAgICBtb3ZlRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmIChwb3NpdGlvbigpID09PSBcImxlZnRcIiB8fCBwb3NpdGlvbigpID09PSBcInJpZ2h0XCIpIHtcbiAgICAgICAgY29uc3QgdmFsVG9BZGQgPSBwb3NpdGlvbigpID09PSBcInJpZ2h0XCIgPyBzdGFydFggLSBtb3ZlRXZlbnQuY2xpZW50WCA6IG1vdmVFdmVudC5jbGllbnRYIC0gc3RhcnRYO1xuICAgICAgICBuZXdTaXplID0gTWF0aC5yb3VuZCh3aWR0aCArIHZhbFRvQWRkKTtcbiAgICAgICAgaWYgKG5ld1NpemUgPCBtaW5XaWR0aCkge1xuICAgICAgICAgIG5ld1NpemUgPSBtaW5XaWR0aDtcbiAgICAgICAgfVxuICAgICAgICBwcm9wcy5zZXRMb2NhbFN0b3JlKFwid2lkdGhcIiwgU3RyaW5nKE1hdGgucm91bmQobmV3U2l6ZSkpKTtcbiAgICAgICAgY29uc3QgbmV3V2lkdGggPSBwYW5lbEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgICAgIGlmIChOdW1iZXIocHJvcHMubG9jYWxTdG9yZS53aWR0aCkgPCBuZXdXaWR0aCkge1xuICAgICAgICAgIHByb3BzLnNldExvY2FsU3RvcmUoXCJ3aWR0aFwiLCBTdHJpbmcobmV3V2lkdGgpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgdmFsVG9BZGQgPSBwb3NpdGlvbigpID09PSBcImJvdHRvbVwiID8gc3RhcnRZIC0gbW92ZUV2ZW50LmNsaWVudFkgOiBtb3ZlRXZlbnQuY2xpZW50WSAtIHN0YXJ0WTtcbiAgICAgICAgbmV3U2l6ZSA9IE1hdGgucm91bmQoaGVpZ2h0ICsgdmFsVG9BZGQpO1xuICAgICAgICBpZiAobmV3U2l6ZSA8IG1pbkhlaWdodCkge1xuICAgICAgICAgIG5ld1NpemUgPSBtaW5IZWlnaHQ7XG4gICAgICAgICAgc2V0U2VsZWN0ZWRRdWVyeUhhc2gobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcHJvcHMuc2V0TG9jYWxTdG9yZShcImhlaWdodFwiLCBTdHJpbmcoTWF0aC5yb3VuZChuZXdTaXplKSkpO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgdW5zdWIgPSAoKSA9PiB7XG4gICAgICBpZiAoaXNSZXNpemluZygpKSB7XG4gICAgICAgIHNldElzUmVzaXppbmcoZmFsc2UpO1xuICAgICAgfVxuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBydW5EcmFnLCBmYWxzZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VVcFwiLCB1bnN1YiwgZmFsc2UpO1xuICAgIH07XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBydW5EcmFnLCBmYWxzZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdW5zdWIsIGZhbHNlKTtcbiAgfTtcbiAgbGV0IHBhbmVsUmVmO1xuICBvbk1vdW50KCgpID0+IHtcbiAgICBjcmVhdGVSZXNpemVPYnNlcnZlcihwYW5lbFJlZiwgKHtcbiAgICAgIHdpZHRoXG4gICAgfSwgZWwpID0+IHtcbiAgICAgIGlmIChlbCA9PT0gcGFuZWxSZWYpIHtcbiAgICAgICAgc2V0UGFuZWxXaWR0aCh3aWR0aCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICBjcmVhdGVFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHJvb3RDb250YWluZXIgPSBwYW5lbFJlZi5wYXJlbnRFbGVtZW50Py5wYXJlbnRFbGVtZW50Py5wYXJlbnRFbGVtZW50O1xuICAgIGlmICghcm9vdENvbnRhaW5lcilcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBjdXJyZW50UG9zaXRpb24gPSBwcm9wcy5sb2NhbFN0b3JlLnBvc2l0aW9uIHx8IFBPU0lUSU9OO1xuICAgIGNvbnN0IHN0eWxlUHJvcCA9IGdldFNpZGVkUHJvcChcInBhZGRpbmdcIiwgY3VycmVudFBvc2l0aW9uKTtcbiAgICBjb25zdCBpc1ZlcnRpY2FsID0gcHJvcHMubG9jYWxTdG9yZS5wb3NpdGlvbiA9PT0gXCJsZWZ0XCIgfHwgcHJvcHMubG9jYWxTdG9yZS5wb3NpdGlvbiA9PT0gXCJyaWdodFwiO1xuICAgIGNvbnN0IHByZXZpb3VzUGFkZGluZ3MgPSAoKHtcbiAgICAgIHBhZGRpbmcsXG4gICAgICBwYWRkaW5nVG9wLFxuICAgICAgcGFkZGluZ0JvdHRvbSxcbiAgICAgIHBhZGRpbmdMZWZ0LFxuICAgICAgcGFkZGluZ1JpZ2h0XG4gICAgfSkgPT4gKHtcbiAgICAgIHBhZGRpbmcsXG4gICAgICBwYWRkaW5nVG9wLFxuICAgICAgcGFkZGluZ0JvdHRvbSxcbiAgICAgIHBhZGRpbmdMZWZ0LFxuICAgICAgcGFkZGluZ1JpZ2h0XG4gICAgfSkpKHJvb3RDb250YWluZXIuc3R5bGUpO1xuICAgIHJvb3RDb250YWluZXIuc3R5bGVbc3R5bGVQcm9wXSA9IGAke2lzVmVydGljYWwgPyBwcm9wcy5sb2NhbFN0b3JlLndpZHRoIDogcHJvcHMubG9jYWxTdG9yZS5oZWlnaHR9cHhgO1xuICAgIG9uQ2xlYW51cCgoKSA9PiB7XG4gICAgICBPYmplY3QuZW50cmllcyhwcmV2aW91c1BhZGRpbmdzKS5mb3JFYWNoKChbcHJvcGVydHksIHByZXZpb3VzVmFsdWVdKSA9PiB7XG4gICAgICAgIHJvb3RDb250YWluZXIuc3R5bGVbcHJvcGVydHldID0gcHJldmlvdXNWYWx1ZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbiAgY29uc3QgZ2V0UGFuZWxEeW5hbWljU3R5bGVzID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbG9yc1xuICAgIH0gPSB0b2tlbnM7XG4gICAgY29uc3QgdDIgPSAobGlnaHQsIGRhcmspID0+IHRoZW1lKCkgPT09IFwiZGFya1wiID8gZGFyayA6IGxpZ2h0O1xuICAgIGlmIChwYW5lbFdpZHRoKCkgPCBzZWNvbmRCcmVha3BvaW50KSB7XG4gICAgICByZXR1cm4gdWBcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0Mihjb2xvcnMuZ3JheVszMDBdLCBjb2xvcnMuZ3JheVs2MDBdKX07XG4gICAgICBgO1xuICAgIH1cbiAgICByZXR1cm4gdWBcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3QyKGNvbG9ycy5ncmF5WzIwMF0sIGNvbG9ycy5kYXJrR3JheVs5MDBdKX07XG4gICAgYDtcbiAgfTtcbiAgcmV0dXJuICgoKSA9PiB7XG4gICAgY29uc3QgX2VsJDUgPSBfdG1wbCQzMygpLCBfZWwkNiA9IF9lbCQ1LmZpcnN0Q2hpbGQsIF9lbCQ3ID0gX2VsJDYubmV4dFNpYmxpbmc7XG4gICAgY29uc3QgX3JlZiQyID0gcGFuZWxSZWY7XG4gICAgdHlwZW9mIF9yZWYkMiA9PT0gXCJmdW5jdGlvblwiID8gdXNlKF9yZWYkMiwgX2VsJDUpIDogcGFuZWxSZWYgPSBfZWwkNTtcbiAgICBfZWwkNi4kJG1vdXNlZG93biA9IGhhbmRsZURyYWdTdGFydDtcbiAgICBfZWwkNy4kJGNsaWNrID0gKCkgPT4gcHJvcHMuc2V0TG9jYWxTdG9yZShcIm9wZW5cIiwgXCJmYWxzZVwiKTtcbiAgICBpbnNlcnQoX2VsJDcsIGNyZWF0ZUNvbXBvbmVudChDaGV2cm9uRG93biwge30pKTtcbiAgICBpbnNlcnQoX2VsJDUsIGNyZWF0ZUNvbXBvbmVudChDb250ZW50Vmlldywge1xuICAgICAgZ2V0IGxvY2FsU3RvcmUoKSB7XG4gICAgICAgIHJldHVybiBwcm9wcy5sb2NhbFN0b3JlO1xuICAgICAgfSxcbiAgICAgIGdldCBzZXRMb2NhbFN0b3JlKCkge1xuICAgICAgICByZXR1cm4gcHJvcHMuc2V0TG9jYWxTdG9yZTtcbiAgICAgIH1cbiAgICB9KSwgbnVsbCk7XG4gICAgY3JlYXRlUmVuZGVyRWZmZWN0KChfcCQpID0+IHtcbiAgICAgIGNvbnN0IF92JCA9IGNsc3goc3R5bGVzKCkucGFuZWwsIHN0eWxlcygpW2BwYW5lbC1wb3NpdGlvbi0ke3Bvc2l0aW9uKCl9YF0sIGdldFBhbmVsRHluYW1pY1N0eWxlcygpLCB7XG4gICAgICAgIFt1YFxuICAgICAgICAgICAgbWluLXdpZHRoOiBtaW4tY29udGVudDtcbiAgICAgICAgICBgXTogcGFuZWxXaWR0aCgpIDwgdGhpcmRCcmVha3BvaW50ICYmIChwb3NpdGlvbigpID09PSBcInJpZ2h0XCIgfHwgcG9zaXRpb24oKSA9PT0gXCJsZWZ0XCIpXG4gICAgICB9LCBcInRzcWQtbWFpbi1wYW5lbFwiKSwgX3YkMiA9IHBvc2l0aW9uKCkgPT09IFwiYm90dG9tXCIgfHwgcG9zaXRpb24oKSA9PT0gXCJ0b3BcIiA/IGAke3Byb3BzLmxvY2FsU3RvcmUuaGVpZ2h0IHx8IERFRkFVTFRfSEVJR0hUfXB4YCA6IFwiYXV0b1wiLCBfdiQzID0gcG9zaXRpb24oKSA9PT0gXCJyaWdodFwiIHx8IHBvc2l0aW9uKCkgPT09IFwibGVmdFwiID8gYCR7cHJvcHMubG9jYWxTdG9yZS53aWR0aCB8fCBERUZBVUxUX1dJRFRIfXB4YCA6IFwiYXV0b1wiLCBfdiQ0ID0gY2xzeChzdHlsZXMoKS5kcmFnSGFuZGxlLCBzdHlsZXMoKVtgZHJhZ0hhbmRsZS1wb3NpdGlvbi0ke3Bvc2l0aW9uKCl9YF0sIFwidHNxZC1kcmFnLWhhbmRsZVwiKSwgX3YkNSA9IGNsc3goc3R5bGVzKCkuY2xvc2VCdG4sIHN0eWxlcygpW2BjbG9zZUJ0bi1wb3NpdGlvbi0ke3Bvc2l0aW9uKCl9YF0sIFwidHNxZC1taW5pbWl6ZS1idG5cIik7XG4gICAgICBfdiQgIT09IF9wJC5fdiQgJiYgY2xhc3NOYW1lKF9lbCQ1LCBfcCQuX3YkID0gX3YkKTtcbiAgICAgIF92JDIgIT09IF9wJC5fdiQyICYmICgoX3AkLl92JDIgPSBfdiQyKSAhPSBudWxsID8gX2VsJDUuc3R5bGUuc2V0UHJvcGVydHkoXCJoZWlnaHRcIiwgX3YkMikgOiBfZWwkNS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcImhlaWdodFwiKSk7XG4gICAgICBfdiQzICE9PSBfcCQuX3YkMyAmJiAoKF9wJC5fdiQzID0gX3YkMykgIT0gbnVsbCA/IF9lbCQ1LnN0eWxlLnNldFByb3BlcnR5KFwid2lkdGhcIiwgX3YkMykgOiBfZWwkNS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcIndpZHRoXCIpKTtcbiAgICAgIF92JDQgIT09IF9wJC5fdiQ0ICYmIGNsYXNzTmFtZShfZWwkNiwgX3AkLl92JDQgPSBfdiQ0KTtcbiAgICAgIF92JDUgIT09IF9wJC5fdiQ1ICYmIGNsYXNzTmFtZShfZWwkNywgX3AkLl92JDUgPSBfdiQ1KTtcbiAgICAgIHJldHVybiBfcCQ7XG4gICAgfSwge1xuICAgICAgX3YkOiB2b2lkIDAsXG4gICAgICBfdiQyOiB2b2lkIDAsXG4gICAgICBfdiQzOiB2b2lkIDAsXG4gICAgICBfdiQ0OiB2b2lkIDAsXG4gICAgICBfdiQ1OiB2b2lkIDBcbiAgICB9KTtcbiAgICByZXR1cm4gX2VsJDU7XG4gIH0pKCk7XG59O1xudmFyIENvbnRlbnRWaWV3ID0gKHByb3BzKSA9PiB7XG4gIHNldHVwUXVlcnlDYWNoZVN1YnNjcmlwdGlvbigpO1xuICBzZXR1cE11dGF0aW9uQ2FjaGVTdWJzY3JpcHRpb24oKTtcbiAgbGV0IGNvbnRhaW5lclJlZjtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCBzdHlsZXMgPSBjcmVhdGVNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gdGhlbWUoKSA9PT0gXCJkYXJrXCIgPyBkYXJrU3R5bGVzMiA6IGxpZ2h0U3R5bGVzMjtcbiAgfSk7XG4gIGNvbnN0IFtzZWxlY3RlZFZpZXcsIHNldFNlbGVjdGVkVmlld10gPSBjcmVhdGVTaWduYWwoXCJxdWVyaWVzXCIpO1xuICBjb25zdCBzb3J0ID0gY3JlYXRlTWVtbygoKSA9PiBwcm9wcy5sb2NhbFN0b3JlLnNvcnQgfHwgREVGQVVMVF9TT1JUX0ZOX05BTUUpO1xuICBjb25zdCBzb3J0T3JkZXIgPSBjcmVhdGVNZW1vKCgpID0+IE51bWJlcihwcm9wcy5sb2NhbFN0b3JlLnNvcnRPcmRlcikgfHwgREVGQVVMVF9TT1JUX09SREVSKTtcbiAgY29uc3QgbXV0YXRpb25Tb3J0ID0gY3JlYXRlTWVtbygoKSA9PiBwcm9wcy5sb2NhbFN0b3JlLm11dGF0aW9uU29ydCB8fCBERUZBVUxUX01VVEFUSU9OX1NPUlRfRk5fTkFNRSk7XG4gIGNvbnN0IG11dGF0aW9uU29ydE9yZGVyID0gY3JlYXRlTWVtbygoKSA9PiBOdW1iZXIocHJvcHMubG9jYWxTdG9yZS5tdXRhdGlvblNvcnRPcmRlcikgfHwgREVGQVVMVF9TT1JUX09SREVSKTtcbiAgY29uc3QgW29mZmxpbmUsIHNldE9mZmxpbmVdID0gY3JlYXRlU2lnbmFsKGZhbHNlKTtcbiAgY29uc3Qgc29ydEZuID0gY3JlYXRlTWVtbygoKSA9PiBzb3J0Rm5zW3NvcnQoKV0pO1xuICBjb25zdCBtdXRhdGlvblNvcnRGbiA9IGNyZWF0ZU1lbW8oKCkgPT4gbXV0YXRpb25Tb3J0Rm5zW211dGF0aW9uU29ydCgpXSk7XG4gIGNvbnN0IG9ubGluZU1hbmFnZXIgPSBjcmVhdGVNZW1vKCgpID0+IHVzZVF1ZXJ5RGV2dG9vbHNDb250ZXh0KCkub25saW5lTWFuYWdlcik7XG4gIGNvbnN0IHF1ZXJ5X2NhY2hlID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHVzZVF1ZXJ5RGV2dG9vbHNDb250ZXh0KCkuY2xpZW50LmdldFF1ZXJ5Q2FjaGUoKTtcbiAgfSk7XG4gIGNvbnN0IG11dGF0aW9uX2NhY2hlID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHVzZVF1ZXJ5RGV2dG9vbHNDb250ZXh0KCkuY2xpZW50LmdldE11dGF0aW9uQ2FjaGUoKTtcbiAgfSk7XG4gIGNvbnN0IHF1ZXJ5Q291bnQgPSBjcmVhdGVTdWJzY3JpYmVUb1F1ZXJ5Q2FjaGVCYXRjaGVyKChxdWVyeUNhY2hlKSA9PiB7XG4gICAgcmV0dXJuIHF1ZXJ5Q2FjaGUoKS5nZXRBbGwoKS5sZW5ndGg7XG4gIH0sIGZhbHNlKTtcbiAgY29uc3QgcXVlcmllcyA9IGNyZWF0ZU1lbW8ob24oKCkgPT4gW3F1ZXJ5Q291bnQoKSwgcHJvcHMubG9jYWxTdG9yZS5maWx0ZXIsIHNvcnQoKSwgc29ydE9yZGVyKCldLCAoKSA9PiB7XG4gICAgY29uc3QgY3VyciA9IHF1ZXJ5X2NhY2hlKCkuZ2V0QWxsKCk7XG4gICAgY29uc3QgZmlsdGVyZWQgPSBwcm9wcy5sb2NhbFN0b3JlLmZpbHRlciA/IGN1cnIuZmlsdGVyKChpdGVtKSA9PiByYW5rSXRlbShpdGVtLnF1ZXJ5SGFzaCwgcHJvcHMubG9jYWxTdG9yZS5maWx0ZXIgfHwgXCJcIikucGFzc2VkKSA6IFsuLi5jdXJyXTtcbiAgICBjb25zdCBzb3J0ZWQgPSBzb3J0Rm4oKSA/IGZpbHRlcmVkLnNvcnQoKGEyLCBiMikgPT4gc29ydEZuKCkoYTIsIGIyKSAqIHNvcnRPcmRlcigpKSA6IGZpbHRlcmVkO1xuICAgIHJldHVybiBzb3J0ZWQ7XG4gIH0pKTtcbiAgY29uc3QgbXV0YXRpb25Db3VudCA9IGNyZWF0ZVN1YnNjcmliZVRvTXV0YXRpb25DYWNoZUJhdGNoZXIoKG11dGF0aW9uQ2FjaGUpID0+IHtcbiAgICByZXR1cm4gbXV0YXRpb25DYWNoZSgpLmdldEFsbCgpLmxlbmd0aDtcbiAgfSwgZmFsc2UpO1xuICBjb25zdCBtdXRhdGlvbnMgPSBjcmVhdGVNZW1vKG9uKCgpID0+IFttdXRhdGlvbkNvdW50KCksIHByb3BzLmxvY2FsU3RvcmUubXV0YXRpb25GaWx0ZXIsIG11dGF0aW9uU29ydCgpLCBtdXRhdGlvblNvcnRPcmRlcigpXSwgKCkgPT4ge1xuICAgIGNvbnN0IGN1cnIgPSBtdXRhdGlvbl9jYWNoZSgpLmdldEFsbCgpO1xuICAgIGNvbnN0IGZpbHRlcmVkID0gcHJvcHMubG9jYWxTdG9yZS5tdXRhdGlvbkZpbHRlciA/IGN1cnIuZmlsdGVyKChpdGVtKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGAke2l0ZW0ub3B0aW9ucy5tdXRhdGlvbktleSA/IEpTT04uc3RyaW5naWZ5KGl0ZW0ub3B0aW9ucy5tdXRhdGlvbktleSkgKyBcIiAtIFwiIDogXCJcIn0ke25ldyBEYXRlKGl0ZW0uc3RhdGUuc3VibWl0dGVkQXQpLnRvTG9jYWxlU3RyaW5nKCl9YDtcbiAgICAgIHJldHVybiByYW5rSXRlbSh2YWx1ZSwgcHJvcHMubG9jYWxTdG9yZS5tdXRhdGlvbkZpbHRlciB8fCBcIlwiKS5wYXNzZWQ7XG4gICAgfSkgOiBbLi4uY3Vycl07XG4gICAgY29uc3Qgc29ydGVkID0gbXV0YXRpb25Tb3J0Rm4oKSA/IGZpbHRlcmVkLnNvcnQoKGEyLCBiMikgPT4gbXV0YXRpb25Tb3J0Rm4oKShhMiwgYjIpICogbXV0YXRpb25Tb3J0T3JkZXIoKSkgOiBmaWx0ZXJlZDtcbiAgICByZXR1cm4gc29ydGVkO1xuICB9KSk7XG4gIGNvbnN0IHNldERldnRvb2xzUG9zaXRpb24gPSAocG9zKSA9PiB7XG4gICAgcHJvcHMuc2V0TG9jYWxTdG9yZShcInBvc2l0aW9uXCIsIHBvcyk7XG4gIH07XG4gIGNvbnN0IHNldENvbXB1dGVkVmFyaWFibGVzID0gKGVsKSA9PiB7XG4gICAgY29uc3QgY29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoY29udGFpbmVyUmVmKTtcbiAgICBjb25zdCB2YXJpYWJsZSA9IGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShcIi0tdHNxZC1mb250LXNpemVcIik7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoXCItLXRzcWQtZm9udC1zaXplXCIsIHZhcmlhYmxlKTtcbiAgfTtcbiAgcmV0dXJuIFsoKCkgPT4ge1xuICAgIGNvbnN0IF9lbCQ4ID0gX3RtcGwkMTkyKCksIF9lbCQ5ID0gX2VsJDguZmlyc3RDaGlsZCwgX2VsJDEwID0gX2VsJDkuZmlyc3RDaGlsZCwgX2VsJDExID0gX2VsJDEwLmZpcnN0Q2hpbGQsIF9lbCQxMiA9IF9lbCQxMS5maXJzdENoaWxkLCBfZWwkMTMgPSBfZWwkMTIubmV4dFNpYmxpbmcsIF9lbCQxNCA9IF9lbCQxMy5maXJzdENoaWxkLCBfZWwkMTUgPSBfZWwkOS5uZXh0U2libGluZywgX2VsJDE2ID0gX2VsJDE1LmZpcnN0Q2hpbGQsIF9lbCQxNyA9IF9lbCQxNi5maXJzdENoaWxkLCBfZWwkMTggPSBfZWwkMTcuZmlyc3RDaGlsZCwgX2VsJDE5ID0gX2VsJDE3Lm5leHRTaWJsaW5nLCBfZWwkMjIgPSBfZWwkMTkubmV4dFNpYmxpbmcsIF9lbCQyNSA9IF9lbCQxNi5uZXh0U2libGluZywgX2VsJDI2ID0gX2VsJDI1LmZpcnN0Q2hpbGQsIF9lbCQyNyA9IF9lbCQyNi5uZXh0U2libGluZztcbiAgICBjb25zdCBfcmVmJDMgPSBjb250YWluZXJSZWY7XG4gICAgdHlwZW9mIF9yZWYkMyA9PT0gXCJmdW5jdGlvblwiID8gdXNlKF9yZWYkMywgX2VsJDgpIDogY29udGFpbmVyUmVmID0gX2VsJDg7XG4gICAgX2VsJDExLiQkY2xpY2sgPSAoKSA9PiBwcm9wcy5zZXRMb2NhbFN0b3JlKFwib3BlblwiLCBcImZhbHNlXCIpO1xuICAgIGluc2VydChfZWwkMTMsICgpID0+IHVzZVF1ZXJ5RGV2dG9vbHNDb250ZXh0KCkucXVlcnlGbGF2b3IsIF9lbCQxNCk7XG4gICAgaW5zZXJ0KF9lbCQxMywgKCkgPT4gdXNlUXVlcnlEZXZ0b29sc0NvbnRleHQoKS52ZXJzaW9uLCBudWxsKTtcbiAgICBpbnNlcnQoX2VsJDEwLCBjcmVhdGVDb21wb25lbnQoaW5kZXgkOS5Sb290LCB7XG4gICAgICBnZXQgW1wiY2xhc3NcIl0oKSB7XG4gICAgICAgIHJldHVybiBjbHN4KHN0eWxlcygpLnZpZXdUb2dnbGUpO1xuICAgICAgfSxcbiAgICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkVmlldygpO1xuICAgICAgfSxcbiAgICAgIG9uQ2hhbmdlOiAodmFsdWUpID0+IHtcbiAgICAgICAgc2V0U2VsZWN0ZWRWaWV3KHZhbHVlKTtcbiAgICAgICAgc2V0U2VsZWN0ZWRRdWVyeUhhc2gobnVsbCk7XG4gICAgICAgIHNldFNlbGVjdGVkTXV0YXRpb25JZChudWxsKTtcbiAgICAgIH0sXG4gICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgIHJldHVybiBbY3JlYXRlQ29tcG9uZW50KGluZGV4JDkuSXRlbSwge1xuICAgICAgICAgIHZhbHVlOiBcInF1ZXJpZXNcIixcbiAgICAgICAgICBcImNsYXNzXCI6IFwidHNxZC1yYWRpby10b2dnbGVcIixcbiAgICAgICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgICAgICByZXR1cm4gW2NyZWF0ZUNvbXBvbmVudChpbmRleCQ5Lkl0ZW1JbnB1dCwge30pLCBjcmVhdGVDb21wb25lbnQoaW5kZXgkOS5JdGVtQ29udHJvbCwge1xuICAgICAgICAgICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChpbmRleCQ5Lkl0ZW1JbmRpY2F0b3IsIHt9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksIGNyZWF0ZUNvbXBvbmVudChpbmRleCQ5Lkl0ZW1MYWJlbCwge1xuICAgICAgICAgICAgICB0aXRsZTogXCJUb2dnbGUgUXVlcmllcyBWaWV3XCIsXG4gICAgICAgICAgICAgIGNoaWxkcmVuOiBcIlF1ZXJpZXNcIlxuICAgICAgICAgICAgfSldO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksIGNyZWF0ZUNvbXBvbmVudChpbmRleCQ5Lkl0ZW0sIHtcbiAgICAgICAgICB2YWx1ZTogXCJtdXRhdGlvbnNcIixcbiAgICAgICAgICBcImNsYXNzXCI6IFwidHNxZC1yYWRpby10b2dnbGVcIixcbiAgICAgICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgICAgICByZXR1cm4gW2NyZWF0ZUNvbXBvbmVudChpbmRleCQ5Lkl0ZW1JbnB1dCwge30pLCBjcmVhdGVDb21wb25lbnQoaW5kZXgkOS5JdGVtQ29udHJvbCwge1xuICAgICAgICAgICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChpbmRleCQ5Lkl0ZW1JbmRpY2F0b3IsIHt9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksIGNyZWF0ZUNvbXBvbmVudChpbmRleCQ5Lkl0ZW1MYWJlbCwge1xuICAgICAgICAgICAgICB0aXRsZTogXCJUb2dnbGUgTXV0YXRpb25zIFZpZXdcIixcbiAgICAgICAgICAgICAgY2hpbGRyZW46IFwiTXV0YXRpb25zXCJcbiAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXTtcbiAgICAgIH1cbiAgICB9KSwgbnVsbCk7XG4gICAgaW5zZXJ0KF9lbCQ5LCBjcmVhdGVDb21wb25lbnQoU2hvdywge1xuICAgICAgZ2V0IHdoZW4oKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3RlZFZpZXcoKSA9PT0gXCJxdWVyaWVzXCI7XG4gICAgICB9LFxuICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KFF1ZXJ5U3RhdHVzQ291bnQsIHt9KTtcbiAgICAgIH1cbiAgICB9KSwgbnVsbCk7XG4gICAgaW5zZXJ0KF9lbCQ5LCBjcmVhdGVDb21wb25lbnQoU2hvdywge1xuICAgICAgZ2V0IHdoZW4oKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3RlZFZpZXcoKSA9PT0gXCJtdXRhdGlvbnNcIjtcbiAgICAgIH0sXG4gICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVDb21wb25lbnQoTXV0YXRpb25TdGF0dXNDb3VudCwge30pO1xuICAgICAgfVxuICAgIH0pLCBudWxsKTtcbiAgICBpbnNlcnQoX2VsJDE3LCBjcmVhdGVDb21wb25lbnQoU2VhcmNoLCB7fSksIF9lbCQxOCk7XG4gICAgX2VsJDE4LiQkaW5wdXQgPSAoZTIpID0+IHtcbiAgICAgIGlmIChzZWxlY3RlZFZpZXcoKSA9PT0gXCJxdWVyaWVzXCIpIHtcbiAgICAgICAgcHJvcHMuc2V0TG9jYWxTdG9yZShcImZpbHRlclwiLCBlMi5jdXJyZW50VGFyZ2V0LnZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb3BzLnNldExvY2FsU3RvcmUoXCJtdXRhdGlvbkZpbHRlclwiLCBlMi5jdXJyZW50VGFyZ2V0LnZhbHVlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGluc2VydChfZWwkMTksIGNyZWF0ZUNvbXBvbmVudChTaG93LCB7XG4gICAgICBnZXQgd2hlbigpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkVmlldygpID09PSBcInF1ZXJpZXNcIjtcbiAgICAgIH0sXG4gICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgIGNvbnN0IF9lbCQyMCA9IF90bXBsJDQzKCk7XG4gICAgICAgIF9lbCQyMC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIChlMikgPT4ge1xuICAgICAgICAgIHByb3BzLnNldExvY2FsU3RvcmUoXCJzb3J0XCIsIGUyLmN1cnJlbnRUYXJnZXQudmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgaW5zZXJ0KF9lbCQyMCwgKCkgPT4gT2JqZWN0LmtleXMoc29ydEZucykubWFwKChrZXkpID0+ICgoKSA9PiB7XG4gICAgICAgICAgY29uc3QgX2VsJDQyID0gX3RtcGwkMjAyKCk7IF9lbCQ0Mi5maXJzdENoaWxkO1xuICAgICAgICAgIF9lbCQ0Mi52YWx1ZSA9IGtleTtcbiAgICAgICAgICBpbnNlcnQoX2VsJDQyLCBrZXksIG51bGwpO1xuICAgICAgICAgIHJldHVybiBfZWwkNDI7XG4gICAgICAgIH0pKCkpKTtcbiAgICAgICAgY3JlYXRlUmVuZGVyRWZmZWN0KCgpID0+IF9lbCQyMC52YWx1ZSA9IHNvcnQoKSk7XG4gICAgICAgIHJldHVybiBfZWwkMjA7XG4gICAgICB9XG4gICAgfSksIG51bGwpO1xuICAgIGluc2VydChfZWwkMTksIGNyZWF0ZUNvbXBvbmVudChTaG93LCB7XG4gICAgICBnZXQgd2hlbigpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkVmlldygpID09PSBcIm11dGF0aW9uc1wiO1xuICAgICAgfSxcbiAgICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgICAgY29uc3QgX2VsJDIxID0gX3RtcGwkNDMoKTtcbiAgICAgICAgX2VsJDIxLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKGUyKSA9PiB7XG4gICAgICAgICAgcHJvcHMuc2V0TG9jYWxTdG9yZShcIm11dGF0aW9uU29ydFwiLCBlMi5jdXJyZW50VGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGluc2VydChfZWwkMjEsICgpID0+IE9iamVjdC5rZXlzKG11dGF0aW9uU29ydEZucykubWFwKChrZXkpID0+ICgoKSA9PiB7XG4gICAgICAgICAgY29uc3QgX2VsJDQ0ID0gX3RtcGwkMjAyKCk7IF9lbCQ0NC5maXJzdENoaWxkO1xuICAgICAgICAgIF9lbCQ0NC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBpbnNlcnQoX2VsJDQ0LCBrZXksIG51bGwpO1xuICAgICAgICAgIHJldHVybiBfZWwkNDQ7XG4gICAgICAgIH0pKCkpKTtcbiAgICAgICAgY3JlYXRlUmVuZGVyRWZmZWN0KCgpID0+IF9lbCQyMS52YWx1ZSA9IG11dGF0aW9uU29ydCgpKTtcbiAgICAgICAgcmV0dXJuIF9lbCQyMTtcbiAgICAgIH1cbiAgICB9KSwgbnVsbCk7XG4gICAgaW5zZXJ0KF9lbCQxOSwgY3JlYXRlQ29tcG9uZW50KENoZXZyb25Eb3duLCB7fSksIG51bGwpO1xuICAgIF9lbCQyMi4kJGNsaWNrID0gKCkgPT4ge1xuICAgICAgaWYgKHNlbGVjdGVkVmlldygpID09PSBcInF1ZXJpZXNcIikge1xuICAgICAgICBwcm9wcy5zZXRMb2NhbFN0b3JlKFwic29ydE9yZGVyXCIsIFN0cmluZyhzb3J0T3JkZXIoKSAqIC0xKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9wcy5zZXRMb2NhbFN0b3JlKFwibXV0YXRpb25Tb3J0T3JkZXJcIiwgU3RyaW5nKG11dGF0aW9uU29ydE9yZGVyKCkgKiAtMSkpO1xuICAgICAgfVxuICAgIH07XG4gICAgaW5zZXJ0KF9lbCQyMiwgY3JlYXRlQ29tcG9uZW50KFNob3csIHtcbiAgICAgIGdldCB3aGVuKCkge1xuICAgICAgICByZXR1cm4gKHNlbGVjdGVkVmlldygpID09PSBcInF1ZXJpZXNcIiA/IHNvcnRPcmRlcigpIDogbXV0YXRpb25Tb3J0T3JkZXIoKSkgPT09IDE7XG4gICAgICB9LFxuICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICByZXR1cm4gW190bXBsJDUzKCksIGNyZWF0ZUNvbXBvbmVudChBcnJvd1VwLCB7fSldO1xuICAgICAgfVxuICAgIH0pLCBudWxsKTtcbiAgICBpbnNlcnQoX2VsJDIyLCBjcmVhdGVDb21wb25lbnQoU2hvdywge1xuICAgICAgZ2V0IHdoZW4oKSB7XG4gICAgICAgIHJldHVybiAoc2VsZWN0ZWRWaWV3KCkgPT09IFwicXVlcmllc1wiID8gc29ydE9yZGVyKCkgOiBtdXRhdGlvblNvcnRPcmRlcigpKSA9PT0gLTE7XG4gICAgICB9LFxuICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICByZXR1cm4gW190bXBsJDYzKCksIGNyZWF0ZUNvbXBvbmVudChBcnJvd0Rvd24sIHt9KV07XG4gICAgICB9XG4gICAgfSksIG51bGwpO1xuICAgIF9lbCQyNi4kJGNsaWNrID0gKCkgPT4ge1xuICAgICAgaWYgKHNlbGVjdGVkVmlldygpID09PSBcInF1ZXJpZXNcIikge1xuICAgICAgICBxdWVyeV9jYWNoZSgpLmNsZWFyKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdXRhdGlvbl9jYWNoZSgpLmNsZWFyKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpbnNlcnQoX2VsJDI2LCBjcmVhdGVDb21wb25lbnQoVHJhc2gsIHt9KSk7XG4gICAgX2VsJDI3LiQkY2xpY2sgPSAoKSA9PiB7XG4gICAgICBpZiAob2ZmbGluZSgpKSB7XG4gICAgICAgIG9ubGluZU1hbmFnZXIoKS5zZXRPbmxpbmUodHJ1ZSk7XG4gICAgICAgIHNldE9mZmxpbmUoZmFsc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25saW5lTWFuYWdlcigpLnNldE9ubGluZShmYWxzZSk7XG4gICAgICAgIHNldE9mZmxpbmUodHJ1ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpbnNlcnQoX2VsJDI3LCAoKCkgPT4ge1xuICAgICAgY29uc3QgX2MkID0gY3JlYXRlTWVtbygoKSA9PiAhIW9mZmxpbmUoKSk7XG4gICAgICByZXR1cm4gKCkgPT4gX2MkKCkgPyBjcmVhdGVDb21wb25lbnQoT2ZmbGluZSwge30pIDogY3JlYXRlQ29tcG9uZW50KFdpZmksIHt9KTtcbiAgICB9KSgpKTtcbiAgICBpbnNlcnQoX2VsJDI1LCBjcmVhdGVDb21wb25lbnQoaW5kZXgkZi5Sb290LCB7XG4gICAgICBndXR0ZXI6IDQsXG4gICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgIHJldHVybiBbY3JlYXRlQ29tcG9uZW50KGluZGV4JGYuVHJpZ2dlciwge1xuICAgICAgICAgIGdldCBbXCJjbGFzc1wiXSgpIHtcbiAgICAgICAgICAgIHJldHVybiBjbHN4KHN0eWxlcygpLmFjdGlvbnNCdG4sIFwidHNxZC1hY3Rpb25zLWJ0blwiLCBcInRzcWQtYWN0aW9uLXNldHRpbmdzXCIpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChTZXR0aW5ncywge30pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksIGNyZWF0ZUNvbXBvbmVudChpbmRleCRmLlBvcnRhbCwge1xuICAgICAgICAgIHJlZjogKGVsKSA9PiBzZXRDb21wdXRlZFZhcmlhYmxlcyhlbCksXG4gICAgICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChpbmRleCRmLkNvbnRlbnQsIHtcbiAgICAgICAgICAgICAgZ2V0IFtcImNsYXNzXCJdKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjbHN4KHN0eWxlcygpLnNldHRpbmdzTWVudSwgXCJ0c3FkLXNldHRpbmdzLW1lbnVcIik7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBfZWwkMjggPSBfdG1wbCQ3MygpO1xuICAgICAgICAgICAgICAgICAgY3JlYXRlUmVuZGVyRWZmZWN0KCgpID0+IGNsYXNzTmFtZShfZWwkMjgsIGNsc3goc3R5bGVzKCkuc2V0dGluZ3NNZW51SGVhZGVyLCBcInRzcWQtc2V0dGluZ3MtbWVudS1oZWFkZXJcIikpKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBfZWwkMjg7XG4gICAgICAgICAgICAgICAgfSkoKSwgY3JlYXRlQ29tcG9uZW50KGluZGV4JGYuU3ViLCB7XG4gICAgICAgICAgICAgICAgICBvdmVybGFwOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgZ3V0dGVyOiA4LFxuICAgICAgICAgICAgICAgICAgc2hpZnQ6IC00LFxuICAgICAgICAgICAgICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2NyZWF0ZUNvbXBvbmVudChpbmRleCRmLlN1YlRyaWdnZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgICBnZXQgW1wiY2xhc3NcIl0oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xzeChzdHlsZXMoKS5zZXR0aW5nc1N1YlRyaWdnZXIsIFwidHNxZC1zZXR0aW5ncy1tZW51LXN1Yi10cmlnZ2VyXCIsIFwidHNxZC1zZXR0aW5ncy1tZW51LXN1Yi10cmlnZ2VyLXBvc2l0aW9uXCIpO1xuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtfdG1wbCQ4MygpLCBjcmVhdGVDb21wb25lbnQoQ2hldnJvbkRvd24sIHt9KV07XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSwgY3JlYXRlQ29tcG9uZW50KGluZGV4JGYuUG9ydGFsLCB7XG4gICAgICAgICAgICAgICAgICAgICAgcmVmOiAoZWwpID0+IHNldENvbXB1dGVkVmFyaWFibGVzKGVsKSxcbiAgICAgICAgICAgICAgICAgICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KGluZGV4JGYuU3ViQ29udGVudCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQgW1wiY2xhc3NcIl0oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsc3goc3R5bGVzKCkuc2V0dGluZ3NNZW51LCBcInRzcWQtc2V0dGluZ3Mtc3VibWVudVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbY3JlYXRlQ29tcG9uZW50KGluZGV4JGYuSXRlbSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25TZWxlY3Q6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0RGV2dG9vbHNQb3NpdGlvbihcInRvcFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhczogXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldCBbXCJjbGFzc1wiXSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsc3goc3R5bGVzKCkuc2V0dGluZ3NTdWJCdXR0b24sIFwidHNxZC1zZXR0aW5ncy1tZW51LXBvc2l0aW9uLWJ0blwiLCBcInRzcWQtc2V0dGluZ3MtbWVudS1wb3NpdGlvbi1idG4tdG9wXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtfdG1wbCQ5MygpLCBjcmVhdGVDb21wb25lbnQoQXJyb3dVcCwge30pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgY3JlYXRlQ29tcG9uZW50KGluZGV4JGYuSXRlbSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25TZWxlY3Q6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0RGV2dG9vbHNQb3NpdGlvbihcImJvdHRvbVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhczogXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldCBbXCJjbGFzc1wiXSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsc3goc3R5bGVzKCkuc2V0dGluZ3NTdWJCdXR0b24sIFwidHNxZC1zZXR0aW5ncy1tZW51LXBvc2l0aW9uLWJ0blwiLCBcInRzcWQtc2V0dGluZ3MtbWVudS1wb3NpdGlvbi1idG4tYm90dG9tXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtfdG1wbCQxMDMoKSwgY3JlYXRlQ29tcG9uZW50KEFycm93RG93biwge30pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgY3JlYXRlQ29tcG9uZW50KGluZGV4JGYuSXRlbSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25TZWxlY3Q6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0RGV2dG9vbHNQb3NpdGlvbihcImxlZnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXM6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQgW1wiY2xhc3NcIl0oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjbHN4KHN0eWxlcygpLnNldHRpbmdzU3ViQnV0dG9uLCBcInRzcWQtc2V0dGluZ3MtbWVudS1wb3NpdGlvbi1idG5cIiwgXCJ0c3FkLXNldHRpbmdzLW1lbnUtcG9zaXRpb24tYnRuLWxlZnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW190bXBsJDExMygpLCBjcmVhdGVDb21wb25lbnQoQXJyb3dMZWZ0LCB7fSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBjcmVhdGVDb21wb25lbnQoaW5kZXgkZi5JdGVtLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblNlbGVjdDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXREZXZ0b29sc1Bvc2l0aW9uKFwicmlnaHRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXM6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQgW1wiY2xhc3NcIl0oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjbHN4KHN0eWxlcygpLnNldHRpbmdzU3ViQnV0dG9uLCBcInRzcWQtc2V0dGluZ3MtbWVudS1wb3NpdGlvbi1idG5cIiwgXCJ0c3FkLXNldHRpbmdzLW1lbnUtcG9zaXRpb24tYnRuLXJpZ2h0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtfdG1wbCQxMjIoKSwgY3JlYXRlQ29tcG9uZW50KEFycm93UmlnaHQsIHt9KV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSwgY3JlYXRlQ29tcG9uZW50KGluZGV4JGYuU3ViLCB7XG4gICAgICAgICAgICAgICAgICBvdmVybGFwOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgZ3V0dGVyOiA4LFxuICAgICAgICAgICAgICAgICAgc2hpZnQ6IC00LFxuICAgICAgICAgICAgICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2NyZWF0ZUNvbXBvbmVudChpbmRleCRmLlN1YlRyaWdnZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgICBnZXQgW1wiY2xhc3NcIl0oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xzeChzdHlsZXMoKS5zZXR0aW5nc1N1YlRyaWdnZXIsIFwidHNxZC1zZXR0aW5ncy1tZW51LXN1Yi10cmlnZ2VyXCIsIFwidHNxZC1zZXR0aW5ncy1tZW51LXN1Yi10cmlnZ2VyLXBvc2l0aW9uXCIpO1xuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtfdG1wbCQxMzIoKSwgY3JlYXRlQ29tcG9uZW50KENoZXZyb25Eb3duLCB7fSldO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSksIGNyZWF0ZUNvbXBvbmVudChpbmRleCRmLlBvcnRhbCwge1xuICAgICAgICAgICAgICAgICAgICAgIHJlZjogKGVsKSA9PiBzZXRDb21wdXRlZFZhcmlhYmxlcyhlbCksXG4gICAgICAgICAgICAgICAgICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChpbmRleCRmLlN1YkNvbnRlbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0IFtcImNsYXNzXCJdKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjbHN4KHN0eWxlcygpLnNldHRpbmdzTWVudSwgXCJ0c3FkLXNldHRpbmdzLXN1Ym1lbnVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2NyZWF0ZUNvbXBvbmVudChpbmRleCRmLkl0ZW0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLnNldExvY2FsU3RvcmUoXCJ0aGVtZV9wcmVmZXJlbmNlXCIsIFwibGlnaHRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXM6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQgW1wiY2xhc3NcIl0oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjbHN4KHN0eWxlcygpLnNldHRpbmdzU3ViQnV0dG9uLCBwcm9wcy5sb2NhbFN0b3JlLnRoZW1lX3ByZWZlcmVuY2UgPT09IFwibGlnaHRcIiAmJiBzdHlsZXMoKS50aGVtZVNlbGVjdGVkQnV0dG9uLCBcInRzcWQtc2V0dGluZ3MtbWVudS1wb3NpdGlvbi1idG5cIiwgXCJ0c3FkLXNldHRpbmdzLW1lbnUtcG9zaXRpb24tYnRuLXRvcFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbX3RtcGwkMTQyKCksIGNyZWF0ZUNvbXBvbmVudChTdW4sIHt9KV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIGNyZWF0ZUNvbXBvbmVudChpbmRleCRmLkl0ZW0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLnNldExvY2FsU3RvcmUoXCJ0aGVtZV9wcmVmZXJlbmNlXCIsIFwiZGFya1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhczogXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldCBbXCJjbGFzc1wiXSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsc3goc3R5bGVzKCkuc2V0dGluZ3NTdWJCdXR0b24sIHByb3BzLmxvY2FsU3RvcmUudGhlbWVfcHJlZmVyZW5jZSA9PT0gXCJkYXJrXCIgJiYgc3R5bGVzKCkudGhlbWVTZWxlY3RlZEJ1dHRvbiwgXCJ0c3FkLXNldHRpbmdzLW1lbnUtcG9zaXRpb24tYnRuXCIsIFwidHNxZC1zZXR0aW5ncy1tZW51LXBvc2l0aW9uLWJ0bi1ib3R0b21cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW190bXBsJDE1MigpLCBjcmVhdGVDb21wb25lbnQoTW9vbiwge30pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgY3JlYXRlQ29tcG9uZW50KGluZGV4JGYuSXRlbSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25TZWxlY3Q6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuc2V0TG9jYWxTdG9yZShcInRoZW1lX3ByZWZlcmVuY2VcIiwgXCJzeXN0ZW1cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXM6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQgW1wiY2xhc3NcIl0oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjbHN4KHN0eWxlcygpLnNldHRpbmdzU3ViQnV0dG9uLCBwcm9wcy5sb2NhbFN0b3JlLnRoZW1lX3ByZWZlcmVuY2UgPT09IFwic3lzdGVtXCIgJiYgc3R5bGVzKCkudGhlbWVTZWxlY3RlZEJ1dHRvbiwgXCJ0c3FkLXNldHRpbmdzLW1lbnUtcG9zaXRpb24tYnRuXCIsIFwidHNxZC1zZXR0aW5ncy1tZW51LXBvc2l0aW9uLWJ0bi1sZWZ0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtfdG1wbCQxNjIoKSwgY3JlYXRlQ29tcG9uZW50KE1vbml0b3IsIHt9KV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSldO1xuICAgICAgfVxuICAgIH0pLCBudWxsKTtcbiAgICBpbnNlcnQoX2VsJDgsIGNyZWF0ZUNvbXBvbmVudChTaG93LCB7XG4gICAgICBnZXQgd2hlbigpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkVmlldygpID09PSBcInF1ZXJpZXNcIjtcbiAgICAgIH0sXG4gICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgIGNvbnN0IF9lbCQzOCA9IF90bXBsJDE3MigpLCBfZWwkMzkgPSBfZWwkMzguZmlyc3RDaGlsZDtcbiAgICAgICAgaW5zZXJ0KF9lbCQzOSwgY3JlYXRlQ29tcG9uZW50KEtleSwge1xuICAgICAgICAgIGJ5OiAocSkgPT4gcS5xdWVyeUhhc2gsXG4gICAgICAgICAgZ2V0IGVhY2goKSB7XG4gICAgICAgICAgICByZXR1cm4gcXVlcmllcygpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY2hpbGRyZW46IChxdWVyeSkgPT4gY3JlYXRlQ29tcG9uZW50KFF1ZXJ5Um93LCB7XG4gICAgICAgICAgICBnZXQgcXVlcnkoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBxdWVyeSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pKTtcbiAgICAgICAgY3JlYXRlUmVuZGVyRWZmZWN0KCgpID0+IGNsYXNzTmFtZShfZWwkMzgsIGNsc3goc3R5bGVzKCkub3ZlcmZsb3dRdWVyeUNvbnRhaW5lciwgXCJ0c3FkLXF1ZXJpZXMtb3ZlcmZsb3ctY29udGFpbmVyXCIpKSk7XG4gICAgICAgIHJldHVybiBfZWwkMzg7XG4gICAgICB9XG4gICAgfSksIG51bGwpO1xuICAgIGluc2VydChfZWwkOCwgY3JlYXRlQ29tcG9uZW50KFNob3csIHtcbiAgICAgIGdldCB3aGVuKCkge1xuICAgICAgICByZXR1cm4gc2VsZWN0ZWRWaWV3KCkgPT09IFwibXV0YXRpb25zXCI7XG4gICAgICB9LFxuICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICBjb25zdCBfZWwkNDAgPSBfdG1wbCQxODIoKSwgX2VsJDQxID0gX2VsJDQwLmZpcnN0Q2hpbGQ7XG4gICAgICAgIGluc2VydChfZWwkNDEsIGNyZWF0ZUNvbXBvbmVudChLZXksIHtcbiAgICAgICAgICBieTogKG0pID0+IG0ubXV0YXRpb25JZCxcbiAgICAgICAgICBnZXQgZWFjaCgpIHtcbiAgICAgICAgICAgIHJldHVybiBtdXRhdGlvbnMoKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNoaWxkcmVuOiAobXV0YXRpb24pID0+IGNyZWF0ZUNvbXBvbmVudChNdXRhdGlvblJvdywge1xuICAgICAgICAgICAgZ2V0IG11dGF0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gbXV0YXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9KSk7XG4gICAgICAgIGNyZWF0ZVJlbmRlckVmZmVjdCgoKSA9PiBjbGFzc05hbWUoX2VsJDQwLCBjbHN4KHN0eWxlcygpLm92ZXJmbG93UXVlcnlDb250YWluZXIsIFwidHNxZC1tdXRhdGlvbnMtb3ZlcmZsb3ctY29udGFpbmVyXCIpKSk7XG4gICAgICAgIHJldHVybiBfZWwkNDA7XG4gICAgICB9XG4gICAgfSksIG51bGwpO1xuICAgIGNyZWF0ZVJlbmRlckVmZmVjdCgoX3AkKSA9PiB7XG4gICAgICBjb25zdCBfdiQ2ID0gY2xzeChzdHlsZXMoKS5xdWVyaWVzQ29udGFpbmVyLCBwYW5lbFdpZHRoKCkgPCBzZWNvbmRCcmVha3BvaW50ICYmIChzZWxlY3RlZFF1ZXJ5SGFzaCgpIHx8IHNlbGVjdGVkTXV0YXRpb25JZCgpKSAmJiB1YFxuICAgICAgICAgICAgICBoZWlnaHQ6IDUwJTtcbiAgICAgICAgICAgICAgbWF4LWhlaWdodDogNTAlO1xuICAgICAgICAgICAgYCwgcGFuZWxXaWR0aCgpIDwgc2Vjb25kQnJlYWtwb2ludCAmJiAhKHNlbGVjdGVkUXVlcnlIYXNoKCkgfHwgc2VsZWN0ZWRNdXRhdGlvbklkKCkpICYmIHVgXG4gICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICAgICAgbWF4LWhlaWdodDogMTAwJTtcbiAgICAgICAgICAgIGAsIFwidHNxZC1xdWVyaWVzLWNvbnRhaW5lclwiKSwgX3YkNyA9IGNsc3goc3R5bGVzKCkucm93LCBcInRzcWQtaGVhZGVyXCIpLCBfdiQ4ID0gc3R5bGVzKCkubG9nb0FuZFRvZ2dsZUNvbnRhaW5lciwgX3YkOSA9IGNsc3goc3R5bGVzKCkubG9nbywgXCJ0c3FkLXRleHQtbG9nby1jb250YWluZXJcIiksIF92JDEwID0gY2xzeChzdHlsZXMoKS50YW5zdGFja0xvZ28sIFwidHNxZC10ZXh0LWxvZ28tdGFuc3RhY2tcIiksIF92JDExID0gY2xzeChzdHlsZXMoKS5xdWVyeUZsYXZvckxvZ28sIFwidHNxZC10ZXh0LWxvZ28tcXVlcnktZmxhdm9yXCIpLCBfdiQxMiA9IGNsc3goc3R5bGVzKCkucm93LCBcInRzcWQtZmlsdGVycy1hY3Rpb25zLWNvbnRhaW5lclwiKSwgX3YkMTMgPSBjbHN4KHN0eWxlcygpLmZpbHRlcnNDb250YWluZXIsIFwidHNxZC1maWx0ZXJzLWNvbnRhaW5lclwiKSwgX3YkMTQgPSBjbHN4KHN0eWxlcygpLmZpbHRlcklucHV0LCBcInRzcWQtcXVlcnktZmlsdGVyLXRleHRmaWVsZC1jb250YWluZXJcIiksIF92JDE1ID0gY2xzeChzdHlsZXMoKS5maWx0ZXJTZWxlY3QsIFwidHNxZC1xdWVyeS1maWx0ZXItc29ydC1jb250YWluZXJcIiksIF92JDE2ID0gYFNvcnQgb3JkZXIgJHsoc2VsZWN0ZWRWaWV3KCkgPT09IFwicXVlcmllc1wiID8gc29ydE9yZGVyKCkgOiBtdXRhdGlvblNvcnRPcmRlcigpKSA9PT0gLTEgPyBcImRlc2NlbmRpbmdcIiA6IFwiYXNjZW5kaW5nXCJ9YCwgX3YkMTcgPSAoc2VsZWN0ZWRWaWV3KCkgPT09IFwicXVlcmllc1wiID8gc29ydE9yZGVyKCkgOiBtdXRhdGlvblNvcnRPcmRlcigpKSA9PT0gLTEsIF92JDE4ID0gY2xzeChzdHlsZXMoKS5hY3Rpb25zQ29udGFpbmVyLCBcInRzcWQtYWN0aW9ucy1jb250YWluZXJcIiksIF92JDE5ID0gY2xzeChzdHlsZXMoKS5hY3Rpb25zQnRuLCBcInRzcWQtYWN0aW9ucy1idG5cIiwgXCJ0c3FkLWFjdGlvbi1jbGVhci1jYWNoZVwiKSwgX3YkMjAgPSBgQ2xlYXIgJHtzZWxlY3RlZFZpZXcoKX0gY2FjaGVgLCBfdiQyMSA9IGNsc3goc3R5bGVzKCkuYWN0aW9uc0J0biwgb2ZmbGluZSgpICYmIHN0eWxlcygpLmFjdGlvbnNCdG5PZmZsaW5lLCBcInRzcWQtYWN0aW9ucy1idG5cIiwgXCJ0c3FkLWFjdGlvbi1tb2NrLW9mZmxpbmUtYmVoYXZpb3JcIiksIF92JDIyID0gYCR7b2ZmbGluZSgpID8gXCJVbnNldCBvZmZsaW5lIG1vY2tpbmcgYmVoYXZpb3JcIiA6IFwiTW9jayBvZmZsaW5lIGJlaGF2aW9yXCJ9YCwgX3YkMjMgPSBvZmZsaW5lKCksIF92JDI0ID0gYCR7b2ZmbGluZSgpID8gXCJVbnNldCBvZmZsaW5lIG1vY2tpbmcgYmVoYXZpb3JcIiA6IFwiTW9jayBvZmZsaW5lIGJlaGF2aW9yXCJ9YDtcbiAgICAgIF92JDYgIT09IF9wJC5fdiQ2ICYmIGNsYXNzTmFtZShfZWwkOCwgX3AkLl92JDYgPSBfdiQ2KTtcbiAgICAgIF92JDcgIT09IF9wJC5fdiQ3ICYmIGNsYXNzTmFtZShfZWwkOSwgX3AkLl92JDcgPSBfdiQ3KTtcbiAgICAgIF92JDggIT09IF9wJC5fdiQ4ICYmIGNsYXNzTmFtZShfZWwkMTAsIF9wJC5fdiQ4ID0gX3YkOCk7XG4gICAgICBfdiQ5ICE9PSBfcCQuX3YkOSAmJiBjbGFzc05hbWUoX2VsJDExLCBfcCQuX3YkOSA9IF92JDkpO1xuICAgICAgX3YkMTAgIT09IF9wJC5fdiQxMCAmJiBjbGFzc05hbWUoX2VsJDEyLCBfcCQuX3YkMTAgPSBfdiQxMCk7XG4gICAgICBfdiQxMSAhPT0gX3AkLl92JDExICYmIGNsYXNzTmFtZShfZWwkMTMsIF9wJC5fdiQxMSA9IF92JDExKTtcbiAgICAgIF92JDEyICE9PSBfcCQuX3YkMTIgJiYgY2xhc3NOYW1lKF9lbCQxNSwgX3AkLl92JDEyID0gX3YkMTIpO1xuICAgICAgX3YkMTMgIT09IF9wJC5fdiQxMyAmJiBjbGFzc05hbWUoX2VsJDE2LCBfcCQuX3YkMTMgPSBfdiQxMyk7XG4gICAgICBfdiQxNCAhPT0gX3AkLl92JDE0ICYmIGNsYXNzTmFtZShfZWwkMTcsIF9wJC5fdiQxNCA9IF92JDE0KTtcbiAgICAgIF92JDE1ICE9PSBfcCQuX3YkMTUgJiYgY2xhc3NOYW1lKF9lbCQxOSwgX3AkLl92JDE1ID0gX3YkMTUpO1xuICAgICAgX3YkMTYgIT09IF9wJC5fdiQxNiAmJiBzZXRBdHRyaWJ1dGUoX2VsJDIyLCBcImFyaWEtbGFiZWxcIiwgX3AkLl92JDE2ID0gX3YkMTYpO1xuICAgICAgX3YkMTcgIT09IF9wJC5fdiQxNyAmJiBzZXRBdHRyaWJ1dGUoX2VsJDIyLCBcImFyaWEtcHJlc3NlZFwiLCBfcCQuX3YkMTcgPSBfdiQxNyk7XG4gICAgICBfdiQxOCAhPT0gX3AkLl92JDE4ICYmIGNsYXNzTmFtZShfZWwkMjUsIF9wJC5fdiQxOCA9IF92JDE4KTtcbiAgICAgIF92JDE5ICE9PSBfcCQuX3YkMTkgJiYgY2xhc3NOYW1lKF9lbCQyNiwgX3AkLl92JDE5ID0gX3YkMTkpO1xuICAgICAgX3YkMjAgIT09IF9wJC5fdiQyMCAmJiBzZXRBdHRyaWJ1dGUoX2VsJDI2LCBcInRpdGxlXCIsIF9wJC5fdiQyMCA9IF92JDIwKTtcbiAgICAgIF92JDIxICE9PSBfcCQuX3YkMjEgJiYgY2xhc3NOYW1lKF9lbCQyNywgX3AkLl92JDIxID0gX3YkMjEpO1xuICAgICAgX3YkMjIgIT09IF9wJC5fdiQyMiAmJiBzZXRBdHRyaWJ1dGUoX2VsJDI3LCBcImFyaWEtbGFiZWxcIiwgX3AkLl92JDIyID0gX3YkMjIpO1xuICAgICAgX3YkMjMgIT09IF9wJC5fdiQyMyAmJiBzZXRBdHRyaWJ1dGUoX2VsJDI3LCBcImFyaWEtcHJlc3NlZFwiLCBfcCQuX3YkMjMgPSBfdiQyMyk7XG4gICAgICBfdiQyNCAhPT0gX3AkLl92JDI0ICYmIHNldEF0dHJpYnV0ZShfZWwkMjcsIFwidGl0bGVcIiwgX3AkLl92JDI0ID0gX3YkMjQpO1xuICAgICAgcmV0dXJuIF9wJDtcbiAgICB9LCB7XG4gICAgICBfdiQ2OiB2b2lkIDAsXG4gICAgICBfdiQ3OiB2b2lkIDAsXG4gICAgICBfdiQ4OiB2b2lkIDAsXG4gICAgICBfdiQ5OiB2b2lkIDAsXG4gICAgICBfdiQxMDogdm9pZCAwLFxuICAgICAgX3YkMTE6IHZvaWQgMCxcbiAgICAgIF92JDEyOiB2b2lkIDAsXG4gICAgICBfdiQxMzogdm9pZCAwLFxuICAgICAgX3YkMTQ6IHZvaWQgMCxcbiAgICAgIF92JDE1OiB2b2lkIDAsXG4gICAgICBfdiQxNjogdm9pZCAwLFxuICAgICAgX3YkMTc6IHZvaWQgMCxcbiAgICAgIF92JDE4OiB2b2lkIDAsXG4gICAgICBfdiQxOTogdm9pZCAwLFxuICAgICAgX3YkMjA6IHZvaWQgMCxcbiAgICAgIF92JDIxOiB2b2lkIDAsXG4gICAgICBfdiQyMjogdm9pZCAwLFxuICAgICAgX3YkMjM6IHZvaWQgMCxcbiAgICAgIF92JDI0OiB2b2lkIDBcbiAgICB9KTtcbiAgICBjcmVhdGVSZW5kZXJFZmZlY3QoKCkgPT4gX2VsJDE4LnZhbHVlID0gc2VsZWN0ZWRWaWV3KCkgPT09IFwicXVlcmllc1wiID8gcHJvcHMubG9jYWxTdG9yZS5maWx0ZXIgfHwgXCJcIiA6IHByb3BzLmxvY2FsU3RvcmUubXV0YXRpb25GaWx0ZXIgfHwgXCJcIik7XG4gICAgcmV0dXJuIF9lbCQ4O1xuICB9KSgpLCBjcmVhdGVDb21wb25lbnQoU2hvdywge1xuICAgIGdldCB3aGVuKCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZU1lbW8oKCkgPT4gc2VsZWN0ZWRWaWV3KCkgPT09IFwicXVlcmllc1wiKSgpICYmIHNlbGVjdGVkUXVlcnlIYXNoKCk7XG4gICAgfSxcbiAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KFF1ZXJ5RGV0YWlscywge30pO1xuICAgIH1cbiAgfSksIGNyZWF0ZUNvbXBvbmVudChTaG93LCB7XG4gICAgZ2V0IHdoZW4oKSB7XG4gICAgICByZXR1cm4gY3JlYXRlTWVtbygoKSA9PiBzZWxlY3RlZFZpZXcoKSA9PT0gXCJtdXRhdGlvbnNcIikoKSAmJiBzZWxlY3RlZE11dGF0aW9uSWQoKTtcbiAgICB9LFxuICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgIHJldHVybiBjcmVhdGVDb21wb25lbnQoTXV0YXRpb25EZXRhaWxzLCB7fSk7XG4gICAgfVxuICB9KV07XG59O1xudmFyIFF1ZXJ5Um93ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgY29uc3Qgc3R5bGVzID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHRoZW1lKCkgPT09IFwiZGFya1wiID8gZGFya1N0eWxlczIgOiBsaWdodFN0eWxlczI7XG4gIH0pO1xuICBjb25zdCB7XG4gICAgY29sb3JzLFxuICAgIGFscGhhXG4gIH0gPSB0b2tlbnM7XG4gIGNvbnN0IHQyID0gKGxpZ2h0LCBkYXJrKSA9PiB0aGVtZSgpID09PSBcImRhcmtcIiA/IGRhcmsgOiBsaWdodDtcbiAgY29uc3QgcXVlcnlTdGF0ZSA9IGNyZWF0ZVN1YnNjcmliZVRvUXVlcnlDYWNoZUJhdGNoZXIoKHF1ZXJ5Q2FjaGUpID0+IHF1ZXJ5Q2FjaGUoKS5maW5kKHtcbiAgICBxdWVyeUtleTogcHJvcHMucXVlcnkucXVlcnlLZXlcbiAgfSk/LnN0YXRlLCB0cnVlLCAoZTIpID0+IGUyLnF1ZXJ5LnF1ZXJ5SGFzaCA9PT0gcHJvcHMucXVlcnkucXVlcnlIYXNoKTtcbiAgY29uc3QgaXNEaXNhYmxlZCA9IGNyZWF0ZVN1YnNjcmliZVRvUXVlcnlDYWNoZUJhdGNoZXIoKHF1ZXJ5Q2FjaGUpID0+IHF1ZXJ5Q2FjaGUoKS5maW5kKHtcbiAgICBxdWVyeUtleTogcHJvcHMucXVlcnkucXVlcnlLZXlcbiAgfSk/LmlzRGlzYWJsZWQoKSA/PyBmYWxzZSwgdHJ1ZSwgKGUyKSA9PiBlMi5xdWVyeS5xdWVyeUhhc2ggPT09IHByb3BzLnF1ZXJ5LnF1ZXJ5SGFzaCk7XG4gIGNvbnN0IGlzU3RhbGUgPSBjcmVhdGVTdWJzY3JpYmVUb1F1ZXJ5Q2FjaGVCYXRjaGVyKChxdWVyeUNhY2hlKSA9PiBxdWVyeUNhY2hlKCkuZmluZCh7XG4gICAgcXVlcnlLZXk6IHByb3BzLnF1ZXJ5LnF1ZXJ5S2V5XG4gIH0pPy5pc1N0YWxlKCkgPz8gZmFsc2UsIHRydWUsIChlMikgPT4gZTIucXVlcnkucXVlcnlIYXNoID09PSBwcm9wcy5xdWVyeS5xdWVyeUhhc2gpO1xuICBjb25zdCBvYnNlcnZlcnMgPSBjcmVhdGVTdWJzY3JpYmVUb1F1ZXJ5Q2FjaGVCYXRjaGVyKChxdWVyeUNhY2hlKSA9PiBxdWVyeUNhY2hlKCkuZmluZCh7XG4gICAgcXVlcnlLZXk6IHByb3BzLnF1ZXJ5LnF1ZXJ5S2V5XG4gIH0pPy5nZXRPYnNlcnZlcnNDb3VudCgpID8/IDAsIHRydWUsIChlMikgPT4gZTIucXVlcnkucXVlcnlIYXNoID09PSBwcm9wcy5xdWVyeS5xdWVyeUhhc2gpO1xuICBjb25zdCBjb2xvciA9IGNyZWF0ZU1lbW8oKCkgPT4gZ2V0UXVlcnlTdGF0dXNDb2xvcih7XG4gICAgcXVlcnlTdGF0ZTogcXVlcnlTdGF0ZSgpLFxuICAgIG9ic2VydmVyQ291bnQ6IG9ic2VydmVycygpLFxuICAgIGlzU3RhbGU6IGlzU3RhbGUoKVxuICB9KSk7XG4gIGNvbnN0IGdldE9ic2VydmVyQ291bnRDb2xvclN0eWxlcyA9ICgpID0+IHtcbiAgICBpZiAoY29sb3IoKSA9PT0gXCJncmF5XCIpIHtcbiAgICAgIHJldHVybiB1YFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3QyKGNvbG9yc1tjb2xvcigpXVsyMDBdLCBjb2xvcnNbY29sb3IoKV1bNzAwXSl9O1xuICAgICAgICBjb2xvcjogJHt0Mihjb2xvcnNbY29sb3IoKV1bNzAwXSwgY29sb3JzW2NvbG9yKCldWzMwMF0pfTtcbiAgICAgIGA7XG4gICAgfVxuICAgIHJldHVybiB1YFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0Mihjb2xvcnNbY29sb3IoKV1bMjAwXSArIGFscGhhWzgwXSwgY29sb3JzW2NvbG9yKCldWzkwMF0pfTtcbiAgICAgIGNvbG9yOiAke3QyKGNvbG9yc1tjb2xvcigpXVs4MDBdLCBjb2xvcnNbY29sb3IoKV1bMzAwXSl9O1xuICAgIGA7XG4gIH07XG4gIHJldHVybiBjcmVhdGVDb21wb25lbnQoU2hvdywge1xuICAgIGdldCB3aGVuKCkge1xuICAgICAgcmV0dXJuIHF1ZXJ5U3RhdGUoKTtcbiAgICB9LFxuICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgIGNvbnN0IF9lbCQ0NiA9IF90bXBsJDIyMigpLCBfZWwkNDcgPSBfZWwkNDYuZmlyc3RDaGlsZCwgX2VsJDQ4ID0gX2VsJDQ3Lm5leHRTaWJsaW5nO1xuICAgICAgX2VsJDQ2LiQkY2xpY2sgPSAoKSA9PiBzZXRTZWxlY3RlZFF1ZXJ5SGFzaChwcm9wcy5xdWVyeS5xdWVyeUhhc2ggPT09IHNlbGVjdGVkUXVlcnlIYXNoKCkgPyBudWxsIDogcHJvcHMucXVlcnkucXVlcnlIYXNoKTtcbiAgICAgIGluc2VydChfZWwkNDcsIG9ic2VydmVycyk7XG4gICAgICBpbnNlcnQoX2VsJDQ4LCAoKSA9PiBwcm9wcy5xdWVyeS5xdWVyeUhhc2gpO1xuICAgICAgaW5zZXJ0KF9lbCQ0NiwgY3JlYXRlQ29tcG9uZW50KFNob3csIHtcbiAgICAgICAgZ2V0IHdoZW4oKSB7XG4gICAgICAgICAgcmV0dXJuIGlzRGlzYWJsZWQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICAgIHJldHVybiBfdG1wbCQyMTIoKTtcbiAgICAgICAgfVxuICAgICAgfSksIG51bGwpO1xuICAgICAgY3JlYXRlUmVuZGVyRWZmZWN0KChfcCQpID0+IHtcbiAgICAgICAgY29uc3QgX3YkMjUgPSBjbHN4KHN0eWxlcygpLnF1ZXJ5Um93LCBzZWxlY3RlZFF1ZXJ5SGFzaCgpID09PSBwcm9wcy5xdWVyeS5xdWVyeUhhc2ggJiYgc3R5bGVzKCkuc2VsZWN0ZWRRdWVyeVJvdywgXCJ0c3FkLXF1ZXJ5LXJvd1wiKSwgX3YkMjYgPSBgUXVlcnkga2V5ICR7cHJvcHMucXVlcnkucXVlcnlIYXNofWAsIF92JDI3ID0gY2xzeChnZXRPYnNlcnZlckNvdW50Q29sb3JTdHlsZXMoKSwgXCJ0c3FkLXF1ZXJ5LW9ic2VydmVyLWNvdW50XCIpO1xuICAgICAgICBfdiQyNSAhPT0gX3AkLl92JDI1ICYmIGNsYXNzTmFtZShfZWwkNDYsIF9wJC5fdiQyNSA9IF92JDI1KTtcbiAgICAgICAgX3YkMjYgIT09IF9wJC5fdiQyNiAmJiBzZXRBdHRyaWJ1dGUoX2VsJDQ2LCBcImFyaWEtbGFiZWxcIiwgX3AkLl92JDI2ID0gX3YkMjYpO1xuICAgICAgICBfdiQyNyAhPT0gX3AkLl92JDI3ICYmIGNsYXNzTmFtZShfZWwkNDcsIF9wJC5fdiQyNyA9IF92JDI3KTtcbiAgICAgICAgcmV0dXJuIF9wJDtcbiAgICAgIH0sIHtcbiAgICAgICAgX3YkMjU6IHZvaWQgMCxcbiAgICAgICAgX3YkMjY6IHZvaWQgMCxcbiAgICAgICAgX3YkMjc6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gX2VsJDQ2O1xuICAgIH1cbiAgfSk7XG59O1xudmFyIE11dGF0aW9uUm93ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgY29uc3Qgc3R5bGVzID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHRoZW1lKCkgPT09IFwiZGFya1wiID8gZGFya1N0eWxlczIgOiBsaWdodFN0eWxlczI7XG4gIH0pO1xuICBjb25zdCB7XG4gICAgY29sb3JzLFxuICAgIGFscGhhXG4gIH0gPSB0b2tlbnM7XG4gIGNvbnN0IHQyID0gKGxpZ2h0LCBkYXJrKSA9PiB0aGVtZSgpID09PSBcImRhcmtcIiA/IGRhcmsgOiBsaWdodDtcbiAgY29uc3QgbXV0YXRpb25TdGF0ZSA9IGNyZWF0ZVN1YnNjcmliZVRvTXV0YXRpb25DYWNoZUJhdGNoZXIoKG11dGF0aW9uQ2FjaGUpID0+IHtcbiAgICBjb25zdCBtdXRhdGlvbnMgPSBtdXRhdGlvbkNhY2hlKCkuZ2V0QWxsKCk7XG4gICAgY29uc3QgbXV0YXRpb24gPSBtdXRhdGlvbnMuZmluZCgobSkgPT4gbS5tdXRhdGlvbklkID09PSBwcm9wcy5tdXRhdGlvbi5tdXRhdGlvbklkKTtcbiAgICByZXR1cm4gbXV0YXRpb24/LnN0YXRlO1xuICB9KTtcbiAgY29uc3QgaXNQYXVzZWQgPSBjcmVhdGVTdWJzY3JpYmVUb011dGF0aW9uQ2FjaGVCYXRjaGVyKChtdXRhdGlvbkNhY2hlKSA9PiB7XG4gICAgY29uc3QgbXV0YXRpb25zID0gbXV0YXRpb25DYWNoZSgpLmdldEFsbCgpO1xuICAgIGNvbnN0IG11dGF0aW9uID0gbXV0YXRpb25zLmZpbmQoKG0pID0+IG0ubXV0YXRpb25JZCA9PT0gcHJvcHMubXV0YXRpb24ubXV0YXRpb25JZCk7XG4gICAgaWYgKCFtdXRhdGlvbilcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gbXV0YXRpb24uc3RhdGUuaXNQYXVzZWQ7XG4gIH0pO1xuICBjb25zdCBzdGF0dXMgPSBjcmVhdGVTdWJzY3JpYmVUb011dGF0aW9uQ2FjaGVCYXRjaGVyKChtdXRhdGlvbkNhY2hlKSA9PiB7XG4gICAgY29uc3QgbXV0YXRpb25zID0gbXV0YXRpb25DYWNoZSgpLmdldEFsbCgpO1xuICAgIGNvbnN0IG11dGF0aW9uID0gbXV0YXRpb25zLmZpbmQoKG0pID0+IG0ubXV0YXRpb25JZCA9PT0gcHJvcHMubXV0YXRpb24ubXV0YXRpb25JZCk7XG4gICAgaWYgKCFtdXRhdGlvbilcbiAgICAgIHJldHVybiBcImlkbGVcIjtcbiAgICByZXR1cm4gbXV0YXRpb24uc3RhdGUuc3RhdHVzO1xuICB9KTtcbiAgY29uc3QgY29sb3IgPSBjcmVhdGVNZW1vKCgpID0+IGdldE11dGF0aW9uU3RhdHVzQ29sb3Ioe1xuICAgIGlzUGF1c2VkOiBpc1BhdXNlZCgpLFxuICAgIHN0YXR1czogc3RhdHVzKClcbiAgfSkpO1xuICBjb25zdCBnZXRPYnNlcnZlckNvdW50Q29sb3JTdHlsZXMgPSAoKSA9PiB7XG4gICAgaWYgKGNvbG9yKCkgPT09IFwiZ3JheVwiKSB7XG4gICAgICByZXR1cm4gdWBcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0Mihjb2xvcnNbY29sb3IoKV1bMjAwXSwgY29sb3JzW2NvbG9yKCldWzcwMF0pfTtcbiAgICAgICAgY29sb3I6ICR7dDIoY29sb3JzW2NvbG9yKCldWzcwMF0sIGNvbG9yc1tjb2xvcigpXVszMDBdKX07XG4gICAgICBgO1xuICAgIH1cbiAgICByZXR1cm4gdWBcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dDIoY29sb3JzW2NvbG9yKCldWzIwMF0gKyBhbHBoYVs4MF0sIGNvbG9yc1tjb2xvcigpXVs5MDBdKX07XG4gICAgICBjb2xvcjogJHt0Mihjb2xvcnNbY29sb3IoKV1bODAwXSwgY29sb3JzW2NvbG9yKCldWzMwMF0pfTtcbiAgICBgO1xuICB9O1xuICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KFNob3csIHtcbiAgICBnZXQgd2hlbigpIHtcbiAgICAgIHJldHVybiBtdXRhdGlvblN0YXRlKCk7XG4gICAgfSxcbiAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICBjb25zdCBfZWwkNTAgPSBfdG1wbCQyMjIoKSwgX2VsJDUxID0gX2VsJDUwLmZpcnN0Q2hpbGQsIF9lbCQ1MiA9IF9lbCQ1MS5uZXh0U2libGluZztcbiAgICAgIF9lbCQ1MC4kJGNsaWNrID0gKCkgPT4ge1xuICAgICAgICBzZXRTZWxlY3RlZE11dGF0aW9uSWQocHJvcHMubXV0YXRpb24ubXV0YXRpb25JZCA9PT0gc2VsZWN0ZWRNdXRhdGlvbklkKCkgPyBudWxsIDogcHJvcHMubXV0YXRpb24ubXV0YXRpb25JZCk7XG4gICAgICB9O1xuICAgICAgaW5zZXJ0KF9lbCQ1MSwgY3JlYXRlQ29tcG9uZW50KFNob3csIHtcbiAgICAgICAgZ2V0IHdoZW4oKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbG9yKCkgPT09IFwicHVycGxlXCI7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KFBhdXNlQ2lyY2xlLCB7fSk7XG4gICAgICAgIH1cbiAgICAgIH0pLCBudWxsKTtcbiAgICAgIGluc2VydChfZWwkNTEsIGNyZWF0ZUNvbXBvbmVudChTaG93LCB7XG4gICAgICAgIGdldCB3aGVuKCkge1xuICAgICAgICAgIHJldHVybiBjb2xvcigpID09PSBcImdyZWVuXCI7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KENoZWNrQ2lyY2xlLCB7fSk7XG4gICAgICAgIH1cbiAgICAgIH0pLCBudWxsKTtcbiAgICAgIGluc2VydChfZWwkNTEsIGNyZWF0ZUNvbXBvbmVudChTaG93LCB7XG4gICAgICAgIGdldCB3aGVuKCkge1xuICAgICAgICAgIHJldHVybiBjb2xvcigpID09PSBcInJlZFwiO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChYQ2lyY2xlLCB7fSk7XG4gICAgICAgIH1cbiAgICAgIH0pLCBudWxsKTtcbiAgICAgIGluc2VydChfZWwkNTEsIGNyZWF0ZUNvbXBvbmVudChTaG93LCB7XG4gICAgICAgIGdldCB3aGVuKCkge1xuICAgICAgICAgIHJldHVybiBjb2xvcigpID09PSBcInllbGxvd1wiO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudChMb2FkaW5nQ2lyY2xlLCB7fSk7XG4gICAgICAgIH1cbiAgICAgIH0pLCBudWxsKTtcbiAgICAgIGluc2VydChfZWwkNTIsIGNyZWF0ZUNvbXBvbmVudChTaG93LCB7XG4gICAgICAgIGdldCB3aGVuKCkge1xuICAgICAgICAgIHJldHVybiBwcm9wcy5tdXRhdGlvbi5vcHRpb25zLm11dGF0aW9uS2V5O1xuICAgICAgICB9LFxuICAgICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgICAgcmV0dXJuIFtjcmVhdGVNZW1vKCgpID0+IEpTT04uc3RyaW5naWZ5KHByb3BzLm11dGF0aW9uLm9wdGlvbnMubXV0YXRpb25LZXkpKSwgXCIgLVwiLCBcIiBcIl07XG4gICAgICAgIH1cbiAgICAgIH0pLCBudWxsKTtcbiAgICAgIGluc2VydChfZWwkNTIsICgpID0+IG5ldyBEYXRlKHByb3BzLm11dGF0aW9uLnN0YXRlLnN1Ym1pdHRlZEF0KS50b0xvY2FsZVN0cmluZygpLCBudWxsKTtcbiAgICAgIGNyZWF0ZVJlbmRlckVmZmVjdCgoX3AkKSA9PiB7XG4gICAgICAgIGNvbnN0IF92JDI4ID0gY2xzeChzdHlsZXMoKS5xdWVyeVJvdywgc2VsZWN0ZWRNdXRhdGlvbklkKCkgPT09IHByb3BzLm11dGF0aW9uLm11dGF0aW9uSWQgJiYgc3R5bGVzKCkuc2VsZWN0ZWRRdWVyeVJvdywgXCJ0c3FkLXF1ZXJ5LXJvd1wiKSwgX3YkMjkgPSBgTXV0YXRpb24gc3VibWl0dGVkIGF0ICR7bmV3IERhdGUocHJvcHMubXV0YXRpb24uc3RhdGUuc3VibWl0dGVkQXQpLnRvTG9jYWxlU3RyaW5nKCl9YCwgX3YkMzAgPSBjbHN4KGdldE9ic2VydmVyQ291bnRDb2xvclN0eWxlcygpLCBcInRzcWQtcXVlcnktb2JzZXJ2ZXItY291bnRcIik7XG4gICAgICAgIF92JDI4ICE9PSBfcCQuX3YkMjggJiYgY2xhc3NOYW1lKF9lbCQ1MCwgX3AkLl92JDI4ID0gX3YkMjgpO1xuICAgICAgICBfdiQyOSAhPT0gX3AkLl92JDI5ICYmIHNldEF0dHJpYnV0ZShfZWwkNTAsIFwiYXJpYS1sYWJlbFwiLCBfcCQuX3YkMjkgPSBfdiQyOSk7XG4gICAgICAgIF92JDMwICE9PSBfcCQuX3YkMzAgJiYgY2xhc3NOYW1lKF9lbCQ1MSwgX3AkLl92JDMwID0gX3YkMzApO1xuICAgICAgICByZXR1cm4gX3AkO1xuICAgICAgfSwge1xuICAgICAgICBfdiQyODogdm9pZCAwLFxuICAgICAgICBfdiQyOTogdm9pZCAwLFxuICAgICAgICBfdiQzMDogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBfZWwkNTA7XG4gICAgfVxuICB9KTtcbn07XG52YXIgUXVlcnlTdGF0dXNDb3VudCA9ICgpID0+IHtcbiAgY29uc3Qgc3RhbGUgPSBjcmVhdGVTdWJzY3JpYmVUb1F1ZXJ5Q2FjaGVCYXRjaGVyKChxdWVyeUNhY2hlKSA9PiBxdWVyeUNhY2hlKCkuZ2V0QWxsKCkuZmlsdGVyKChxKSA9PiBnZXRRdWVyeVN0YXR1c0xhYmVsKHEpID09PSBcInN0YWxlXCIpLmxlbmd0aCk7XG4gIGNvbnN0IGZyZXNoID0gY3JlYXRlU3Vic2NyaWJlVG9RdWVyeUNhY2hlQmF0Y2hlcigocXVlcnlDYWNoZSkgPT4gcXVlcnlDYWNoZSgpLmdldEFsbCgpLmZpbHRlcigocSkgPT4gZ2V0UXVlcnlTdGF0dXNMYWJlbChxKSA9PT0gXCJmcmVzaFwiKS5sZW5ndGgpO1xuICBjb25zdCBmZXRjaGluZyA9IGNyZWF0ZVN1YnNjcmliZVRvUXVlcnlDYWNoZUJhdGNoZXIoKHF1ZXJ5Q2FjaGUpID0+IHF1ZXJ5Q2FjaGUoKS5nZXRBbGwoKS5maWx0ZXIoKHEpID0+IGdldFF1ZXJ5U3RhdHVzTGFiZWwocSkgPT09IFwiZmV0Y2hpbmdcIikubGVuZ3RoKTtcbiAgY29uc3QgcGF1c2VkID0gY3JlYXRlU3Vic2NyaWJlVG9RdWVyeUNhY2hlQmF0Y2hlcigocXVlcnlDYWNoZSkgPT4gcXVlcnlDYWNoZSgpLmdldEFsbCgpLmZpbHRlcigocSkgPT4gZ2V0UXVlcnlTdGF0dXNMYWJlbChxKSA9PT0gXCJwYXVzZWRcIikubGVuZ3RoKTtcbiAgY29uc3QgaW5hY3RpdmUgPSBjcmVhdGVTdWJzY3JpYmVUb1F1ZXJ5Q2FjaGVCYXRjaGVyKChxdWVyeUNhY2hlKSA9PiBxdWVyeUNhY2hlKCkuZ2V0QWxsKCkuZmlsdGVyKChxKSA9PiBnZXRRdWVyeVN0YXR1c0xhYmVsKHEpID09PSBcImluYWN0aXZlXCIpLmxlbmd0aCk7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgY29uc3Qgc3R5bGVzID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHRoZW1lKCkgPT09IFwiZGFya1wiID8gZGFya1N0eWxlczIgOiBsaWdodFN0eWxlczI7XG4gIH0pO1xuICByZXR1cm4gKCgpID0+IHtcbiAgICBjb25zdCBfZWwkNTMgPSBfdG1wbCQyNSgpO1xuICAgIGluc2VydChfZWwkNTMsIGNyZWF0ZUNvbXBvbmVudChRdWVyeVN0YXR1cywge1xuICAgICAgbGFiZWw6IFwiRnJlc2hcIixcbiAgICAgIGNvbG9yOiBcImdyZWVuXCIsXG4gICAgICBnZXQgY291bnQoKSB7XG4gICAgICAgIHJldHVybiBmcmVzaCgpO1xuICAgICAgfVxuICAgIH0pLCBudWxsKTtcbiAgICBpbnNlcnQoX2VsJDUzLCBjcmVhdGVDb21wb25lbnQoUXVlcnlTdGF0dXMsIHtcbiAgICAgIGxhYmVsOiBcIkZldGNoaW5nXCIsXG4gICAgICBjb2xvcjogXCJibHVlXCIsXG4gICAgICBnZXQgY291bnQoKSB7XG4gICAgICAgIHJldHVybiBmZXRjaGluZygpO1xuICAgICAgfVxuICAgIH0pLCBudWxsKTtcbiAgICBpbnNlcnQoX2VsJDUzLCBjcmVhdGVDb21wb25lbnQoUXVlcnlTdGF0dXMsIHtcbiAgICAgIGxhYmVsOiBcIlBhdXNlZFwiLFxuICAgICAgY29sb3I6IFwicHVycGxlXCIsXG4gICAgICBnZXQgY291bnQoKSB7XG4gICAgICAgIHJldHVybiBwYXVzZWQoKTtcbiAgICAgIH1cbiAgICB9KSwgbnVsbCk7XG4gICAgaW5zZXJ0KF9lbCQ1MywgY3JlYXRlQ29tcG9uZW50KFF1ZXJ5U3RhdHVzLCB7XG4gICAgICBsYWJlbDogXCJTdGFsZVwiLFxuICAgICAgY29sb3I6IFwieWVsbG93XCIsXG4gICAgICBnZXQgY291bnQoKSB7XG4gICAgICAgIHJldHVybiBzdGFsZSgpO1xuICAgICAgfVxuICAgIH0pLCBudWxsKTtcbiAgICBpbnNlcnQoX2VsJDUzLCBjcmVhdGVDb21wb25lbnQoUXVlcnlTdGF0dXMsIHtcbiAgICAgIGxhYmVsOiBcIkluYWN0aXZlXCIsXG4gICAgICBjb2xvcjogXCJncmF5XCIsXG4gICAgICBnZXQgY291bnQoKSB7XG4gICAgICAgIHJldHVybiBpbmFjdGl2ZSgpO1xuICAgICAgfVxuICAgIH0pLCBudWxsKTtcbiAgICBjcmVhdGVSZW5kZXJFZmZlY3QoKCkgPT4gY2xhc3NOYW1lKF9lbCQ1MywgY2xzeChzdHlsZXMoKS5xdWVyeVN0YXR1c0NvbnRhaW5lciwgXCJ0c3FkLXF1ZXJ5LXN0YXR1cy1jb250YWluZXJcIikpKTtcbiAgICByZXR1cm4gX2VsJDUzO1xuICB9KSgpO1xufTtcbnZhciBNdXRhdGlvblN0YXR1c0NvdW50ID0gKCkgPT4ge1xuICBjb25zdCBzdWNjZXNzID0gY3JlYXRlU3Vic2NyaWJlVG9NdXRhdGlvbkNhY2hlQmF0Y2hlcigobXV0YXRpb25DYWNoZSkgPT4gbXV0YXRpb25DYWNoZSgpLmdldEFsbCgpLmZpbHRlcigobSkgPT4gZ2V0TXV0YXRpb25TdGF0dXNDb2xvcih7XG4gICAgaXNQYXVzZWQ6IG0uc3RhdGUuaXNQYXVzZWQsXG4gICAgc3RhdHVzOiBtLnN0YXRlLnN0YXR1c1xuICB9KSA9PT0gXCJncmVlblwiKS5sZW5ndGgpO1xuICBjb25zdCBwZW5kaW5nID0gY3JlYXRlU3Vic2NyaWJlVG9NdXRhdGlvbkNhY2hlQmF0Y2hlcigobXV0YXRpb25DYWNoZSkgPT4gbXV0YXRpb25DYWNoZSgpLmdldEFsbCgpLmZpbHRlcigobSkgPT4gZ2V0TXV0YXRpb25TdGF0dXNDb2xvcih7XG4gICAgaXNQYXVzZWQ6IG0uc3RhdGUuaXNQYXVzZWQsXG4gICAgc3RhdHVzOiBtLnN0YXRlLnN0YXR1c1xuICB9KSA9PT0gXCJ5ZWxsb3dcIikubGVuZ3RoKTtcbiAgY29uc3QgcGF1c2VkID0gY3JlYXRlU3Vic2NyaWJlVG9NdXRhdGlvbkNhY2hlQmF0Y2hlcigobXV0YXRpb25DYWNoZSkgPT4gbXV0YXRpb25DYWNoZSgpLmdldEFsbCgpLmZpbHRlcigobSkgPT4gZ2V0TXV0YXRpb25TdGF0dXNDb2xvcih7XG4gICAgaXNQYXVzZWQ6IG0uc3RhdGUuaXNQYXVzZWQsXG4gICAgc3RhdHVzOiBtLnN0YXRlLnN0YXR1c1xuICB9KSA9PT0gXCJwdXJwbGVcIikubGVuZ3RoKTtcbiAgY29uc3QgZXJyb3IgPSBjcmVhdGVTdWJzY3JpYmVUb011dGF0aW9uQ2FjaGVCYXRjaGVyKChtdXRhdGlvbkNhY2hlKSA9PiBtdXRhdGlvbkNhY2hlKCkuZ2V0QWxsKCkuZmlsdGVyKChtKSA9PiBnZXRNdXRhdGlvblN0YXR1c0NvbG9yKHtcbiAgICBpc1BhdXNlZDogbS5zdGF0ZS5pc1BhdXNlZCxcbiAgICBzdGF0dXM6IG0uc3RhdGUuc3RhdHVzXG4gIH0pID09PSBcInJlZFwiKS5sZW5ndGgpO1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIGNvbnN0IHN0eWxlcyA9IGNyZWF0ZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB0aGVtZSgpID09PSBcImRhcmtcIiA/IGRhcmtTdHlsZXMyIDogbGlnaHRTdHlsZXMyO1xuICB9KTtcbiAgcmV0dXJuICgoKSA9PiB7XG4gICAgY29uc3QgX2VsJDU0ID0gX3RtcGwkMjUoKTtcbiAgICBpbnNlcnQoX2VsJDU0LCBjcmVhdGVDb21wb25lbnQoUXVlcnlTdGF0dXMsIHtcbiAgICAgIGxhYmVsOiBcIlBhdXNlZFwiLFxuICAgICAgY29sb3I6IFwicHVycGxlXCIsXG4gICAgICBnZXQgY291bnQoKSB7XG4gICAgICAgIHJldHVybiBwYXVzZWQoKTtcbiAgICAgIH1cbiAgICB9KSwgbnVsbCk7XG4gICAgaW5zZXJ0KF9lbCQ1NCwgY3JlYXRlQ29tcG9uZW50KFF1ZXJ5U3RhdHVzLCB7XG4gICAgICBsYWJlbDogXCJQZW5kaW5nXCIsXG4gICAgICBjb2xvcjogXCJ5ZWxsb3dcIixcbiAgICAgIGdldCBjb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHBlbmRpbmcoKTtcbiAgICAgIH1cbiAgICB9KSwgbnVsbCk7XG4gICAgaW5zZXJ0KF9lbCQ1NCwgY3JlYXRlQ29tcG9uZW50KFF1ZXJ5U3RhdHVzLCB7XG4gICAgICBsYWJlbDogXCJTdWNjZXNzXCIsXG4gICAgICBjb2xvcjogXCJncmVlblwiLFxuICAgICAgZ2V0IGNvdW50KCkge1xuICAgICAgICByZXR1cm4gc3VjY2VzcygpO1xuICAgICAgfVxuICAgIH0pLCBudWxsKTtcbiAgICBpbnNlcnQoX2VsJDU0LCBjcmVhdGVDb21wb25lbnQoUXVlcnlTdGF0dXMsIHtcbiAgICAgIGxhYmVsOiBcIkVycm9yXCIsXG4gICAgICBjb2xvcjogXCJyZWRcIixcbiAgICAgIGdldCBjb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yKCk7XG4gICAgICB9XG4gICAgfSksIG51bGwpO1xuICAgIGNyZWF0ZVJlbmRlckVmZmVjdCgoKSA9PiBjbGFzc05hbWUoX2VsJDU0LCBjbHN4KHN0eWxlcygpLnF1ZXJ5U3RhdHVzQ29udGFpbmVyLCBcInRzcWQtcXVlcnktc3RhdHVzLWNvbnRhaW5lclwiKSkpO1xuICAgIHJldHVybiBfZWwkNTQ7XG4gIH0pKCk7XG59O1xudmFyIFF1ZXJ5U3RhdHVzID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgY29uc3Qgc3R5bGVzID0gY3JlYXRlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHRoZW1lKCkgPT09IFwiZGFya1wiID8gZGFya1N0eWxlczIgOiBsaWdodFN0eWxlczI7XG4gIH0pO1xuICBjb25zdCB7XG4gICAgY29sb3JzLFxuICAgIGFscGhhXG4gIH0gPSB0b2tlbnM7XG4gIGNvbnN0IHQyID0gKGxpZ2h0LCBkYXJrKSA9PiB0aGVtZSgpID09PSBcImRhcmtcIiA/IGRhcmsgOiBsaWdodDtcbiAgbGV0IHRhZ1JlZjtcbiAgY29uc3QgW21vdXNlT3Zlciwgc2V0TW91c2VPdmVyXSA9IGNyZWF0ZVNpZ25hbChmYWxzZSk7XG4gIGNvbnN0IFtmb2N1c2VkLCBzZXRGb2N1c2VkXSA9IGNyZWF0ZVNpZ25hbChmYWxzZSk7XG4gIGNvbnN0IHNob3dMYWJlbCA9IGNyZWF0ZU1lbW8oKCkgPT4ge1xuICAgIGlmIChzZWxlY3RlZFF1ZXJ5SGFzaCgpKSB7XG4gICAgICBpZiAocGFuZWxXaWR0aCgpIDwgZmlyc3RCcmVha3BvaW50ICYmIHBhbmVsV2lkdGgoKSA+IHNlY29uZEJyZWFrcG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFuZWxXaWR0aCgpIDwgdGhpcmRCcmVha3BvaW50KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcbiAgcmV0dXJuICgoKSA9PiB7XG4gICAgY29uc3QgX2VsJDU1ID0gX3RtcGwkMjUyKCksIF9lbCQ1NyA9IF9lbCQ1NS5maXJzdENoaWxkLCBfZWwkNTkgPSBfZWwkNTcubmV4dFNpYmxpbmc7XG4gICAgY29uc3QgX3JlZiQ0ID0gdGFnUmVmO1xuICAgIHR5cGVvZiBfcmVmJDQgPT09IFwiZnVuY3Rpb25cIiA/IHVzZShfcmVmJDQsIF9lbCQ1NSkgOiB0YWdSZWYgPSBfZWwkNTU7XG4gICAgX2VsJDU1LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsICgpID0+IHtcbiAgICAgIHNldE1vdXNlT3ZlcihmYWxzZSk7XG4gICAgICBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgICB9KTtcbiAgICBfZWwkNTUuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgKCkgPT4gc2V0TW91c2VPdmVyKHRydWUpKTtcbiAgICBfZWwkNTUuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgKCkgPT4gc2V0Rm9jdXNlZChmYWxzZSkpO1xuICAgIF9lbCQ1NS5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgKCkgPT4gc2V0Rm9jdXNlZCh0cnVlKSk7XG4gICAgc3ByZWFkKF9lbCQ1NSwgbWVyZ2VQcm9wcyh7XG4gICAgICBnZXQgZGlzYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiBzaG93TGFiZWwoKTtcbiAgICAgIH0sXG4gICAgICBnZXQgW1wiY2xhc3NcIl0oKSB7XG4gICAgICAgIHJldHVybiBjbHN4KHN0eWxlcygpLnF1ZXJ5U3RhdHVzVGFnLCAhc2hvd0xhYmVsKCkgJiYgdWBcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgICY6aG92ZXIge1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke3QyKGNvbG9ycy5ncmF5WzIwMF0sIGNvbG9ycy5kYXJrR3JheVs0MDBdKX0ke2FscGhhWzgwXX07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgYCwgXCJ0c3FkLXF1ZXJ5LXN0YXR1cy10YWdcIiwgYHRzcWQtcXVlcnktc3RhdHVzLXRhZy0ke3Byb3BzLmxhYmVsLnRvTG93ZXJDYXNlKCl9YCk7XG4gICAgICB9XG4gICAgfSwgKCkgPT4gbW91c2VPdmVyKCkgfHwgZm9jdXNlZCgpID8ge1xuICAgICAgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IFwidHNxZC1zdGF0dXMtdG9vbHRpcFwiXG4gICAgfSA6IHt9KSwgZmFsc2UsIHRydWUpO1xuICAgIGluc2VydChfZWwkNTUsIGNyZWF0ZUNvbXBvbmVudChTaG93LCB7XG4gICAgICBnZXQgd2hlbigpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZU1lbW8oKCkgPT4gISEhc2hvd0xhYmVsKCkpKCkgJiYgKG1vdXNlT3ZlcigpIHx8IGZvY3VzZWQoKSk7XG4gICAgICB9LFxuICAgICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICBjb25zdCBfZWwkNTYgPSBfdG1wbCQyMzIoKTtcbiAgICAgICAgaW5zZXJ0KF9lbCQ1NiwgKCkgPT4gcHJvcHMubGFiZWwpO1xuICAgICAgICBjcmVhdGVSZW5kZXJFZmZlY3QoKCkgPT4gY2xhc3NOYW1lKF9lbCQ1NiwgY2xzeChzdHlsZXMoKS5zdGF0dXNUb29sdGlwLCBcInRzcWQtcXVlcnktc3RhdHVzLXRvb2x0aXBcIikpKTtcbiAgICAgICAgcmV0dXJuIF9lbCQ1NjtcbiAgICAgIH1cbiAgICB9KSwgX2VsJDU3KTtcbiAgICBpbnNlcnQoX2VsJDU1LCBjcmVhdGVDb21wb25lbnQoU2hvdywge1xuICAgICAgZ2V0IHdoZW4oKSB7XG4gICAgICAgIHJldHVybiBzaG93TGFiZWwoKTtcbiAgICAgIH0sXG4gICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgIGNvbnN0IF9lbCQ1OCA9IF90bXBsJDI0MigpO1xuICAgICAgICBpbnNlcnQoX2VsJDU4LCAoKSA9PiBwcm9wcy5sYWJlbCk7XG4gICAgICAgIGNyZWF0ZVJlbmRlckVmZmVjdCgoKSA9PiBjbGFzc05hbWUoX2VsJDU4LCBjbHN4KHN0eWxlcygpLnF1ZXJ5U3RhdHVzVGFnTGFiZWwsIFwidHNxZC1xdWVyeS1zdGF0dXMtdGFnLWxhYmVsXCIpKSk7XG4gICAgICAgIHJldHVybiBfZWwkNTg7XG4gICAgICB9XG4gICAgfSksIF9lbCQ1OSk7XG4gICAgaW5zZXJ0KF9lbCQ1OSwgKCkgPT4gcHJvcHMuY291bnQpO1xuICAgIGNyZWF0ZVJlbmRlckVmZmVjdCgoX3AkKSA9PiB7XG4gICAgICBjb25zdCBfdiQzMSA9IGNsc3godWBcbiAgICAgICAgICAgIHdpZHRoOiAke3Rva2Vucy5zaXplWzEuNV19O1xuICAgICAgICAgICAgaGVpZ2h0OiAke3Rva2Vucy5zaXplWzEuNV19O1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogJHt0b2tlbnMuYm9yZGVyLnJhZGl1cy5mdWxsfTtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dG9rZW5zLmNvbG9yc1twcm9wcy5jb2xvcl1bNTAwXX07XG4gICAgICAgICAgYCwgXCJ0c3FkLXF1ZXJ5LXN0YXR1cy10YWctZG90XCIpLCBfdiQzMiA9IGNsc3goc3R5bGVzKCkucXVlcnlTdGF0dXNDb3VudCwgcHJvcHMuY291bnQgPiAwICYmIHByb3BzLmNvbG9yICE9PSBcImdyYXlcIiAmJiB1YFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3QyKGNvbG9yc1twcm9wcy5jb2xvcl1bMTAwXSwgY29sb3JzW3Byb3BzLmNvbG9yXVs5MDBdKX07XG4gICAgICAgICAgICAgIGNvbG9yOiAke3QyKGNvbG9yc1twcm9wcy5jb2xvcl1bNzAwXSwgY29sb3JzW3Byb3BzLmNvbG9yXVszMDBdKX07XG4gICAgICAgICAgICBgLCBcInRzcWQtcXVlcnktc3RhdHVzLXRhZy1jb3VudFwiKTtcbiAgICAgIF92JDMxICE9PSBfcCQuX3YkMzEgJiYgY2xhc3NOYW1lKF9lbCQ1NywgX3AkLl92JDMxID0gX3YkMzEpO1xuICAgICAgX3YkMzIgIT09IF9wJC5fdiQzMiAmJiBjbGFzc05hbWUoX2VsJDU5LCBfcCQuX3YkMzIgPSBfdiQzMik7XG4gICAgICByZXR1cm4gX3AkO1xuICAgIH0sIHtcbiAgICAgIF92JDMxOiB2b2lkIDAsXG4gICAgICBfdiQzMjogdm9pZCAwXG4gICAgfSk7XG4gICAgcmV0dXJuIF9lbCQ1NTtcbiAgfSkoKTtcbn07XG52YXIgUXVlcnlEZXRhaWxzID0gKCkgPT4ge1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIGNvbnN0IHN0eWxlcyA9IGNyZWF0ZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB0aGVtZSgpID09PSBcImRhcmtcIiA/IGRhcmtTdHlsZXMyIDogbGlnaHRTdHlsZXMyO1xuICB9KTtcbiAgY29uc3Qge1xuICAgIGNvbG9yc1xuICB9ID0gdG9rZW5zO1xuICBjb25zdCB0MiA9IChsaWdodCwgZGFyaykgPT4gdGhlbWUoKSA9PT0gXCJkYXJrXCIgPyBkYXJrIDogbGlnaHQ7XG4gIGNvbnN0IHF1ZXJ5Q2xpZW50ID0gdXNlUXVlcnlEZXZ0b29sc0NvbnRleHQoKS5jbGllbnQ7XG4gIGNvbnN0IFtyZXN0b3JpbmdMb2FkaW5nLCBzZXRSZXN0b3JpbmdMb2FkaW5nXSA9IGNyZWF0ZVNpZ25hbChmYWxzZSk7XG4gIGNvbnN0IGVycm9yVHlwZXMgPSBjcmVhdGVNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gdXNlUXVlcnlEZXZ0b29sc0NvbnRleHQoKS5lcnJvclR5cGVzIHx8IFtdO1xuICB9KTtcbiAgY29uc3QgYWN0aXZlUXVlcnkgPSBjcmVhdGVTdWJzY3JpYmVUb1F1ZXJ5Q2FjaGVCYXRjaGVyKChxdWVyeUNhY2hlKSA9PiBxdWVyeUNhY2hlKCkuZ2V0QWxsKCkuZmluZCgocXVlcnkpID0+IHF1ZXJ5LnF1ZXJ5SGFzaCA9PT0gc2VsZWN0ZWRRdWVyeUhhc2goKSksIGZhbHNlKTtcbiAgY29uc3QgYWN0aXZlUXVlcnlGcmVzaCA9IGNyZWF0ZVN1YnNjcmliZVRvUXVlcnlDYWNoZUJhdGNoZXIoKHF1ZXJ5Q2FjaGUpID0+IHtcbiAgICByZXR1cm4gcXVlcnlDYWNoZSgpLmdldEFsbCgpLmZpbmQoKHF1ZXJ5KSA9PiBxdWVyeS5xdWVyeUhhc2ggPT09IHNlbGVjdGVkUXVlcnlIYXNoKCkpO1xuICB9LCBmYWxzZSk7XG4gIGNvbnN0IGFjdGl2ZVF1ZXJ5U3RhdGUgPSBjcmVhdGVTdWJzY3JpYmVUb1F1ZXJ5Q2FjaGVCYXRjaGVyKChxdWVyeUNhY2hlKSA9PiBxdWVyeUNhY2hlKCkuZ2V0QWxsKCkuZmluZCgocXVlcnkpID0+IHF1ZXJ5LnF1ZXJ5SGFzaCA9PT0gc2VsZWN0ZWRRdWVyeUhhc2goKSk/LnN0YXRlLCBmYWxzZSk7XG4gIGNvbnN0IGFjdGl2ZVF1ZXJ5U3RhdGVEYXRhID0gY3JlYXRlU3Vic2NyaWJlVG9RdWVyeUNhY2hlQmF0Y2hlcigocXVlcnlDYWNoZSkgPT4ge1xuICAgIHJldHVybiBxdWVyeUNhY2hlKCkuZ2V0QWxsKCkuZmluZCgocXVlcnkpID0+IHF1ZXJ5LnF1ZXJ5SGFzaCA9PT0gc2VsZWN0ZWRRdWVyeUhhc2goKSk/LnN0YXRlLmRhdGE7XG4gIH0sIGZhbHNlKTtcbiAgY29uc3Qgc3RhdHVzTGFiZWwgPSBjcmVhdGVTdWJzY3JpYmVUb1F1ZXJ5Q2FjaGVCYXRjaGVyKChxdWVyeUNhY2hlKSA9PiB7XG4gICAgY29uc3QgcXVlcnkgPSBxdWVyeUNhY2hlKCkuZ2V0QWxsKCkuZmluZCgocSkgPT4gcS5xdWVyeUhhc2ggPT09IHNlbGVjdGVkUXVlcnlIYXNoKCkpO1xuICAgIGlmICghcXVlcnkpXG4gICAgICByZXR1cm4gXCJpbmFjdGl2ZVwiO1xuICAgIHJldHVybiBnZXRRdWVyeVN0YXR1c0xhYmVsKHF1ZXJ5KTtcbiAgfSk7XG4gIGNvbnN0IHF1ZXJ5U3RhdHVzID0gY3JlYXRlU3Vic2NyaWJlVG9RdWVyeUNhY2hlQmF0Y2hlcigocXVlcnlDYWNoZSkgPT4ge1xuICAgIGNvbnN0IHF1ZXJ5ID0gcXVlcnlDYWNoZSgpLmdldEFsbCgpLmZpbmQoKHEpID0+IHEucXVlcnlIYXNoID09PSBzZWxlY3RlZFF1ZXJ5SGFzaCgpKTtcbiAgICBpZiAoIXF1ZXJ5KVxuICAgICAgcmV0dXJuIFwicGVuZGluZ1wiO1xuICAgIHJldHVybiBxdWVyeS5zdGF0ZS5zdGF0dXM7XG4gIH0pO1xuICBjb25zdCBvYnNlcnZlckNvdW50ID0gY3JlYXRlU3Vic2NyaWJlVG9RdWVyeUNhY2hlQmF0Y2hlcigocXVlcnlDYWNoZSkgPT4gcXVlcnlDYWNoZSgpLmdldEFsbCgpLmZpbmQoKHF1ZXJ5KSA9PiBxdWVyeS5xdWVyeUhhc2ggPT09IHNlbGVjdGVkUXVlcnlIYXNoKCkpPy5nZXRPYnNlcnZlcnNDb3VudCgpID8/IDApO1xuICBjb25zdCBjb2xvciA9IGNyZWF0ZU1lbW8oKCkgPT4gZ2V0UXVlcnlTdGF0dXNDb2xvckJ5TGFiZWwoc3RhdHVzTGFiZWwoKSkpO1xuICBjb25zdCBoYW5kbGVSZWZldGNoID0gKCkgPT4ge1xuICAgIGNvbnN0IHByb21pc2UgPSBhY3RpdmVRdWVyeSgpPy5mZXRjaCgpO1xuICAgIHByb21pc2U/LmNhdGNoKCgpID0+IHtcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgdHJpZ2dlckVycm9yID0gKGVycm9yVHlwZSkgPT4ge1xuICAgIGNvbnN0IGVycm9yID0gZXJyb3JUeXBlPy5pbml0aWFsaXplcihhY3RpdmVRdWVyeSgpKSA/PyBuZXcgRXJyb3IoXCJVbmtub3duIGVycm9yIGZyb20gZGV2dG9vbHNcIik7XG4gICAgY29uc3QgX19wcmV2aW91c1F1ZXJ5T3B0aW9ucyA9IGFjdGl2ZVF1ZXJ5KCkub3B0aW9ucztcbiAgICBhY3RpdmVRdWVyeSgpLnNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogXCJlcnJvclwiLFxuICAgICAgZXJyb3IsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVubmVjZXNzYXJ5LXR5cGUtYXNzZXJ0aW9uXG4gICAgICBmZXRjaE1ldGE6IHtcbiAgICAgICAgLi4uYWN0aXZlUXVlcnkoKS5zdGF0ZS5mZXRjaE1ldGEsXG4gICAgICAgIF9fcHJldmlvdXNRdWVyeU9wdGlvbnNcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgcmVzdG9yZVF1ZXJ5QWZ0ZXJMb2FkaW5nT3JFcnJvciA9ICgpID0+IHtcbiAgICBhY3RpdmVRdWVyeSgpPy5mZXRjaCgoYWN0aXZlUXVlcnkoKT8uc3RhdGUuZmV0Y2hNZXRhKS5fX3ByZXZpb3VzUXVlcnlPcHRpb25zLCB7XG4gICAgICAvLyBNYWtlIHN1cmUgdGhpcyBmZXRjaCB3aWxsIGNhbmNlbCB0aGUgcHJldmlvdXMgb25lXG4gICAgICBjYW5jZWxSZWZldGNoOiB0cnVlXG4gICAgfSk7XG4gIH07XG4gIGNyZWF0ZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHN0YXR1c0xhYmVsKCkgIT09IFwiZmV0Y2hpbmdcIikge1xuICAgICAgc2V0UmVzdG9yaW5nTG9hZGluZyhmYWxzZSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgZ2V0UXVlcnlTdGF0dXNDb2xvcnMgPSAoKSA9PiB7XG4gICAgaWYgKGNvbG9yKCkgPT09IFwiZ3JheVwiKSB7XG4gICAgICByZXR1cm4gdWBcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0Mihjb2xvcnNbY29sb3IoKV1bMjAwXSwgY29sb3JzW2NvbG9yKCldWzcwMF0pfTtcbiAgICAgICAgY29sb3I6ICR7dDIoY29sb3JzW2NvbG9yKCldWzcwMF0sIGNvbG9yc1tjb2xvcigpXVszMDBdKX07XG4gICAgICAgIGJvcmRlci1jb2xvcjogJHt0Mihjb2xvcnNbY29sb3IoKV1bNDAwXSwgY29sb3JzW2NvbG9yKCldWzYwMF0pfTtcbiAgICAgIGA7XG4gICAgfVxuICAgIHJldHVybiB1YFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0Mihjb2xvcnNbY29sb3IoKV1bMTAwXSwgY29sb3JzW2NvbG9yKCldWzkwMF0pfTtcbiAgICAgIGNvbG9yOiAke3QyKGNvbG9yc1tjb2xvcigpXVs3MDBdLCBjb2xvcnNbY29sb3IoKV1bMzAwXSl9O1xuICAgICAgYm9yZGVyLWNvbG9yOiAke3QyKGNvbG9yc1tjb2xvcigpXVs0MDBdLCBjb2xvcnNbY29sb3IoKV1bNjAwXSl9O1xuICAgIGA7XG4gIH07XG4gIHJldHVybiBjcmVhdGVDb21wb25lbnQoU2hvdywge1xuICAgIGdldCB3aGVuKCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZU1lbW8oKCkgPT4gISFhY3RpdmVRdWVyeSgpKSgpICYmIGFjdGl2ZVF1ZXJ5U3RhdGUoKTtcbiAgICB9LFxuICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgIGNvbnN0IF9lbCQ2MCA9IF90bXBsJDI4KCksIF9lbCQ2MSA9IF9lbCQ2MC5maXJzdENoaWxkLCBfZWwkNjIgPSBfZWwkNjEubmV4dFNpYmxpbmcsIF9lbCQ2MyA9IF9lbCQ2Mi5maXJzdENoaWxkLCBfZWwkNjQgPSBfZWwkNjMuZmlyc3RDaGlsZCwgX2VsJDY1ID0gX2VsJDY0LmZpcnN0Q2hpbGQsIF9lbCQ2NiA9IF9lbCQ2NC5uZXh0U2libGluZywgX2VsJDY3ID0gX2VsJDYzLm5leHRTaWJsaW5nLCBfZWwkNjggPSBfZWwkNjcuZmlyc3RDaGlsZCwgX2VsJDY5ID0gX2VsJDY4Lm5leHRTaWJsaW5nLCBfZWwkNzAgPSBfZWwkNjcubmV4dFNpYmxpbmcsIF9lbCQ3MSA9IF9lbCQ3MC5maXJzdENoaWxkLCBfZWwkNzIgPSBfZWwkNzEubmV4dFNpYmxpbmcsIF9lbCQ3MyA9IF9lbCQ2Mi5uZXh0U2libGluZywgX2VsJDc0ID0gX2VsJDczLm5leHRTaWJsaW5nLCBfZWwkNzUgPSBfZWwkNzQuZmlyc3RDaGlsZCwgX2VsJDc2ID0gX2VsJDc1LmZpcnN0Q2hpbGQsIF9lbCQ3NyA9IF9lbCQ3NS5uZXh0U2libGluZywgX2VsJDc4ID0gX2VsJDc3LmZpcnN0Q2hpbGQsIF9lbCQ3OSA9IF9lbCQ3Ny5uZXh0U2libGluZywgX2VsJDgwID0gX2VsJDc5LmZpcnN0Q2hpbGQsIF9lbCQ4MSA9IF9lbCQ3OS5uZXh0U2libGluZywgX2VsJDgyID0gX2VsJDgxLmZpcnN0Q2hpbGQsIF9lbCQ4MyA9IF9lbCQ4MS5uZXh0U2libGluZywgX2VsJDg0ID0gX2VsJDgzLmZpcnN0Q2hpbGQsIF9lbCQ4NSA9IF9lbCQ4NC5uZXh0U2libGluZywgX2VsJDk0ID0gX2VsJDc0Lm5leHRTaWJsaW5nLCBfZWwkOTUgPSBfZWwkOTQubmV4dFNpYmxpbmcsIF9lbCQ5NiA9IF9lbCQ5NS5uZXh0U2libGluZywgX2VsJDk3ID0gX2VsJDk2Lm5leHRTaWJsaW5nO1xuICAgICAgaW5zZXJ0KF9lbCQ2NSwgKCkgPT4gZGlzcGxheVZhbHVlKGFjdGl2ZVF1ZXJ5KCkucXVlcnlLZXksIHRydWUpKTtcbiAgICAgIGluc2VydChfZWwkNjYsIHN0YXR1c0xhYmVsKTtcbiAgICAgIGluc2VydChfZWwkNjksIG9ic2VydmVyQ291bnQpO1xuICAgICAgaW5zZXJ0KF9lbCQ3MiwgKCkgPT4gbmV3IERhdGUoYWN0aXZlUXVlcnlTdGF0ZSgpLmRhdGFVcGRhdGVkQXQpLnRvTG9jYWxlVGltZVN0cmluZygpKTtcbiAgICAgIF9lbCQ3NS4kJGNsaWNrID0gaGFuZGxlUmVmZXRjaDtcbiAgICAgIF9lbCQ3Ny4kJGNsaWNrID0gKCkgPT4gcXVlcnlDbGllbnQuaW52YWxpZGF0ZVF1ZXJpZXMoYWN0aXZlUXVlcnkoKSk7XG4gICAgICBfZWwkNzkuJCRjbGljayA9ICgpID0+IHF1ZXJ5Q2xpZW50LnJlc2V0UXVlcmllcyhhY3RpdmVRdWVyeSgpKTtcbiAgICAgIF9lbCQ4MS4kJGNsaWNrID0gKCkgPT4ge1xuICAgICAgICBxdWVyeUNsaWVudC5yZW1vdmVRdWVyaWVzKGFjdGl2ZVF1ZXJ5KCkpO1xuICAgICAgICBzZXRTZWxlY3RlZFF1ZXJ5SGFzaChudWxsKTtcbiAgICAgIH07XG4gICAgICBfZWwkODMuJCRjbGljayA9ICgpID0+IHtcbiAgICAgICAgaWYgKGFjdGl2ZVF1ZXJ5KCk/LnN0YXRlLmRhdGEgPT09IHZvaWQgMCkge1xuICAgICAgICAgIHNldFJlc3RvcmluZ0xvYWRpbmcodHJ1ZSk7XG4gICAgICAgICAgcmVzdG9yZVF1ZXJ5QWZ0ZXJMb2FkaW5nT3JFcnJvcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGFjdGl2ZVF1ZXJ5VmFsID0gYWN0aXZlUXVlcnkoKTtcbiAgICAgICAgICBpZiAoIWFjdGl2ZVF1ZXJ5VmFsKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIGNvbnN0IF9fcHJldmlvdXNRdWVyeU9wdGlvbnMgPSBhY3RpdmVRdWVyeVZhbC5vcHRpb25zO1xuICAgICAgICAgIGFjdGl2ZVF1ZXJ5VmFsLmZldGNoKHtcbiAgICAgICAgICAgIC4uLl9fcHJldmlvdXNRdWVyeU9wdGlvbnMsXG4gICAgICAgICAgICBxdWVyeUZuOiAoKSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoKSA9PiB7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdjVGltZTogLTFcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBhY3RpdmVRdWVyeVZhbC5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBkYXRhOiB2b2lkIDAsXG4gICAgICAgICAgICBzdGF0dXM6IFwicGVuZGluZ1wiLFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS10eXBlLWFzc2VydGlvblxuICAgICAgICAgICAgZmV0Y2hNZXRhOiB7XG4gICAgICAgICAgICAgIC4uLmFjdGl2ZVF1ZXJ5VmFsLnN0YXRlLmZldGNoTWV0YSxcbiAgICAgICAgICAgICAgX19wcmV2aW91c1F1ZXJ5T3B0aW9uc1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgaW5zZXJ0KF9lbCQ4MywgKCkgPT4gcXVlcnlTdGF0dXMoKSA9PT0gXCJwZW5kaW5nXCIgPyBcIlJlc3RvcmVcIiA6IFwiVHJpZ2dlclwiLCBfZWwkODUpO1xuICAgICAgaW5zZXJ0KF9lbCQ3NCwgY3JlYXRlQ29tcG9uZW50KFNob3csIHtcbiAgICAgICAgZ2V0IHdoZW4oKSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yVHlwZXMoKS5sZW5ndGggPT09IDAgfHwgcXVlcnlTdGF0dXMoKSA9PT0gXCJlcnJvclwiO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgICAgY29uc3QgX2VsJDg2ID0gX3RtcGwkMjYoKSwgX2VsJDg3ID0gX2VsJDg2LmZpcnN0Q2hpbGQsIF9lbCQ4OCA9IF9lbCQ4Ny5uZXh0U2libGluZztcbiAgICAgICAgICBfZWwkODYuJCRjbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghYWN0aXZlUXVlcnkoKS5zdGF0ZS5lcnJvcikge1xuICAgICAgICAgICAgICB0cmlnZ2VyRXJyb3IoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHF1ZXJ5Q2xpZW50LnJlc2V0UXVlcmllcyhhY3RpdmVRdWVyeSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIGluc2VydChfZWwkODYsICgpID0+IHF1ZXJ5U3RhdHVzKCkgPT09IFwiZXJyb3JcIiA/IFwiUmVzdG9yZVwiIDogXCJUcmlnZ2VyXCIsIF9lbCQ4OCk7XG4gICAgICAgICAgY3JlYXRlUmVuZGVyRWZmZWN0KChfcCQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IF92JDMzID0gY2xzeCh1YFxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7dDIoY29sb3JzLnJlZFs1MDBdLCBjb2xvcnMucmVkWzQwMF0pfTtcbiAgICAgICAgICAgICAgICBgLCBcInRzcWQtcXVlcnktZGV0YWlscy1hY3Rpb25zLWJ0blwiLCBcInRzcWQtcXVlcnktZGV0YWlscy1hY3Rpb24tZXJyb3JcIiksIF92JDM0ID0gcXVlcnlTdGF0dXMoKSA9PT0gXCJwZW5kaW5nXCIsIF92JDM1ID0gdWBcbiAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dDIoY29sb3JzLnJlZFs1MDBdLCBjb2xvcnMucmVkWzQwMF0pfTtcbiAgICAgICAgICAgICAgICBgO1xuICAgICAgICAgICAgX3YkMzMgIT09IF9wJC5fdiQzMyAmJiBjbGFzc05hbWUoX2VsJDg2LCBfcCQuX3YkMzMgPSBfdiQzMyk7XG4gICAgICAgICAgICBfdiQzNCAhPT0gX3AkLl92JDM0ICYmIChfZWwkODYuZGlzYWJsZWQgPSBfcCQuX3YkMzQgPSBfdiQzNCk7XG4gICAgICAgICAgICBfdiQzNSAhPT0gX3AkLl92JDM1ICYmIGNsYXNzTmFtZShfZWwkODcsIF9wJC5fdiQzNSA9IF92JDM1KTtcbiAgICAgICAgICAgIHJldHVybiBfcCQ7XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgX3YkMzM6IHZvaWQgMCxcbiAgICAgICAgICAgIF92JDM0OiB2b2lkIDAsXG4gICAgICAgICAgICBfdiQzNTogdm9pZCAwXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIF9lbCQ4NjtcbiAgICAgICAgfVxuICAgICAgfSksIG51bGwpO1xuICAgICAgaW5zZXJ0KF9lbCQ3NCwgY3JlYXRlQ29tcG9uZW50KFNob3csIHtcbiAgICAgICAgZ2V0IHdoZW4oKSB7XG4gICAgICAgICAgcmV0dXJuICEoZXJyb3JUeXBlcygpLmxlbmd0aCA9PT0gMCB8fCBxdWVyeVN0YXR1cygpID09PSBcImVycm9yXCIpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgICAgY29uc3QgX2VsJDg5ID0gX3RtcGwkMjcoKSwgX2VsJDkwID0gX2VsJDg5LmZpcnN0Q2hpbGQsIF9lbCQ5MSA9IF9lbCQ5MC5uZXh0U2libGluZywgX2VsJDkyID0gX2VsJDkxLm5leHRTaWJsaW5nOyBfZWwkOTIuZmlyc3RDaGlsZDtcbiAgICAgICAgICBfZWwkOTIuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoZTIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yVHlwZSA9IGVycm9yVHlwZXMoKS5maW5kKChldCkgPT4gZXQubmFtZSA9PT0gZTIuY3VycmVudFRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgICB0cmlnZ2VyRXJyb3IoZXJyb3JUeXBlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpbnNlcnQoX2VsJDkyLCBjcmVhdGVDb21wb25lbnQoRm9yLCB7XG4gICAgICAgICAgICBnZXQgZWFjaCgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGVycm9yVHlwZXMoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGlsZHJlbjogKGVycm9yVHlwZSkgPT4gKCgpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgX2VsJDk4ID0gX3RtcGwkMjkoKTtcbiAgICAgICAgICAgICAgaW5zZXJ0KF9lbCQ5OCwgKCkgPT4gZXJyb3JUeXBlLm5hbWUpO1xuICAgICAgICAgICAgICBjcmVhdGVSZW5kZXJFZmZlY3QoKCkgPT4gX2VsJDk4LnZhbHVlID0gZXJyb3JUeXBlLm5hbWUpO1xuICAgICAgICAgICAgICByZXR1cm4gX2VsJDk4O1xuICAgICAgICAgICAgfSkoKVxuICAgICAgICAgIH0pLCBudWxsKTtcbiAgICAgICAgICBpbnNlcnQoX2VsJDg5LCBjcmVhdGVDb21wb25lbnQoQ2hldnJvbkRvd24sIHt9KSwgbnVsbCk7XG4gICAgICAgICAgY3JlYXRlUmVuZGVyRWZmZWN0KChfcCQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IF92JDM2ID0gY2xzeChzdHlsZXMoKS5hY3Rpb25zU2VsZWN0LCBcInRzcWQtcXVlcnktZGV0YWlscy1hY3Rpb25zLWJ0blwiLCBcInRzcWQtcXVlcnktZGV0YWlscy1hY3Rpb24tZXJyb3ItbXVsdGlwbGVcIiksIF92JDM3ID0gdWBcbiAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dG9rZW5zLmNvbG9ycy5yZWRbNDAwXX07XG4gICAgICAgICAgICAgICAgYCwgX3YkMzggPSBxdWVyeVN0YXR1cygpID09PSBcInBlbmRpbmdcIjtcbiAgICAgICAgICAgIF92JDM2ICE9PSBfcCQuX3YkMzYgJiYgY2xhc3NOYW1lKF9lbCQ4OSwgX3AkLl92JDM2ID0gX3YkMzYpO1xuICAgICAgICAgICAgX3YkMzcgIT09IF9wJC5fdiQzNyAmJiBjbGFzc05hbWUoX2VsJDkwLCBfcCQuX3YkMzcgPSBfdiQzNyk7XG4gICAgICAgICAgICBfdiQzOCAhPT0gX3AkLl92JDM4ICYmIChfZWwkOTIuZGlzYWJsZWQgPSBfcCQuX3YkMzggPSBfdiQzOCk7XG4gICAgICAgICAgICByZXR1cm4gX3AkO1xuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIF92JDM2OiB2b2lkIDAsXG4gICAgICAgICAgICBfdiQzNzogdm9pZCAwLFxuICAgICAgICAgICAgX3YkMzg6IHZvaWQgMFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBfZWwkODk7XG4gICAgICAgIH1cbiAgICAgIH0pLCBudWxsKTtcbiAgICAgIGluc2VydChfZWwkOTUsIGNyZWF0ZUNvbXBvbmVudChFeHBsb3Jlciwge1xuICAgICAgICBsYWJlbDogXCJEYXRhXCIsXG4gICAgICAgIGRlZmF1bHRFeHBhbmRlZDogW1wiRGF0YVwiXSxcbiAgICAgICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICAgIHJldHVybiBhY3RpdmVRdWVyeVN0YXRlRGF0YSgpO1xuICAgICAgICB9LFxuICAgICAgICBlZGl0YWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0IGFjdGl2ZVF1ZXJ5KCkge1xuICAgICAgICAgIHJldHVybiBhY3RpdmVRdWVyeSgpO1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgICBpbnNlcnQoX2VsJDk3LCBjcmVhdGVDb21wb25lbnQoRXhwbG9yZXIsIHtcbiAgICAgICAgbGFiZWw6IFwiUXVlcnlcIixcbiAgICAgICAgZGVmYXVsdEV4cGFuZGVkOiBbXCJRdWVyeVwiLCBcInF1ZXJ5S2V5XCJdLFxuICAgICAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgICAgcmV0dXJuIGFjdGl2ZVF1ZXJ5RnJlc2goKTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgICAgY3JlYXRlUmVuZGVyRWZmZWN0KChfcCQpID0+IHtcbiAgICAgICAgY29uc3QgX3YkMzkgPSBjbHN4KHN0eWxlcygpLmRldGFpbHNDb250YWluZXIsIFwidHNxZC1xdWVyeS1kZXRhaWxzLWNvbnRhaW5lclwiKSwgX3YkNDAgPSBjbHN4KHN0eWxlcygpLmRldGFpbHNIZWFkZXIsIFwidHNxZC1xdWVyeS1kZXRhaWxzLWhlYWRlclwiKSwgX3YkNDEgPSBjbHN4KHN0eWxlcygpLmRldGFpbHNCb2R5LCBcInRzcWQtcXVlcnktZGV0YWlscy1zdW1tYXJ5LWNvbnRhaW5lclwiKSwgX3YkNDIgPSBjbHN4KHN0eWxlcygpLnF1ZXJ5RGV0YWlsc1N0YXR1cywgZ2V0UXVlcnlTdGF0dXNDb2xvcnMoKSksIF92JDQzID0gY2xzeChzdHlsZXMoKS5kZXRhaWxzSGVhZGVyLCBcInRzcWQtcXVlcnktZGV0YWlscy1oZWFkZXJcIiksIF92JDQ0ID0gY2xzeChzdHlsZXMoKS5hY3Rpb25zQm9keSwgXCJ0c3FkLXF1ZXJ5LWRldGFpbHMtYWN0aW9ucy1jb250YWluZXJcIiksIF92JDQ1ID0gY2xzeCh1YFxuICAgICAgICAgICAgICAgIGNvbG9yOiAke3QyKGNvbG9ycy5ibHVlWzYwMF0sIGNvbG9ycy5ibHVlWzQwMF0pfTtcbiAgICAgICAgICAgICAgYCwgXCJ0c3FkLXF1ZXJ5LWRldGFpbHMtYWN0aW9ucy1idG5cIiwgXCJ0c3FkLXF1ZXJ5LWRldGFpbHMtYWN0aW9uLXJlZmV0Y2hcIiksIF92JDQ2ID0gc3RhdHVzTGFiZWwoKSA9PT0gXCJmZXRjaGluZ1wiLCBfdiQ0NyA9IHVgXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0Mihjb2xvcnMuYmx1ZVs2MDBdLCBjb2xvcnMuYmx1ZVs0MDBdKX07XG4gICAgICAgICAgICAgIGAsIF92JDQ4ID0gY2xzeCh1YFxuICAgICAgICAgICAgICAgIGNvbG9yOiAke3QyKGNvbG9ycy55ZWxsb3dbNjAwXSwgY29sb3JzLnllbGxvd1s0MDBdKX07XG4gICAgICAgICAgICAgIGAsIFwidHNxZC1xdWVyeS1kZXRhaWxzLWFjdGlvbnMtYnRuXCIsIFwidHNxZC1xdWVyeS1kZXRhaWxzLWFjdGlvbi1pbnZhbGlkYXRlXCIpLCBfdiQ0OSA9IHF1ZXJ5U3RhdHVzKCkgPT09IFwicGVuZGluZ1wiLCBfdiQ1MCA9IHVgXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0Mihjb2xvcnMueWVsbG93WzYwMF0sIGNvbG9ycy55ZWxsb3dbNDAwXSl9O1xuICAgICAgICAgICAgICBgLCBfdiQ1MSA9IGNsc3godWBcbiAgICAgICAgICAgICAgICBjb2xvcjogJHt0Mihjb2xvcnMuZ3JheVs2MDBdLCBjb2xvcnMuZ3JheVszMDBdKX07XG4gICAgICAgICAgICAgIGAsIFwidHNxZC1xdWVyeS1kZXRhaWxzLWFjdGlvbnMtYnRuXCIsIFwidHNxZC1xdWVyeS1kZXRhaWxzLWFjdGlvbi1yZXNldFwiKSwgX3YkNTIgPSBxdWVyeVN0YXR1cygpID09PSBcInBlbmRpbmdcIiwgX3YkNTMgPSB1YFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dDIoY29sb3JzLmdyYXlbNjAwXSwgY29sb3JzLmdyYXlbNDAwXSl9O1xuICAgICAgICAgICAgICBgLCBfdiQ1NCA9IGNsc3godWBcbiAgICAgICAgICAgICAgICBjb2xvcjogJHt0Mihjb2xvcnMucGlua1s1MDBdLCBjb2xvcnMucGlua1s0MDBdKX07XG4gICAgICAgICAgICAgIGAsIFwidHNxZC1xdWVyeS1kZXRhaWxzLWFjdGlvbnMtYnRuXCIsIFwidHNxZC1xdWVyeS1kZXRhaWxzLWFjdGlvbi1yZW1vdmVcIiksIF92JDU1ID0gc3RhdHVzTGFiZWwoKSA9PT0gXCJmZXRjaGluZ1wiLCBfdiQ1NiA9IHVgXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0Mihjb2xvcnMucGlua1s1MDBdLCBjb2xvcnMucGlua1s0MDBdKX07XG4gICAgICAgICAgICAgIGAsIF92JDU3ID0gY2xzeCh1YFxuICAgICAgICAgICAgICAgIGNvbG9yOiAke3QyKGNvbG9ycy5jeWFuWzUwMF0sIGNvbG9ycy5jeWFuWzQwMF0pfTtcbiAgICAgICAgICAgICAgYCwgXCJ0c3FkLXF1ZXJ5LWRldGFpbHMtYWN0aW9ucy1idG5cIiwgXCJ0c3FkLXF1ZXJ5LWRldGFpbHMtYWN0aW9uLWxvYWRpbmdcIiksIF92JDU4ID0gcmVzdG9yaW5nTG9hZGluZygpLCBfdiQ1OSA9IHVgXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0Mihjb2xvcnMuY3lhbls1MDBdLCBjb2xvcnMuY3lhbls0MDBdKX07XG4gICAgICAgICAgICAgIGAsIF92JDYwID0gY2xzeChzdHlsZXMoKS5kZXRhaWxzSGVhZGVyLCBcInRzcWQtcXVlcnktZGV0YWlscy1oZWFkZXJcIiksIF92JDYxID0gdG9rZW5zLnNpemVbMl0sIF92JDYyID0gY2xzeChzdHlsZXMoKS5kZXRhaWxzSGVhZGVyLCBcInRzcWQtcXVlcnktZGV0YWlscy1oZWFkZXJcIiksIF92JDYzID0gdG9rZW5zLnNpemVbMl07XG4gICAgICAgIF92JDM5ICE9PSBfcCQuX3YkMzkgJiYgY2xhc3NOYW1lKF9lbCQ2MCwgX3AkLl92JDM5ID0gX3YkMzkpO1xuICAgICAgICBfdiQ0MCAhPT0gX3AkLl92JDQwICYmIGNsYXNzTmFtZShfZWwkNjEsIF9wJC5fdiQ0MCA9IF92JDQwKTtcbiAgICAgICAgX3YkNDEgIT09IF9wJC5fdiQ0MSAmJiBjbGFzc05hbWUoX2VsJDYyLCBfcCQuX3YkNDEgPSBfdiQ0MSk7XG4gICAgICAgIF92JDQyICE9PSBfcCQuX3YkNDIgJiYgY2xhc3NOYW1lKF9lbCQ2NiwgX3AkLl92JDQyID0gX3YkNDIpO1xuICAgICAgICBfdiQ0MyAhPT0gX3AkLl92JDQzICYmIGNsYXNzTmFtZShfZWwkNzMsIF9wJC5fdiQ0MyA9IF92JDQzKTtcbiAgICAgICAgX3YkNDQgIT09IF9wJC5fdiQ0NCAmJiBjbGFzc05hbWUoX2VsJDc0LCBfcCQuX3YkNDQgPSBfdiQ0NCk7XG4gICAgICAgIF92JDQ1ICE9PSBfcCQuX3YkNDUgJiYgY2xhc3NOYW1lKF9lbCQ3NSwgX3AkLl92JDQ1ID0gX3YkNDUpO1xuICAgICAgICBfdiQ0NiAhPT0gX3AkLl92JDQ2ICYmIChfZWwkNzUuZGlzYWJsZWQgPSBfcCQuX3YkNDYgPSBfdiQ0Nik7XG4gICAgICAgIF92JDQ3ICE9PSBfcCQuX3YkNDcgJiYgY2xhc3NOYW1lKF9lbCQ3NiwgX3AkLl92JDQ3ID0gX3YkNDcpO1xuICAgICAgICBfdiQ0OCAhPT0gX3AkLl92JDQ4ICYmIGNsYXNzTmFtZShfZWwkNzcsIF9wJC5fdiQ0OCA9IF92JDQ4KTtcbiAgICAgICAgX3YkNDkgIT09IF9wJC5fdiQ0OSAmJiAoX2VsJDc3LmRpc2FibGVkID0gX3AkLl92JDQ5ID0gX3YkNDkpO1xuICAgICAgICBfdiQ1MCAhPT0gX3AkLl92JDUwICYmIGNsYXNzTmFtZShfZWwkNzgsIF9wJC5fdiQ1MCA9IF92JDUwKTtcbiAgICAgICAgX3YkNTEgIT09IF9wJC5fdiQ1MSAmJiBjbGFzc05hbWUoX2VsJDc5LCBfcCQuX3YkNTEgPSBfdiQ1MSk7XG4gICAgICAgIF92JDUyICE9PSBfcCQuX3YkNTIgJiYgKF9lbCQ3OS5kaXNhYmxlZCA9IF9wJC5fdiQ1MiA9IF92JDUyKTtcbiAgICAgICAgX3YkNTMgIT09IF9wJC5fdiQ1MyAmJiBjbGFzc05hbWUoX2VsJDgwLCBfcCQuX3YkNTMgPSBfdiQ1Myk7XG4gICAgICAgIF92JDU0ICE9PSBfcCQuX3YkNTQgJiYgY2xhc3NOYW1lKF9lbCQ4MSwgX3AkLl92JDU0ID0gX3YkNTQpO1xuICAgICAgICBfdiQ1NSAhPT0gX3AkLl92JDU1ICYmIChfZWwkODEuZGlzYWJsZWQgPSBfcCQuX3YkNTUgPSBfdiQ1NSk7XG4gICAgICAgIF92JDU2ICE9PSBfcCQuX3YkNTYgJiYgY2xhc3NOYW1lKF9lbCQ4MiwgX3AkLl92JDU2ID0gX3YkNTYpO1xuICAgICAgICBfdiQ1NyAhPT0gX3AkLl92JDU3ICYmIGNsYXNzTmFtZShfZWwkODMsIF9wJC5fdiQ1NyA9IF92JDU3KTtcbiAgICAgICAgX3YkNTggIT09IF9wJC5fdiQ1OCAmJiAoX2VsJDgzLmRpc2FibGVkID0gX3AkLl92JDU4ID0gX3YkNTgpO1xuICAgICAgICBfdiQ1OSAhPT0gX3AkLl92JDU5ICYmIGNsYXNzTmFtZShfZWwkODQsIF9wJC5fdiQ1OSA9IF92JDU5KTtcbiAgICAgICAgX3YkNjAgIT09IF9wJC5fdiQ2MCAmJiBjbGFzc05hbWUoX2VsJDk0LCBfcCQuX3YkNjAgPSBfdiQ2MCk7XG4gICAgICAgIF92JDYxICE9PSBfcCQuX3YkNjEgJiYgKChfcCQuX3YkNjEgPSBfdiQ2MSkgIT0gbnVsbCA/IF9lbCQ5NS5zdHlsZS5zZXRQcm9wZXJ0eShcInBhZGRpbmdcIiwgX3YkNjEpIDogX2VsJDk1LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwicGFkZGluZ1wiKSk7XG4gICAgICAgIF92JDYyICE9PSBfcCQuX3YkNjIgJiYgY2xhc3NOYW1lKF9lbCQ5NiwgX3AkLl92JDYyID0gX3YkNjIpO1xuICAgICAgICBfdiQ2MyAhPT0gX3AkLl92JDYzICYmICgoX3AkLl92JDYzID0gX3YkNjMpICE9IG51bGwgPyBfZWwkOTcuc3R5bGUuc2V0UHJvcGVydHkoXCJwYWRkaW5nXCIsIF92JDYzKSA6IF9lbCQ5Ny5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcInBhZGRpbmdcIikpO1xuICAgICAgICByZXR1cm4gX3AkO1xuICAgICAgfSwge1xuICAgICAgICBfdiQzOTogdm9pZCAwLFxuICAgICAgICBfdiQ0MDogdm9pZCAwLFxuICAgICAgICBfdiQ0MTogdm9pZCAwLFxuICAgICAgICBfdiQ0Mjogdm9pZCAwLFxuICAgICAgICBfdiQ0Mzogdm9pZCAwLFxuICAgICAgICBfdiQ0NDogdm9pZCAwLFxuICAgICAgICBfdiQ0NTogdm9pZCAwLFxuICAgICAgICBfdiQ0Njogdm9pZCAwLFxuICAgICAgICBfdiQ0Nzogdm9pZCAwLFxuICAgICAgICBfdiQ0ODogdm9pZCAwLFxuICAgICAgICBfdiQ0OTogdm9pZCAwLFxuICAgICAgICBfdiQ1MDogdm9pZCAwLFxuICAgICAgICBfdiQ1MTogdm9pZCAwLFxuICAgICAgICBfdiQ1Mjogdm9pZCAwLFxuICAgICAgICBfdiQ1Mzogdm9pZCAwLFxuICAgICAgICBfdiQ1NDogdm9pZCAwLFxuICAgICAgICBfdiQ1NTogdm9pZCAwLFxuICAgICAgICBfdiQ1Njogdm9pZCAwLFxuICAgICAgICBfdiQ1Nzogdm9pZCAwLFxuICAgICAgICBfdiQ1ODogdm9pZCAwLFxuICAgICAgICBfdiQ1OTogdm9pZCAwLFxuICAgICAgICBfdiQ2MDogdm9pZCAwLFxuICAgICAgICBfdiQ2MTogdm9pZCAwLFxuICAgICAgICBfdiQ2Mjogdm9pZCAwLFxuICAgICAgICBfdiQ2Mzogdm9pZCAwXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBfZWwkNjA7XG4gICAgfVxuICB9KTtcbn07XG52YXIgTXV0YXRpb25EZXRhaWxzID0gKCkgPT4ge1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIGNvbnN0IHN0eWxlcyA9IGNyZWF0ZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB0aGVtZSgpID09PSBcImRhcmtcIiA/IGRhcmtTdHlsZXMyIDogbGlnaHRTdHlsZXMyO1xuICB9KTtcbiAgY29uc3Qge1xuICAgIGNvbG9yc1xuICB9ID0gdG9rZW5zO1xuICBjb25zdCB0MiA9IChsaWdodCwgZGFyaykgPT4gdGhlbWUoKSA9PT0gXCJkYXJrXCIgPyBkYXJrIDogbGlnaHQ7XG4gIGNvbnN0IGlzUGF1c2VkID0gY3JlYXRlU3Vic2NyaWJlVG9NdXRhdGlvbkNhY2hlQmF0Y2hlcigobXV0YXRpb25DYWNoZSkgPT4ge1xuICAgIGNvbnN0IG11dGF0aW9ucyA9IG11dGF0aW9uQ2FjaGUoKS5nZXRBbGwoKTtcbiAgICBjb25zdCBtdXRhdGlvbiA9IG11dGF0aW9ucy5maW5kKChtKSA9PiBtLm11dGF0aW9uSWQgPT09IHNlbGVjdGVkTXV0YXRpb25JZCgpKTtcbiAgICBpZiAoIW11dGF0aW9uKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBtdXRhdGlvbi5zdGF0ZS5pc1BhdXNlZDtcbiAgfSk7XG4gIGNvbnN0IHN0YXR1cyA9IGNyZWF0ZVN1YnNjcmliZVRvTXV0YXRpb25DYWNoZUJhdGNoZXIoKG11dGF0aW9uQ2FjaGUpID0+IHtcbiAgICBjb25zdCBtdXRhdGlvbnMgPSBtdXRhdGlvbkNhY2hlKCkuZ2V0QWxsKCk7XG4gICAgY29uc3QgbXV0YXRpb24gPSBtdXRhdGlvbnMuZmluZCgobSkgPT4gbS5tdXRhdGlvbklkID09PSBzZWxlY3RlZE11dGF0aW9uSWQoKSk7XG4gICAgaWYgKCFtdXRhdGlvbilcbiAgICAgIHJldHVybiBcImlkbGVcIjtcbiAgICByZXR1cm4gbXV0YXRpb24uc3RhdGUuc3RhdHVzO1xuICB9KTtcbiAgY29uc3QgY29sb3IgPSBjcmVhdGVNZW1vKCgpID0+IGdldE11dGF0aW9uU3RhdHVzQ29sb3Ioe1xuICAgIGlzUGF1c2VkOiBpc1BhdXNlZCgpLFxuICAgIHN0YXR1czogc3RhdHVzKClcbiAgfSkpO1xuICBjb25zdCBhY3RpdmVNdXRhdGlvbiA9IGNyZWF0ZVN1YnNjcmliZVRvTXV0YXRpb25DYWNoZUJhdGNoZXIoKG11dGF0aW9uQ2FjaGUpID0+IG11dGF0aW9uQ2FjaGUoKS5nZXRBbGwoKS5maW5kKChtdXRhdGlvbikgPT4gbXV0YXRpb24ubXV0YXRpb25JZCA9PT0gc2VsZWN0ZWRNdXRhdGlvbklkKCkpLCBmYWxzZSk7XG4gIGNvbnN0IGdldFF1ZXJ5U3RhdHVzQ29sb3JzID0gKCkgPT4ge1xuICAgIGlmIChjb2xvcigpID09PSBcImdyYXlcIikge1xuICAgICAgcmV0dXJuIHVgXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dDIoY29sb3JzW2NvbG9yKCldWzIwMF0sIGNvbG9yc1tjb2xvcigpXVs3MDBdKX07XG4gICAgICAgIGNvbG9yOiAke3QyKGNvbG9yc1tjb2xvcigpXVs3MDBdLCBjb2xvcnNbY29sb3IoKV1bMzAwXSl9O1xuICAgICAgICBib3JkZXItY29sb3I6ICR7dDIoY29sb3JzW2NvbG9yKCldWzQwMF0sIGNvbG9yc1tjb2xvcigpXVs2MDBdKX07XG4gICAgICBgO1xuICAgIH1cbiAgICByZXR1cm4gdWBcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dDIoY29sb3JzW2NvbG9yKCldWzEwMF0sIGNvbG9yc1tjb2xvcigpXVs5MDBdKX07XG4gICAgICBjb2xvcjogJHt0Mihjb2xvcnNbY29sb3IoKV1bNzAwXSwgY29sb3JzW2NvbG9yKCldWzMwMF0pfTtcbiAgICAgIGJvcmRlci1jb2xvcjogJHt0Mihjb2xvcnNbY29sb3IoKV1bNDAwXSwgY29sb3JzW2NvbG9yKCldWzYwMF0pfTtcbiAgICBgO1xuICB9O1xuICByZXR1cm4gY3JlYXRlQ29tcG9uZW50KFNob3csIHtcbiAgICBnZXQgd2hlbigpIHtcbiAgICAgIHJldHVybiBhY3RpdmVNdXRhdGlvbigpO1xuICAgIH0sXG4gICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgY29uc3QgX2VsJDk5ID0gX3RtcGwkMzAoKSwgX2VsJDEwMCA9IF9lbCQ5OS5maXJzdENoaWxkLCBfZWwkMTAxID0gX2VsJDEwMC5uZXh0U2libGluZywgX2VsJDEwMiA9IF9lbCQxMDEuZmlyc3RDaGlsZCwgX2VsJDEwMyA9IF9lbCQxMDIuZmlyc3RDaGlsZCwgX2VsJDEwNCA9IF9lbCQxMDMuZmlyc3RDaGlsZCwgX2VsJDEwNSA9IF9lbCQxMDMubmV4dFNpYmxpbmcsIF9lbCQxMDYgPSBfZWwkMTAyLm5leHRTaWJsaW5nLCBfZWwkMTA3ID0gX2VsJDEwNi5maXJzdENoaWxkLCBfZWwkMTA4ID0gX2VsJDEwNy5uZXh0U2libGluZywgX2VsJDEwOSA9IF9lbCQxMDEubmV4dFNpYmxpbmcsIF9lbCQxMTAgPSBfZWwkMTA5Lm5leHRTaWJsaW5nLCBfZWwkMTExID0gX2VsJDExMC5uZXh0U2libGluZywgX2VsJDExMiA9IF9lbCQxMTEubmV4dFNpYmxpbmcsIF9lbCQxMTMgPSBfZWwkMTEyLm5leHRTaWJsaW5nLCBfZWwkMTE0ID0gX2VsJDExMy5uZXh0U2libGluZywgX2VsJDExNSA9IF9lbCQxMTQubmV4dFNpYmxpbmcsIF9lbCQxMTYgPSBfZWwkMTE1Lm5leHRTaWJsaW5nO1xuICAgICAgaW5zZXJ0KF9lbCQxMDQsIGNyZWF0ZUNvbXBvbmVudChTaG93LCB7XG4gICAgICAgIGdldCB3aGVuKCkge1xuICAgICAgICAgIHJldHVybiBhY3RpdmVNdXRhdGlvbigpLm9wdGlvbnMubXV0YXRpb25LZXk7XG4gICAgICAgIH0sXG4gICAgICAgIGZhbGxiYWNrOiBcIk5vIG11dGF0aW9uS2V5IGZvdW5kXCIsXG4gICAgICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgICAgICByZXR1cm4gZGlzcGxheVZhbHVlKGFjdGl2ZU11dGF0aW9uKCkub3B0aW9ucy5tdXRhdGlvbktleSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICAgIGluc2VydChfZWwkMTA1LCBjcmVhdGVDb21wb25lbnQoU2hvdywge1xuICAgICAgICBnZXQgd2hlbigpIHtcbiAgICAgICAgICByZXR1cm4gY29sb3IoKSA9PT0gXCJwdXJwbGVcIjtcbiAgICAgICAgfSxcbiAgICAgICAgY2hpbGRyZW46IFwicGVuZGluZ1wiXG4gICAgICB9KSwgbnVsbCk7XG4gICAgICBpbnNlcnQoX2VsJDEwNSwgY3JlYXRlQ29tcG9uZW50KFNob3csIHtcbiAgICAgICAgZ2V0IHdoZW4oKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbG9yKCkgIT09IFwicHVycGxlXCI7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdHVzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pLCBudWxsKTtcbiAgICAgIGluc2VydChfZWwkMTA4LCAoKSA9PiBuZXcgRGF0ZShhY3RpdmVNdXRhdGlvbigpLnN0YXRlLnN1Ym1pdHRlZEF0KS50b0xvY2FsZVRpbWVTdHJpbmcoKSk7XG4gICAgICBpbnNlcnQoX2VsJDExMCwgY3JlYXRlQ29tcG9uZW50KEV4cGxvcmVyLCB7XG4gICAgICAgIGxhYmVsOiBcIlZhcmlhYmxlc1wiLFxuICAgICAgICBkZWZhdWx0RXhwYW5kZWQ6IFtcIlZhcmlhYmxlc1wiXSxcbiAgICAgICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICAgIHJldHVybiBhY3RpdmVNdXRhdGlvbigpLnN0YXRlLnZhcmlhYmxlcztcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgICAgaW5zZXJ0KF9lbCQxMTIsIGNyZWF0ZUNvbXBvbmVudChFeHBsb3Jlciwge1xuICAgICAgICBsYWJlbDogXCJDb250ZXh0XCIsXG4gICAgICAgIGRlZmF1bHRFeHBhbmRlZDogW1wiQ29udGV4dFwiXSxcbiAgICAgICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICAgIHJldHVybiBhY3RpdmVNdXRhdGlvbigpLnN0YXRlLmNvbnRleHQ7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICAgIGluc2VydChfZWwkMTE0LCBjcmVhdGVDb21wb25lbnQoRXhwbG9yZXIsIHtcbiAgICAgICAgbGFiZWw6IFwiRGF0YVwiLFxuICAgICAgICBkZWZhdWx0RXhwYW5kZWQ6IFtcIkRhdGFcIl0sXG4gICAgICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aXZlTXV0YXRpb24oKS5zdGF0ZS5kYXRhO1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgICBpbnNlcnQoX2VsJDExNiwgY3JlYXRlQ29tcG9uZW50KEV4cGxvcmVyLCB7XG4gICAgICAgIGxhYmVsOiBcIk11dGF0aW9uXCIsXG4gICAgICAgIGRlZmF1bHRFeHBhbmRlZDogW1wiTXV0YXRpb25cIl0sXG4gICAgICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aXZlTXV0YXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgICAgY3JlYXRlUmVuZGVyRWZmZWN0KChfcCQpID0+IHtcbiAgICAgICAgY29uc3QgX3YkNjQgPSBjbHN4KHN0eWxlcygpLmRldGFpbHNDb250YWluZXIsIFwidHNxZC1xdWVyeS1kZXRhaWxzLWNvbnRhaW5lclwiKSwgX3YkNjUgPSBjbHN4KHN0eWxlcygpLmRldGFpbHNIZWFkZXIsIFwidHNxZC1xdWVyeS1kZXRhaWxzLWhlYWRlclwiKSwgX3YkNjYgPSBjbHN4KHN0eWxlcygpLmRldGFpbHNCb2R5LCBcInRzcWQtcXVlcnktZGV0YWlscy1zdW1tYXJ5LWNvbnRhaW5lclwiKSwgX3YkNjcgPSBjbHN4KHN0eWxlcygpLnF1ZXJ5RGV0YWlsc1N0YXR1cywgZ2V0UXVlcnlTdGF0dXNDb2xvcnMoKSksIF92JDY4ID0gY2xzeChzdHlsZXMoKS5kZXRhaWxzSGVhZGVyLCBcInRzcWQtcXVlcnktZGV0YWlscy1oZWFkZXJcIiksIF92JDY5ID0gdG9rZW5zLnNpemVbMl0sIF92JDcwID0gY2xzeChzdHlsZXMoKS5kZXRhaWxzSGVhZGVyLCBcInRzcWQtcXVlcnktZGV0YWlscy1oZWFkZXJcIiksIF92JDcxID0gdG9rZW5zLnNpemVbMl0sIF92JDcyID0gY2xzeChzdHlsZXMoKS5kZXRhaWxzSGVhZGVyLCBcInRzcWQtcXVlcnktZGV0YWlscy1oZWFkZXJcIiksIF92JDczID0gdG9rZW5zLnNpemVbMl0sIF92JDc0ID0gY2xzeChzdHlsZXMoKS5kZXRhaWxzSGVhZGVyLCBcInRzcWQtcXVlcnktZGV0YWlscy1oZWFkZXJcIiksIF92JDc1ID0gdG9rZW5zLnNpemVbMl07XG4gICAgICAgIF92JDY0ICE9PSBfcCQuX3YkNjQgJiYgY2xhc3NOYW1lKF9lbCQ5OSwgX3AkLl92JDY0ID0gX3YkNjQpO1xuICAgICAgICBfdiQ2NSAhPT0gX3AkLl92JDY1ICYmIGNsYXNzTmFtZShfZWwkMTAwLCBfcCQuX3YkNjUgPSBfdiQ2NSk7XG4gICAgICAgIF92JDY2ICE9PSBfcCQuX3YkNjYgJiYgY2xhc3NOYW1lKF9lbCQxMDEsIF9wJC5fdiQ2NiA9IF92JDY2KTtcbiAgICAgICAgX3YkNjcgIT09IF9wJC5fdiQ2NyAmJiBjbGFzc05hbWUoX2VsJDEwNSwgX3AkLl92JDY3ID0gX3YkNjcpO1xuICAgICAgICBfdiQ2OCAhPT0gX3AkLl92JDY4ICYmIGNsYXNzTmFtZShfZWwkMTA5LCBfcCQuX3YkNjggPSBfdiQ2OCk7XG4gICAgICAgIF92JDY5ICE9PSBfcCQuX3YkNjkgJiYgKChfcCQuX3YkNjkgPSBfdiQ2OSkgIT0gbnVsbCA/IF9lbCQxMTAuc3R5bGUuc2V0UHJvcGVydHkoXCJwYWRkaW5nXCIsIF92JDY5KSA6IF9lbCQxMTAuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJwYWRkaW5nXCIpKTtcbiAgICAgICAgX3YkNzAgIT09IF9wJC5fdiQ3MCAmJiBjbGFzc05hbWUoX2VsJDExMSwgX3AkLl92JDcwID0gX3YkNzApO1xuICAgICAgICBfdiQ3MSAhPT0gX3AkLl92JDcxICYmICgoX3AkLl92JDcxID0gX3YkNzEpICE9IG51bGwgPyBfZWwkMTEyLnN0eWxlLnNldFByb3BlcnR5KFwicGFkZGluZ1wiLCBfdiQ3MSkgOiBfZWwkMTEyLnN0eWxlLnJlbW92ZVByb3BlcnR5KFwicGFkZGluZ1wiKSk7XG4gICAgICAgIF92JDcyICE9PSBfcCQuX3YkNzIgJiYgY2xhc3NOYW1lKF9lbCQxMTMsIF9wJC5fdiQ3MiA9IF92JDcyKTtcbiAgICAgICAgX3YkNzMgIT09IF9wJC5fdiQ3MyAmJiAoKF9wJC5fdiQ3MyA9IF92JDczKSAhPSBudWxsID8gX2VsJDExNC5zdHlsZS5zZXRQcm9wZXJ0eShcInBhZGRpbmdcIiwgX3YkNzMpIDogX2VsJDExNC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcInBhZGRpbmdcIikpO1xuICAgICAgICBfdiQ3NCAhPT0gX3AkLl92JDc0ICYmIGNsYXNzTmFtZShfZWwkMTE1LCBfcCQuX3YkNzQgPSBfdiQ3NCk7XG4gICAgICAgIF92JDc1ICE9PSBfcCQuX3YkNzUgJiYgKChfcCQuX3YkNzUgPSBfdiQ3NSkgIT0gbnVsbCA/IF9lbCQxMTYuc3R5bGUuc2V0UHJvcGVydHkoXCJwYWRkaW5nXCIsIF92JDc1KSA6IF9lbCQxMTYuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJwYWRkaW5nXCIpKTtcbiAgICAgICAgcmV0dXJuIF9wJDtcbiAgICAgIH0sIHtcbiAgICAgICAgX3YkNjQ6IHZvaWQgMCxcbiAgICAgICAgX3YkNjU6IHZvaWQgMCxcbiAgICAgICAgX3YkNjY6IHZvaWQgMCxcbiAgICAgICAgX3YkNjc6IHZvaWQgMCxcbiAgICAgICAgX3YkNjg6IHZvaWQgMCxcbiAgICAgICAgX3YkNjk6IHZvaWQgMCxcbiAgICAgICAgX3YkNzA6IHZvaWQgMCxcbiAgICAgICAgX3YkNzE6IHZvaWQgMCxcbiAgICAgICAgX3YkNzI6IHZvaWQgMCxcbiAgICAgICAgX3YkNzM6IHZvaWQgMCxcbiAgICAgICAgX3YkNzQ6IHZvaWQgMCxcbiAgICAgICAgX3YkNzU6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gX2VsJDk5O1xuICAgIH1cbiAgfSk7XG59O1xudmFyIHF1ZXJ5Q2FjaGVNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xudmFyIHNldHVwUXVlcnlDYWNoZVN1YnNjcmlwdGlvbiA9ICgpID0+IHtcbiAgY29uc3QgcXVlcnlDYWNoZSA9IGNyZWF0ZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IGNsaWVudCA9IHVzZVF1ZXJ5RGV2dG9vbHNDb250ZXh0KCkuY2xpZW50O1xuICAgIHJldHVybiBjbGllbnQuZ2V0UXVlcnlDYWNoZSgpO1xuICB9KTtcbiAgY29uc3QgdW5zdWIgPSBxdWVyeUNhY2hlKCkuc3Vic2NyaWJlKChxKSA9PiB7XG4gICAgYmF0Y2goKCkgPT4ge1xuICAgICAgZm9yIChjb25zdCBbY2FsbGJhY2ssIHZhbHVlXSBvZiBxdWVyeUNhY2hlTWFwLmVudHJpZXMoKSkge1xuICAgICAgICBpZiAoIXZhbHVlLnNob3VsZFVwZGF0ZShxKSlcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgdmFsdWUuc2V0dGVyKGNhbGxiYWNrKHF1ZXJ5Q2FjaGUpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIG9uQ2xlYW51cCgoKSA9PiB7XG4gICAgcXVlcnlDYWNoZU1hcC5jbGVhcigpO1xuICAgIHVuc3ViKCk7XG4gIH0pO1xuICByZXR1cm4gdW5zdWI7XG59O1xudmFyIGNyZWF0ZVN1YnNjcmliZVRvUXVlcnlDYWNoZUJhdGNoZXIgPSAoY2FsbGJhY2ssIGVxdWFsaXR5Q2hlY2sgPSB0cnVlLCBzaG91bGRVcGRhdGUgPSAoKSA9PiB0cnVlKSA9PiB7XG4gIGNvbnN0IHF1ZXJ5Q2FjaGUgPSBjcmVhdGVNZW1vKCgpID0+IHtcbiAgICBjb25zdCBjbGllbnQgPSB1c2VRdWVyeURldnRvb2xzQ29udGV4dCgpLmNsaWVudDtcbiAgICByZXR1cm4gY2xpZW50LmdldFF1ZXJ5Q2FjaGUoKTtcbiAgfSk7XG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gY3JlYXRlU2lnbmFsKGNhbGxiYWNrKHF1ZXJ5Q2FjaGUpLCAhZXF1YWxpdHlDaGVjayA/IHtcbiAgICBlcXVhbHM6IGZhbHNlXG4gIH0gOiB2b2lkIDApO1xuICBjcmVhdGVFZmZlY3QoKCkgPT4ge1xuICAgIHNldFZhbHVlKGNhbGxiYWNrKHF1ZXJ5Q2FjaGUpKTtcbiAgfSk7XG4gIHF1ZXJ5Q2FjaGVNYXAuc2V0KGNhbGxiYWNrLCB7XG4gICAgc2V0dGVyOiBzZXRWYWx1ZSxcbiAgICBzaG91bGRVcGRhdGVcbiAgfSk7XG4gIG9uQ2xlYW51cCgoKSA9PiB7XG4gICAgcXVlcnlDYWNoZU1hcC5kZWxldGUoY2FsbGJhY2spO1xuICB9KTtcbiAgcmV0dXJuIHZhbHVlO1xufTtcbnZhciBtdXRhdGlvbkNhY2hlTWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbnZhciBzZXR1cE11dGF0aW9uQ2FjaGVTdWJzY3JpcHRpb24gPSAoKSA9PiB7XG4gIGNvbnN0IG11dGF0aW9uQ2FjaGUgPSBjcmVhdGVNZW1vKCgpID0+IHtcbiAgICBjb25zdCBjbGllbnQgPSB1c2VRdWVyeURldnRvb2xzQ29udGV4dCgpLmNsaWVudDtcbiAgICByZXR1cm4gY2xpZW50LmdldE11dGF0aW9uQ2FjaGUoKTtcbiAgfSk7XG4gIGNvbnN0IHVuc3ViID0gbXV0YXRpb25DYWNoZSgpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgZm9yIChjb25zdCBbY2FsbGJhY2ssIHNldHRlcl0gb2YgbXV0YXRpb25DYWNoZU1hcC5lbnRyaWVzKCkpIHtcbiAgICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICAgICAgc2V0dGVyKGNhbGxiYWNrKG11dGF0aW9uQ2FjaGUpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIG9uQ2xlYW51cCgoKSA9PiB7XG4gICAgbXV0YXRpb25DYWNoZU1hcC5jbGVhcigpO1xuICAgIHVuc3ViKCk7XG4gIH0pO1xuICByZXR1cm4gdW5zdWI7XG59O1xudmFyIGNyZWF0ZVN1YnNjcmliZVRvTXV0YXRpb25DYWNoZUJhdGNoZXIgPSAoY2FsbGJhY2ssIGVxdWFsaXR5Q2hlY2sgPSB0cnVlKSA9PiB7XG4gIGNvbnN0IG11dGF0aW9uQ2FjaGUgPSBjcmVhdGVNZW1vKCgpID0+IHtcbiAgICBjb25zdCBjbGllbnQgPSB1c2VRdWVyeURldnRvb2xzQ29udGV4dCgpLmNsaWVudDtcbiAgICByZXR1cm4gY2xpZW50LmdldE11dGF0aW9uQ2FjaGUoKTtcbiAgfSk7XG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gY3JlYXRlU2lnbmFsKGNhbGxiYWNrKG11dGF0aW9uQ2FjaGUpLCAhZXF1YWxpdHlDaGVjayA/IHtcbiAgICBlcXVhbHM6IGZhbHNlXG4gIH0gOiB2b2lkIDApO1xuICBjcmVhdGVFZmZlY3QoKCkgPT4ge1xuICAgIHNldFZhbHVlKGNhbGxiYWNrKG11dGF0aW9uQ2FjaGUpKTtcbiAgfSk7XG4gIG11dGF0aW9uQ2FjaGVNYXAuc2V0KGNhbGxiYWNrLCBzZXRWYWx1ZSk7XG4gIG9uQ2xlYW51cCgoKSA9PiB7XG4gICAgbXV0YXRpb25DYWNoZU1hcC5kZWxldGUoY2FsbGJhY2spO1xuICB9KTtcbiAgcmV0dXJuIHZhbHVlO1xufTtcbnZhciBzdHlsZXNGYWN0b3J5MiA9ICh0aGVtZSkgPT4ge1xuICBjb25zdCB7XG4gICAgY29sb3JzLFxuICAgIGZvbnQsXG4gICAgc2l6ZTogc2l6ZTIsXG4gICAgYWxwaGEsXG4gICAgc2hhZG93LFxuICAgIGJvcmRlclxuICB9ID0gdG9rZW5zO1xuICBjb25zdCB0MiA9IChsaWdodCwgZGFyaykgPT4gdGhlbWUgPT09IFwibGlnaHRcIiA/IGxpZ2h0IDogZGFyaztcbiAgcmV0dXJuIHtcbiAgICBkZXZ0b29sc0J0bjogdWBcbiAgICAgIHotaW5kZXg6IDEwMDAwMDtcbiAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgIHBhZGRpbmc6IDRweDtcbiAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG5cbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBib3JkZXItcmFkaXVzOiA5OTk5cHg7XG4gICAgICBib3gtc2hhZG93OiAke3NoYWRvdy5tZCgpfTtcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XG5cbiAgICAgICYgZGl2IHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IC04cHg7XG4gICAgICAgIGxlZnQ6IC04cHg7XG4gICAgICAgIHJpZ2h0OiAtOHB4O1xuICAgICAgICBib3R0b206IC04cHg7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDk5OTlweDtcblxuICAgICAgICAmIHN2ZyB7XG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgfVxuICAgICAgICBmaWx0ZXI6IGJsdXIoNnB4KSBzYXR1cmF0ZSgxLjIpIGNvbnRyYXN0KDEuMSk7XG4gICAgICB9XG5cbiAgICAgICY6Zm9jdXMtd2l0aGluIHtcbiAgICAgICAgb3V0bGluZS1vZmZzZXQ6IDJweDtcbiAgICAgICAgb3V0bGluZTogM3B4IHNvbGlkICR7Y29sb3JzLmdyZWVuWzYwMF19O1xuICAgICAgfVxuXG4gICAgICAmIGJ1dHRvbiB7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgei1pbmRleDogMTtcbiAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogOTk5OXB4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICBoZWlnaHQ6IDQwcHg7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIHdpZHRoOiA0MHB4O1xuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgICYgc3ZnIHtcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgYCxcbiAgICBwYW5lbDogdWBcbiAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgIHotaW5kZXg6IDk5OTk7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZ2FwOiAke3Rva2Vucy5zaXplWzAuNV19O1xuICAgICAgJiAqIHtcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG4gICAgICB9XG5cbiAgICAgICYgKjo6LXdlYmtpdC1zY3JvbGxiYXIge1xuICAgICAgICB3aWR0aDogN3B4O1xuICAgICAgfVxuXG4gICAgICAmICo6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHtcbiAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgICYgKjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xuICAgICAgICBiYWNrZ3JvdW5kOiAke3QyKGNvbG9ycy5ncmF5WzMwMF0sIGNvbG9ycy5kYXJrR3JheVsyMDBdKX07XG4gICAgICB9XG5cbiAgICAgICYgKjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWI6aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kOiAke3QyKGNvbG9ycy5ncmF5WzQwMF0sIGNvbG9ycy5kYXJrR3JheVszMDBdKX07XG4gICAgICB9XG4gICAgYCxcbiAgICBcImRldnRvb2xzQnRuLXBvc2l0aW9uLWJvdHRvbS1yaWdodFwiOiB1YFxuICAgICAgYm90dG9tOiAxMnB4O1xuICAgICAgcmlnaHQ6IDEycHg7XG4gICAgYCxcbiAgICBcImRldnRvb2xzQnRuLXBvc2l0aW9uLWJvdHRvbS1sZWZ0XCI6IHVgXG4gICAgICBib3R0b206IDEycHg7XG4gICAgICBsZWZ0OiAxMnB4O1xuICAgIGAsXG4gICAgXCJkZXZ0b29sc0J0bi1wb3NpdGlvbi10b3AtbGVmdFwiOiB1YFxuICAgICAgdG9wOiAxMnB4O1xuICAgICAgbGVmdDogMTJweDtcbiAgICBgLFxuICAgIFwiZGV2dG9vbHNCdG4tcG9zaXRpb24tdG9wLXJpZ2h0XCI6IHVgXG4gICAgICB0b3A6IDEycHg7XG4gICAgICByaWdodDogMTJweDtcbiAgICBgLFxuICAgIFwicGFuZWwtcG9zaXRpb24tdG9wXCI6IHVgXG4gICAgICB0b3A6IDA7XG4gICAgICByaWdodDogMDtcbiAgICAgIGxlZnQ6IDA7XG4gICAgICBtYXgtaGVpZ2h0OiA5MCU7XG4gICAgICBtaW4taGVpZ2h0OiAke3NpemUyWzE0XX07XG4gICAgICBib3JkZXItYm90dG9tOiAke3QyKGNvbG9ycy5ncmF5WzQwMF0sIGNvbG9ycy5kYXJrR3JheVszMDBdKX0gMXB4IHNvbGlkO1xuICAgIGAsXG4gICAgXCJwYW5lbC1wb3NpdGlvbi1ib3R0b21cIjogdWBcbiAgICAgIGJvdHRvbTogMDtcbiAgICAgIHJpZ2h0OiAwO1xuICAgICAgbGVmdDogMDtcbiAgICAgIG1heC1oZWlnaHQ6IDkwJTtcbiAgICAgIG1pbi1oZWlnaHQ6ICR7c2l6ZTJbMTRdfTtcbiAgICAgIGJvcmRlci10b3A6ICR7dDIoY29sb3JzLmdyYXlbNDAwXSwgY29sb3JzLmRhcmtHcmF5WzMwMF0pfSAxcHggc29saWQ7XG4gICAgYCxcbiAgICBcInBhbmVsLXBvc2l0aW9uLXJpZ2h0XCI6IHVgXG4gICAgICBib3R0b206IDA7XG4gICAgICByaWdodDogMDtcbiAgICAgIHRvcDogMDtcbiAgICAgIGJvcmRlci1sZWZ0OiAke3QyKGNvbG9ycy5ncmF5WzQwMF0sIGNvbG9ycy5kYXJrR3JheVszMDBdKX0gMXB4IHNvbGlkO1xuICAgICAgbWF4LXdpZHRoOiA5MCU7XG4gICAgYCxcbiAgICBcInBhbmVsLXBvc2l0aW9uLWxlZnRcIjogdWBcbiAgICAgIGJvdHRvbTogMDtcbiAgICAgIGxlZnQ6IDA7XG4gICAgICB0b3A6IDA7XG4gICAgICBib3JkZXItcmlnaHQ6ICR7dDIoY29sb3JzLmdyYXlbNDAwXSwgY29sb3JzLmRhcmtHcmF5WzMwMF0pfSAxcHggc29saWQ7XG4gICAgICBtYXgtd2lkdGg6IDkwJTtcbiAgICBgLFxuICAgIGNsb3NlQnRuOiB1YFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgei1pbmRleDogNTtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0Mihjb2xvcnMuZ3JheVs1MF0sIGNvbG9ycy5kYXJrR3JheVs3MDBdKX07XG4gICAgICAmOmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0Mihjb2xvcnMuZ3JheVsyMDBdLCBjb2xvcnMuZGFya0dyYXlbNTAwXSl9O1xuICAgICAgfVxuICAgICAgJjpmb2N1cy12aXNpYmxlIHtcbiAgICAgICAgb3V0bGluZTogMnB4IHNvbGlkICR7Y29sb3JzLmJsdWVbNjAwXX07XG4gICAgICB9XG4gICAgICAmIHN2ZyB7XG4gICAgICAgIGNvbG9yOiAke3QyKGNvbG9ycy5ncmF5WzYwMF0sIGNvbG9ycy5ncmF5WzQwMF0pfTtcbiAgICAgICAgd2lkdGg6ICR7c2l6ZTJbMl19O1xuICAgICAgICBoZWlnaHQ6ICR7c2l6ZTJbMl19O1xuICAgICAgfVxuICAgIGAsXG4gICAgXCJjbG9zZUJ0bi1wb3NpdGlvbi10b3BcIjogdWBcbiAgICAgIGJvdHRvbTogMDtcbiAgICAgIHJpZ2h0OiAke3NpemUyWzJdfTtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIDEwMCUpO1xuICAgICAgYm9yZGVyLXJpZ2h0OiAke3QyKGNvbG9ycy5ncmF5WzQwMF0sIGNvbG9ycy5kYXJrR3JheVszMDBdKX0gMXB4IHNvbGlkO1xuICAgICAgYm9yZGVyLWxlZnQ6ICR7dDIoY29sb3JzLmdyYXlbNDAwXSwgY29sb3JzLmRhcmtHcmF5WzMwMF0pfSAxcHggc29saWQ7XG4gICAgICBib3JkZXItdG9wOiBub25lO1xuICAgICAgYm9yZGVyLWJvdHRvbTogJHt0Mihjb2xvcnMuZ3JheVs0MDBdLCBjb2xvcnMuZGFya0dyYXlbMzAwXSl9IDFweCBzb2xpZDtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDBweCAwcHggJHtib3JkZXIucmFkaXVzLnNtfSAke2JvcmRlci5yYWRpdXMuc219O1xuICAgICAgcGFkZGluZzogJHtzaXplMlswLjVdfSAke3NpemUyWzEuNV19ICR7c2l6ZTJbMV19ICR7c2l6ZTJbMS41XX07XG5cbiAgICAgICY6OmFmdGVyIHtcbiAgICAgICAgY29udGVudDogJyAnO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGJvdHRvbTogMTAwJTtcbiAgICAgICAgbGVmdDogLSR7c2l6ZTJbMi41XX07XG4gICAgICAgIGhlaWdodDogJHtzaXplMlsxLjVdfTtcbiAgICAgICAgd2lkdGg6IGNhbGMoMTAwJSArICR7c2l6ZTJbNV19KTtcbiAgICAgIH1cblxuICAgICAgJiBzdmcge1xuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpO1xuICAgICAgfVxuICAgIGAsXG4gICAgXCJjbG9zZUJ0bi1wb3NpdGlvbi1ib3R0b21cIjogdWBcbiAgICAgIHRvcDogMDtcbiAgICAgIHJpZ2h0OiAke3NpemUyWzJdfTtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIC0xMDAlKTtcbiAgICAgIGJvcmRlci1yaWdodDogJHt0Mihjb2xvcnMuZ3JheVs0MDBdLCBjb2xvcnMuZGFya0dyYXlbMzAwXSl9IDFweCBzb2xpZDtcbiAgICAgIGJvcmRlci1sZWZ0OiAke3QyKGNvbG9ycy5ncmF5WzQwMF0sIGNvbG9ycy5kYXJrR3JheVszMDBdKX0gMXB4IHNvbGlkO1xuICAgICAgYm9yZGVyLXRvcDogJHt0Mihjb2xvcnMuZ3JheVs0MDBdLCBjb2xvcnMuZGFya0dyYXlbMzAwXSl9IDFweCBzb2xpZDtcbiAgICAgIGJvcmRlci1ib3R0b206IG5vbmU7XG4gICAgICBib3JkZXItcmFkaXVzOiAke2JvcmRlci5yYWRpdXMuc219ICR7Ym9yZGVyLnJhZGl1cy5zbX0gMHB4IDBweDtcbiAgICAgIHBhZGRpbmc6ICR7c2l6ZTJbMV19ICR7c2l6ZTJbMS41XX0gJHtzaXplMlswLjVdfSAke3NpemUyWzEuNV19O1xuXG4gICAgICAmOjphZnRlciB7XG4gICAgICAgIGNvbnRlbnQ6ICcgJztcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDEwMCU7XG4gICAgICAgIGxlZnQ6IC0ke3NpemUyWzIuNV19O1xuICAgICAgICBoZWlnaHQ6ICR7c2l6ZTJbMS41XX07XG4gICAgICAgIHdpZHRoOiBjYWxjKDEwMCUgKyAke3NpemUyWzVdfSk7XG4gICAgICB9XG4gICAgYCxcbiAgICBcImNsb3NlQnRuLXBvc2l0aW9uLXJpZ2h0XCI6IHVgXG4gICAgICBib3R0b206ICR7c2l6ZTJbMl19O1xuICAgICAgbGVmdDogMDtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC0xMDAlLCAwKTtcbiAgICAgIGJvcmRlci1yaWdodDogbm9uZTtcbiAgICAgIGJvcmRlci1sZWZ0OiAke3QyKGNvbG9ycy5ncmF5WzQwMF0sIGNvbG9ycy5kYXJrR3JheVszMDBdKX0gMXB4IHNvbGlkO1xuICAgICAgYm9yZGVyLXRvcDogJHt0Mihjb2xvcnMuZ3JheVs0MDBdLCBjb2xvcnMuZGFya0dyYXlbMzAwXSl9IDFweCBzb2xpZDtcbiAgICAgIGJvcmRlci1ib3R0b206ICR7dDIoY29sb3JzLmdyYXlbNDAwXSwgY29sb3JzLmRhcmtHcmF5WzMwMF0pfSAxcHggc29saWQ7XG4gICAgICBib3JkZXItcmFkaXVzOiAke2JvcmRlci5yYWRpdXMuc219IDBweCAwcHggJHtib3JkZXIucmFkaXVzLnNtfTtcbiAgICAgIHBhZGRpbmc6ICR7c2l6ZTJbMS41XX0gJHtzaXplMlswLjVdfSAke3NpemUyWzEuNV19ICR7c2l6ZTJbMV19O1xuXG4gICAgICAmOjphZnRlciB7XG4gICAgICAgIGNvbnRlbnQ6ICcgJztcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICBsZWZ0OiAxMDAlO1xuICAgICAgICBoZWlnaHQ6IGNhbGMoMTAwJSArICR7c2l6ZTJbNV19KTtcbiAgICAgICAgd2lkdGg6ICR7c2l6ZTJbMS41XX07XG4gICAgICB9XG5cbiAgICAgICYgc3ZnIHtcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoLTkwZGVnKTtcbiAgICAgIH1cbiAgICBgLFxuICAgIFwiY2xvc2VCdG4tcG9zaXRpb24tbGVmdFwiOiB1YFxuICAgICAgYm90dG9tOiAke3NpemUyWzJdfTtcbiAgICAgIHJpZ2h0OiAwO1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMTAwJSwgMCk7XG4gICAgICBib3JkZXItbGVmdDogbm9uZTtcbiAgICAgIGJvcmRlci1yaWdodDogJHt0Mihjb2xvcnMuZ3JheVs0MDBdLCBjb2xvcnMuZGFya0dyYXlbMzAwXSl9IDFweCBzb2xpZDtcbiAgICAgIGJvcmRlci10b3A6ICR7dDIoY29sb3JzLmdyYXlbNDAwXSwgY29sb3JzLmRhcmtHcmF5WzMwMF0pfSAxcHggc29saWQ7XG4gICAgICBib3JkZXItYm90dG9tOiAke3QyKGNvbG9ycy5ncmF5WzQwMF0sIGNvbG9ycy5kYXJrR3JheVszMDBdKX0gMXB4IHNvbGlkO1xuICAgICAgYm9yZGVyLXJhZGl1czogMHB4ICR7Ym9yZGVyLnJhZGl1cy5zbX0gJHtib3JkZXIucmFkaXVzLnNtfSAwcHg7XG4gICAgICBwYWRkaW5nOiAke3NpemUyWzEuNV19ICR7c2l6ZTJbMV19ICR7c2l6ZTJbMS41XX0gJHtzaXplMlswLjVdfTtcblxuICAgICAgJjo6YWZ0ZXIge1xuICAgICAgICBjb250ZW50OiAnICc7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgcmlnaHQ6IDEwMCU7XG4gICAgICAgIGhlaWdodDogY2FsYygxMDAlICsgJHtzaXplMls1XX0pO1xuICAgICAgICB3aWR0aDogJHtzaXplMlsxLjVdfTtcbiAgICAgIH1cblxuICAgICAgJiBzdmcge1xuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XG4gICAgICB9XG4gICAgYCxcbiAgICBxdWVyaWVzQ29udGFpbmVyOiB1YFxuICAgICAgZmxleDogMSAxIDcwMHB4O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0Mihjb2xvcnMuZ3JheVs1MF0sIGNvbG9ycy5kYXJrR3JheVs3MDBdKX07XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICYgKiB7XG4gICAgICAgIGZvbnQtZmFtaWx5OiAnSW50ZXInLCBzYW5zLXNlcmlmO1xuICAgICAgfVxuICAgIGAsXG4gICAgZHJhZ0hhbmRsZTogdWBcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4xMjVzIGVhc2U7XG4gICAgICAmOmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMucHVycGxlWzQwMF19JHt0MihcIlwiLCBhbHBoYVs5MF0pfTtcbiAgICAgIH1cbiAgICAgIHotaW5kZXg6IDQ7XG4gICAgYCxcbiAgICBcImRyYWdIYW5kbGUtcG9zaXRpb24tdG9wXCI6IHVgXG4gICAgICBib3R0b206IDA7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGhlaWdodDogM3B4O1xuICAgICAgY3Vyc29yOiBucy1yZXNpemU7XG4gICAgYCxcbiAgICBcImRyYWdIYW5kbGUtcG9zaXRpb24tYm90dG9tXCI6IHVgXG4gICAgICB0b3A6IDA7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGhlaWdodDogM3B4O1xuICAgICAgY3Vyc29yOiBucy1yZXNpemU7XG4gICAgYCxcbiAgICBcImRyYWdIYW5kbGUtcG9zaXRpb24tcmlnaHRcIjogdWBcbiAgICAgIGxlZnQ6IDA7XG4gICAgICB3aWR0aDogM3B4O1xuICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgY3Vyc29yOiBldy1yZXNpemU7XG4gICAgYCxcbiAgICBcImRyYWdIYW5kbGUtcG9zaXRpb24tbGVmdFwiOiB1YFxuICAgICAgcmlnaHQ6IDA7XG4gICAgICB3aWR0aDogM3B4O1xuICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgY3Vyc29yOiBldy1yZXNpemU7XG4gICAgYCxcbiAgICByb3c6IHVgXG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIHBhZGRpbmc6ICR7dG9rZW5zLnNpemVbMl19ICR7dG9rZW5zLnNpemVbMi41XX07XG4gICAgICBnYXA6ICR7dG9rZW5zLnNpemVbMi41XX07XG4gICAgICBib3JkZXItYm90dG9tOiAke3QyKGNvbG9ycy5ncmF5WzMwMF0sIGNvbG9ycy5kYXJrR3JheVs1MDBdKX0gMXB4IHNvbGlkO1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICYgPiBidXR0b24ge1xuICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBnYXA6ICR7c2l6ZTJbMC41XX07XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICB9XG4gICAgYCxcbiAgICBsb2dvQW5kVG9nZ2xlQ29udGFpbmVyOiB1YFxuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGdhcDogJHt0b2tlbnMuc2l6ZVszXX07XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGAsXG4gICAgbG9nbzogdWBcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICBib3JkZXI6IG5vbmU7XG4gICAgICBnYXA6ICR7dG9rZW5zLnNpemVbMC41XX07XG4gICAgICBwYWRkaW5nOiAwcHg7XG4gICAgICAmOmhvdmVyIHtcbiAgICAgICAgb3BhY2l0eTogMC43O1xuICAgICAgfVxuICAgICAgJjpmb2N1cy12aXNpYmxlIHtcbiAgICAgICAgb3V0bGluZS1vZmZzZXQ6IDRweDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogJHtib3JkZXIucmFkaXVzLnhzfTtcbiAgICAgICAgb3V0bGluZTogMnB4IHNvbGlkICR7Y29sb3JzLmJsdWVbODAwXX07XG4gICAgICB9XG4gICAgYCxcbiAgICB0YW5zdGFja0xvZ286IHVgXG4gICAgICBmb250LXNpemU6ICR7Zm9udC5zaXplLm1kfTtcbiAgICAgIGZvbnQtd2VpZ2h0OiAke2ZvbnQud2VpZ2h0LmJvbGR9O1xuICAgICAgbGluZS1oZWlnaHQ6ICR7Zm9udC5saW5lSGVpZ2h0LnhzfTtcbiAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICBjb2xvcjogJHt0Mihjb2xvcnMuZ3JheVs2MDBdLCBjb2xvcnMuZ3JheVszMDBdKX07XG4gICAgYCxcbiAgICBxdWVyeUZsYXZvckxvZ286IHVgXG4gICAgICBmb250LXdlaWdodDogJHtmb250LndlaWdodC5zZW1pYm9sZH07XG4gICAgICBmb250LXNpemU6ICR7Zm9udC5zaXplLnhzfTtcbiAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudChcbiAgICAgICAgdG8gcmlnaHQsXG4gICAgICAgICR7dDIoXCIjZWE0MDM3LCAjZmY5YjExXCIsIFwiI2RkNTI0YiwgI2U5YTAzYlwiKX1cbiAgICAgICk7XG4gICAgICBiYWNrZ3JvdW5kLWNsaXA6IHRleHQ7XG4gICAgICAtd2Via2l0LWJhY2tncm91bmQtY2xpcDogdGV4dDtcbiAgICAgIGxpbmUtaGVpZ2h0OiAxO1xuICAgICAgLXdlYmtpdC10ZXh0LWZpbGwtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICBgLFxuICAgIHF1ZXJ5U3RhdHVzQ29udGFpbmVyOiB1YFxuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGdhcDogJHt0b2tlbnMuc2l6ZVsyXX07XG4gICAgICBoZWlnaHQ6IG1pbi1jb250ZW50O1xuICAgIGAsXG4gICAgcXVlcnlTdGF0dXNUYWc6IHVgXG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZ2FwOiAke3Rva2Vucy5zaXplWzEuNV19O1xuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgIGhlaWdodDogJHt0b2tlbnMuc2l6ZVs2LjVdfTtcbiAgICAgIGJhY2tncm91bmQ6ICR7dDIoY29sb3JzLmdyYXlbNTBdLCBjb2xvcnMuZGFya0dyYXlbNTAwXSl9O1xuICAgICAgY29sb3I6ICR7dDIoY29sb3JzLmdyYXlbNzAwXSwgY29sb3JzLmdyYXlbMzAwXSl9O1xuICAgICAgYm9yZGVyLXJhZGl1czogJHt0b2tlbnMuYm9yZGVyLnJhZGl1cy5zbX07XG4gICAgICBmb250LXNpemU6ICR7Zm9udC5zaXplLnNtfTtcbiAgICAgIHBhZGRpbmc6ICR7dG9rZW5zLnNpemVbMV19O1xuICAgICAgcGFkZGluZy1sZWZ0OiAke3Rva2Vucy5zaXplWzEuNV19O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGZvbnQtd2VpZ2h0OiAke2ZvbnQud2VpZ2h0Lm1lZGl1bX07XG4gICAgICBib3JkZXI6ICR7dDIoXCIxcHggc29saWQgXCIgKyBjb2xvcnMuZ3JheVszMDBdLCBcIjFweCBzb2xpZCB0cmFuc3BhcmVudFwiKX07XG4gICAgICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICY6Zm9jdXMtdmlzaWJsZSB7XG4gICAgICAgIG91dGxpbmUtb2Zmc2V0OiAycHg7XG4gICAgICAgIG91dGxpbmU6IDJweCBzb2xpZCAke2NvbG9ycy5ibHVlWzgwMF19O1xuICAgICAgfVxuICAgIGAsXG4gICAgcXVlcnlTdGF0dXNUYWdMYWJlbDogdWBcbiAgICAgIGZvbnQtc2l6ZTogJHtmb250LnNpemUueHN9O1xuICAgIGAsXG4gICAgcXVlcnlTdGF0dXNDb3VudDogdWBcbiAgICAgIGZvbnQtc2l6ZTogJHtmb250LnNpemUueHN9O1xuICAgICAgcGFkZGluZzogMCA1cHg7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgY29sb3I6ICR7dDIoY29sb3JzLmdyYXlbNTAwXSwgY29sb3JzLmdyYXlbNDAwXSl9O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0Mihjb2xvcnMuZ3JheVsyMDBdLCBjb2xvcnMuZGFya0dyYXlbMzAwXSl9O1xuICAgICAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAgICAgZm9udC12YXJpYW50LW51bWVyaWM6IHRhYnVsYXItbnVtcztcbiAgICAgIGhlaWdodDogJHt0b2tlbnMuc2l6ZVs0LjVdfTtcbiAgICBgLFxuICAgIHN0YXR1c1Rvb2x0aXA6IHVgXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB6LWluZGV4OiAxO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0Mihjb2xvcnMuZ3JheVs1MF0sIGNvbG9ycy5kYXJrR3JheVs1MDBdKX07XG4gICAgICB0b3A6IDEwMCU7XG4gICAgICBsZWZ0OiA1MCU7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCBjYWxjKCR7dG9rZW5zLnNpemVbMl19KSk7XG4gICAgICBwYWRkaW5nOiAke3Rva2Vucy5zaXplWzAuNV19ICR7dG9rZW5zLnNpemVbMl19O1xuICAgICAgYm9yZGVyLXJhZGl1czogJHt0b2tlbnMuYm9yZGVyLnJhZGl1cy5zbX07XG4gICAgICBmb250LXNpemU6ICR7Zm9udC5zaXplLnhzfTtcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7dDIoY29sb3JzLmdyYXlbNDAwXSwgY29sb3JzLmdyYXlbNjAwXSl9O1xuICAgICAgY29sb3I6ICR7dDIoY29sb3JzW1wiZ3JheVwiXVs2MDBdLCBjb2xvcnNbXCJncmF5XCJdWzMwMF0pfTtcblxuICAgICAgJjo6YmVmb3JlIHtcbiAgICAgICAgdG9wOiAwcHg7XG4gICAgICAgIGNvbnRlbnQ6ICcgJztcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIGxlZnQ6IDUwJTtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTEwMCUpO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnRcbiAgICAgICAgICAke3QyKGNvbG9ycy5ncmF5WzQwMF0sIGNvbG9ycy5ncmF5WzYwMF0pfSB0cmFuc3BhcmVudDtcbiAgICAgICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgICAgICAgYm9yZGVyLXdpZHRoOiA3cHg7XG4gICAgICAgIC8qIHRyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7ICovXG4gICAgICB9XG5cbiAgICAgICY6OmFmdGVyIHtcbiAgICAgICAgdG9wOiAwcHg7XG4gICAgICAgIGNvbnRlbnQ6ICcgJztcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIGxlZnQ6IDUwJTtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgY2FsYygtMTAwJSArIDJweCkpO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnRcbiAgICAgICAgICAke3QyKGNvbG9ycy5ncmF5WzEwMF0sIGNvbG9ycy5kYXJrR3JheVs1MDBdKX0gdHJhbnNwYXJlbnQ7XG4gICAgICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG4gICAgICAgIGJvcmRlci13aWR0aDogN3B4O1xuICAgICAgfVxuICAgIGAsXG4gICAgZmlsdGVyc0NvbnRhaW5lcjogdWBcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBnYXA6ICR7dG9rZW5zLnNpemVbMl19O1xuICAgICAgJiA+IGJ1dHRvbiB7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgcGFkZGluZzogJHt0b2tlbnMuc2l6ZVswLjVdfSAke3Rva2Vucy5zaXplWzJdfTtcbiAgICAgICAgcGFkZGluZy1yaWdodDogJHt0b2tlbnMuc2l6ZVsxLjVdfTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogJHt0b2tlbnMuYm9yZGVyLnJhZGl1cy5zbX07XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dDIoY29sb3JzLmdyYXlbMTAwXSwgY29sb3JzLmRhcmtHcmF5WzQwMF0pfTtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHt0Mihjb2xvcnMuZ3JheVszMDBdLCBjb2xvcnMuZGFya0dyYXlbMjAwXSl9O1xuICAgICAgICBjb2xvcjogJHt0Mihjb2xvcnMuZ3JheVs3MDBdLCBjb2xvcnMuZ3JheVszMDBdKX07XG4gICAgICAgIGZvbnQtc2l6ZTogJHtmb250LnNpemUueHN9O1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBsaW5lLWhlaWdodDogJHtmb250LmxpbmVIZWlnaHQuc219O1xuICAgICAgICBnYXA6ICR7dG9rZW5zLnNpemVbMS41XX07XG4gICAgICAgIG1heC13aWR0aDogMTYwcHg7XG4gICAgICAgICY6Zm9jdXMtdmlzaWJsZSB7XG4gICAgICAgICAgb3V0bGluZS1vZmZzZXQ6IDJweDtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAke2JvcmRlci5yYWRpdXMueHN9O1xuICAgICAgICAgIG91dGxpbmU6IDJweCBzb2xpZCAke2NvbG9ycy5ibHVlWzgwMF19O1xuICAgICAgICB9XG4gICAgICAgICYgc3ZnIHtcbiAgICAgICAgICB3aWR0aDogJHt0b2tlbnMuc2l6ZVszXX07XG4gICAgICAgICAgaGVpZ2h0OiAke3Rva2Vucy5zaXplWzNdfTtcbiAgICAgICAgICBjb2xvcjogJHt0Mihjb2xvcnMuZ3JheVs1MDBdLCBjb2xvcnMuZ3JheVs0MDBdKX07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgLFxuICAgIGZpbHRlcklucHV0OiB1YFxuICAgICAgcGFkZGluZzogJHtzaXplMlswLjVdfSAke3NpemUyWzJdfTtcbiAgICAgIGJvcmRlci1yYWRpdXM6ICR7dG9rZW5zLmJvcmRlci5yYWRpdXMuc219O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0Mihjb2xvcnMuZ3JheVsxMDBdLCBjb2xvcnMuZGFya0dyYXlbNDAwXSl9O1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGdhcDogJHt0b2tlbnMuc2l6ZVsxLjVdfTtcbiAgICAgIG1heC13aWR0aDogMTYwcHg7XG4gICAgICBtaW4td2lkdGg6IDEwMHB4O1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgJHt0Mihjb2xvcnMuZ3JheVszMDBdLCBjb2xvcnMuZGFya0dyYXlbMjAwXSl9O1xuICAgICAgaGVpZ2h0OiBtaW4tY29udGVudDtcbiAgICAgIGNvbG9yOiAke3QyKGNvbG9ycy5ncmF5WzYwMF0sIGNvbG9ycy5ncmF5WzQwMF0pfTtcbiAgICAgICYgPiBzdmcge1xuICAgICAgICB3aWR0aDogJHtzaXplMlszXX07XG4gICAgICAgIGhlaWdodDogJHtzaXplMlszXX07XG4gICAgICB9XG4gICAgICAmIGlucHV0IHtcbiAgICAgICAgZm9udC1zaXplOiAke2ZvbnQuc2l6ZS54c307XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3QyKGNvbG9ycy5ncmF5WzEwMF0sIGNvbG9ycy5kYXJrR3JheVs0MDBdKX07XG4gICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgbGluZS1oZWlnaHQ6ICR7Zm9udC5saW5lSGVpZ2h0LnNtfTtcbiAgICAgICAgY29sb3I6ICR7dDIoY29sb3JzLmdyYXlbNzAwXSwgY29sb3JzLmdyYXlbMzAwXSl9O1xuICAgICAgICAmOjpwbGFjZWhvbGRlciB7XG4gICAgICAgICAgY29sb3I6ICR7dDIoY29sb3JzLmdyYXlbNzAwXSwgY29sb3JzLmdyYXlbMzAwXSl9O1xuICAgICAgICB9XG4gICAgICAgICY6Zm9jdXMge1xuICAgICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJjpmb2N1cy13aXRoaW4ge1xuICAgICAgICBvdXRsaW5lLW9mZnNldDogMnB4O1xuICAgICAgICBib3JkZXItcmFkaXVzOiAke2JvcmRlci5yYWRpdXMueHN9O1xuICAgICAgICBvdXRsaW5lOiAycHggc29saWQgJHtjb2xvcnMuYmx1ZVs4MDBdfTtcbiAgICAgIH1cbiAgICBgLFxuICAgIGZpbHRlclNlbGVjdDogdWBcbiAgICAgIHBhZGRpbmc6ICR7dG9rZW5zLnNpemVbMC41XX0gJHt0b2tlbnMuc2l6ZVsyXX07XG4gICAgICBib3JkZXItcmFkaXVzOiAke3Rva2Vucy5ib3JkZXIucmFkaXVzLnNtfTtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dDIoY29sb3JzLmdyYXlbMTAwXSwgY29sb3JzLmRhcmtHcmF5WzQwMF0pfTtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgZ2FwOiAke3Rva2Vucy5zaXplWzEuNV19O1xuICAgICAgYm94LXNpemluZzogY29udGVudC1ib3g7XG4gICAgICBtYXgtd2lkdGg6IDE2MHB4O1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgJHt0Mihjb2xvcnMuZ3JheVszMDBdLCBjb2xvcnMuZGFya0dyYXlbMjAwXSl9O1xuICAgICAgaGVpZ2h0OiBtaW4tY29udGVudDtcbiAgICAgICYgPiBzdmcge1xuICAgICAgICBjb2xvcjogJHt0Mihjb2xvcnMuZ3JheVs2MDBdLCBjb2xvcnMuZ3JheVs0MDBdKX07XG4gICAgICAgIHdpZHRoOiAke3Rva2Vucy5zaXplWzJdfTtcbiAgICAgICAgaGVpZ2h0OiAke3Rva2Vucy5zaXplWzJdfTtcbiAgICAgIH1cbiAgICAgICYgPiBzZWxlY3Qge1xuICAgICAgICBhcHBlYXJhbmNlOiBub25lO1xuICAgICAgICBjb2xvcjogJHt0Mihjb2xvcnMuZ3JheVs3MDBdLCBjb2xvcnMuZ3JheVszMDBdKX07XG4gICAgICAgIG1pbi13aWR0aDogMTAwcHg7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAke2ZvbnQubGluZUhlaWdodC5zbX07XG4gICAgICAgIGZvbnQtc2l6ZTogJHtmb250LnNpemUueHN9O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3QyKGNvbG9ycy5ncmF5WzEwMF0sIGNvbG9ycy5kYXJrR3JheVs0MDBdKX07XG4gICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgJjpmb2N1cyB7XG4gICAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgJjpmb2N1cy13aXRoaW4ge1xuICAgICAgICBvdXRsaW5lLW9mZnNldDogMnB4O1xuICAgICAgICBib3JkZXItcmFkaXVzOiAke2JvcmRlci5yYWRpdXMueHN9O1xuICAgICAgICBvdXRsaW5lOiAycHggc29saWQgJHtjb2xvcnMuYmx1ZVs4MDBdfTtcbiAgICAgIH1cbiAgICBgLFxuICAgIGFjdGlvbnNDb250YWluZXI6IHVgXG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZ2FwOiAke3Rva2Vucy5zaXplWzJdfTtcbiAgICBgLFxuICAgIGFjdGlvbnNCdG46IHVgXG4gICAgICBib3JkZXItcmFkaXVzOiAke3Rva2Vucy5ib3JkZXIucmFkaXVzLnNtfTtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dDIoY29sb3JzLmdyYXlbMTAwXSwgY29sb3JzLmRhcmtHcmF5WzQwMF0pfTtcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7dDIoY29sb3JzLmdyYXlbMzAwXSwgY29sb3JzLmRhcmtHcmF5WzIwMF0pfTtcbiAgICAgIHdpZHRoOiAke3Rva2Vucy5zaXplWzYuNV19O1xuICAgICAgaGVpZ2h0OiAke3Rva2Vucy5zaXplWzYuNV19O1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGdhcDogJHt0b2tlbnMuc2l6ZVsxLjVdfTtcbiAgICAgIG1heC13aWR0aDogMTYwcHg7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICBwYWRkaW5nOiAwO1xuICAgICAgJjpob3ZlciB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dDIoY29sb3JzLmdyYXlbMjAwXSwgY29sb3JzLmRhcmtHcmF5WzUwMF0pfTtcbiAgICAgIH1cbiAgICAgICYgc3ZnIHtcbiAgICAgICAgY29sb3I6ICR7dDIoY29sb3JzLmdyYXlbNzAwXSwgY29sb3JzLmdyYXlbMzAwXSl9O1xuICAgICAgICB3aWR0aDogJHt0b2tlbnMuc2l6ZVszXX07XG4gICAgICAgIGhlaWdodDogJHt0b2tlbnMuc2l6ZVszXX07XG4gICAgICB9XG4gICAgICAmOmZvY3VzLXZpc2libGUge1xuICAgICAgICBvdXRsaW5lLW9mZnNldDogMnB4O1xuICAgICAgICBib3JkZXItcmFkaXVzOiAke2JvcmRlci5yYWRpdXMueHN9O1xuICAgICAgICBvdXRsaW5lOiAycHggc29saWQgJHtjb2xvcnMuYmx1ZVs4MDBdfTtcbiAgICAgIH1cbiAgICBgLFxuICAgIGFjdGlvbnNCdG5PZmZsaW5lOiB1YFxuICAgICAgJiBzdmcge1xuICAgICAgICBzdHJva2U6ICR7dDIoY29sb3JzLnllbGxvd1s3MDBdLCBjb2xvcnMueWVsbG93WzUwMF0pfTtcbiAgICAgICAgZmlsbDogJHt0Mihjb2xvcnMueWVsbG93WzcwMF0sIGNvbG9ycy55ZWxsb3dbNTAwXSl9O1xuICAgICAgfVxuICAgIGAsXG4gICAgb3ZlcmZsb3dRdWVyeUNvbnRhaW5lcjogdWBcbiAgICAgIGZsZXg6IDE7XG4gICAgICBvdmVyZmxvdy15OiBhdXRvO1xuICAgICAgJiA+IGRpdiB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICB9XG4gICAgYCxcbiAgICBxdWVyeVJvdzogdWBcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgcGFkZGluZzogMDtcbiAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIGNvbG9yOiAke3QyKGNvbG9ycy5ncmF5WzcwMF0sIGNvbG9ycy5ncmF5WzMwMF0pfTtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dDIoY29sb3JzLmdyYXlbNTBdLCBjb2xvcnMuZGFya0dyYXlbNzAwXSl9O1xuICAgICAgbGluZS1oZWlnaHQ6IDE7XG4gICAgICAmOmZvY3VzIHtcbiAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgIH1cbiAgICAgICY6Zm9jdXMtdmlzaWJsZSB7XG4gICAgICAgIG91dGxpbmUtb2Zmc2V0OiAtMnB4O1xuICAgICAgICBib3JkZXItcmFkaXVzOiAke2JvcmRlci5yYWRpdXMueHN9O1xuICAgICAgICBvdXRsaW5lOiAycHggc29saWQgJHtjb2xvcnMuYmx1ZVs4MDBdfTtcbiAgICAgIH1cbiAgICAgICY6aG92ZXIgLnRzcWQtcXVlcnktaGFzaCB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dDIoY29sb3JzLmdyYXlbMjAwXSwgY29sb3JzLmRhcmtHcmF5WzYwMF0pfTtcbiAgICAgIH1cblxuICAgICAgJiAudHNxZC1xdWVyeS1vYnNlcnZlci1jb3VudCB7XG4gICAgICAgIHBhZGRpbmc6IDAgJHt0b2tlbnMuc2l6ZVsxXX07XG4gICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xuICAgICAgICBtaW4td2lkdGg6ICR7dG9rZW5zLnNpemVbNi41XX07XG4gICAgICAgIGFsaWduLXNlbGY6IHN0cmV0Y2g7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBmb250LXNpemU6ICR7Zm9udC5zaXplLnhzfTtcbiAgICAgICAgZm9udC13ZWlnaHQ6ICR7Zm9udC53ZWlnaHQubWVkaXVtfTtcbiAgICAgICAgYm9yZGVyLWJvdHRvbS13aWR0aDogMXB4O1xuICAgICAgICBib3JkZXItYm90dG9tLXN0eWxlOiBzb2xpZDtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICR7dDIoY29sb3JzLmdyYXlbMzAwXSwgY29sb3JzLmRhcmtHcmF5WzcwMF0pfTtcbiAgICAgIH1cbiAgICAgICYgLnRzcWQtcXVlcnktaGFzaCB7XG4gICAgICAgIHVzZXItc2VsZWN0OiB0ZXh0O1xuICAgICAgICBmb250LXNpemU6ICR7Zm9udC5zaXplLnhzfTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgbWluLWhlaWdodDogJHt0b2tlbnMuc2l6ZVs2XX07XG4gICAgICAgIGZsZXg6IDE7XG4gICAgICAgIHBhZGRpbmc6ICR7dG9rZW5zLnNpemVbMV19ICR7dG9rZW5zLnNpemVbMl19O1xuICAgICAgICBmb250LWZhbWlseTogJ01lbmxvJywgJ0ZpcmEgQ29kZScsIG1vbm9zcGFjZTtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICR7dDIoY29sb3JzLmdyYXlbMzAwXSwgY29sb3JzLmRhcmtHcmF5WzQwMF0pfTtcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICAgICAgdGV4dC1vdmVyZmxvdzogY2xpcDtcbiAgICAgICAgd29yZC1icmVhazogYnJlYWstd29yZDtcbiAgICAgIH1cblxuICAgICAgJiAudHNxZC1xdWVyeS1kaXNhYmxlZC1pbmRpY2F0b3Ige1xuICAgICAgICBhbGlnbi1zZWxmOiBzdHJldGNoO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBwYWRkaW5nOiAwICR7dG9rZW5zLnNpemVbMl19O1xuICAgICAgICBjb2xvcjogJHt0Mihjb2xvcnMuZ3JheVs4MDBdLCBjb2xvcnMuZ3JheVszMDBdKX07XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dDIoY29sb3JzLmdyYXlbMzAwXSwgY29sb3JzLmRhcmtHcmF5WzYwMF0pfTtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICR7dDIoY29sb3JzLmdyYXlbMzAwXSwgY29sb3JzLmRhcmtHcmF5WzQwMF0pfTtcbiAgICAgICAgZm9udC1zaXplOiAke2ZvbnQuc2l6ZS54c307XG4gICAgICB9XG4gICAgYCxcbiAgICBzZWxlY3RlZFF1ZXJ5Um93OiB1YFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0Mihjb2xvcnMuZ3JheVsyMDBdLCBjb2xvcnMuZGFya0dyYXlbNTAwXSl9O1xuICAgIGAsXG4gICAgZGV0YWlsc0NvbnRhaW5lcjogdWBcbiAgICAgIGZsZXg6IDEgMSA3MDBweDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dDIoY29sb3JzLmdyYXlbNTBdLCBjb2xvcnMuZGFya0dyYXlbNzAwXSl9O1xuICAgICAgY29sb3I6ICR7dDIoY29sb3JzLmdyYXlbNzAwXSwgY29sb3JzLmdyYXlbMzAwXSl9O1xuICAgICAgZm9udC1mYW1pbHk6ICdJbnRlcicsIHNhbnMtc2VyaWY7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICBgLFxuICAgIGRldGFpbHNIZWFkZXI6IHVgXG4gICAgICBmb250LWZhbWlseTogJ0ludGVyJywgc2Fucy1zZXJpZjtcbiAgICAgIHBvc2l0aW9uOiBzdGlja3k7XG4gICAgICB0b3A6IDA7XG4gICAgICB6LWluZGV4OiAyO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0Mihjb2xvcnMuZ3JheVsyMDBdLCBjb2xvcnMuZGFya0dyYXlbNjAwXSl9O1xuICAgICAgcGFkZGluZzogJHt0b2tlbnMuc2l6ZVsxLjVdfSAke3Rva2Vucy5zaXplWzJdfTtcbiAgICAgIGZvbnQtd2VpZ2h0OiAke2ZvbnQud2VpZ2h0Lm1lZGl1bX07XG4gICAgICBmb250LXNpemU6ICR7Zm9udC5zaXplLnhzfTtcbiAgICAgIGxpbmUtaGVpZ2h0OiAke2ZvbnQubGluZUhlaWdodC54c307XG4gICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgIGAsXG4gICAgZGV0YWlsc0JvZHk6IHVgXG4gICAgICBtYXJnaW46ICR7dG9rZW5zLnNpemVbMS41XX0gMHB4ICR7dG9rZW5zLnNpemVbMl19IDBweDtcbiAgICAgICYgPiBkaXYge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogc3RyZXRjaDtcbiAgICAgICAgcGFkZGluZzogMCAke3Rva2Vucy5zaXplWzJdfTtcbiAgICAgICAgbGluZS1oZWlnaHQ6ICR7Zm9udC5saW5lSGVpZ2h0LnNtfTtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICAmID4gc3BhbiB7XG4gICAgICAgICAgZm9udC1zaXplOiAke2ZvbnQuc2l6ZS54c307XG4gICAgICAgIH1cbiAgICAgICAgJiA+IHNwYW46bnRoLWNoaWxkKDIpIHtcbiAgICAgICAgICBmb250LXZhcmlhbnQtbnVtZXJpYzogdGFidWxhci1udW1zO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICYgPiBkaXY6Zmlyc3QtY2hpbGQge1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAke3Rva2Vucy5zaXplWzEuNV19O1xuICAgICAgfVxuXG4gICAgICAmIGNvZGUge1xuICAgICAgICBmb250LWZhbWlseTogJ01lbmxvJywgJ0ZpcmEgQ29kZScsIG1vbm9zcGFjZTtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICBmb250LXNpemU6ICR7Zm9udC5zaXplLnhzfTtcbiAgICAgICAgbGluZS1oZWlnaHQ6ICR7Zm9udC5saW5lSGVpZ2h0LnhzfTtcbiAgICAgIH1cblxuICAgICAgJiBwcmUge1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICB9XG4gICAgYCxcbiAgICBxdWVyeURldGFpbHNTdGF0dXM6IHVgXG4gICAgICBib3JkZXI6IDFweCBzb2xpZCAke2NvbG9ycy5kYXJrR3JheVsyMDBdfTtcbiAgICAgIGJvcmRlci1yYWRpdXM6ICR7dG9rZW5zLmJvcmRlci5yYWRpdXMuc219O1xuICAgICAgZm9udC13ZWlnaHQ6ICR7Zm9udC53ZWlnaHQubWVkaXVtfTtcbiAgICAgIHBhZGRpbmc6ICR7dG9rZW5zLnNpemVbMV19ICR7dG9rZW5zLnNpemVbMi41XX07XG4gICAgYCxcbiAgICBhY3Rpb25zQm9keTogdWBcbiAgICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICAgIG1hcmdpbjogJHt0b2tlbnMuc2l6ZVsyXX0gMHB4ICR7dG9rZW5zLnNpemVbMl19IDBweDtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBnYXA6ICR7dG9rZW5zLnNpemVbMl19O1xuICAgICAgcGFkZGluZzogMHB4ICR7dG9rZW5zLnNpemVbMl19O1xuICAgICAgJiA+IGJ1dHRvbiB7XG4gICAgICAgIGZvbnQtZmFtaWx5OiAnSW50ZXInLCBzYW5zLXNlcmlmO1xuICAgICAgICBmb250LXNpemU6ICR7Zm9udC5zaXplLnhzfTtcbiAgICAgICAgcGFkZGluZzogJHt0b2tlbnMuc2l6ZVsxXX0gJHt0b2tlbnMuc2l6ZVsyXX07XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6ICR7dG9rZW5zLmJvcmRlci5yYWRpdXMuc219O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3QyKGNvbG9ycy5ncmF5WzEwMF0sIGNvbG9ycy5kYXJrR3JheVs2MDBdKX07XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7dDIoY29sb3JzLmdyYXlbMzAwXSwgY29sb3JzLmRhcmtHcmF5WzQwMF0pfTtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgZ2FwOiAke3Rva2Vucy5zaXplWzJdfTtcbiAgICAgICAgZm9udC13ZWlnaHQ6ICR7Zm9udC53ZWlnaHQubWVkaXVtfTtcbiAgICAgICAgbGluZS1oZWlnaHQ6ICR7Zm9udC5saW5lSGVpZ2h0LnhzfTtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAmOmZvY3VzLXZpc2libGUge1xuICAgICAgICAgIG91dGxpbmUtb2Zmc2V0OiAycHg7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogJHtib3JkZXIucmFkaXVzLnhzfTtcbiAgICAgICAgICBvdXRsaW5lOiAycHggc29saWQgJHtjb2xvcnMuYmx1ZVs4MDBdfTtcbiAgICAgICAgfVxuICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3QyKGNvbG9ycy5ncmF5WzIwMF0sIGNvbG9ycy5kYXJrR3JheVs1MDBdKX07XG4gICAgICAgIH1cblxuICAgICAgICAmOmRpc2FibGVkIHtcbiAgICAgICAgICBvcGFjaXR5OiAwLjY7XG4gICAgICAgICAgY3Vyc29yOiBub3QtYWxsb3dlZDtcbiAgICAgICAgfVxuXG4gICAgICAgICYgPiBzcGFuIHtcbiAgICAgICAgICB3aWR0aDogJHtzaXplMlsxLjVdfTtcbiAgICAgICAgICBoZWlnaHQ6ICR7c2l6ZTJbMS41XX07XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogJHt0b2tlbnMuYm9yZGVyLnJhZGl1cy5mdWxsfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGAsXG4gICAgYWN0aW9uc1NlbGVjdDogdWBcbiAgICAgIGZvbnQtc2l6ZTogJHtmb250LnNpemUueHN9O1xuICAgICAgcGFkZGluZzogJHt0b2tlbnMuc2l6ZVswLjVdfSAke3Rva2Vucy5zaXplWzJdfTtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBib3JkZXItcmFkaXVzOiAke3Rva2Vucy5ib3JkZXIucmFkaXVzLnNtfTtcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3QyKGNvbG9ycy5ncmF5WzEwMF0sIGNvbG9ycy5kYXJrR3JheVs2MDBdKX07XG4gICAgICBib3JkZXI6IDFweCBzb2xpZCAke3QyKGNvbG9ycy5ncmF5WzMwMF0sIGNvbG9ycy5kYXJrR3JheVs0MDBdKX07XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgZ2FwOiAke3Rva2Vucy5zaXplWzJdfTtcbiAgICAgIGZvbnQtd2VpZ2h0OiAke2ZvbnQud2VpZ2h0Lm1lZGl1bX07XG4gICAgICBsaW5lLWhlaWdodDogJHtmb250LmxpbmVIZWlnaHQuc219O1xuICAgICAgY29sb3I6ICR7dDIoY29sb3JzLnJlZFs1MDBdLCBjb2xvcnMucmVkWzQwMF0pfTtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICY6aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3QyKGNvbG9ycy5ncmF5WzIwMF0sIGNvbG9ycy5kYXJrR3JheVs1MDBdKX07XG4gICAgICB9XG4gICAgICAmID4gc3BhbiB7XG4gICAgICAgIHdpZHRoOiAke3NpemUyWzEuNV19O1xuICAgICAgICBoZWlnaHQ6ICR7c2l6ZTJbMS41XX07XG4gICAgICAgIGJvcmRlci1yYWRpdXM6ICR7dG9rZW5zLmJvcmRlci5yYWRpdXMuZnVsbH07XG4gICAgICB9XG4gICAgICAmOmZvY3VzLXdpdGhpbiB7XG4gICAgICAgIG91dGxpbmUtb2Zmc2V0OiAycHg7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6ICR7Ym9yZGVyLnJhZGl1cy54c307XG4gICAgICAgIG91dGxpbmU6IDJweCBzb2xpZCAke2NvbG9ycy5ibHVlWzgwMF19O1xuICAgICAgfVxuICAgICAgJiBzZWxlY3Qge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgYXBwZWFyYW5jZTogbm9uZTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgfVxuXG4gICAgICAmIHN2ZyBwYXRoIHtcbiAgICAgICAgc3Ryb2tlOiAke3Rva2Vucy5jb2xvcnMucmVkWzQwMF19O1xuICAgICAgfVxuICAgICAgJiBzdmcge1xuICAgICAgICB3aWR0aDogJHt0b2tlbnMuc2l6ZVsyXX07XG4gICAgICAgIGhlaWdodDogJHt0b2tlbnMuc2l6ZVsyXX07XG4gICAgICB9XG4gICAgYCxcbiAgICBzZXR0aW5nc01lbnU6IHVgXG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgJiAqIHtcbiAgICAgICAgZm9udC1mYW1pbHk6ICdJbnRlcicsIHNhbnMtc2VyaWY7XG4gICAgICB9XG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgZ2FwOiAke3NpemUyWzAuNV19O1xuICAgICAgYm9yZGVyLXJhZGl1czogJHt0b2tlbnMuYm9yZGVyLnJhZGl1cy5zbX07XG4gICAgICBib3JkZXI6IDFweCBzb2xpZCAke3QyKGNvbG9ycy5ncmF5WzMwMF0sIGNvbG9ycy5ncmF5WzcwMF0pfTtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dDIoY29sb3JzLmdyYXlbNTBdLCBjb2xvcnMuZGFya0dyYXlbNjAwXSl9O1xuICAgICAgZm9udC1zaXplOiAke2ZvbnQuc2l6ZS54c307XG4gICAgICBjb2xvcjogJHt0Mihjb2xvcnMuZ3JheVs3MDBdLCBjb2xvcnMuZ3JheVszMDBdKX07XG4gICAgICB6LWluZGV4OiA5OTk5OTtcbiAgICAgIG1pbi13aWR0aDogMTIwcHg7XG4gICAgICBwYWRkaW5nOiAke3NpemUyWzAuNV19O1xuICAgIGAsXG4gICAgc2V0dGluZ3NTdWJUcmlnZ2VyOiB1YFxuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICBib3JkZXItcmFkaXVzOiAke3Rva2Vucy5ib3JkZXIucmFkaXVzLnhzfTtcbiAgICAgIHBhZGRpbmc6ICR7dG9rZW5zLnNpemVbMV19ICR7dG9rZW5zLnNpemVbMV19O1xuICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICBib3JkZXI6IG5vbmU7XG4gICAgICBjb2xvcjogJHt0Mihjb2xvcnMuZ3JheVs3MDBdLCBjb2xvcnMuZ3JheVszMDBdKX07XG4gICAgICAmIHN2ZyB7XG4gICAgICAgIGNvbG9yOiAke3QyKGNvbG9ycy5ncmF5WzYwMF0sIGNvbG9ycy5ncmF5WzQwMF0pfTtcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoLTkwZGVnKTtcbiAgICAgICAgd2lkdGg6ICR7dG9rZW5zLnNpemVbMl19O1xuICAgICAgICBoZWlnaHQ6ICR7dG9rZW5zLnNpemVbMl19O1xuICAgICAgfVxuICAgICAgJjpob3ZlciB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dDIoY29sb3JzLmdyYXlbMjAwXSwgY29sb3JzLmRhcmtHcmF5WzUwMF0pfTtcbiAgICAgIH1cbiAgICAgICY6Zm9jdXMtdmlzaWJsZSB7XG4gICAgICAgIG91dGxpbmUtb2Zmc2V0OiAycHg7XG4gICAgICAgIG91dGxpbmU6IDJweCBzb2xpZCAke2NvbG9ycy5ibHVlWzgwMF19O1xuICAgICAgfVxuICAgICAgJi5kYXRhLWRpc2FibGVkIHtcbiAgICAgICAgb3BhY2l0eTogMC42O1xuICAgICAgICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xuICAgICAgfVxuICAgIGAsXG4gICAgc2V0dGluZ3NNZW51SGVhZGVyOiB1YFxuICAgICAgcGFkZGluZzogJHt0b2tlbnMuc2l6ZVsxXX0gJHt0b2tlbnMuc2l6ZVsxXX07XG4gICAgICBmb250LXdlaWdodDogJHtmb250LndlaWdodC5tZWRpdW19O1xuICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICR7dDIoY29sb3JzLmdyYXlbMzAwXSwgY29sb3JzLmRhcmtHcmF5WzQwMF0pfTtcbiAgICAgIGNvbG9yOiAke3QyKGNvbG9ycy5ncmF5WzUwMF0sIGNvbG9ycy5ncmF5WzQwMF0pfTtcbiAgICAgIGZvbnQtc2l6ZTogJHtmb250LnNpemVbXCJ4c1wiXX07XG4gICAgYCxcbiAgICBzZXR0aW5nc1N1YkJ1dHRvbjogdWBcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgY29sb3I6ICR7dDIoY29sb3JzLmdyYXlbNzAwXSwgY29sb3JzLmdyYXlbMzAwXSl9O1xuICAgICAgZm9udC1zaXplOiAke2ZvbnQuc2l6ZVtcInhzXCJdfTtcbiAgICAgIGJvcmRlci1yYWRpdXM6ICR7dG9rZW5zLmJvcmRlci5yYWRpdXMueHN9O1xuICAgICAgcGFkZGluZzogJHt0b2tlbnMuc2l6ZVsxXX0gJHt0b2tlbnMuc2l6ZVsxXX07XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICYgc3ZnIHtcbiAgICAgICAgY29sb3I6ICR7dDIoY29sb3JzLmdyYXlbNjAwXSwgY29sb3JzLmdyYXlbNDAwXSl9O1xuICAgICAgfVxuICAgICAgJjpob3ZlciB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dDIoY29sb3JzLmdyYXlbMjAwXSwgY29sb3JzLmRhcmtHcmF5WzUwMF0pfTtcbiAgICAgIH1cbiAgICAgICY6Zm9jdXMtdmlzaWJsZSB7XG4gICAgICAgIG91dGxpbmUtb2Zmc2V0OiAycHg7XG4gICAgICAgIG91dGxpbmU6IDJweCBzb2xpZCAke2NvbG9ycy5ibHVlWzgwMF19O1xuICAgICAgfVxuICAgIGAsXG4gICAgdGhlbWVTZWxlY3RlZEJ1dHRvbjogdWBcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dDIoY29sb3JzLnB1cnBsZVsxMDBdLCBjb2xvcnMucHVycGxlWzkwMF0pfTtcbiAgICAgIGNvbG9yOiAke3QyKGNvbG9ycy5wdXJwbGVbNzAwXSwgY29sb3JzLnB1cnBsZVszMDBdKX07XG4gICAgICAmIHN2ZyB7XG4gICAgICAgIGNvbG9yOiAke3QyKGNvbG9ycy5wdXJwbGVbNzAwXSwgY29sb3JzLnB1cnBsZVszMDBdKX07XG4gICAgICB9XG4gICAgICAmOmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0Mihjb2xvcnMucHVycGxlWzEwMF0sIGNvbG9ycy5wdXJwbGVbOTAwXSl9O1xuICAgICAgfVxuICAgIGAsXG4gICAgdmlld1RvZ2dsZTogdWBcbiAgICAgIGJvcmRlci1yYWRpdXM6ICR7dG9rZW5zLmJvcmRlci5yYWRpdXMuc219O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0Mihjb2xvcnMuZ3JheVsyMDBdLCBjb2xvcnMuZGFya0dyYXlbNjAwXSl9O1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgJHt0Mihjb2xvcnMuZ3JheVszMDBdLCBjb2xvcnMuZGFya0dyYXlbMjAwXSl9O1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIHBhZGRpbmc6IDA7XG4gICAgICBmb250LXNpemU6ICR7Zm9udC5zaXplLnhzfTtcbiAgICAgIGNvbG9yOiAke3QyKGNvbG9ycy5ncmF5WzcwMF0sIGNvbG9ycy5ncmF5WzMwMF0pfTtcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XG5cbiAgICAgICY6aGFzKDpmb2N1cy12aXNpYmxlKSB7XG4gICAgICAgIG91dGxpbmU6IDJweCBzb2xpZCAke2NvbG9ycy5ibHVlWzgwMF19O1xuICAgICAgfVxuXG4gICAgICAmIC50c3FkLXJhZGlvLXRvZ2dsZSB7XG4gICAgICAgIG9wYWNpdHk6IDAuNTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgJiBsYWJlbCB7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICBsaW5lLWhlaWdodDogJHtmb250LmxpbmVIZWlnaHQubWR9O1xuICAgICAgICB9XG5cbiAgICAgICAgJiBsYWJlbDpob3ZlciB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0Mihjb2xvcnMuZ3JheVsxMDBdLCBjb2xvcnMuZGFya0dyYXlbNTAwXSl9O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICYgPiBbZGF0YS1jaGVja2VkXSB7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dDIoY29sb3JzLmdyYXlbMTAwXSwgY29sb3JzLmRhcmtHcmF5WzQwMF0pfTtcbiAgICAgICAgJiBsYWJlbDpob3ZlciB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0Mihjb2xvcnMuZ3JheVsxMDBdLCBjb2xvcnMuZGFya0dyYXlbNDAwXSl9O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICYgLnRzcWQtcmFkaW8tdG9nZ2xlOmZpcnN0LWNoaWxkIHtcbiAgICAgICAgJiBsYWJlbCB7XG4gICAgICAgICAgcGFkZGluZzogMCAke3Rva2Vucy5zaXplWzEuNV19IDAgJHt0b2tlbnMuc2l6ZVsyXX07XG4gICAgICAgIH1cbiAgICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgJHt0Mihjb2xvcnMuZ3JheVszMDBdLCBjb2xvcnMuZGFya0dyYXlbMjAwXSl9O1xuICAgICAgfVxuXG4gICAgICAmIC50c3FkLXJhZGlvLXRvZ2dsZTpudGgtY2hpbGQoMikge1xuICAgICAgICAmIGxhYmVsIHtcbiAgICAgICAgICBwYWRkaW5nOiAwICR7dG9rZW5zLnNpemVbMl19IDAgJHt0b2tlbnMuc2l6ZVsxLjVdfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGBcbiAgfTtcbn07XG52YXIgbGlnaHRTdHlsZXMyID0gc3R5bGVzRmFjdG9yeTIoXCJsaWdodFwiKTtcbnZhciBkYXJrU3R5bGVzMiA9IHN0eWxlc0ZhY3RvcnkyKFwiZGFya1wiKTtcbmRlbGVnYXRlRXZlbnRzKFtcImNsaWNrXCIsIFwibW91c2Vkb3duXCIsIFwiaW5wdXRcIl0pO1xuLyohIEJ1bmRsZWQgbGljZW5zZSBpbmZvcm1hdGlvbjpcblxuQHRhbnN0YWNrL21hdGNoLXNvcnRlci11dGlscy9idWlsZC9saWIvaW5kZXgubWpzOlxuICAoKipcbiAgICogbWF0Y2gtc29ydGVyLXV0aWxzXG4gICAqXG4gICAqIENvcHlyaWdodCAoYykgVGFuU3RhY2tcbiAgICpcbiAgICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gICAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAgICpcbiAgICogQGxpY2Vuc2UgTUlUXG4gICAqKVxuICAoKipcbiAgICogQG5hbWUgbWF0Y2gtc29ydGVyXG4gICAqIEBsaWNlbnNlIE1JVCBsaWNlbnNlLlxuICAgKiBAY29weXJpZ2h0IChjKSAyMDk5IEtlbnQgQy4gRG9kZHNcbiAgICogQGF1dGhvciBLZW50IEMuIERvZGRzIDxtZUBrZW50Y2RvZGRzLmNvbT4gKGh0dHBzOi8va2VudGNkb2Rkcy5jb20pXG4gICAqKVxuXG5Aa29iYWx0ZS91dGlscy9kaXN0L2luZGV4LmpzOlxuICAoKiFcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gYXJpYWtpdC5cbiAgICogTUlUIExpY2Vuc2VkLCBDb3B5cmlnaHQgKGMpIERpZWdvIEhhei5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgQXJpYWtpdCB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYXJpYWtpdC9hcmlha2l0L2Jsb2IvZGExNDI2NzJlZGRlZmE5OTM2NTc3M2NlZDcyMTcxZmFjYzA2ZmRjYi9wYWNrYWdlcy9hcmlha2l0LXV0aWxzL3NyYy9hcnJheS50c1xuICAgKilcbiAgKCohXG4gICAqIE9yaWdpbmFsIGNvZGUgYnkgQ2hha3JhIFVJXG4gICAqIE1JVCBMaWNlbnNlZCwgQ29weXJpZ2h0IChjKSAyMDE5IFNlZ3VuIEFkZWJheW8uXG4gICAqXG4gICAqIENyZWRpdHMgdG8gdGhlIENoYWtyYSBVSSB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vY2hha3JhLXVpL2NoYWtyYS11aS9ibG9iL21haW4vcGFja2FnZXMvdXRpbHMvc3JjL2Fzc2VydGlvbi50c1xuICAgKilcbiAgKCohXG4gICAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIHJlYWN0LXNwZWN0cnVtLlxuICAgKiBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMCwgQ29weXJpZ2h0IDIwMjAgQWRvYmUuXG4gICAqXG4gICAqIENyZWRpdHMgdG8gdGhlIFJlYWN0IFNwZWN0cnVtIHRlYW06XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zb2xpZGpzLWNvbW11bml0eS9zb2xpZC1hcmlhL2Jsb2IvMmM1ZjU0ZmViNWNmZWE1MTRiMWVlMGE1MmQwNDE2ODc4Zjg4MjM1MS9wYWNrYWdlcy91dGlscy9zcmMvY3JlYXRlR2xvYmFsTGlzdGVuZXJzLnRzXG4gICAqKVxuICAoKiFcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gYXJpYWtpdC5cbiAgICogTUlUIExpY2Vuc2VkLCBDb3B5cmlnaHQgKGMpIERpZWdvIEhhei5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgQXJpYWtpdCB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYXJpYWtpdC9hcmlha2l0L2Jsb2IvMjMyYmM3OTAxOGVjMjA5NjdmZWMxZTA5N2E5NDc0YWJhM2JiNWJlNy9wYWNrYWdlcy9hcmlha2l0LXV0aWxzL3NyYy9kb20udHNcbiAgICopXG4gICgqIVxuICAgKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSByZWFjdC1zcGVjdHJ1bS5cbiAgICogQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIENvcHlyaWdodCAyMDIwIEFkb2JlLlxuICAgKlxuICAgKiBDcmVkaXRzIHRvIHRoZSBSZWFjdCBTcGVjdHJ1bSB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vYmxvYi9jZjlhYjI0ZjMyNTViZTE1MzBkMGY1ODQwNjFhMDFhYTFlODE4MGU2L3BhY2thZ2VzL0ByZWFjdC1hcmlhL3V0aWxzL3NyYy9wbGF0Zm9ybS50c1xuICAgKilcbiAgKCohXG4gICAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIHJlYWN0LXNwZWN0cnVtLlxuICAgKiBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMCwgQ29weXJpZ2h0IDIwMjAgQWRvYmUuXG4gICAqXG4gICAqIENyZWRpdHMgdG8gdGhlIFJlYWN0IFNwZWN0cnVtIHRlYW06XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hZG9iZS9yZWFjdC1zcGVjdHJ1bS9ibG9iL2E5ZGVhOGEzNjcyMTc5ZTZjMzhhYWZkMTQyOWRhZjQ0YzdlYTJmZjYvcGFja2FnZXMvQHJlYWN0LWFyaWEvdXRpbHMvc3JjL2ZvY3VzV2l0aG91dFNjcm9sbGluZy50c1xuICAgKilcbiAgKCohXG4gICAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIGFyaWFraXQuXG4gICAqIE1JVCBMaWNlbnNlZCwgQ29weXJpZ2h0IChjKSBEaWVnbyBIYXouXG4gICAqXG4gICAqIENyZWRpdHMgdG8gdGhlIEFyaWFraXQgdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2FyaWFraXQvYXJpYWtpdC9ibG9iL21haW4vcGFja2FnZXMvYXJpYWtpdC11dGlscy9zcmMvZm9jdXMudHNcbiAgICpcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gcmVhY3Qtc3BlY3RydW0uXG4gICAqIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBDb3B5cmlnaHQgMjAyMCBBZG9iZS5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgUmVhY3QgU3BlY3RydW0gdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlL3JlYWN0LXNwZWN0cnVtL2Jsb2IvbWFpbi9wYWNrYWdlcy8lNDByZWFjdC1hcmlhL2ZvY3VzL3NyYy9pc0VsZW1lbnRWaXNpYmxlLnRzXG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hZG9iZS9yZWFjdC1zcGVjdHJ1bS9ibG9iLzhmMmYyYWNiM2Q1ODUwMzgyZWJlNjMxZjA1NWY4OGM3MDRhYTdkMTcvcGFja2FnZXMvQHJlYWN0LWFyaWEvZm9jdXMvc3JjL0ZvY3VzU2NvcGUudHN4XG4gICAqKVxuICAoKiFcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gcmVhY3Qtc3BlY3RydW0uXG4gICAqIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBDb3B5cmlnaHQgMjAyMCBBZG9iZS5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgUmVhY3QgU3BlY3RydW0gdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlL3JlYWN0LXNwZWN0cnVtL2Jsb2IvZjZlNjg2ZmU5ZDNiOTgzZDQ4NjUwOTgwYzFlY2ZkZGUzMjBiYzYyZi9wYWNrYWdlcy9AcmVhY3QtYXJpYS9mb2N1cy9zcmMvRm9jdXNTY29wZS50c3hcbiAgICopXG4gICgqIVxuICAgKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSByZWFjdC1zcGVjdHJ1bS5cbiAgICogQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIENvcHlyaWdodCAyMDIwIEFkb2JlLlxuICAgKlxuICAgKiBDcmVkaXRzIHRvIHRoZSBSZWFjdCBTcGVjdHJ1bSB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vYmxvYi9hOWRlYThhMzY3MjE3OWU2YzM4YWFmZDE0MjlkYWY0NGM3ZWEyZmY2L3BhY2thZ2VzL0ByZWFjdC1hcmlhL3V0aWxzL3NyYy9nZXRTY3JvbGxQYXJlbnQudHNcbiAgICopXG4gICgqIVxuICAgKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSByZWFjdC1zcGVjdHJ1bS5cbiAgICogQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIENvcHlyaWdodCAyMDIwIEFkb2JlLlxuICAgKlxuICAgKiBDcmVkaXRzIHRvIHRoZSBSZWFjdCBTcGVjdHJ1bSB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vYmxvYi9hOWRlYThhMzY3MjE3OWU2YzM4YWFmZDE0MjlkYWY0NGM3ZWEyZmY2L3BhY2thZ2VzL0ByZWFjdC1hcmlhL3V0aWxzL3NyYy9pc1ZpcnR1YWxFdmVudC50c1xuICAgKilcbiAgKCohXG4gICAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIHJlYWN0LXNwZWN0cnVtLlxuICAgKiBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMCwgQ29weXJpZ2h0IDIwMjAgQWRvYmUuXG4gICAqXG4gICAqIENyZWRpdHMgdG8gdGhlIFJlYWN0IFNwZWN0cnVtIHRlYW06XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hZG9iZS9yZWFjdC1zcGVjdHJ1bS9ibG9iL2ZmM2U2OTBmZmZjNmM1NDM2N2I4MDU3ZTI4YTBlNWI5MjExZjM3YjUvcGFja2FnZXMvQHJlYWN0LXN0YXRlbHkvdXRpbHMvc3JjL251bWJlci50c1xuICAgKilcbiAgKCohXG4gICAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIGFyaWFraXQuXG4gICAqIE1JVCBMaWNlbnNlZCwgQ29weXJpZ2h0IChjKSBEaWVnbyBIYXouXG4gICAqXG4gICAqIENyZWRpdHMgdG8gdGhlIEFyaWFraXQgdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2FyaWFraXQvYXJpYWtpdC9ibG9iLzg0ZTk3OTQzYWQ2MzdhNTgyYzAxYzliNTZkODgwY2Q5NWY1OTU3MzcvcGFja2FnZXMvYXJpYWtpdC9zcmMvaG92ZXJjYXJkL19fdXRpbHMvcG9seWdvbi50c1xuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYXJpYWtpdC9hcmlha2l0L2Jsb2IvZjJhOTY5NzNkZTUyM2Q2N2U0MWVlYzk4MzI2MzkzNmM0ODllZjNlMi9wYWNrYWdlcy9hcmlha2l0L3NyYy9ob3ZlcmNhcmQvX191dGlscy9kZWJ1Zy1wb2x5Z29uLnRzXG4gICAqKVxuICAoKiFcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gcmVhY3Qtc3BlY3RydW0uXG4gICAqIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBDb3B5cmlnaHQgMjAyMCBBZG9iZS5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgUmVhY3QgU3BlY3RydW0gdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlL3JlYWN0LXNwZWN0cnVtL2Jsb2IvYTlkZWE4YTM2NzIxNzllNmMzOGFhZmQxNDI5ZGFmNDRjN2VhMmZmNi9wYWNrYWdlcy9AcmVhY3QtYXJpYS91dGlscy9zcmMvcnVuQWZ0ZXJUcmFuc2l0aW9uLnRzXG4gICAqKVxuICAoKiFcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gcmVhY3Qtc3BlY3RydW0uXG4gICAqIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBDb3B5cmlnaHQgMjAyMCBBZG9iZS5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgUmVhY3QgU3BlY3RydW0gdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlL3JlYWN0LXNwZWN0cnVtL2Jsb2IvOGYyZjJhY2IzZDU4NTAzODJlYmU2MzFmMDU1Zjg4YzcwNGFhN2QxNy9wYWNrYWdlcy9AcmVhY3QtYXJpYS91dGlscy9zcmMvc2Nyb2xsSW50b1ZpZXcudHNcbiAgICopXG5cbkBrb2JhbHRlL2NvcmUvZGlzdC9lc20vaW5kZXguanM6XG4gICgqIVxuICAgKiBPcmlnaW5hbCBjb2RlIGJ5IENoYWtyYSBVSVxuICAgKiBNSVQgTGljZW5zZWQsIENvcHlyaWdodCAoYykgMjAxOSBTZWd1biBBZGViYXlvLlxuICAgKlxuICAgKiBDcmVkaXRzIHRvIHRoZSBDaGFrcmEgVUkgdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2NoYWtyYS11aS9jaGFrcmEtdWkvYmxvYi9tYWluL3BhY2thZ2VzL2NvbG9yLW1vZGUvc3JjL2NvbG9yLW1vZGUtY29udGV4dC50c1xuICAgKilcblxuQGtvYmFsdGUvY29yZS9kaXN0L2VzbS9pbmRleC5qczpcbiAgKCohXG4gICAqIE9yaWdpbmFsIGNvZGUgYnkgQ2hha3JhIFVJXG4gICAqIE1JVCBMaWNlbnNlZCwgQ29weXJpZ2h0IChjKSAyMDE5IFNlZ3VuIEFkZWJheW8uXG4gICAqXG4gICAqIENyZWRpdHMgdG8gdGhlIENoYWtyYSBVSSB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vY2hha3JhLXVpL2NoYWtyYS11aS9ibG9iL21haW4vcGFja2FnZXMvY29sb3ItbW9kZS9zcmMvc3RvcmFnZS1tYW5hZ2VyLnRzXG4gICAqKVxuXG5Aa29iYWx0ZS9jb3JlL2Rpc3QvZXNtL2luZGV4LmpzOlxuICAoKiFcbiAgICogT3JpZ2luYWwgY29kZSBieSBDaGFrcmEgVUlcbiAgICogTUlUIExpY2Vuc2VkLCBDb3B5cmlnaHQgKGMpIDIwMTkgU2VndW4gQWRlYmF5by5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgQ2hha3JhIFVJIHRlYW06XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFrcmEtdWkvY2hha3JhLXVpL2Jsb2IvbWFpbi9wYWNrYWdlcy9jb2xvci1tb2RlL3NyYy9jb2xvci1tb2RlLnV0aWxzLnRzXG4gICAqKVxuXG5Aa29iYWx0ZS9jb3JlL2Rpc3QvZXNtL2luZGV4LmpzOlxuICAoKiFcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gcmVhY3Qtc3BlY3RydW0uXG4gICAqIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBDb3B5cmlnaHQgMjAyMCBBZG9iZS5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgUmVhY3QgU3BlY3RydW0gdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlL3JlYWN0LXNwZWN0cnVtL2Jsb2IvYmZjZTg0ZmVlMTJhMDI3ZDljYmMzOGI0M2UxNzQ3ZTNlNGI0YjE2OS9wYWNrYWdlcy9AcmVhY3Qtc3RhdGVseS9jb2xsZWN0aW9ucy9zcmMvdXNlQ29sbGVjdGlvbi50c1xuICAgKilcbiAgKCohXG4gICAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIHJlYWN0LXNwZWN0cnVtLlxuICAgKiBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMCwgQ29weXJpZ2h0IDIwMjAgQWRvYmUuXG4gICAqXG4gICAqIENyZWRpdHMgdG8gdGhlIFJlYWN0IFNwZWN0cnVtIHRlYW06XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hZG9iZS9yZWFjdC1zcGVjdHJ1bS9ibG9iLzIyY2IzMmQzMjllNjZjNjBmNTVkNGZjNDAyNWQxZDQ0YmIwMTVkNzEvcGFja2FnZXMvQHJlYWN0LXN0YXRlbHkvY29sbGVjdGlvbnMvc3JjL2dldEl0ZW1Db3VudC50c1xuICAgKilcblxuQGtvYmFsdGUvY29yZS9kaXN0L2VzbS9pbmRleC5qczpcbiAgKCohXG4gICAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIHJhZGl4LXVpLXByaW1pdGl2ZXMuXG4gICAqIE1JVCBMaWNlbnNlZCwgQ29weXJpZ2h0IChjKSAyMDIyIFdvcmtPUy5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgUmFkaXggVUkgdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3JhZGl4LXVpL3ByaW1pdGl2ZXMvYmxvYi84MWIyNWY0YjQwYzU0ZjcyYWViMTA2Y2EwZTY0ZTFlMDk2NTUxNTNlL3BhY2thZ2VzL3JlYWN0L2Rpc21pc3NhYmxlLWxheWVyL3NyYy9EaXNtaXNzYWJsZUxheWVyLnRzeFxuICAgKlxuICAgKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSB6YWcuXG4gICAqIE1JVCBMaWNlbnNlZCwgQ29weXJpZ2h0IChjKSAyMDIxIENoYWtyYSBVSS5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgQ2hha3JhIFVJIHRlYW06XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFrcmEtdWkvemFnL2Jsb2IvZDFkYmY5ZTI0MDgwM2M5ZTNlZDgxZWJlZjM2MzczOWJlNDI3M2RlMC9wYWNrYWdlcy91dGlsaXRpZXMvZGlzbWlzc2FibGUvc3JjL2xheWVyLXN0YWNrLnRzXG4gICAqKVxuICAoKiFcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gcmFkaXgtdWktcHJpbWl0aXZlcy5cbiAgICogTUlUIExpY2Vuc2VkLCBDb3B5cmlnaHQgKGMpIDIwMjIgV29ya09TLlxuICAgKlxuICAgKiBDcmVkaXRzIHRvIHRoZSBSYWRpeCBVSSB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vcmFkaXgtdWkvcHJpbWl0aXZlcy9ibG9iLzgxYjI1ZjRiNDBjNTRmNzJhZWIxMDZjYTBlNjRlMWUwOTY1NTE1M2UvcGFja2FnZXMvcmVhY3QvZm9jdXMtc2NvcGUvc3JjL0ZvY3VzU2NvcGUudHN4XG4gICAqXG4gICAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIHphZy5cbiAgICogTUlUIExpY2Vuc2VkLCBDb3B5cmlnaHQgKGMpIDIwMjEgQ2hha3JhIFVJLlxuICAgKlxuICAgKiBDcmVkaXRzIHRvIHRoZSBDaGFrcmEgVUkgdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2NoYWtyYS11aS96YWcvYmxvYi9kMWRiZjllMjQwODAzYzllM2VkODFlYmVmMzYzNzM5YmU0MjczZGUwL3BhY2thZ2VzL3V0aWxpdGllcy9mb2N1cy1zY29wZS9zcmMvZm9jdXMtb24tY2hpbGQtdW5tb3VudC50c1xuICAgKiBodHRwczovL2dpdGh1Yi5jb20vY2hha3JhLXVpL3phZy9ibG9iL2QxZGJmOWUyNDA4MDNjOWUzZWQ4MWViZWYzNjM3MzliZTQyNzNkZTAvcGFja2FnZXMvdXRpbGl0aWVzL2ZvY3VzLXNjb3BlL3NyYy9mb2N1cy1jb250YWlubWVudC50c1xuICAgKilcbiAgKCohXG4gICAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIHphZy5cbiAgICogTUlUIExpY2Vuc2VkLCBDb3B5cmlnaHQgKGMpIDIwMjEgQ2hha3JhIFVJLlxuICAgKlxuICAgKiBDcmVkaXRzIHRvIHRoZSB6YWcgdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2NoYWtyYS11aS96YWcvYmxvYi9jMWU2Yzc2ODliMjJiZjU4NzQxZGVkN2NmMjI0ZGQ5YmFlYzJhMDQ2L3BhY2thZ2VzL3V0aWxpdGllcy9mb3JtLXV0aWxzL3NyYy9mb3JtLnRzXG4gICAqKVxuICAoKiFcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gcmVhY3Qtc3BlY3RydW0uXG4gICAqIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBDb3B5cmlnaHQgMjAyMCBBZG9iZS5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgUmVhY3QgU3BlY3RydW0gdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlL3JlYWN0LXNwZWN0cnVtL2Jsb2IvMTVlMTAxYjc0OTY2YmQ1ZWI3MTljNjUyOWNlNzFjZTU3ZWFlZDQzMC9wYWNrYWdlcy9AcmVhY3QtYXJpYS9saXZlLWFubm91bmNlci9zcmMvTGl2ZUFubm91bmNlci50c3hcbiAgICopXG5cbkBrb2JhbHRlL2NvcmUvZGlzdC9lc20vaW5kZXguanM6XG4gICgqIVxuICAgKiBUaGlzIGZpbGUgaXMgYmFzZWQgb24gY29kZSBmcm9tIHJlYWN0LXNwZWN0cnVtLlxuICAgKiBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMCwgQ29weXJpZ2h0IDIwMjAgQWRvYmUuXG4gICAqXG4gICAqIENyZWRpdHMgdG8gdGhlIFJlYWN0IFNwZWN0cnVtIHRlYW06XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hZG9iZS9yZWFjdC1zcGVjdHJ1bS9ibG9iLzgxMDU3OWI2NzE3OTFmMTU5MzEwOGY2MmNkYzE4OTNkZTNhMjIwZTMvcGFja2FnZXMvQHJlYWN0LWFyaWEvb3ZlcmxheXMvc3JjL2FyaWFIaWRlT3V0c2lkZS50c1xuICAgKilcbiAgKCohXG4gICAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIHJhZGl4LXVpLXByaW1pdGl2ZXMuXG4gICAqIE1JVCBMaWNlbnNlZCwgQ29weXJpZ2h0IChjKSAyMDIyIFdvcmtPUy5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgUmFkaXggVUkgdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3JhZGl4LXVpL3ByaW1pdGl2ZXMvYmxvYi84MWIyNWY0YjQwYzU0ZjcyYWViMTA2Y2EwZTY0ZTFlMDk2NTUxNTNlL3BhY2thZ2VzL3JlYWN0L2Rpc21pc3NhYmxlLWxheWVyL3NyYy9EaXNtaXNzYWJsZUxheWVyLnRzeFxuICAgKlxuICAgKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSB6YWcuXG4gICAqIE1JVCBMaWNlbnNlZCwgQ29weXJpZ2h0IChjKSAyMDIxIENoYWtyYSBVSS5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgQ2hha3JhIFVJIHRlYW06XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFrcmEtdWkvemFnL2Jsb2IvZDFkYmY5ZTI0MDgwM2M5ZTNlZDgxZWJlZjM2MzczOWJlNDI3M2RlMC9wYWNrYWdlcy91dGlsaXRpZXMvaW50ZXJhY3Qtb3V0c2lkZS9zcmMvaW5kZXgudHNcbiAgICopXG4gICgqIVxuICAgKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSByYWRpeC11aS1wcmltaXRpdmVzLlxuICAgKiBNSVQgTGljZW5zZWQsIENvcHlyaWdodCAoYykgMjAyMiBXb3JrT1MuXG4gICAqXG4gICAqIENyZWRpdHMgdG8gdGhlIFJhZGl4IFVJIHRlYW06XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9yYWRpeC11aS9wcmltaXRpdmVzL2Jsb2IvMjFhN2M5N2RjOGVmYTc5ZmVjY2EzNjQyOGVlYzQ5ZjE4NzI5NDA4NS9wYWNrYWdlcy9yZWFjdC9wcmVzZW5jZS9zcmMvUHJlc2VuY2UudHN4XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9yYWRpeC11aS9wcmltaXRpdmVzL2Jsb2IvMjFhN2M5N2RjOGVmYTc5ZmVjY2EzNjQyOGVlYzQ5ZjE4NzI5NDA4NS9wYWNrYWdlcy9yZWFjdC9wcmVzZW5jZS9zcmMvdXNlU3RhdGVNYWNoaW5lLnRzeFxuICAgKilcbiAgKCohXG4gICAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIGZsb2F0aW5nLXVpLlxuICAgKiBNSVQgTGljZW5zZWQsIENvcHlyaWdodCAoYykgMjAyMSBGbG9hdGluZyBVSSBjb250cmlidXRvcnMuXG4gICAqXG4gICAqIENyZWRpdHMgdG8gdGhlIEZsb2F0aW5nIFVJIGNvbnRyaWJ1dG9yczpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2Zsb2F0aW5nLXVpL2Zsb2F0aW5nLXVpL2Jsb2IvZjdjZTk0MjBhYTMyYzE1MGViNDUwNDlmMTJjZjNiNTUwNjcxNTM0MS9wYWNrYWdlcy9yZWFjdC9zcmMvY29tcG9uZW50cy9GbG9hdGluZ092ZXJsYXkudHN4XG4gICAqXG4gICAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIGFyaWFraXQuXG4gICAqIE1JVCBMaWNlbnNlZCwgQ29weXJpZ2h0IChjKSBEaWVnbyBIYXouXG4gICAqXG4gICAqIENyZWRpdHMgdG8gdGhlIEFyaWFraXQgdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2FyaWFraXQvYXJpYWtpdC9ibG9iLzVkOGExZjA0N2ZjYWRjZjExNzA3M2M3MDM1OTY2M2EzOTQ2YjczYmYvcGFja2FnZXMvYXJpYWtpdC9zcmMvZGlhbG9nL19fdXRpbHMvdXNlLXByZXZlbnQtYm9keS1zY3JvbGwudHNcbiAgICopXG4gICgqIVxuICAgKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSBhcmlha2l0LlxuICAgKiBNSVQgTGljZW5zZWQsIENvcHlyaWdodCAoYykgRGllZ28gSGF6LlxuICAgKlxuICAgKiBDcmVkaXRzIHRvIHRoZSBhcmlha2l0IHRlYW06XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hcmlha2l0L2FyaWFraXQvYmxvYi84YTEzODk5ZmY4MDdiYmYzOWYzZDg5ZDJkNTk2NDA0MmJhNGQ1Mjg3L3BhY2thZ2VzL2FyaWFraXQtcmVhY3QtdXRpbHMvc3JjL2hvb2tzLnRzXG4gICAqKVxuICAoKiFcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gcmVhY3Qtc3BlY3RydW0uXG4gICAqIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBDb3B5cmlnaHQgMjAyMCBBZG9iZS5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgUmVhY3QgU3BlY3RydW0gdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlL3JlYWN0LXNwZWN0cnVtL2Jsb2IvYTEzODAyZDhiZTZmODNhZjE0NTBlNTZmN2E4ODUyN2IxMGQ5Y2FkZi9wYWNrYWdlcy9AcmVhY3Qtc3RhdGVseS90b2dnbGUvc3JjL3VzZVRvZ2dsZVN0YXRlLnRzXG4gICAqKVxuICAoKiFcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gbWFudGluZWRldi5cbiAgICogTUlUIExpY2Vuc2VkLCBDb3B5cmlnaHQgKGMpIDIwMjEgVml0YWx5IFJ0aXNoY2hldi5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgTWFudGluZWRldiB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vbWFudGluZWRldi9tYW50aW5lL2Jsb2IvODU0NmM1ODBmZGNhYTk2NTNlZGM2ZjQ4MTMxMDMzNDlhOTZjZmIwOS9zcmMvbWFudGluZS1jb3JlL3NyYy9UcmFuc2l0aW9uL2dldC10cmFuc2l0aW9uLXN0eWxlcy9nZXQtdHJhbnNpdGlvbi1zdHlsZXMudHNcbiAgICopXG5cbkBrb2JhbHRlL2NvcmUvZGlzdC9lc20vaW5kZXguanM6XG4gICgqIVxuICAgKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSBtYW50aW5lZGV2LlxuICAgKiBNSVQgTGljZW5zZWQsIENvcHlyaWdodCAoYykgMjAyMSBWaXRhbHkgUnRpc2hjaGV2LlxuICAgKlxuICAgKiBDcmVkaXRzIHRvIHRoZSBNYW50aW5lZGV2IHRlYW06XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tYW50aW5lZGV2L21hbnRpbmUvYmxvYi84NTQ2YzU4MGZkY2FhOTY1M2VkYzZmNDgxMzEwMzM0OWE5NmNmYjA5L3NyYy9tYW50aW5lLWNvcmUvc3JjL1RyYW5zaXRpb24vdXNlLXRyYW5zaXRpb24udHNcbiAgICopXG5cbkBrb2JhbHRlL2NvcmUvZGlzdC9lc20vaW5kZXguanM6XG4gICgqIVxuICAgKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSByZWFjdC1zcGVjdHJ1bS5cbiAgICogQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIENvcHlyaWdodCAyMDIwIEFkb2JlLlxuICAgKlxuICAgKiBDcmVkaXRzIHRvIHRoZSBSZWFjdCBTcGVjdHJ1bSB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vYmxvYi83MGU3Y2FmMTk0NmM0MjNiYzlhYTljYjBlNTBkYmRiZTk1M2QyMzliL3BhY2thZ2VzL0ByZWFjdC1hcmlhL2xhYmVsL3NyYy91c2VGaWVsZC50c1xuICAgKilcblxuQGtvYmFsdGUvY29yZS9kaXN0L2VzbS9pbmRleC5qczpcbiAgKCohXG4gICAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIHJlYWN0LXNwZWN0cnVtLlxuICAgKiBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMCwgQ29weXJpZ2h0IDIwMjAgQWRvYmUuXG4gICAqXG4gICAqIENyZWRpdHMgdG8gdGhlIFJlYWN0IFNwZWN0cnVtIHRlYW06XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hZG9iZS9yZWFjdC1zcGVjdHJ1bS9ibG9iL2IzNWQ1YzAyZmU5MDBiYWRjY2QwY2YxYThmMjNiYjU5MzQxOWYyMzgvcGFja2FnZXMvQHJlYWN0LWFyaWEvaTE4bi9zcmMvdXRpbHMudHNcbiAgICopXG4gICgqIVxuICAgKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSByZWFjdC1zcGVjdHJ1bS5cbiAgICogQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIENvcHlyaWdodCAyMDIwIEFkb2JlLlxuICAgKlxuICAgKiBDcmVkaXRzIHRvIHRoZSBSZWFjdCBTcGVjdHJ1bSB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vYmxvYi9iMzVkNWMwMmZlOTAwYmFkY2NkMGNmMWE4ZjIzYmI1OTM0MTlmMjM4L3BhY2thZ2VzL0ByZWFjdC1hcmlhL2kxOG4vc3JjL3VzZURlZmF1bHRMb2NhbGUudHNcbiAgICopXG5cbkBrb2JhbHRlL2NvcmUvZGlzdC9lc20vaW5kZXguanM6XG4gICgqIVxuICAgKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSByZWFjdC1zcGVjdHJ1bS5cbiAgICogQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIENvcHlyaWdodCAyMDIwIEFkb2JlLlxuICAgKlxuICAgKiBDcmVkaXRzIHRvIHRoZSBSZWFjdCBTcGVjdHJ1bSB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vYmxvYi9iMzVkNWMwMmZlOTAwYmFkY2NkMGNmMWE4ZjIzYmI1OTM0MTlmMjM4L3BhY2thZ2VzL0ByZWFjdC1hcmlhL2kxOG4vc3JjL3VzZUNvbGxhdG9yLnRzXG4gICAqKVxuICAoKiFcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gcmVhY3Qtc3BlY3RydW0uXG4gICAqIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBDb3B5cmlnaHQgMjAyMCBBZG9iZS5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgUmVhY3QgU3BlY3RydW0gdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlL3JlYWN0LXNwZWN0cnVtL2Jsb2IvMTVlMTAxYjc0OTY2YmQ1ZWI3MTljNjUyOWNlNzFjZTU3ZWFlZDQzMC9wYWNrYWdlcy9AcmVhY3QtYXJpYS9pMThuL3NyYy91c2VEYXRlRm9ybWF0dGVyLnRzXG4gICAqKVxuXG5Aa29iYWx0ZS9jb3JlL2Rpc3QvZXNtL2luZGV4LmpzOlxuICAoKiFcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gcmVhY3Qtc3BlY3RydW0uXG4gICAqIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBDb3B5cmlnaHQgMjAyMCBBZG9iZS5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgUmVhY3QgU3BlY3RydW0gdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlL3JlYWN0LXNwZWN0cnVtL2Jsb2IvMjJjYjMyZDMyOWU2NmM2MGY1NWQ0ZmM0MDI1ZDFkNDRiYjAxNWQ3MS9wYWNrYWdlcy9AcmVhY3QtYXJpYS9pMThuL3NyYy91c2VGaWx0ZXIudHNcbiAgICopXG5cbkBrb2JhbHRlL2NvcmUvZGlzdC9lc20vaW5kZXguanM6XG4gICgqIVxuICAgKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSByZWFjdC1zcGVjdHJ1bS5cbiAgICogQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIENvcHlyaWdodCAyMDIwIEFkb2JlLlxuICAgKlxuICAgKiBDcmVkaXRzIHRvIHRoZSBSZWFjdCBTcGVjdHJ1bSB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vYmxvYi8yM2MzYTkxZTdiODc5NTJmMDdkYTlkYTExNTE4OGJkMmFiZDk5ZDc3L3BhY2thZ2VzL0ByZWFjdC1hcmlhL2kxOG4vc3JjL3VzZU1lc3NhZ2VGb3JtYXR0ZXIudHNcbiAgICopXG5cbkBrb2JhbHRlL2NvcmUvZGlzdC9lc20vaW5kZXguanM6XG4gICgqIVxuICAgKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSByZWFjdC1zcGVjdHJ1bS5cbiAgICogQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIENvcHlyaWdodCAyMDIwIEFkb2JlLlxuICAgKlxuICAgKiBDcmVkaXRzIHRvIHRoZSBSZWFjdCBTcGVjdHJ1bSB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vYmxvYi9iMzVkNWMwMmZlOTAwYmFkY2NkMGNmMWE4ZjIzYmI1OTM0MTlmMjM4L3BhY2thZ2VzL0ByZWFjdC1hcmlhL2kxOG4vc3JjL3VzZU51bWJlckZvcm1hdHRlci50c1xuICAgKilcblxuQGtvYmFsdGUvY29yZS9kaXN0L2VzbS9pbmRleC5qczpcbiAgKCohXG4gICAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIHJlYWN0LXNwZWN0cnVtLlxuICAgKiBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMCwgQ29weXJpZ2h0IDIwMjAgQWRvYmUuXG4gICAqXG4gICAqIENyZWRpdHMgdG8gdGhlIFJlYWN0IFNwZWN0cnVtIHRlYW06XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hZG9iZS9yZWFjdC1zcGVjdHJ1bS9ibG9iL2JmY2U4NGZlZTEyYTAyN2Q5Y2JjMzhiNDNlMTc0N2UzZTRiNGIxNjkvcGFja2FnZXMvQHJlYWN0LXN0YXRlbHkvc2VsZWN0aW9uL3NyYy9TZWxlY3Rpb24udHNcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlL3JlYWN0LXNwZWN0cnVtL2Jsb2IvYmZjZTg0ZmVlMTJhMDI3ZDljYmMzOGI0M2UxNzQ3ZTNlNGI0YjE2OS9wYWNrYWdlcy9AcmVhY3Qtc3RhdGVseS9zZWxlY3Rpb24vc3JjL3R5cGVzLnRzXG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hZG9iZS9yZWFjdC1zcGVjdHJ1bS9ibG9iL2JmY2U4NGZlZTEyYTAyN2Q5Y2JjMzhiNDNlMTc0N2UzZTRiNGIxNjkvcGFja2FnZXMvQHJlYWN0LXR5cGVzL3NoYXJlZC9zcmMvc2VsZWN0aW9uLmQudHNcbiAgICopXG4gICgqIVxuICAgKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSByZWFjdC1zcGVjdHJ1bS5cbiAgICogQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIENvcHlyaWdodCAyMDIwIEFkb2JlLlxuICAgKlxuICAgKiBDcmVkaXRzIHRvIHRoZSBSZWFjdCBTcGVjdHJ1bSB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vYmxvYi84ZjJmMmFjYjNkNTg1MDM4MmViZTYzMWYwNTVmODhjNzA0YWE3ZDE3L3BhY2thZ2VzL0ByZWFjdC1hcmlhL3NlbGVjdGlvbi9zcmMvdXRpbHMudHNcbiAgICopXG4gICgqIVxuICAgKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSByZWFjdC1zcGVjdHJ1bS5cbiAgICogQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIENvcHlyaWdodCAyMDIwIEFkb2JlLlxuICAgKlxuICAgKiBDcmVkaXRzIHRvIHRoZSBSZWFjdCBTcGVjdHJ1bSB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vYmxvYi9iZmNlODRmZWUxMmEwMjdkOWNiYzM4YjQzZTE3NDdlM2U0YjRiMTY5L3BhY2thZ2VzL0ByZWFjdC1zdGF0ZWx5L3NlbGVjdGlvbi9zcmMvdXNlTXVsdGlwbGVTZWxlY3Rpb25TdGF0ZS50c1xuICAgKilcbiAgKCohXG4gICAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIHJlYWN0LXNwZWN0cnVtLlxuICAgKiBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMCwgQ29weXJpZ2h0IDIwMjAgQWRvYmUuXG4gICAqXG4gICAqIENyZWRpdHMgdG8gdGhlIFJlYWN0IFNwZWN0cnVtIHRlYW06XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hZG9iZS9yZWFjdC1zcGVjdHJ1bS9ibG9iLzhmMmYyYWNiM2Q1ODUwMzgyZWJlNjMxZjA1NWY4OGM3MDRhYTdkMTcvcGFja2FnZXMvQHJlYWN0LWFyaWEvc2VsZWN0aW9uL3NyYy91c2VUeXBlU2VsZWN0LnRzXG4gICAqKVxuICAoKiFcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gcmVhY3Qtc3BlY3RydW0uXG4gICAqIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBDb3B5cmlnaHQgMjAyMCBBZG9iZS5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgUmVhY3QgU3BlY3RydW0gdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlL3JlYWN0LXNwZWN0cnVtL2Jsb2IvOGYyZjJhY2IzZDU4NTAzODJlYmU2MzFmMDU1Zjg4YzcwNGFhN2QxNy9wYWNrYWdlcy9AcmVhY3QtYXJpYS9zZWxlY3Rpb24vc3JjL3VzZVNlbGVjdGFibGVDb2xsZWN0aW9uLnRzXG4gICAqKVxuICAoKiFcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gcmVhY3Qtc3BlY3RydW0uXG4gICAqIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBDb3B5cmlnaHQgMjAyMCBBZG9iZS5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgUmVhY3QgU3BlY3RydW0gdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlL3JlYWN0LXNwZWN0cnVtL2Jsb2IvOGYyZjJhY2IzZDU4NTAzODJlYmU2MzFmMDU1Zjg4YzcwNGFhN2QxNy9wYWNrYWdlcy9AcmVhY3QtYXJpYS9zZWxlY3Rpb24vc3JjL3VzZVNlbGVjdGFibGVJdGVtLnRzXG4gICAqKVxuICAoKiFcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gcmVhY3Qtc3BlY3RydW0uXG4gICAqIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBDb3B5cmlnaHQgMjAyMCBBZG9iZS5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgUmVhY3QgU3BlY3RydW0gdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlL3JlYWN0LXNwZWN0cnVtL2Jsb2IvYmZjZTg0ZmVlMTJhMDI3ZDljYmMzOGI0M2UxNzQ3ZTNlNGI0YjE2OS9wYWNrYWdlcy9AcmVhY3Qtc3RhdGVseS9zZWxlY3Rpb24vc3JjL1NlbGVjdGlvbk1hbmFnZXIudHNcbiAgICopXG4gICgqIVxuICAgKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSByZWFjdC1zcGVjdHJ1bS5cbiAgICogQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIENvcHlyaWdodCAyMDIwIEFkb2JlLlxuICAgKlxuICAgKiBDcmVkaXRzIHRvIHRoZSBSZWFjdCBTcGVjdHJ1bSB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vYmxvYi9iZmNlODRmZWUxMmEwMjdkOWNiYzM4YjQzZTE3NDdlM2U0YjRiMTY5L3BhY2thZ2VzL0ByZWFjdC1zdGF0ZWx5L2xpc3Qvc3JjL0xpc3RDb2xsZWN0aW9uLnRzXG4gICAqKVxuICAoKiFcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gcmVhY3Qtc3BlY3RydW0uXG4gICAqIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBDb3B5cmlnaHQgMjAyMCBBZG9iZS5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgUmVhY3QgU3BlY3RydW0gdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlL3JlYWN0LXNwZWN0cnVtL2Jsb2IvYmZjZTg0ZmVlMTJhMDI3ZDljYmMzOGI0M2UxNzQ3ZTNlNGI0YjE2OS9wYWNrYWdlcy9AcmVhY3Qtc3RhdGVseS9saXN0L3NyYy91c2VMaXN0U3RhdGUudHNcbiAgICopXG4gICgqIVxuICAgKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSByZWFjdC1zcGVjdHJ1bS5cbiAgICogQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIENvcHlyaWdodCAyMDIwIEFkb2JlLlxuICAgKlxuICAgKiBDcmVkaXRzIHRvIHRoZSBSZWFjdCBTcGVjdHJ1bSB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vYmxvYi84ZjJmMmFjYjNkNTg1MDM4MmViZTYzMWYwNTVmODhjNzA0YWE3ZDE3L3BhY2thZ2VzL0ByZWFjdC1hcmlhL3NlbGVjdGlvbi9zcmMvTGlzdEtleWJvYXJkRGVsZWdhdGUudHNcbiAgICopXG4gICgqIVxuICAgKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSByZWFjdC1zcGVjdHJ1bS5cbiAgICogQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIENvcHlyaWdodCAyMDIwIEFkb2JlLlxuICAgKlxuICAgKiBDcmVkaXRzIHRvIHRoZSBSZWFjdCBTcGVjdHJ1bSB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vYmxvYi84ZjJmMmFjYjNkNTg1MDM4MmViZTYzMWYwNTVmODhjNzA0YWE3ZDE3L3BhY2thZ2VzL0ByZWFjdC1hcmlhL3NlbGVjdGlvbi9zcmMvdXNlU2VsZWN0YWJsZUxpc3QudHNcbiAgICopXG4gICgqIVxuICAgKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSByZWFjdC1zcGVjdHJ1bS5cbiAgICogQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIENvcHlyaWdodCAyMDIwIEFkb2JlLlxuICAgKlxuICAgKiBDcmVkaXRzIHRvIHRoZSBSZWFjdCBTcGVjdHJ1bSB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vYmxvYi84ZjJmMmFjYjNkNTg1MDM4MmViZTYzMWYwNTVmODhjNzA0YWE3ZDE3L3BhY2thZ2VzL0ByZWFjdC1zdGF0ZWx5L2xpc3Qvc3JjL3VzZVNpbmdsZVNlbGVjdExpc3RTdGF0ZS50c1xuICAgKilcblxuQGtvYmFsdGUvY29yZS9kaXN0L2VzbS9pbmRleC5qczpcbiAgKCohXG4gICAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIGFyaWFraXRcbiAgICogTUlUIExpY2Vuc2VkLCBDb3B5cmlnaHQgKGMpIERpZWdvIEhhei5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgYXJpYWtpdCB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vaG9wZS11aS9ob3BlLXVpL2Jsb2IvNTQxMjViMTMwMTk1ZjM3MTYxZGJlZWVhMGMyMWRjM2IxOThiYzNhYy9wYWNrYWdlcy9jb3JlL3NyYy9idXR0b24vaXMtYnV0dG9uLnRzXG4gICAqKVxuXG5Aa29iYWx0ZS9jb3JlL2Rpc3QvZXNtL2luZGV4LmpzOlxuICAoKiFcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gYXJpYWtpdC5cbiAgICogTUlUIExpY2Vuc2VkLCBDb3B5cmlnaHQgKGMpIERpZWdvIEhhei5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgQXJpYWtpdCB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYXJpYWtpdC9hcmlha2l0L2Jsb2IvZGExNDI2NzJlZGRlZmE5OTM2NTc3M2NlZDcyMTcxZmFjYzA2ZmRjYi9wYWNrYWdlcy9hcmlha2l0L3NyYy9jb2xsZWN0aW9uL2NvbGxlY3Rpb24tc3RhdGUudHNcbiAgICopXG4gICgqIVxuICAgKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSBhcmlha2l0LlxuICAgKiBNSVQgTGljZW5zZWQsIENvcHlyaWdodCAoYykgRGllZ28gSGF6LlxuICAgKlxuICAgKiBDcmVkaXRzIHRvIHRoZSBBcmlha2l0IHRlYW06XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hcmlha2l0L2FyaWFraXQvYmxvYi9kYTE0MjY3MmVkZGVmYTk5MzY1NzczY2VkNzIxNzFmYWNjMDZmZGNiL3BhY2thZ2VzL2FyaWFraXQvc3JjL2NvbGxlY3Rpb24vY29sbGVjdGlvbi50c3hcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2FyaWFraXQvYXJpYWtpdC9ibG9iL2RhMTQyNjcyZWRkZWZhOTkzNjU3NzNjZWQ3MjE3MWZhY2MwNmZkY2IvcGFja2FnZXMvYXJpYWtpdC9zcmMvY29sbGVjdGlvbi9jb2xsZWN0aW9uLXN0YXRlLnRzXG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hcmlha2l0L2FyaWFraXQvYmxvYi9kYTE0MjY3MmVkZGVmYTk5MzY1NzczY2VkNzIxNzFmYWNjMDZmZGNiL3BhY2thZ2VzL2FyaWFraXQvc3JjL2NvbGxlY3Rpb24vY29sbGVjdGlvbi1pdGVtLnRzXG4gICAqKVxuXG5Aa29iYWx0ZS9jb3JlL2Rpc3QvZXNtL2luZGV4LmpzOlxuICAoKiFcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gcmVhY3Qtc3BlY3RydW0uXG4gICAqIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBDb3B5cmlnaHQgMjAyMCBBZG9iZS5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgUmVhY3QgU3BlY3RydW0gdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlL3JlYWN0LXNwZWN0cnVtL2Jsb2IvMGExZDBjZDRlMWIyZjc3ZWVkN2MwZWEwOGZjZThhMDRmOGRlNjkyMS9wYWNrYWdlcy9AcmVhY3Qtc3RhdGVseS9jYWxlbmRhci9zcmMvdXRpbHMudHNcbiAgICpcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gemFnLCBiYXNlZCBvbiBjb2RlIGZyb20gcmVhY3Qtc3BlY3RydW0uXG4gICAqIE1JVCBMaWNlbnNlZCwgQ29weXJpZ2h0IChjKSAyMDIxIENoYWtyYSBVSS5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgQ2hha3JhIFVJIHRlYW06XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFrcmEtdWkvemFnL2Jsb2IvbWFpbi9wYWNrYWdlcy91dGlsaXRpZXMvZGF0ZS11dGlscy9zcmMvcGFnaW5hdGlvbi50c1xuICAgKilcblxuQGtvYmFsdGUvY29yZS9kaXN0L2VzbS9pbmRleC5qczpcbiAgKCohXG4gICAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIHJhZGl4LXVpLXByaW1pdGl2ZXMuXG4gICAqIE1JVCBMaWNlbnNlZCwgQ29weXJpZ2h0IChjKSAyMDIyIFdvcmtPUy5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgUmFkaXggVUkgdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3JhZGl4LXVpL3ByaW1pdGl2ZXMvYmxvYi84MWIyNWY0YjQwYzU0ZjcyYWViMTA2Y2EwZTY0ZTFlMDk2NTUxNTNlL3BhY2thZ2VzL3JlYWN0L21lbnUvc3JjL01lbnUudHN4XG4gICAqKVxuXG5Aa29iYWx0ZS9jb3JlL2Rpc3QvZXNtL2luZGV4LmpzOlxuICAoKiFcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gcmVhY3Qtc3BlY3RydW0uXG4gICAqIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBDb3B5cmlnaHQgMjAyMCBBZG9iZS5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgUmVhY3QgU3BlY3RydW0gdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlL3JlYWN0LXNwZWN0cnVtL2Jsb2IvOTUwZDQ1ZGIzNmU2Mzg1MWY0MTFlZDBkYzZhNWFhZDBhZjU3ZGE2OC9wYWNrYWdlcy9AcmVhY3Qtc3RhdGVseS9kYXRlcGlja2VyL3NyYy9wbGFjZWhvbGRlcnMudHNcbiAgICopXG5cbkBrb2JhbHRlL2NvcmUvZGlzdC9lc20vaW5kZXguanM6XG4gICgqIVxuICAgKiBQb3J0aW9ucyBvZiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSByZWFjdC1zcGVjdHJ1bS5cbiAgICogQXBhY2hlIExpY2Vuc2UgVmVyc2lvbiAyLjAsIENvcHlyaWdodCAyMDIwIEFkb2JlLlxuICAgKlxuICAgKiBDcmVkaXRzIHRvIHRoZSBSZWFjdCBTcGVjdHJ1bSB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vYmxvYi85NTBkNDVkYjM2ZTYzODUxZjQxMWVkMGRjNmE1YWFkMGFmNTdkYTY4L3BhY2thZ2VzL0ByZWFjdC1zdGF0ZWx5L2RhdGVwaWNrZXIvc3JjL3V0aWxzLnRzXG4gICAqKVxuXG5Aa29iYWx0ZS9jb3JlL2Rpc3QvZXNtL2luZGV4LmpzOlxuICAoKiFcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gcmVhY3Qtc3BlY3RydW0uXG4gICAqIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBDb3B5cmlnaHQgMjAyMCBBZG9iZS5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgUmVhY3QgU3BlY3RydW0gdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlL3JlYWN0LXNwZWN0cnVtL2Jsb2IvOTljYTgyZTg3YmEyZDdmZGQ1NGY1YjQ5MzI2ZmQyNDIzMjBiNGI1MS9wYWNrYWdlcy8lNDByZWFjdC1hcmlhL2RhdGVwaWNrZXIvc3JjL3VzZURpc3BsYXlOYW1lcy50c1xuICAgKilcblxuQGtvYmFsdGUvY29yZS9kaXN0L2VzbS9pbmRleC5qczpcbiAgKCohXG4gICAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIGFyaWFraXQuXG4gICAqIE1JVCBMaWNlbnNlZCwgQ29weXJpZ2h0IChjKSBEaWVnbyBIYXouXG4gICAqXG4gICAqIENyZWRpdHMgdG8gdGhlIEFyaWFraXQgdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2FyaWFraXQvYXJpYWtpdC9ibG9iLzg0ZTk3OTQzYWQ2MzdhNTgyYzAxYzliNTZkODgwY2Q5NWY1OTU3MzcvcGFja2FnZXMvYXJpYWtpdC9zcmMvaG92ZXJjYXJkL19fdXRpbHMvcG9seWdvbi50c1xuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYXJpYWtpdC9hcmlha2l0L2Jsb2IvZjJhOTY5NzNkZTUyM2Q2N2U0MWVlYzk4MzI2MzkzNmM0ODllZjNlMi9wYWNrYWdlcy9hcmlha2l0L3NyYy9ob3ZlcmNhcmQvX191dGlscy9kZWJ1Zy1wb2x5Z29uLnRzXG4gICAqKVxuXG5Aa29iYWx0ZS9jb3JlL2Rpc3QvZXNtL2luZGV4LmpzOlxuICAoKiFcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gcmVhY3Qtc3BlY3RydW0uXG4gICAqIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBDb3B5cmlnaHQgMjAyMCBBZG9iZS5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgUmVhY3QgU3BlY3RydW0gdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlL3JlYWN0LXNwZWN0cnVtL2Jsb2IvMWRkY2RlN2I0ZmVmOWFmN2YwOGUxMWJiNzhkNzFmZTYwYmJjYzY0Yi9wYWNrYWdlcy9AcmVhY3Qtc3RhdGVseS9zbGlkZXIvc3JjL3VzZVNsaWRlclN0YXRlLnRzXG4gICAqKVxuXG5Aa29iYWx0ZS9jb3JlL2Rpc3QvZXNtL2luZGV4LmpzOlxuICAoKiFcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gcmVhY3Qtc3BlY3RydW0uXG4gICAqIEFwYWNoZSBMaWNlbnNlIFZlcnNpb24gMi4wLCBDb3B5cmlnaHQgMjAyMCBBZG9iZS5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgUmVhY3QgU3BlY3RydW0gdGVhbTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlL3JlYWN0LXNwZWN0cnVtL2Jsb2IvNmI1MTMzOWNjYTBiODM0NDUwN2QzYzhlODFlN2FkMDVkNmU3NWY5Yi9wYWNrYWdlcy9AcmVhY3QtYXJpYS90YWJzL3NyYy9UYWJzS2V5Ym9hcmREZWxlZ2F0ZS50c1xuICAgKilcblxuQGtvYmFsdGUvY29yZS9kaXN0L2VzbS9pbmRleC5qczpcbiAgKCohXG4gICAqIFBvcnRpb25zIG9mIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIHJlYWN0LXNwZWN0cnVtLlxuICAgKiBBcGFjaGUgTGljZW5zZSBWZXJzaW9uIDIuMCwgQ29weXJpZ2h0IDIwMjAgQWRvYmUuXG4gICAqXG4gICAqIENyZWRpdHMgdG8gdGhlIFJlYWN0IFNwZWN0cnVtIHRlYW06XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hZG9iZS9yZWFjdC1zcGVjdHJ1bS90cmVlL21haW4vcGFja2FnZXMvJTQwcmVhY3QtYXJpYS90b2FzdC9pbnRsXG4gICAqKVxuXG5Aa29iYWx0ZS9jb3JlL2Rpc3QvZXNtL2luZGV4LmpzOlxuICAoKiFcbiAgICogUG9ydGlvbnMgb2YgdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gYXJpYWtpdC5cbiAgICogTUlUIExpY2Vuc2VkLCBDb3B5cmlnaHQgKGMpIERpZWdvIEhhei5cbiAgICpcbiAgICogQ3JlZGl0cyB0byB0aGUgQXJpYWtpdCB0ZWFtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYXJpYWtpdC9hcmlha2l0L2Jsb2IvODRlOTc5NDNhZDYzN2E1ODJjMDFjOWI1NmQ4ODBjZDk1ZjU5NTczNy9wYWNrYWdlcy9hcmlha2l0L3NyYy9ob3ZlcmNhcmQvX191dGlscy9wb2x5Z29uLnRzXG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hcmlha2l0L2FyaWFraXQvYmxvYi9mMmE5Njk3M2RlNTIzZDY3ZTQxZWVjOTgzMjYzOTM2YzQ4OWVmM2UyL3BhY2thZ2VzL2FyaWFraXQvc3JjL2hvdmVyY2FyZC9fX3V0aWxzL2RlYnVnLXBvbHlnb24udHNcbiAgICopXG4qL1xuXG5leHBvcnQgeyBEZXZ0b29sc19kZWZhdWx0IGFzIGRlZmF1bHQgfTtcbiJdLCJuYW1lcyI6WyJjcmVhdGVDb250ZXh0IiwiZGVsZWdhdGVFdmVudHMiLCJzb3J0Rm5zIiwibXV0YXRpb25Tb3J0Rm5zIiwiY3JlYXRlU2lnbmFsIiwiJFBST1hZIiwiJFRSQUNLIiwiZ2V0TGlzdGVuZXIiLCJiYXRjaCIsImdldFByZWZlcnJlZENvbG9yU2NoZW1lIiwiY3JlYXRlTWVtbyIsImNyZWF0ZUNvbXBvbmVudCIsImNyZWF0ZUVmZmVjdCIsIm9uTW91bnQiLCJvbkNsZWFudXAiLCJ1c2UiLCJpbnNlcnQiLCJTaG93IiwiY3JlYXRlUmVuZGVyRWZmZWN0IiwiY2xhc3NOYW1lIiwib24iLCJzZXRBdHRyaWJ1dGUiLCJnZXRRdWVyeVN0YXR1c0NvbG9yIiwiZ2V0TXV0YXRpb25TdGF0dXNDb2xvciIsImdldFF1ZXJ5U3RhdHVzTGFiZWwiLCJzcHJlYWQiLCJtZXJnZVByb3BzIiwiZ2V0UXVlcnlTdGF0dXNDb2xvckJ5TGFiZWwiLCJkaXNwbGF5VmFsdWUiLCJGb3IiLCJpc1NlcnZlciIsImNyZWF0ZVVuaXF1ZUlkIiwidXNlQ29udGV4dCIsIkluZGV4IiwidXBkYXRlTmVzdGVkRGF0YUJ5UGF0aCIsInRlbXBsYXRlIiwiY29udmVydFJlbVRvUGl4ZWxzIiwiZ2V0U2lkZWRQcm9wIiwidW50cmFjayIsInVzZVRyYW5zaXRpb24iLCJjcmVhdGVSb290Iiwic3BsaXRQcm9wcyIsIlBvcnRhbCIsImFkZEV2ZW50TGlzdGVuZXIiLCJzdHJpbmdpZnkiLCJTd2l0Y2giLCJNYXRjaCIsImRlbGV0ZU5lc3RlZERhdGFCeVBhdGgiLCJEeW5hbWljIiwiY2hpbGRyZW4iLCJjcmVhdGVDb21wdXRlZCIsImdldE93bmVyIiwiREVWIiwiY2hhcmFjdGVyTWFwIiwiw4AiLCLDgSIsIsOCIiwiw4MiLCLDhCIsIsOFIiwi4bqkIiwi4bquIiwi4bqyIiwi4bq0Iiwi4bq2Iiwiw4YiLCLhuqYiLCLhurAiLCLIgiIsIsOHIiwi4biIIiwiw4giLCLDiSIsIsOKIiwiw4siLCLhur4iLCLhuJYiLCLhu4AiLCLhuJQiLCLhuJwiLCLIhiIsIsOMIiwiw40iLCLDjiIsIsOPIiwi4biuIiwiyIoiLCLDkCIsIsORIiwiw5IiLCLDkyIsIsOUIiwiw5UiLCLDliIsIsOYIiwi4buQIiwi4bmMIiwi4bmSIiwiyI4iLCLDmSIsIsOaIiwiw5siLCLDnCIsIsOdIiwiw6AiLCLDoSIsIsOiIiwiw6MiLCLDpCIsIsOlIiwi4bqlIiwi4bqvIiwi4bqzIiwi4bq1Iiwi4bq3Iiwiw6YiLCLhuqciLCLhurEiLCLIgyIsIsOnIiwi4biJIiwiw6giLCLDqSIsIsOqIiwiw6siLCLhur8iLCLhuJciLCLhu4EiLCLhuJUiLCLhuJ0iLCLIhyIsIsOsIiwiw60iLCLDriIsIsOvIiwi4bivIiwiyIsiLCLDsCIsIsOxIiwiw7IiLCLDsyIsIsO0Iiwiw7UiLCLDtiIsIsO4Iiwi4buRIiwi4bmNIiwi4bmTIiwiyI8iLCLDuSIsIsO6Iiwiw7siLCLDvCIsIsO9Iiwiw78iLCLEgCIsIsSBIiwixIIiLCLEgyIsIsSEIiwixIUiLCLEhiIsIsSHIiwixIgiLCLEiSIsIsSKIiwixIsiLCLEjCIsIsSNIiwiQ8yGIiwiY8yGIiwixI4iLCLEjyIsIsSQIiwixJEiLCLEkiIsIsSTIiwixJQiLCLElSIsIsSWIiwixJciLCLEmCIsIsSZIiwixJoiLCLEmyIsIsScIiwix7QiLCLEnSIsIse1IiwixJ4iLCLEnyIsIsSgIiwixKEiLCLEoiIsIsSjIiwixKQiLCLEpSIsIsSmIiwixKciLCLhuKoiLCLhuKsiLCLEqCIsIsSpIiwixKoiLCLEqyIsIsSsIiwixK0iLCLEriIsIsSvIiwixLAiLCLEsSIsIsSyIiwixLMiLCLEtCIsIsS1IiwixLYiLCLEtyIsIuG4sCIsIuG4sSIsIkvMhiIsImvMhiIsIsS5IiwixLoiLCLEuyIsIsS8IiwixL0iLCLEviIsIsS/IiwixYAiLCLFgSIsIsWCIiwi4bi+Iiwi4bi/IiwiTcyGIiwibcyGIiwixYMiLCLFhCIsIsWFIiwixYYiLCLFhyIsIsWIIiwixYkiLCJOzIYiLCJuzIYiLCLFjCIsIsWNIiwixY4iLCLFjyIsIsWQIiwixZEiLCLFkiIsIsWTIiwiUMyGIiwicMyGIiwixZQiLCLFlSIsIsWWIiwixZciLCLFmCIsIsWZIiwiUsyGIiwicsyGIiwiyJIiLCLIkyIsIsWaIiwixZsiLCLFnCIsIsWdIiwixZ4iLCLImCIsIsiZIiwixZ8iLCLFoCIsIsWhIiwixaIiLCLFoyIsIsibIiwiyJoiLCLFpCIsIsWlIiwixaYiLCLFpyIsIlTMhiIsInTMhiIsIsWoIiwixakiLCLFqiIsIsWrIiwixawiLCLFrSIsIsWuIiwixa8iLCLFsCIsIsWxIiwixbIiLCLFsyIsIsiWIiwiyJciLCJWzIYiLCJ2zIYiLCLFtCIsIsW1Iiwi4bqCIiwi4bqDIiwiWMyGIiwieMyGIiwixbYiLCLFtyIsIsW4IiwiWcyGIiwiecyGIiwixbkiLCLFuiIsIsW7IiwixbwiLCLFvSIsIsW+Iiwixb8iLCLGkiIsIsagIiwixqEiLCLGryIsIsawIiwix40iLCLHjiIsIsePIiwix5AiLCLHkSIsIseSIiwix5MiLCLHlCIsIseVIiwix5YiLCLHlyIsIseYIiwix5kiLCLHmiIsIsebIiwix5wiLCLhu6giLCLhu6kiLCLhubgiLCLhubkiLCLHuiIsIse7Iiwix7wiLCLHvSIsIse+Iiwix78iLCLDniIsIsO+Iiwi4bmUIiwi4bmVIiwi4bmkIiwi4bmlIiwiWMyBIiwieMyBIiwi0IMiLCLRkyIsItCMIiwi0ZwiLCJBzIsiLCJhzIsiLCJFzIsiLCJlzIsiLCJJzIsiLCJpzIsiLCLHuCIsIse5Iiwi4buSIiwi4buTIiwi4bmQIiwi4bmRIiwi4buqIiwi4burIiwi4bqAIiwi4bqBIiwi4buyIiwi4buzIiwiyIAiLCLIgSIsIsiEIiwiyIUiLCLIiCIsIsiJIiwiyIwiLCLIjSIsIsiQIiwiyJEiLCLIlCIsIsiVIiwiQsyMIiwiYsyMIiwixIzMoyIsIsSNzKMiLCLDisyMIiwiw6rMjCIsIkbMjCIsImbMjCIsIsemIiwix6ciLCLIniIsIsifIiwiSsyMIiwix7AiLCLHqCIsIsepIiwiTcyMIiwibcyMIiwiUMyMIiwicMyMIiwiUcyMIiwiccyMIiwixZjMqSIsIsWZzKkiLCLhuaYiLCLhuaciLCJWzIwiLCJ2zIwiLCJXzIwiLCJ3zIwiLCJYzIwiLCJ4zIwiLCJZzIwiLCJ5zIwiLCJBzKciLCJhzKciLCJCzKciLCJizKciLCLhuJAiLCLhuJEiLCLIqCIsIsipIiwixpDMpyIsIsmbzKciLCLhuKgiLCLhuKkiLCJJzKciLCJpzKciLCLGl8ynIiwiyajMpyIsIk3MpyIsIm3MpyIsIk/MpyIsIm/MpyIsIlHMpyIsInHMpyIsIlXMpyIsInXMpyIsIljMpyIsInjMpyIsIlrMpyIsInrMpyIsImNoYXJzIiwiT2JqZWN0Iiwia2V5cyIsImpvaW4iLCJhbGxBY2NlbnRzIiwiUmVnRXhwIiwicmVtb3ZlQWNjZW50cyIsInN0ciIsInJlcGxhY2UiLCJtYXRjaCIsInJhbmtpbmdzIiwiQ0FTRV9TRU5TSVRJVkVfRVFVQUwiLCJFUVVBTCIsIlNUQVJUU19XSVRIIiwiV09SRF9TVEFSVFNfV0lUSCIsIkNPTlRBSU5TIiwiQUNST05ZTSIsIk1BVENIRVMiLCJOT19NQVRDSCIsInJhbmtJdGVtIiwiaXRlbSIsInZhbHVlIiwib3B0aW9ucyIsIl9vcHRpb25zJHRocmVzaG9sZCIsInRocmVzaG9sZCIsImFjY2Vzc29ycyIsInJhbmsiLCJnZXRNYXRjaFJhbmtpbmciLCJyYW5rZWRWYWx1ZSIsImFjY2Vzc29ySW5kZXgiLCJhY2Nlc3NvclRocmVzaG9sZCIsInBhc3NlZCIsInZhbHVlc1RvUmFuayIsImdldEFsbFZhbHVlc1RvUmFuayIsInJhbmtpbmdJbmZvIiwiaTIiLCJsZW5ndGgiLCJyYW5rVmFsdWUiLCJuZXdSYW5rIiwiaXRlbVZhbHVlIiwibWluUmFua2luZyIsIm1heFJhbmtpbmciLCJhdHRyaWJ1dGVzIiwiTWF0aCIsIm1pbiIsInRlc3RTdHJpbmciLCJzdHJpbmdUb1JhbmsiLCJwcmVwYXJlVmFsdWVGb3JDb21wYXJpc29uIiwidG9Mb3dlckNhc2UiLCJzdGFydHNXaXRoIiwiaW5jbHVkZXMiLCJnZXRBY3JvbnltIiwiZ2V0Q2xvc2VuZXNzUmFua2luZyIsInN0cmluZyIsImFjcm9ueW0iLCJ3b3Jkc0luU3RyaW5nIiwic3BsaXQiLCJmb3JFYWNoIiwid29yZEluU3RyaW5nIiwic3BsaXRCeUh5cGhlbldvcmRzIiwic3BsaXRCeUh5cGhlbldvcmQiLCJzdWJzdHIiLCJtYXRjaGluZ0luT3JkZXJDaGFyQ291bnQiLCJjaGFyTnVtYmVyIiwiZmluZE1hdGNoaW5nQ2hhcmFjdGVyIiwibWF0Y2hDaGFyIiwiaW5kZXgiLCJqIiwiSiIsInN0cmluZ0NoYXIiLCJnZXRSYW5raW5nIiwic3ByZWFkMyIsInNwcmVhZFBlcmNlbnRhZ2UiLCJpbk9yZGVyUGVyY2VudGFnZSIsInJhbmtpbmciLCJmaXJzdEluZGV4IiwiSSIsImZvdW5kIiwic3ByZWFkMiIsIl9yZWYiLCJrZWVwRGlhY3JpdGljcyIsImdldEl0ZW1WYWx1ZXMiLCJhY2Nlc3NvciIsImFjY2Vzc29yRm4iLCJBcnJheSIsImlzQXJyYXkiLCJTdHJpbmciLCJhbGxWYWx1ZXMiLCJnZXRBY2Nlc3NvckF0dHJpYnV0ZXMiLCJpdGVtVmFsdWVzIiwicHVzaCIsImRlZmF1bHRLZXlBdHRyaWJ1dGVzIiwiSW5maW5pdHkiLCJlIiwiZGF0YSIsInQiLCJ0MiIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJfZ29vYmVyIiwiYXNzaWduIiwiZG9jdW1lbnQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwiaWQiLCJmaXJzdENoaWxkIiwibCIsImEiLCJuIiwibyIsImUyIiwicjIiLCJsMiIsImEyIiwibjIiLCJjMiIsImUzIiwidDMiLCJ0ZXN0IiwicCIsImMiLCJzIiwiaSIsInAyIiwidTIiLCJkIiwicjMiLCJjaGFyQ29kZUF0IiwidDQiLCJvMiIsImV4ZWMiLCJzaGlmdCIsInRyaW0iLCJ1bnNoaWZ0IiwiZiIsImciLCJpbmRleE9mIiwicmVkdWNlIiwiY2FsbCIsImU0IiwicHJvcHMiLCJ1IiwicmF3Iiwic2xpY2UiLCJhcmd1bWVudHMiLCJ0YXJnZXQiLCJrIiwiYmluZCIsInIiLCJjbHN4Iiwibm9vcCIsImNyZWF0ZUxpc3RUcmFuc2l0aW9uIiwic291cmNlIiwiaW5pdFNvdXJjZSIsImNvcHkiLCJvbkNoYW5nZSIsInByZXZTZXQiLCJTZXQiLCJhcHBlYXIiLCJleGl0aW5nIiwiV2Vha1NldCIsInRvUmVtb3ZlIiwic2V0VG9SZW1vdmUiLCJlcXVhbHMiLCJpc1RyYW5zaXRpb25QZW5kaW5nIiwiZmluaXNoUmVtb3ZlZCIsImV4aXRNZXRob2QiLCJlbHMiLCJhcHBseSIsImVsIiwiZGVsZXRlIiwiaGFuZGxlUmVtb3ZlZCIsInNwbGljZSIsInByZXYiLCJlbHNUb1JlbW92ZSIsInNvdXJjZUxpc3QiLCJuZXh0IiwiZmlsdGVyIiwibGlzdCIsImFkZGVkIiwicmVtb3ZlZCIsInVuY2hhbmdlZCIsIm5leHRTZXQiLCJoYXMiLCJub3RoaW5nQ2hhbmdlZCIsImFkZCIsImlzQ2xpZW50IiwiaXNEZXYiLCJub29wMiIsImlzTm9uTnVsbGFibGUiLCJmaWx0ZXJOb25OdWxsYWJsZSIsImFyciIsImNoYWluIiwiY2FsbGJhY2tzIiwiYXJncyIsImNhbGxiYWNrIiwicmV2ZXJzZUNoYWluIiwiYWNjZXNzIiwidiIsImFzQXJyYXkiLCJhY2Nlc3NXaXRoIiwidmFsdWVPckZuIiwidHJ5T25DbGVhbnVwIiwiZm4iLCJoYW5kbGVEaWZmQXJyYXkiLCJjdXJyZW50IiwiaGFuZGxlQWRkZWQiLCJjdXJyTGVuZ3RoIiwicHJldkxlbmd0aCIsInByZXZFbCIsImN1cnJFbCIsIm1lcmdlUmVmcyIsInJlZnMiLCJkZWZhdWx0RWxlbWVudFByZWRpY2F0ZSIsIkVsZW1lbnQiLCJnZXRSZXNvbHZlZEVsZW1lbnRzIiwicHJlZGljYXRlIiwicmVzdWx0cyIsInJlc3VsdCIsInJlc29sdmVFbGVtZW50cyIsInNlcnZlclByZWRpY2F0ZSIsImNoaWxkcmVuMiIsIm1lbW8iLCJ0b0FycmF5IiwiY3JlYXRlQ2xhc3NuYW1lcyIsIm5hbWUiLCJlbnRlckFjdGl2ZSIsImVudGVyQWN0aXZlQ2xhc3MiLCJlbnRlciIsImVudGVyQ2xhc3MiLCJlbnRlclRvIiwiZW50ZXJUb0NsYXNzIiwiZXhpdEFjdGl2ZSIsImV4aXRBY3RpdmVDbGFzcyIsImV4aXQiLCJleGl0Q2xhc3MiLCJleGl0VG8iLCJleGl0VG9DbGFzcyIsIm1vdmUiLCJtb3ZlQ2xhc3MiLCJuZXh0RnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJlbnRlclRyYW5zaXRpb24iLCJjbGFzc2VzIiwiZXZlbnRzIiwiZG9uZSIsIm9uQmVmb3JlRW50ZXIiLCJvbkVudGVyIiwib25BZnRlckVudGVyIiwiY2xhc3NMaXN0IiwicXVldWVNaWNyb3Rhc2siLCJwYXJlbnROb2RlIiwiZW5kVHJhbnNpdGlvbiIsInJlbW92ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJleGl0VHJhbnNpdGlvbiIsIm9uQmVmb3JlRXhpdCIsIm9uRXhpdCIsIm9uQWZ0ZXJFeGl0IiwiVHJhbnNpdGlvbkdyb3VwIiwiY2xhc3NuYW1lcyIsInRvTW92ZSIsImlzQ29ubmVjdGVkIiwiSFRNTEVsZW1lbnQiLCJTVkdFbGVtZW50IiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm1vdmVkIiwibmV3UmVjdCIsImRYIiwibGVmdCIsImRZIiwidG9wIiwic3R5bGUiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJib2R5Iiwib2Zmc2V0SGVpZ2h0IiwiZW5kVHJhbnNpdGlvbjIiLCJwcm9wZXJ0eU5hbWUiLCJGQUxMQkFDSyIsIlN5bWJvbCIsImRpc3Bvc2UiLCJrZXlBcnJheSIsIml0ZW1zIiwia2V5Rm4iLCJtYXBGbiIsIml0ZW1zUmVmIiwiczIiLCJsZW4iLCJmYWxsYmFjayIsIk1hcCIsInZhbHVlcyIsImNsZWFyIiwiZmIyIiwiZGlzcG9zZTIiLCJzZXQiLCJmYiIsImdldCIsInNpemUiLCJrZXkiLCJhZGROZXdJdGVtIiwicHJldktleXMiLCJsb29rdXAiLCJtYXBwZWQiLCJzZXRJbmRleCIsInNldEl0ZW0iLCJnZXRJdGVtIiwic2F2ZSIsIktleSIsImJ5IiwiZWFjaCIsImNyZWF0ZVN0b3JhZ2UiLCJlcnJvciIsInNldEVycm9yIiwiaGFuZGxlRXJyb3IiLCJ0aHJvdyIsImVyciIsIkVycm9yIiwiYXBpcyIsImFwaSIsImdsb2JhbFRoaXMiLCJsb2NhbFN0b3JhZ2UiLCJCb29sZWFuIiwicHJlZml4Iiwic2lnbmFscyIsInN0b3JlIiwiUHJveHkiLCJfIiwibm9kZSIsImRlc2VyaWFsaXplciIsInNldHRlciIsImZpbHRlcmVkVmFsdWUiLCJzZXJpYWxpemVyIiwiYXBpS2V5IiwicmVtb3ZlSXRlbSIsInRvSlNPTiIsImFkZFZhbHVlIiwiaGFzT3duUHJvcGVydHkiLCJnZXRBbGwiLCJzeW5jIiwibGlzdGVuZXIiLCJldiIsImNoYW5nZWQiLCJzdG9yYWdlQXJlYSIsIm5ld1ZhbHVlIiwiY3JlYXRlTG9jYWxTdG9yYWdlIiwiYWRkQ2xlYXJNZXRob2QiLCJzdG9yYWdlIiwic2VyaWFsaXplQ29va2llT3B0aW9ucyIsIkRhdGUiLCJ0b1VUQ1N0cmluZyIsImNvb2tpZVN0b3JhZ2UiLCJfY29va2llcyIsInBvcCIsIm9sZFZhbHVlIiwic3RvcmFnZUV2ZW50IiwiRXZlbnQiLCJ1cmwiLCJVUkwiLCJkaXNwYXRjaEV2ZW50IiwiZXhwaXJlcyIsImNvdW50IiwibWFrZUV2ZW50TGlzdGVuZXIiLCJ0eXBlIiwiaGFuZGxlciIsImNyZWF0ZUV2ZW50TGlzdGVuZXIiLCJ0YXJnZXRzIiwiYXR0YWNoTGlzdGVuZXJzIiwidHlwZTIiLCJtYWtlUmVzaXplT2JzZXJ2ZXIiLCJvYnNlcnZlIiwidW5vYnNlcnZlIiwib2JzZXJ2ZXIiLCJSZXNpemVPYnNlcnZlciIsImRpc2Nvbm5lY3QiLCJyZWYiLCJjcmVhdGVSZXNpemVPYnNlcnZlciIsIm9uUmVzaXplIiwicHJldmlvdXNNYXAiLCJXZWFrTWFwIiwiZW50cmllczIiLCJlbnRyeSIsImNvbnRlbnRSZWN0Iiwid2lkdGgiLCJyb3VuZCIsImhlaWdodCIsInByZXZpb3VzIiwidHJ1ZUZuMiIsInByb3BUcmFwcyIsInByb3BlcnR5IiwicmVjZWl2ZXIiLCJkZWxldGVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJvd25LZXlzIiwiZXh0cmFjdENTU3JlZ2V4Iiwic3RyaW5nU3R5bGVUb09iamVjdCIsInN0eWxlMiIsIm9iamVjdCIsImNvbWJpbmVTdHlsZSIsImIyIiwic291cmNlcyIsImNhbGMiLCJwcm9wViIsImNvbWJpbmVQcm9wcyIsInJlc3RBcmdzIiwiY2hhaW5GbiIsInJldmVyc2VFdmVudEhhbmRsZXJzIiwibGlzdGVuZXJzMiIsInByb3BzT2JqIiwibWVyZ2UiLCJSZWZsZWN0IiwiY2IiLCJhZGRJdGVtVG9BcnJheSIsImFycmF5IiwicmVtb3ZlSXRlbUZyb21BcnJheSIsInVwZGF0ZWRBcnJheSIsImlzTnVtYmVyIiwiaXNTdHJpbmciLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImlzRnVuY3Rpb24iLCJjcmVhdGVHZW5lcmF0ZUlkIiwiYmFzZUlkIiwic3VmZml4IiwiY29udGFpbnMiLCJwYXJlbnQiLCJjaGlsZCIsImdldEFjdGl2ZUVsZW1lbnQiLCJhY3RpdmVEZXNjZW5kYW50IiwiYWN0aXZlRWxlbWVudCIsImdldERvY3VtZW50Iiwibm9kZU5hbWUiLCJpc0ZyYW1lIiwiY29udGVudERvY3VtZW50IiwiZ2V0QXR0cmlidXRlIiwiZWxlbWVudCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0V2luZG93IiwiZGVmYXVsdFZpZXciLCJvd25lckRvY3VtZW50IiwidGFnTmFtZSIsIkV2ZW50S2V5IiwiRXZlbnRLZXkyIiwidGVzdFBsYXRmb3JtIiwicmUiLCJuYXZpZ2F0b3IiLCJwbGF0Zm9ybSIsImlzTWFjIiwiaXNJUGhvbmUiLCJpc0lQYWQiLCJtYXhUb3VjaFBvaW50cyIsImlzSU9TIiwiaXNBcHBsZURldmljZSIsImNhbGxIYW5kbGVyIiwiZXZlbnQiLCJkZWZhdWx0UHJldmVudGVkIiwiY29tcG9zZUV2ZW50SGFuZGxlcnMiLCJoYW5kbGVycyIsImlzQ3RybEtleSIsIm1ldGFLZXkiLCJjdHJsS2V5IiwiZm9jdXNXaXRob3V0U2Nyb2xsaW5nIiwic3VwcG9ydHNQcmV2ZW50U2Nyb2xsIiwiZm9jdXMiLCJwcmV2ZW50U2Nyb2xsIiwic2Nyb2xsYWJsZUVsZW1lbnRzIiwiZ2V0U2Nyb2xsYWJsZUVsZW1lbnRzIiwicmVzdG9yZVNjcm9sbFBvc2l0aW9uIiwic3VwcG9ydHNQcmV2ZW50U2Nyb2xsQ2FjaGVkIiwiZm9jdXNFbGVtIiwicm9vdFNjcm9sbGluZ0VsZW1lbnQiLCJzY3JvbGxpbmdFbGVtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic2Nyb2xsSGVpZ2h0Iiwib2Zmc2V0V2lkdGgiLCJzY3JvbGxXaWR0aCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJmb2N1c2FibGVFbGVtZW50cyIsInRhYmJhYmxlRWxlbWVudHMiLCJGT0NVU0FCTEVfRUxFTUVOVF9TRUxFQ1RPUiIsIlRBQkJBQkxFX0VMRU1FTlRfU0VMRUNUT1IiLCJnZXRBbGxUYWJiYWJsZUluIiwiY29udGFpbmVyIiwiaW5jbHVkZUNvbnRhaW5lciIsImVsZW1lbnRzIiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0YWJiYWJsZUVsZW1lbnRzMiIsImlzVGFiYmFibGUiLCJmcmFtZUJvZHkiLCJhbGxGcmFtZVRhYmJhYmxlIiwiaXNGb2N1c2FibGUiLCJoYXNOZWdhdGl2ZVRhYkluZGV4IiwibWF0Y2hlcyIsImlzRWxlbWVudFZpc2libGUiLCJ0YWJJbmRleCIsInBhcnNlSW50IiwiY2hpbGRFbGVtZW50IiwiaXNTdHlsZVZpc2libGUiLCJpc0F0dHJpYnV0ZVZpc2libGUiLCJwYXJlbnRFbGVtZW50IiwiZGlzcGxheSIsInZpc2liaWxpdHkiLCJpc1Zpc2libGUiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZTMiLCJjb21wdXRlZERpc3BsYXkiLCJjb21wdXRlZFZpc2liaWxpdHkiLCJoYXNBdHRyaWJ1dGUiLCJpc0VsZW1lbnRJblNjb3BlIiwic2NvcGUiLCJzb21lIiwiZ2V0Rm9jdXNhYmxlVHJlZVdhbGtlciIsInJvb3QiLCJvcHRzIiwic2VsZWN0b3IiLCJ0YWJiYWJsZSIsIndhbGtlciIsImNyZWF0ZVRyZWVXYWxrZXIiLCJOb2RlRmlsdGVyIiwiU0hPV19FTEVNRU5UIiwiYWNjZXB0Tm9kZSIsIkZJTFRFUl9SRUpFQ1QiLCJhY2NlcHQiLCJGSUxURVJfQUNDRVBUIiwiRklMVEVSX1NLSVAiLCJjdXJyZW50Tm9kZSIsIm5vb3AzIiwiaXNQb2ludEluUG9seWdvbiIsInBvaW50IiwicG9seWdvbiIsIngiLCJ5IiwiaW5zaWRlIiwieGkiLCJ5aSIsInhqIiwieWoiLCJ2eSIsIndoZXJlIiwibWVyZ2VEZWZhdWx0UHJvcHMiLCJkZWZhdWx0UHJvcHMiLCJ0cmFuc2l0aW9uc0J5RWxlbWVudCIsInRyYW5zaXRpb25DYWxsYmFja3MiLCJzZXR1cEdsb2JhbEV2ZW50cyIsIm9uVHJhbnNpdGlvblN0YXJ0IiwidHJhbnNpdGlvbnMiLCJvblRyYW5zaXRpb25FbmQiLCJwcm9wZXJ0aWVzIiwicmVhZHlTdGF0ZSIsInNjcm9sbEludG9WaWV3Iiwic2Nyb2xsVmlldyIsIm9mZnNldFgiLCJyZWxhdGl2ZU9mZnNldCIsIm9mZnNldFkiLCJtYXhYIiwibWF4WSIsImFuY2VzdG9yIiwiYXhpcyIsInByb3AiLCJzdW0iLCJvZmZzZXRQYXJlbnQiLCJ2aXN1YWxseUhpZGRlblN0eWxlcyIsImJvcmRlciIsImNsaXAiLCJtYXJnaW4iLCJvdmVyZmxvdyIsInBhZGRpbmciLCJwb3NpdGlvbiIsIiRSQVciLCIkTk9ERSIsIiRIQVMiLCIkU0VMRiIsIndyYXAkMSIsImRlZmluZVByb3BlcnR5IiwicHJveHlUcmFwcyQxIiwia2V5czIiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImlzV3JhcHBhYmxlIiwib2JqIiwicHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsInVud3JhcCIsInVud3JhcHBlZCIsImlzRnJvemVuIiwiZ2V0Tm9kZXMiLCJzeW1ib2wiLCJub2RlcyIsImNyZWF0ZSIsImdldE5vZGUiLCJpbnRlcm5hbCIsIiQiLCJwcm94eURlc2NyaXB0b3IkMSIsIndyaXRhYmxlIiwidHJhY2tTZWxmIiwidHJhY2tlZCIsInNldFByb3BlcnR5Iiwic3RhdGUyIiwiZGVsZXRpbmciLCJtZXJnZVN0b3JlTm9kZSIsInVwZGF0ZUFycmF5IiwidXBkYXRlUGF0aCIsInBhdGgiLCJ0cmF2ZXJzZWQiLCJwYXJ0IiwicGFydFR5cGUiLCJpc0FycmF5MiIsImNvbmNhdCIsInRvIiwiY3JlYXRlU3RvcmUiLCJ1bndyYXBwZWRTdG9yZSIsIndyYXBwZWRTdG9yZSIsInNldFN0b3JlIiwiJGQ2ZmQyM2JjMzM3NjYwZGYkZXhwb3J0JDY0ODM5ZTYxNTEyMGRmMTciLCJnZXRTdHJpbmdGb3JMb2NhbGUiLCJsb2NhbGUiLCJzdHJpbmdzIiwibWVzc2FnZXMiLCIkZDZmZDIzYmMzMzc2NjBkZiR2YXIkZ2V0U3RyaW5nc0ZvckxvY2FsZSIsImRlZmF1bHRMb2NhbGUiLCJjb25zdHJ1Y3RvciIsImxhbmd1YWdlIiwiJGQ2ZmQyM2JjMzM3NjYwZGYkdmFyJGdldExhbmd1YWdlIiwiSW50bCIsIkxvY2FsZSIsInNpZGVzIiwibWF4IiwiZmxvb3IiLCJjcmVhdGVDb29yZHMiLCJvcHBvc2l0ZVNpZGVNYXAiLCJyaWdodCIsImJvdHRvbSIsIm9wcG9zaXRlQWxpZ25tZW50TWFwIiwic3RhcnQiLCJlbmQiLCJjbGFtcDIiLCJldmFsdWF0ZSIsInBhcmFtIiwiZ2V0U2lkZSIsInBsYWNlbWVudCIsImdldEFsaWdubWVudCIsImdldE9wcG9zaXRlQXhpcyIsImdldEF4aXNMZW5ndGgiLCJnZXRTaWRlQXhpcyIsImdldEFsaWdubWVudEF4aXMiLCJnZXRBbGlnbm1lbnRTaWRlcyIsInJlY3RzIiwicnRsIiwiYWxpZ25tZW50IiwiYWxpZ25tZW50QXhpcyIsIm1haW5BbGlnbm1lbnRTaWRlIiwicmVmZXJlbmNlIiwiZmxvYXRpbmciLCJnZXRPcHBvc2l0ZVBsYWNlbWVudCIsImdldEV4cGFuZGVkUGxhY2VtZW50cyIsIm9wcG9zaXRlUGxhY2VtZW50IiwiZ2V0T3Bwb3NpdGVBbGlnbm1lbnRQbGFjZW1lbnQiLCJnZXRTaWRlTGlzdCIsInNpZGUiLCJpc1N0YXJ0IiwibHIiLCJybCIsInRiIiwiYnQiLCJnZXRPcHBvc2l0ZUF4aXNQbGFjZW1lbnRzIiwiZmxpcEFsaWdubWVudCIsImRpcmVjdGlvbiIsIm1hcCIsImV4cGFuZFBhZGRpbmdPYmplY3QiLCJnZXRQYWRkaW5nT2JqZWN0IiwicmVjdFRvQ2xpZW50UmVjdCIsImNvbXB1dGVDb29yZHNGcm9tUGxhY2VtZW50Iiwic2lkZUF4aXMiLCJhbGlnbkxlbmd0aCIsImlzVmVydGljYWwiLCJjb21tb25YIiwiY29tbW9uWSIsImNvbW1vbkFsaWduIiwiY29vcmRzIiwiY29tcHV0ZVBvc2l0aW9uIiwiY29uZmlnIiwic3RyYXRlZ3kiLCJtaWRkbGV3YXJlIiwicGxhdGZvcm0yIiwidmFsaWRNaWRkbGV3YXJlIiwiaXNSVEwiLCJnZXRFbGVtZW50UmVjdHMiLCJzdGF0ZWZ1bFBsYWNlbWVudCIsIm1pZGRsZXdhcmVEYXRhIiwicmVzZXRDb3VudCIsIm5leHRYIiwibmV4dFkiLCJyZXNldCIsImluaXRpYWxQbGFjZW1lbnQiLCJkZXRlY3RPdmVyZmxvdyIsIl9hd2FpdCRwbGF0Zm9ybSRpc0VsZSIsImJvdW5kYXJ5Iiwicm9vdEJvdW5kYXJ5IiwiZWxlbWVudENvbnRleHQiLCJhbHRCb3VuZGFyeSIsInBhZGRpbmdPYmplY3QiLCJhbHRDb250ZXh0IiwiY2xpcHBpbmdDbGllbnRSZWN0IiwiZ2V0Q2xpcHBpbmdSZWN0IiwiaXNFbGVtZW50IiwiY29udGV4dEVsZW1lbnQiLCJnZXREb2N1bWVudEVsZW1lbnQiLCJnZXRPZmZzZXRQYXJlbnQiLCJvZmZzZXRTY2FsZSIsImdldFNjYWxlIiwiZWxlbWVudENsaWVudFJlY3QiLCJjb252ZXJ0T2Zmc2V0UGFyZW50UmVsYXRpdmVSZWN0VG9WaWV3cG9ydFJlbGF0aXZlUmVjdCIsImFycm93IiwiYXJyb3dEaW1lbnNpb25zIiwiZ2V0RGltZW5zaW9ucyIsImlzWUF4aXMiLCJtaW5Qcm9wIiwibWF4UHJvcCIsImNsaWVudFByb3AiLCJlbmREaWZmIiwic3RhcnREaWZmIiwiYXJyb3dPZmZzZXRQYXJlbnQiLCJjbGllbnRTaXplIiwiY2VudGVyVG9SZWZlcmVuY2UiLCJsYXJnZXN0UG9zc2libGVQYWRkaW5nIiwibWluUGFkZGluZyIsIm1heFBhZGRpbmciLCJtaW4kMSIsIm1heDIiLCJjZW50ZXIiLCJvZmZzZXQyIiwic2hvdWxkQWRkT2Zmc2V0IiwiYWxpZ25tZW50T2Zmc2V0IiwiY2VudGVyT2Zmc2V0IiwiZmxpcCIsIl9taWRkbGV3YXJlRGF0YSRhcnJvdyIsIl9taWRkbGV3YXJlRGF0YSRmbGlwIiwibWFpbkF4aXMiLCJjaGVja01haW5BeGlzIiwiY3Jvc3NBeGlzIiwiY2hlY2tDcm9zc0F4aXMiLCJmYWxsYmFja1BsYWNlbWVudHMiLCJzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMiLCJmYWxsYmFja1N0cmF0ZWd5IiwiZmFsbGJhY2tBeGlzU2lkZURpcmVjdGlvbiIsImRldGVjdE92ZXJmbG93T3B0aW9ucyIsImlzQmFzZVBsYWNlbWVudCIsInBsYWNlbWVudHMyIiwib3ZlcmZsb3dzIiwib3ZlcmZsb3dzRGF0YSIsInNpZGVzMiIsImV2ZXJ5Iiwic2lkZTIiLCJfbWlkZGxld2FyZURhdGEkZmxpcDIiLCJfb3ZlcmZsb3dzRGF0YSRmaWx0ZXIiLCJuZXh0SW5kZXgiLCJuZXh0UGxhY2VtZW50IiwicmVzZXRQbGFjZW1lbnQiLCJzb3J0IiwiX292ZXJmbG93c0RhdGEkbWFwJHNvIiwicGxhY2VtZW50MiIsIm92ZXJmbG93MiIsImFjYyIsImdldFNpZGVPZmZzZXRzIiwiaXNBbnlTaWRlRnVsbHlDbGlwcGVkIiwiaGlkZSIsIm9mZnNldHMiLCJyZWZlcmVuY2VIaWRkZW5PZmZzZXRzIiwicmVmZXJlbmNlSGlkZGVuIiwiZXNjYXBlZE9mZnNldHMiLCJlc2NhcGVkIiwiY29udmVydFZhbHVlVG9Db29yZHMiLCJtYWluQXhpc011bHRpIiwiY3Jvc3NBeGlzTXVsdGkiLCJyYXdWYWx1ZSIsIm9mZnNldCIsImRpZmZDb29yZHMiLCJsaW1pdGVyIiwieDIiLCJ5MiIsIm1haW5BeGlzQ29vcmQiLCJjcm9zc0F4aXNDb29yZCIsIm1pblNpZGUiLCJtYXhTaWRlIiwibWluMiIsImxpbWl0ZWRDb29yZHMiLCJoZWlnaHRTaWRlIiwid2lkdGhTaWRlIiwib3ZlcmZsb3dBdmFpbGFibGVIZWlnaHQiLCJvdmVyZmxvd0F2YWlsYWJsZVdpZHRoIiwibm9TaGlmdCIsImF2YWlsYWJsZUhlaWdodCIsImF2YWlsYWJsZVdpZHRoIiwibWF4aW11bUNsaXBwaW5nV2lkdGgiLCJtYXhpbXVtQ2xpcHBpbmdIZWlnaHQiLCJ4TWluIiwieE1heCIsInlNaW4iLCJ5TWF4IiwibmV4dERpbWVuc2lvbnMiLCJnZXROb2RlTmFtZSIsImlzTm9kZSIsImdldFdpbmRvdzIiLCJfbm9kZSRvd25lckRvY3VtZW50IiwiTm9kZSIsImlzSFRNTEVsZW1lbnQiLCJpc1NoYWRvd1Jvb3QiLCJTaGFkb3dSb290IiwiaXNPdmVyZmxvd0VsZW1lbnQiLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJnZXRDb21wdXRlZFN0eWxlMiIsImlzVGFibGVFbGVtZW50IiwiaXNDb250YWluaW5nQmxvY2siLCJ3ZWJraXQiLCJpc1dlYktpdCIsImNzcyIsInBlcnNwZWN0aXZlIiwiY29udGFpbmVyVHlwZSIsImJhY2tkcm9wRmlsdGVyIiwid2lsbENoYW5nZSIsImNvbnRhaW4iLCJnZXRDb250YWluaW5nQmxvY2siLCJnZXRQYXJlbnROb2RlIiwiaXNMYXN0VHJhdmVyc2FibGVOb2RlIiwiQ1NTIiwic3VwcG9ydHMiLCJnZXROb2RlU2Nyb2xsIiwicGFnZVhPZmZzZXQiLCJwYWdlWU9mZnNldCIsImFzc2lnbmVkU2xvdCIsImhvc3QiLCJnZXROZWFyZXN0T3ZlcmZsb3dBbmNlc3RvciIsImdldE92ZXJmbG93QW5jZXN0b3JzIiwidHJhdmVyc2VJZnJhbWVzIiwiX25vZGUkb3duZXJEb2N1bWVudDIiLCJzY3JvbGxhYmxlQW5jZXN0b3IiLCJpc0JvZHkiLCJ3aW4iLCJ2aXN1YWxWaWV3cG9ydCIsImZyYW1lRWxlbWVudCIsImdldENzc0RpbWVuc2lvbnMiLCJwYXJzZUZsb2F0IiwiaGFzT2Zmc2V0Iiwic2hvdWxkRmFsbGJhY2siLCJ1bndyYXBFbGVtZW50IiwiZG9tRWxlbWVudCIsIk51bWJlciIsImlzRmluaXRlIiwibm9PZmZzZXRzIiwiZ2V0VmlzdWFsT2Zmc2V0cyIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJzaG91bGRBZGRWaXN1YWxPZmZzZXRzIiwiaXNGaXhlZCIsImZsb2F0aW5nT2Zmc2V0UGFyZW50IiwiaW5jbHVkZVNjYWxlIiwiaXNGaXhlZFN0cmF0ZWd5IiwiY2xpZW50UmVjdCIsInNjYWxlIiwidmlzdWFsT2Zmc2V0cyIsIm9mZnNldFdpbiIsImN1cnJlbnRJRnJhbWUiLCJpZnJhbWVTY2FsZSIsImlmcmFtZVJlY3QiLCJjbGllbnRMZWZ0IiwicGFkZGluZ0xlZnQiLCJjbGllbnRUb3AiLCJwYWRkaW5nVG9wIiwiaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQiLCJzY3JvbGwiLCJvZmZzZXRSZWN0IiwiZ2V0Q2xpZW50UmVjdHMiLCJnZXRXaW5kb3dTY3JvbGxCYXJYIiwiZ2V0RG9jdW1lbnRSZWN0IiwiaHRtbCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiZ2V0Vmlld3BvcnRSZWN0IiwidmlzdWFsVmlld3BvcnRCYXNlZCIsImdldElubmVyQm91bmRpbmdDbGllbnRSZWN0IiwiZ2V0Q2xpZW50UmVjdEZyb21DbGlwcGluZ0FuY2VzdG9yIiwiY2xpcHBpbmdBbmNlc3RvciIsImhhc0ZpeGVkUG9zaXRpb25BbmNlc3RvciIsInN0b3BOb2RlIiwiZ2V0Q2xpcHBpbmdFbGVtZW50QW5jZXN0b3JzIiwiY2FjaGUiLCJjYWNoZWRSZXN1bHQiLCJjdXJyZW50Q29udGFpbmluZ0Jsb2NrQ29tcHV0ZWRTdHlsZSIsImVsZW1lbnRJc0ZpeGVkIiwiY29tcHV0ZWRTdHlsZSIsImN1cnJlbnROb2RlSXNDb250YWluaW5nIiwic2hvdWxkRHJvcEN1cnJlbnROb2RlIiwiZWxlbWVudENsaXBwaW5nQW5jZXN0b3JzIiwiX2MiLCJjbGlwcGluZ0FuY2VzdG9ycyIsImZpcnN0Q2xpcHBpbmdBbmNlc3RvciIsImNsaXBwaW5nUmVjdCIsImFjY1JlY3QiLCJnZXRSZWN0UmVsYXRpdmVUb09mZnNldFBhcmVudCIsImdldFRydWVPZmZzZXRQYXJlbnQiLCJwb2x5ZmlsbCIsIndpbmRvdzIiLCJnZXRPZmZzZXRQYXJlbnRGbiIsImdldERpbWVuc2lvbnNGbiIsIm9ic2VydmVNb3ZlIiwib25Nb3ZlIiwiaW8iLCJ0aW1lb3V0SWQiLCJjbGVhbnVwIiwiY2xlYXJUaW1lb3V0IiwicmVmcmVzaCIsInNraXAiLCJpbnNldFRvcCIsImluc2V0UmlnaHQiLCJpbnNldEJvdHRvbSIsImluc2V0TGVmdCIsInJvb3RNYXJnaW4iLCJpc0ZpcnN0VXBkYXRlIiwiaGFuZGxlT2JzZXJ2ZSIsInJhdGlvIiwiaW50ZXJzZWN0aW9uUmF0aW8iLCJzZXRUaW1lb3V0IiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJhdXRvVXBkYXRlIiwidXBkYXRlIiwiYW5jZXN0b3JTY3JvbGwiLCJhbmNlc3RvclJlc2l6ZSIsImVsZW1lbnRSZXNpemUiLCJsYXlvdXRTaGlmdCIsImFuaW1hdGlvbkZyYW1lIiwicmVmZXJlbmNlRWwiLCJhbmNlc3RvcnMiLCJwYXNzaXZlIiwiY2xlYW51cElvIiwicmVvYnNlcnZlRnJhbWUiLCJyZXNpemVPYnNlcnZlciIsImZpcnN0RW50cnkiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImZyYW1lSWQiLCJwcmV2UmVmUmVjdCIsImZyYW1lTG9vcCIsIm5leHRSZWZSZWN0IiwiY29tcHV0ZVBvc2l0aW9uMiIsIm1lcmdlZE9wdGlvbnMiLCJwbGF0Zm9ybVdpdGhDYWNoZSIsImJ1aWxkTm9kZXMiLCJwYXJhbXMiLCJzdGFydEluZGV4IiwibGV2ZWwiLCJzdGFydExldmVsIiwiZ2V0S2V5IiwiX2dldEtleSIsImRhdGFLZXkiLCJnZXRUZXh0VmFsdWUiLCJfZ2V0VGV4dFZhbHVlIiwiZGF0YVRleHRWYWx1ZSIsImdldERpc2FibGVkIiwiX2dldERpc2FibGVkIiwiZ2V0U2VjdGlvbkNoaWxkcmVuIiwiZGF0YVNvdXJjZSIsInRleHRWYWx1ZSIsImRpc2FibGVkIiwic2VjdGlvbkNoaWxkcmVuIiwiY2hpbGROb2RlcyIsImNyZWF0ZUNvbGxlY3Rpb24iLCJkZXBzIiwiaW5pdGlhbE5vZGVzIiwiY29sbGVjdGlvbiIsInNldENvbGxlY3Rpb24iLCJmYWN0b3J5IiwiZGVmZXIiLCJjcmVhdGVDb250cm9sbGFibGVTaWduYWwiLCJfdmFsdWUiLCJfc2V0VmFsdWUiLCJkZWZhdWx0VmFsdWUiLCJpc0NvbnRyb2xsZWQiLCJzZXRWYWx1ZSIsIm5leHRWYWx1ZSIsImlzIiwiY3JlYXRlQ29udHJvbGxhYmxlQm9vbGVhblNpZ25hbCIsImNyZWF0ZUNvbnRyb2xsYWJsZUFycmF5U2lnbmFsIiwiY3JlYXRlRGlzY2xvc3VyZVN0YXRlIiwiaXNPcGVuIiwic2V0SXNPcGVuIiwib3BlbiIsImRlZmF1bHRPcGVuIiwib25PcGVuQ2hhbmdlIiwiY2xvc2UiLCJ0b2dnbGUiLCJjcmVhdGVFc2NhcGVLZXlEb3duIiwiaGFuZGxlS2V5RG93biIsIkVzY2FwZSIsIm9uRXNjYXBlS2V5RG93biIsImlzRGlzYWJsZWQiLCJkb2N1bWVudDIiLCJEQVRBX1RPUF9MQVlFUl9BVFRSIiwib3JpZ2luYWxCb2R5UG9pbnRlckV2ZW50cyIsImhhc0Rpc2FibGVkQm9keVBvaW50ZXJFdmVudHMiLCJsYXllcnMiLCJmaW5kSW5kZXgiLCJsYXllciIsImZpbmQiLCJpc1RvcE1vc3RMYXllciIsImdldFBvaW50ZXJCbG9ja2luZ0xheWVycyIsImlzUG9pbnRlckJsb2NraW5nIiwiZ2V0VG9wTW9zdFBvaW50ZXJCbG9ja2luZ0xheWVyIiwiaGFzUG9pbnRlckJsb2NraW5nTGF5ZXIiLCJpc0JlbG93UG9pbnRlckJsb2NraW5nTGF5ZXIiLCJoaWdoZXN0QmxvY2tpbmdJbmRleCIsImFkZExheWVyIiwicmVtb3ZlTGF5ZXIiLCJhc3NpZ25Qb2ludGVyRXZlbnRUb0xheWVycyIsInBvaW50ZXJFdmVudHMiLCJkaXNhYmxlQm9keVBvaW50ZXJFdmVudHMiLCJyZXN0b3JlQm9keVBvaW50ZXJFdmVudHMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJsYXllclN0YWNrIiwiQVVUT0ZPQ1VTX09OX01PVU5UX0VWRU5UIiwiQVVUT0ZPQ1VTX09OX1VOTU9VTlRfRVZFTlQiLCJFVkVOVF9PUFRJT05TIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJmb2N1c1Njb3BlU3RhY2siLCJzdGFjayIsImFjdGl2ZSIsInBhdXNlIiwicmVzdW1lIiwiY3JlYXRlRm9jdXNTY29wZSIsImlzUGF1c2VkIiwic2V0SXNQYXVzZWQiLCJmb2N1c1Njb3BlIiwibGFzdEZvY3VzZWRFbGVtZW50Iiwib25Nb3VudEF1dG9Gb2N1cyIsIm9uVW5tb3VudEF1dG9Gb2N1cyIsImNyZWF0ZVNlbnRpbmVsIiwidGFiYmFibGVzIiwiZmlyc3RUYWJiYWJsZSIsImxhc3RUYWJiYWJsZSIsInNob3VsZFByZXZlbnRVbm1vdW50QXV0b0ZvY3VzIiwicHJldmlvdXNseUZvY3VzZWRFbGVtZW50IiwiaGFzRm9jdXNlZENhbmRpZGF0ZSIsIm1vdW50RXZlbnQiLCJDdXN0b21FdmVudCIsInVubW91bnRFdmVudCIsInByZXZlbnREZWZhdWx0IiwidHJhcEZvY3VzIiwib25Gb2N1c0luIiwiY2xvc2VzdCIsIm9uRm9jdXNPdXQiLCJyZWxhdGVkVGFyZ2V0Iiwic3RhcnRTZW50aW5lbCIsImluc2VydEFkamFjZW50RWxlbWVudCIsImVuZFNlbnRpbmVsIiwib25Gb2N1cyIsImZpcnN0IiwibGFzdCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJtdXRhdGlvbiIsInByZXZpb3VzU2libGluZyIsIm5leHRTaWJsaW5nIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsImNyZWF0ZUZvcm1SZXNldExpc3RlbmVyIiwiZWxlbWVudDIiLCJmb3JtIiwiZ2V0Q2xvc2VzdEZvcm0iLCJpc0Zvcm1FbGVtZW50IiwiREFUQV9MSVZFX0FOTk9VTkNFUl9BVFRSIiwiY3JlYXRlSGlkZU91dHNpZGUiLCJhcmlhSGlkZU91dHNpZGUiLCJyZWZDb3VudE1hcCIsIm9ic2VydmVyU3RhY2siLCJ2aXNpYmxlTm9kZXMiLCJoaWRkZW5Ob2RlcyIsIndhbGsiLCJyb290MiIsImFjY2VwdFJvb3QiLCJoaWRlMiIsIm5leHROb2RlIiwicmVmQ291bnQiLCJjaGFuZ2VzIiwiY2hhbmdlIiwiYWRkZWROb2RlcyIsInJlbW92ZWROb2RlcyIsImRhdGFzZXQiLCJsaXZlQW5ub3VuY2VyIiwicmVhY3RBcmlhVG9wTGF5ZXIiLCJvYnNlcnZlcldyYXBwZXIiLCJQT0lOVEVSX0RPV05fT1VUU0lERV9FVkVOVCIsIkZPQ1VTX09VVFNJREVfRVZFTlQiLCJjcmVhdGVJbnRlcmFjdE91dHNpZGUiLCJwb2ludGVyRG93blRpbWVvdXRJZCIsImNsaWNrSGFuZGxlciIsIm9uUG9pbnRlckRvd25PdXRzaWRlIiwib25Gb2N1c091dHNpZGUiLCJvbkludGVyYWN0T3V0c2lkZSIsImlzRXZlbnRPdXRzaWRlIiwic2hvdWxkRXhjbHVkZUVsZW1lbnQiLCJvblBvaW50ZXJEb3duIiwiaGFuZGxlcjIiLCJvbmNlIiwicG9pbnRlckRvd25PdXRzaWRlRXZlbnQiLCJkZXRhaWwiLCJvcmlnaW5hbEV2ZW50IiwiaXNDb250ZXh0TWVudSIsImJ1dHRvbiIsInBvaW50ZXJUeXBlIiwiZm9jdXNPdXRzaWRlRXZlbnQiLCJjcmVhdGVQcmVzZW5jZSIsInByZXNlbnQiLCJzZXROb2RlIiwic3R5bGVzIiwicHJldlByZXNlbnQiLCJwcmV2QW5pbWF0aW9uTmFtZSIsInNlbmQiLCJjcmVhdGVTdGF0ZU1hY2hpbmUiLCJtb3VudGVkIiwiVU5NT1VOVCIsIkFOSU1BVElPTl9PVVQiLCJ1bm1vdW50U3VzcGVuZGVkIiwiTU9VTlQiLCJBTklNQVRJT05fRU5EIiwidW5tb3VudGVkIiwic3RhdGUzIiwiY3VycmVudEFuaW1hdGlvbk5hbWUiLCJnZXRBbmltYXRpb25OYW1lIiwicHJlc2VudDIiLCJpc0FuaW1hdGluZyIsIm5vZGUyIiwiaGFuZGxlQW5pbWF0aW9uRW5kIiwiaXNDdXJyZW50QW5pbWF0aW9uIiwiYW5pbWF0aW9uTmFtZSIsImhhbmRsZUFuaW1hdGlvblN0YXJ0IiwiaXNQcmVzZW50Iiwic2V0UmVmIiwiaW5pdGlhbFN0YXRlIiwibWFjaGluZSIsInJlZHVjZTIiLCJuZXh0U3RhdGUiLCJzZXRTdGF0ZTIiLCJTQ1JPTExfTE9DS19JREVOVElGSUVSIiwiYXNzaWduU3R5bGUiLCJwcmV2aW91c1N0eWxlIiwiY3NzVGV4dCIsInNldENTU1Byb3BlcnR5IiwicHJldmlvdXNWYWx1ZSIsImdldFByb3BlcnR5VmFsdWUiLCJyZW1vdmVQcm9wZXJ0eSIsImdldFBhZGRpbmdQcm9wZXJ0eSIsImRvY3VtZW50TGVmdCIsInNjcm9sbGJhclgiLCJjcmVhdGVQcmV2ZW50U2Nyb2xsIiwib3duZXJSZWYiLCJkb2MiLCJhbHJlYWR5TG9ja2VkIiwic2Nyb2xsYmFyV2lkdGgiLCJpbm5lcldpZHRoIiwic2V0U2Nyb2xsYmFyV2lkdGhQcm9wZXJ0eSIsInBhZGRpbmdQcm9wZXJ0eSIsInNldFN0eWxlIiwic2V0SU9TU3R5bGUiLCJzY3JvbGxYIiwic2Nyb2xsWSIsInJlc3RvcmVTdHlsZSIsInNjcm9sbFRvIiwiY3JlYXRlUmVnaXN0ZXJJZCIsImNyZWF0ZVRhZ05hbWUiLCJzZXRUYWdOYW1lIiwic3RyaW5nT3JVbmRlZmluZWQiLCJjcmVhdGVUb2dnbGVTdGF0ZSIsImlzU2VsZWN0ZWQiLCJfc2V0SXNTZWxlY3RlZCIsImRlZmF1bHRJc1NlbGVjdGVkIiwib25TZWxlY3RlZENoYW5nZSIsInNldElzU2VsZWN0ZWQiLCJpc1JlYWRPbmx5IiwiRk9STV9DT05UUk9MX1BST1BfTkFNRVMiLCJjcmVhdGVGb3JtQ29udHJvbCIsImRlZmF1bHRJZCIsImxhYmVsSWQiLCJzZXRMYWJlbElkIiwiZmllbGRJZCIsInNldEZpZWxkSWQiLCJkZXNjcmlwdGlvbklkIiwic2V0RGVzY3JpcHRpb25JZCIsImVycm9yTWVzc2FnZUlkIiwic2V0RXJyb3JNZXNzYWdlSWQiLCJnZXRBcmlhTGFiZWxsZWRCeSIsImZpZWxkSWQyIiwiZmllbGRBcmlhTGFiZWwiLCJmaWVsZEFyaWFMYWJlbGxlZEJ5IiwiaGFzQXJpYUxhYmVsbGVkQnkiLCJnZXRBcmlhRGVzY3JpYmVkQnkiLCJmaWVsZEFyaWFEZXNjcmliZWRCeSIsInZhbGlkYXRpb25TdGF0ZSIsInJlcXVpcmVkIiwicmVhZE9ubHkiLCJmb3JtQ29udHJvbENvbnRleHQiLCJpc1JlcXVpcmVkIiwiZ2VuZXJhdGVJZCIsInJlZ2lzdGVyTGFiZWwiLCJyZWdpc3RlckZpZWxkIiwicmVnaXN0ZXJEZXNjcmlwdGlvbiIsInJlZ2lzdGVyRXJyb3JNZXNzYWdlIiwiRm9ybUNvbnRyb2xDb250ZXh0IiwidXNlRm9ybUNvbnRyb2xDb250ZXh0IiwiY29udGV4dCIsIlBvbHltb3JwaGljIiwibG9jYWwiLCJvdGhlcnMiLCJhc0NoaWxkIiwiY29tcG9uZW50IiwiYXMiLCJyZXNvbHZlZENoaWxkcmVuIiwiaXNBcyIsImNvbWJpbmVkUHJvcHMiLCJjb21iaW5lUHJvcHMyIiwibmV3RWxlbWVudCIsIm5ld0NoaWxkcmVuIiwid2hlbiIsIkFTX0NPTVBPTkVOVF9TWU1CT0wiLCJiYXNlUHJvcHMiLCJvdmVycmlkZVByb3BzIiwiRm9ybUNvbnRyb2xEZXNjcmlwdGlvbiIsIkZvcm1Db250cm9sRXJyb3JNZXNzYWdlIiwiaXNJbnZhbGlkIiwiZm9yY2VNb3VudCIsIkZvcm1Db250cm9sTGFiZWwiLCJyJCIsIl9yZWYkIiwiUlRMX1NDUklQVFMiLCJSVExfTEFOR1MiLCJpc1JUTDIiLCJzY3JpcHQiLCJtYXhpbWl6ZSIsImxhbmciLCJnZXRSZWFkaW5nRGlyZWN0aW9uIiwiZ2V0RGVmYXVsdExvY2FsZSIsInVzZXJMYW5ndWFnZSIsIkRhdGVUaW1lRm9ybWF0Iiwic3VwcG9ydGVkTG9jYWxlc09mIiwiX2VyciIsImN1cnJlbnRMb2NhbGUiLCJsaXN0ZW5lcnMiLCJ1cGRhdGVMb2NhbGUiLCJjcmVhdGVEZWZhdWx0TG9jYWxlIiwiZGVmYXVsdFNTUkxvY2FsZSIsImRlZmF1bHRDbGllbnRMb2NhbGUiLCJzZXREZWZhdWx0Q2xpZW50TG9jYWxlIiwiSTE4bkNvbnRleHQiLCJ1c2VMb2NhbGUiLCJjYWNoZSQxIiwiY3JlYXRlQ29sbGF0b3IiLCJjYWNoZUtleSIsImVudHJpZXMiLCJjb2xsYXRvciIsIkNvbGxhdG9yIiwiU2VsZWN0aW9uIiwiX1NlbGVjdGlvbiIsImFuY2hvcktleSIsImN1cnJlbnRLZXkiLCJjcmVhdGVDb250cm9sbGFibGVTZWxlY3Rpb25TaWduYWwiLCJpc05vbkNvbnRpZ3VvdXNTZWxlY3Rpb25Nb2RpZmllciIsImFsdEtleSIsImlzQ3RybEtleVByZXNzZWQiLCJjb252ZXJ0U2VsZWN0aW9uIiwic2VsZWN0aW9uIiwiaXNTYW1lU2VsZWN0aW9uIiwic2V0QSIsInNldEIiLCJjcmVhdGVNdWx0aXBsZVNlbGVjdGlvblN0YXRlIiwic2VsZWN0aW9uTW9kZSIsInNlbGVjdGlvbkJlaGF2aW9yIiwiaXNGb2N1c2VkIiwic2V0Rm9jdXNlZCIsImZvY3VzZWRLZXkiLCJzZXRGb2N1c2VkS2V5Iiwic2VsZWN0ZWRLZXlzUHJvcCIsInNlbGVjdGVkS2V5cyIsImRlZmF1bHRTZWxlY3RlZEtleXMiLCJkZWZhdWx0U2VsZWN0aW9uIiwiX3NldFNlbGVjdGVkS2V5cyIsIm9uU2VsZWN0aW9uQ2hhbmdlIiwic2V0U2VsZWN0aW9uQmVoYXZpb3IiLCJkaXNhbGxvd0VtcHR5U2VsZWN0aW9uIiwic2V0U2VsZWN0ZWRLZXlzIiwiYWxsb3dEdXBsaWNhdGVTZWxlY3Rpb25FdmVudHMiLCJjcmVhdGVUeXBlU2VsZWN0Iiwic2VhcmNoIiwic2V0U2VhcmNoIiwic2V0VGltZW91dElkIiwib25LZXlEb3duIiwiZGVsZWdhdGUiLCJrZXlib2FyZERlbGVnYXRlIiwibWFuYWdlciIsInNlbGVjdGlvbk1hbmFnZXIiLCJnZXRLZXlGb3JTZWFyY2giLCJjaGFyYWN0ZXIiLCJnZXRTdHJpbmdGb3JLZXkiLCJzdG9wUHJvcGFnYXRpb24iLCJuZXdTZWFyY2giLCJpc0FsbFNhbWVMZXR0ZXIiLCJvblR5cGVTZWxlY3QiLCJ0eXBlU2VsZWN0SGFuZGxlcnMiLCJsZXR0ZXIiLCJjcmVhdGVTZWxlY3RhYmxlQ29sbGVjdGlvbiIsInNjcm9sbFJlZiIsInNlbGVjdE9uRm9jdXMiLCJmaW5hbFNjcm9sbFJlZiIsInNjcm9sbFBvcyIsImlzVmlydHVhbGl6ZWQiLCJzY3JvbGxFbCIsImRpc2FsbG93VHlwZUFoZWFkIiwicmVmRWwiLCJuYXZpZ2F0ZVRvS2V5Iiwic2hpZnRLZXkiLCJleHRlbmRTZWxlY3Rpb24iLCJyZXBsYWNlU2VsZWN0aW9uIiwic2hvdWxkRm9jdXNXcmFwIiwiZ2V0S2V5QmVsb3ciLCJuZXh0S2V5IiwiZ2V0Rmlyc3RLZXkiLCJnZXRLZXlBYm92ZSIsImdldExhc3RLZXkiLCJnZXRLZXlMZWZ0T2YiLCJpc1JUTDMiLCJnZXRLZXlSaWdodE9mIiwiZmlyc3RLZXkiLCJsYXN0S2V5IiwiZ2V0S2V5UGFnZUJlbG93IiwiZ2V0S2V5UGFnZUFib3ZlIiwiZGlzYWxsb3dTZWxlY3RBbGwiLCJzZWxlY3RBbGwiLCJjbGVhclNlbGVjdGlvbiIsImFsbG93c1RhYk5hdmlnYXRpb24iLCJsYXN0Q2hpbGQiLCJjdXJyZW50VGFyZ2V0IiwibmF2aWdhdGVUb0ZpcnN0S2V5IiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkciLCJsYXN0U2VsZWN0ZWRLZXkiLCJmaXJzdFNlbGVjdGVkS2V5Iiwib25Nb3VzZURvd24iLCJ0cnlBdXRvRm9jdXMiLCJhdXRvRm9jdXMiLCJzaG91bGRVc2VWaXJ0dWFsRm9jdXMiLCJkZWZlckF1dG9Gb2N1cyIsInNjcm9sbFRvS2V5IiwiY3JlYXRlU2VsZWN0YWJsZUl0ZW0iLCJvblNlbGVjdCIsInRvZ2dsZVNlbGVjdGlvbiIsImFsbG93c1NlbGVjdGlvbiIsImNhblNlbGVjdEl0ZW0iLCJwb2ludGVyRG93blR5cGUiLCJzaG91bGRTZWxlY3RPblByZXNzVXAiLCJvblBvaW50ZXJVcCIsImFsbG93c0RpZmZlcmVudFByZXNzT3JpZ2luIiwib25DbGljayIsInZpcnR1YWxpemVkIiwia2V5MiIsInNob3VsZFVzZVZpcnR1YWxGb2N1czIiLCJTZWxlY3Rpb25NYW5hZ2VyIiwic3RhdGUiLCJyZXRyaWV2ZWRLZXkiLCJpc0VtcHR5IiwiaXNTZWxlY3RBbGwiLCJnZXRBbGxTZWxlY3RhYmxlS2V5cyIsImlzSXRlbUJlZm9yZUZpcnN0IiwiaXNJdGVtQWZ0ZXJMYXN0IiwidG9LZXkiLCJyZXRyaWV2ZWRUb0tleSIsImdldEtleVJhbmdlIiwiZnJvbUl0ZW0iLCJ0b0l0ZW0iLCJnZXRLZXlSYW5nZUludGVybmFsIiwiZ2V0S2V5QWZ0ZXIiLCJ0b2dnbGVTZWxlY3RBbGwiLCJzZWxlY3QiLCJpc1NlbGVjdGlvbkVxdWFsIiwiYWRkS2V5cyIsIkxpc3RDb2xsZWN0aW9uIiwia2V5TWFwIiwiaXRlcmFibGUiLCJwcmV2S2V5IiwiaXRlcmF0b3IiLCJnZXRTaXplIiwiZ2V0S2V5cyIsImdldEtleUJlZm9yZSIsImF0IiwiaWR4IiwiY3JlYXRlTGlzdFN0YXRlIiwic2VsZWN0aW9uU3RhdGUiLCJMaXN0S2V5Ym9hcmREZWxlZ2F0ZSIsImtleUFmdGVyIiwia2V5QmVmb3JlIiwibWVudSIsInBhZ2VZIiwia2V5QWJvdmUiLCJrZXlCZWxvdyIsImZyb21LZXkiLCJzdWJzdHJpbmciLCJjb21wYXJlIiwiY3JlYXRlU2VsZWN0YWJsZUxpc3QiLCJ1c2FnZSIsInNlbnNpdGl2aXR5IiwidG9hc3RzIiwiQlVUVE9OX0lOUFVUX1RZUEVTIiwiaXNCdXR0b24iLCJCdXR0b25Sb290IiwiaXNOYXRpdmVCdXR0b24iLCJlbGVtZW50VGFnTmFtZSIsImlzTmF0aXZlSW5wdXQiLCJpc05hdGl2ZUxpbmsiLCJyb2xlIiwiRG9tQ29sbGVjdGlvbkNvbnRleHQiLCJ1c2VPcHRpb25hbERvbUNvbGxlY3Rpb25Db250ZXh0IiwidXNlRG9tQ29sbGVjdGlvbkNvbnRleHQiLCJpc0VsZW1lbnRQcmVjZWRpbmciLCJET0NVTUVOVF9QT1NJVElPTl9QUkVDRURJTkciLCJmaW5kRE9NSW5kZXgiLCJpdGVtRWwiLCJjdXJyZW50SXRlbUVsIiwic29ydEJhc2VkT25ET01Qb3NpdGlvbiIsInBhaXJzIiwiaXNPcmRlckRpZmZlcmVudCIsImluZGV4QSIsImluZGV4QiIsImVsZW1lbnRBIiwiZWxlbWVudEIiLCJzZXRJdGVtc0Jhc2VkT25ET01Qb3NpdGlvbiIsInNldEl0ZW1zIiwic29ydGVkSXRlbXMiLCJnZXRDb21tb25QYXJlbnQiLCJmaXJzdEl0ZW0iLCJsYXN0SXRlbUVsIiwicGFyZW50RWwiLCJjcmVhdGVUaW1lb3V0T2JzZXJ2ZXIiLCJ0aW1lb3V0IiwiY3JlYXRlU29ydEJhc2VkT25ET01Qb3NpdGlvbiIsInByZXZpb3VzSXRlbXMiLCJoYXNQcmV2aW91c0l0ZW1zIiwiY3JlYXRlRG9tQ29sbGVjdGlvbiIsIm9uSXRlbXNDaGFuZ2UiLCJyZWdpc3Rlckl0ZW0iLCJwcmV2SXRlbXMiLCJuZXh0SXRlbXMiLCJwcmV2SXRlbSIsIkRvbUNvbGxlY3Rpb25Qcm92aWRlciIsInByb3BzMiIsIlByb3ZpZGVyIiwiY3JlYXRlRG9tQ29sbGVjdGlvbkl0ZW0iLCJzaG91bGRSZWdpc3Rlckl0ZW0iLCJ1bnJlZ2lzdGVyIiwiRGlzbWlzc2FibGVMYXllckNvbnRleHQiLCJ1c2VPcHRpb25hbERpc21pc3NhYmxlTGF5ZXJDb250ZXh0IiwiRGlzbWlzc2FibGVMYXllciIsInBhcmVudENvbnRleHQiLCJuZXN0ZWRMYXllcnMiLCJyZWdpc3Rlck5lc3RlZExheWVyIiwicGFyZW50VW5yZWdpc3RlciIsImV4Y2x1ZGVkRWxlbWVudHMiLCJieXBhc3NUb3BNb3N0TGF5ZXJDaGVjayIsIm9uRGlzbWlzcyIsImRpc2FibGVPdXRzaWRlUG9pbnRlckV2ZW50cyIsImRpc21pc3MiLCJ1bnJlZ2lzdGVyRnJvbVBhcmVudExheWVyIiwicmVmMiIsIlBvcHBlckNvbnRleHQiLCJ1c2VQb3BwZXJDb250ZXh0IiwiX3RtcGwkJGYiLCJERUZBVUxUX1NJWkUiLCJIQUxGX0RFRkFVTFRfU0laRSIsIlJPVEFUSU9OX0RFRyIsIlBvcHBlckFycm93IiwiZGlyIiwiY3VycmVudFBsYWNlbWVudCIsImNvbnRlbnRTdHlsZSIsImNyZWF0ZUNvbXB1dGVkU3R5bGUiLCJjb250ZW50UmVmIiwiZmlsbCIsInN0cm9rZSIsImJvcmRlcldpZHRoIiwic3Ryb2tlV2lkdGgiLCJyb3RhdGUiLCJzZXRBcnJvd1JlZiIsIl9lbCQiLCJfZWwkMiIsIl9lbCQzIiwiUG9wcGVyUG9zaXRpb25lciIsInNldFBvc2l0aW9uZXJSZWYiLCJjcmVhdGVET01SZWN0IiwiYW5jaG9yUmVjdCIsIkRPTVJlY3QiLCJnZXRBbmNob3JFbGVtZW50IiwiYW5jaG9yIiwiZ2V0QW5jaG9yUmVjdCIsImlzVmFsaWRQbGFjZW1lbnQiLCJmbGlwMiIsIlJFVkVSU0VfQkFTRV9QTEFDRU1FTlQiLCJnZXRUcmFuc2Zvcm1PcmlnaW4iLCJyZWFkaW5nRGlyZWN0aW9uIiwiYmFzZVBsYWNlbWVudCIsInJldmVyc2VQbGFjZW1lbnQiLCJQb3BwZXJSb290IiwiZ3V0dGVyIiwic2xpZGUiLCJvdmVybGFwIiwic2FtZVdpZHRoIiwiZml0Vmlld3BvcnQiLCJoaWRlV2hlbkRldGFjaGVkIiwiZGV0YWNoZWRQYWRkaW5nIiwiYXJyb3dQYWRkaW5nIiwib3ZlcmZsb3dQYWRkaW5nIiwicG9zaXRpb25lclJlZiIsImFycm93UmVmIiwic2V0Q3VycmVudFBsYWNlbWVudCIsImFuY2hvclJlZiIsInVwZGF0ZVBvc2l0aW9uIiwiZmxvYXRpbmdFbCIsImFycm93RWwiLCJhcnJvd09mZnNldCIsImZpbmFsR3V0dGVyIiwiaGFzQWxpZ25tZW50IiwicmVmZXJlbmNlV2lkdGgiLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsInBvcyIsIm9uQ3VycmVudFBsYWNlbWVudENoYW5nZSIsImFycm93WCIsImFycm93WSIsImNsZWFudXBBdXRvVXBkYXRlIiwicG9zaXRpb25lciIsImNvbnRlbnQiLCJ6SW5kZXgiLCJNZW51Q29udGV4dCIsInVzZU9wdGlvbmFsTWVudUNvbnRleHQiLCJ1c2VNZW51Q29udGV4dCIsIk1lbnVSb290Q29udGV4dCIsInVzZU1lbnVSb290Q29udGV4dCIsImdldFBvaW50ZXJHcmFjZUFyZWEiLCJjb250ZW50RWwiLCJwb2ludGVyWCIsImNsaWVudFgiLCJwb2ludGVyWSIsImNsaWVudFkiLCJpc1BvaW50ZXJJbkdyYWNlQXJlYSIsImFyZWEiLCJNZW51Iiwicm9vdENvbnRleHQiLCJwYXJlbnREb21Db2xsZWN0aW9uQ29udGV4dCIsInBhcmVudE1lbnVDb250ZXh0IiwicG9pbnRlckdyYWNlVGltZW91dElkIiwicG9pbnRlckdyYWNlSW50ZW50IiwicG9pbnRlckRpciIsInRyaWdnZXJJZCIsInNldFRyaWdnZXJJZCIsImNvbnRlbnRJZCIsInNldENvbnRlbnRJZCIsInRyaWdnZXJSZWYiLCJzZXRUcmlnZ2VyUmVmIiwic2V0Q29udGVudFJlZiIsImZvY3VzU3RyYXRlZ3kiLCJzZXRGb2N1c1N0cmF0ZWd5IiwibmVzdGVkTWVudXMiLCJzZXROZXN0ZWRNZW51cyIsImRpc2Nsb3N1cmVTdGF0ZSIsImNvbnRlbnRQcmVzZW5jZSIsImxpc3RTdGF0ZSIsImZvY3VzU3RyYXRlZ3kyIiwicmVjdXJzaXZlbHkiLCJmb2N1c0NvbnRlbnQiLCJyZWdpc3Rlck5lc3RlZE1lbnUiLCJpc1BvaW50ZXJNb3ZpbmdUb1N1Ym1lbnUiLCJpc01vdmluZ1Rvd2FyZHMiLCJvbkl0ZW1FbnRlciIsIm9uSXRlbUxlYXZlIiwib25UcmlnZ2VyTGVhdmUiLCJpc01vZGFsIiwic2V0UG9pbnRlckRpciIsInNldFBvaW50ZXJHcmFjZVRpbWVvdXRJZCIsInNldFBvaW50ZXJHcmFjZUludGVudCIsImludGVudCIsInJlZ2lzdGVySXRlbVRvUGFyZW50RG9tQ29sbGVjdGlvbiIsInJlZ2lzdGVyVHJpZ2dlcklkIiwicmVnaXN0ZXJDb250ZW50SWQiLCJNZW51SXRlbUNvbnRleHQiLCJ1c2VNZW51SXRlbUNvbnRleHQiLCJNZW51SXRlbUJhc2UiLCJtZW51Q29udGV4dCIsImxhYmVsUmVmIiwic2V0TGFiZWxSZWYiLCJpc0hpZ2hsaWdodGVkIiwiY2xvc2VPblNlbGVjdCIsInRleHRDb250ZW50Iiwic2VsZWN0YWJsZUl0ZW0iLCJvblBvaW50ZXJNb3ZlIiwib25Qb2ludGVyTGVhdmUiLCJyZXBlYXQiLCJhcmlhQ2hlY2tlZCIsImluZGV0ZXJtaW5hdGUiLCJjaGVja2VkIiwiaXNDaGVja2VkIiwiTWVudUNoZWNrYm94SXRlbSIsImRlZmF1bHRDaGVja2VkIiwiTWVudUNvbnRlbnRCYXNlIiwibGFzdFBvaW50ZXJYIiwiaXNSb290TW9kYWxDb250ZW50Iiwic2VsZWN0YWJsZUxpc3QiLCJvbk9wZW5BdXRvRm9jdXMiLCJvbkNsb3NlQXV0b0ZvY3VzIiwib25Qb2ludGVyRW50ZXIiLCJwb2ludGVyWEhhc0NoYW5nZWQiLCJNZW51Q29udGVudCIsIk1lbnVHcm91cENvbnRleHQiLCJ1c2VNZW51R3JvdXBDb250ZXh0IiwiTWVudUdyb3VwIiwicmVnaXN0ZXJMYWJlbElkIiwiTWVudUdyb3VwTGFiZWwiLCJNZW51SWNvbiIsIk1lbnVJdGVtIiwiTWVudUl0ZW1EZXNjcmlwdGlvbiIsIk1lbnVJdGVtSW5kaWNhdG9yIiwiTWVudUl0ZW1MYWJlbCIsIk1lbnVQb3J0YWwiLCJNZW51UmFkaW9Hcm91cENvbnRleHQiLCJ1c2VNZW51UmFkaW9Hcm91cENvbnRleHQiLCJNZW51UmFkaW9Hcm91cCIsInNlbGVjdGVkIiwic2V0U2VsZWN0ZWQiLCJpc1NlbGVjdGVkVmFsdWUiLCJzZXRTZWxlY3RlZFZhbHVlIiwiTWVudVJhZGlvSXRlbSIsIk1lbnVSb290IiwibW9kYWwiLCJNZW51U3ViIiwiU1VCX0NMT1NFX0tFWVMiLCJsdHIiLCJNZW51U3ViQ29udGVudCIsImlzS2V5RG93bkluc2lkZSIsImlzQ2xvc2VLZXkiLCJpc1N1Yk1lbnUiLCJTRUxFQ1RJT05fS0VZUyIsIlNVQl9PUEVOX0tFWVMiLCJNZW51U3ViVHJpZ2dlciIsIm9wZW5UaW1lb3V0SWQiLCJjbGVhck9wZW5UaW1lb3V0IiwicGFyZW50U2VsZWN0aW9uTWFuYWdlciIsInBvaW50ZXJHcmFjZVRpbWVyIiwiTWVudVRyaWdnZXIiLCJTZXBhcmF0b3JSb290Iiwib3JpZW50YXRpb24iLCJhY2giLCJ5ZWFyIiwibW9udGgiLCJkYXkiLCJhZiIsImFtIiwiYW4iLCJhciIsImFzdCIsImF6IiwiYmUiLCJiZyIsImJuIiwiYnIiLCJicyIsImNhIiwiY2FrIiwiY2tiIiwiY3MiLCJjeSIsImRhIiwiZGUiLCJkc2IiLCJlbiIsImVvIiwiZXMiLCJldCIsImV1IiwiZmEiLCJmZiIsImZpIiwiZnIiLCJmeSIsImdhIiwiZ2QiLCJnbCIsImhlIiwiaHIiLCJoc2IiLCJodSIsImlhIiwiaXQiLCJqYSIsImthIiwia2siLCJrbiIsImtvIiwibGIiLCJsbyIsImx0IiwibHYiLCJtZWgiLCJtbCIsIm1zIiwibmwiLCJubiIsIm5vIiwib2MiLCJwbCIsInB0Iiwicm0iLCJybyIsInJ1Iiwic2MiLCJzY24iLCJzayIsInNsIiwic3IiLCJzdiIsInN6bCIsInRnIiwidGgiLCJ0ciIsInVrIiwiRHJvcGRvd25NZW51Q29udGVudCIsImhhc0ludGVyYWN0ZWRPdXRzaWRlIiwiRHJvcGRvd25NZW51Um9vdCIsImluZGV4JGYiLCJmcmVlemUiLCJfX3Byb3RvX18iLCJBcnJvdyIsIkNoZWNrYm94SXRlbSIsIkNvbnRlbnQiLCJHcm91cCIsIkdyb3VwTGFiZWwiLCJJY29uIiwiSXRlbSIsIkl0ZW1EZXNjcmlwdGlvbiIsIkl0ZW1JbmRpY2F0b3IiLCJJdGVtTGFiZWwiLCJSYWRpb0dyb3VwIiwiUmFkaW9JdGVtIiwiUm9vdCIsIlNlcGFyYXRvciIsIlN1YiIsIlN1YkNvbnRlbnQiLCJTdWJUcmlnZ2VyIiwiVHJpZ2dlciIsIlJhZGlvR3JvdXBDb250ZXh0IiwidXNlUmFkaW9Hcm91cENvbnRleHQiLCJSYWRpb0dyb3VwSXRlbUNvbnRleHQiLCJ1c2VSYWRpb0dyb3VwSXRlbUNvbnRleHQiLCJSYWRpb0dyb3VwSXRlbSIsInJhZGlvR3JvdXBDb250ZXh0IiwiaW5wdXRJZCIsInNldElucHV0SWQiLCJpbnB1dFJlZiIsInNldElucHV0UmVmIiwic2V0SXNGb2N1c2VkIiwicmVnaXN0ZXJJbnB1dCIsIlJhZGlvR3JvdXBJdGVtQ29udHJvbCIsIlNwYWNlIiwiUmFkaW9Hcm91cEl0ZW1EZXNjcmlwdGlvbiIsIlJhZGlvR3JvdXBJdGVtSW5kaWNhdG9yIiwicHJlc2VuY2UiLCJfdG1wbCQkNyIsIlJhZGlvR3JvdXBJdGVtSW5wdXQiLCJyYWRpb0NvbnRleHQiLCJhcmlhTGFiZWxsZWRCeSIsImFyaWFEZXNjcmliZWRCeSIsIm9uQmx1ciIsInJlYWRvbmx5IiwiX3RtcGwkJDYiLCJSYWRpb0dyb3VwSXRlbUxhYmVsIiwiUmFkaW9Hcm91cExhYmVsIiwiUmFkaW9Hcm91cFJvb3QiLCJmb3JtQ29udHJvbFByb3BzIiwicmFkaW8iLCJpbmRleCQ5IiwiRGVzY3JpcHRpb24iLCJFcnJvck1lc3NhZ2UiLCJJdGVtQ29udHJvbCIsIkl0ZW1JbnB1dCIsIkxhYmVsIiwiU2hhZG93VmFyaWFudHMiLCJ4cyIsInNtIiwibWQiLCJsZyIsInhsIiwiaW5uZXIiLCJub25lIiwiZ2V0U2hhZG93IiwidmFyaWFudCIsImNvbG9yIiwiU2hhZG93IiwidG9rZW5zIiwiY29sb3JzIiwiaW5oZXJpdCIsInRyYW5zcGFyZW50IiwiYmxhY2siLCJ3aGl0ZSIsIm5ldXRyYWwiLCJkYXJrR3JheSIsImdyYXkiLCJibHVlIiwiZ3JlZW4iLCJyZWQiLCJ5ZWxsb3ciLCJwdXJwbGUiLCJ0ZWFsIiwicGluayIsImN5YW4iLCJhbHBoYSIsImZvbnQiLCJsaW5lSGVpZ2h0Iiwid2VpZ2h0IiwidGhpbiIsImV4dHJhbGlnaHQiLCJsaWdodCIsIm5vcm1hbCIsIm1lZGl1bSIsInNlbWlib2xkIiwiYm9sZCIsImV4dHJhYm9sZCIsImJyZWFrcG9pbnRzIiwicmFkaXVzIiwiZnVsbCIsInNoYWRvdyIsInpJbmRpY2VzIiwiYXV0byIsImJhc2UiLCJkb2NrZWQiLCJkcm9wZG93biIsInN0aWNreSIsImJhbm5lciIsIm92ZXJsYXkiLCJwb3BvdmVyIiwic2tpcExpbmsiLCJ0b2FzdCIsInRvb2x0aXAiLCJfdG1wbCQiLCJfdG1wbCQyIiwiX3RtcGwkMyIsIl90bXBsJDQiLCJfdG1wbCQ1IiwiX3RtcGwkNiIsIl90bXBsJDciLCJfdG1wbCQ4IiwiX3RtcGwkOSIsIl90bXBsJDEwIiwiX3RtcGwkMTEiLCJfdG1wbCQxMiIsIl90bXBsJDEzIiwiX3RtcGwkMTQiLCJfdG1wbCQxNSIsIl90bXBsJDE2IiwiX3RtcGwkMTciLCJfdG1wbCQxOCIsIl90bXBsJDE5IiwiX3RtcGwkMjAiLCJfdG1wbCQyMSIsIlNlYXJjaCIsIlRyYXNoIiwiQ2hldnJvbkRvd24iLCJBcnJvd1VwIiwiQXJyb3dEb3duIiwiQXJyb3dMZWZ0IiwiX2VsJDYiLCJBcnJvd1JpZ2h0IiwiX2VsJDciLCJTdW4iLCJNb29uIiwiTW9uaXRvciIsIldpZmkiLCJPZmZsaW5lIiwiU2V0dGluZ3MiLCJDb3BpZXIiLCJDb3BpZWRDb3BpZXIiLCJfZWwkMTUiLCJfZWwkMTYiLCJ0aGVtZSIsIkVycm9yQ29waWVyIiwiTGlzdCIsIkNoZWNrIiwiX2VsJDE5IiwiX2VsJDIwIiwiX2VsJDIxIiwiX2VsJDIyIiwiQ2hlY2tDaXJjbGUiLCJMb2FkaW5nQ2lyY2xlIiwiWENpcmNsZSIsIlBhdXNlQ2lyY2xlIiwiVGFuc3RhY2tMb2dvIiwiX2VsJDI3IiwiX2VsJDI4IiwiX2VsJDI5IiwiX2VsJDMwIiwiX2VsJDMxIiwiX2VsJDMyIiwiX2VsJDMzIiwiX2VsJDM0IiwiX2VsJDM1IiwiX2VsJDM2IiwiX2VsJDM3IiwiX2VsJDM4IiwiX2VsJDM5IiwiX2VsJDQwIiwiX2VsJDQxIiwiX2VsJDQyIiwiX2VsJDQzIiwiX2VsJDQ0IiwiX2VsJDQ1IiwiX2VsJDQ2IiwiX2VsJDQ3IiwiX2VsJDQ4IiwiX2VsJDQ5IiwiX2VsJDUwIiwiX2VsJDUxIiwiX2VsJDUyIiwiX2VsJDUzIiwiX2VsJDU0IiwiX2VsJDU1IiwiX2VsJDU2IiwiX2VsJDU3IiwiX2VsJDU4IiwiX2VsJDU5IiwiX2VsJDYwIiwiX2VsJDYxIiwiX2VsJDYyIiwiX2VsJDYzIiwiX2VsJDY0IiwiX2VsJDY1IiwiX2VsJDY2IiwiX2VsJDY3IiwiX2VsJDY4IiwiX2VsJDY5IiwiX2VsJDcwIiwiX2VsJDcxIiwiX2VsJDcyIiwiX2VsJDczIiwiX2VsJDc0IiwiX2VsJDc1IiwiX2VsJDc2IiwiX2VsJDc3IiwiX2VsJDc4IiwiX2VsJDc5IiwiX2VsJDgwIiwiX2VsJDgxIiwiX2VsJDgyIiwiX2VsJDgzIiwiX2VsJDg0IiwiX2VsJDg1IiwiX2VsJDg2IiwiX2VsJDg3IiwiX2VsJDg4IiwiX2VsJDg5IiwiX2VsJDkwIiwiX2VsJDkxIiwiX2VsJDkyIiwiX2VsJDkzIiwiX2VsJDk0IiwiX2VsJDk1IiwiX2VsJDk2IiwiX2VsJDk3IiwiX2VsJDk4IiwiX2VsJDk5IiwiX2VsJDEwMCIsIl9lbCQxMDEiLCJfZWwkMTAyIiwiX2VsJDEwMyIsIl9lbCQxMDQiLCJfZWwkMTA1IiwiX2VsJDEwNiIsIl9lbCQxMDciLCJfZWwkMTA4IiwiX2VsJDEwOSIsIl9lbCQxMTAiLCJfZWwkMTExIiwiX2VsJDExMiIsIl9lbCQxMTMiLCJfZWwkMTE0IiwiX2VsJDExNSIsIl9lbCQxMTYiLCJfZWwkMTE3IiwiX2VsJDExOCIsIl9lbCQxMTkiLCJRdWVyeURldnRvb2xzQ29udGV4dCIsImNsaWVudCIsIm9ubGluZU1hbmFnZXIiLCJxdWVyeUZsYXZvciIsInZlcnNpb24iLCJ1c2VRdWVyeURldnRvb2xzQ29udGV4dCIsIlRoZW1lQ29udGV4dCIsInVzZVRoZW1lIiwiX3RtcGwkMjIiLCJfdG1wbCQyMyIsIl90bXBsJDMyIiwiX3RtcGwkNDIiLCJfdG1wbCQ1MiIsIl90bXBsJDYyIiwiX3RtcGwkNzIiLCJfdG1wbCQ4MiIsIl90bXBsJDkyIiwiX3RtcGwkMTAyIiwiX3RtcGwkMTEyIiwiY2h1bmtBcnJheSIsInNpemUyIiwiRXhwYW5kZXIiLCJkYXJrU3R5bGVzIiwibGlnaHRTdHlsZXMiLCJleHBhbmRlciIsImV4cGFuZGVkIiwiQ29weUJ1dHRvbiIsImNvcHlTdGF0ZSIsInNldENvcHlTdGF0ZSIsImNsaXBib2FyZCIsIndyaXRlVGV4dCIsInRoZW4iLCJjb25zb2xlIiwiX3AkIiwiX3YkIiwiYWN0aW9uQnV0dG9uIiwiX3YkMiIsIkNsZWFyQXJyYXlCdXR0b24iLCJxdWVyeUNsaWVudCIsIiQkY2xpY2siLCJvbGREYXRhIiwiYWN0aXZlUXVlcnkiLCJuZXdEYXRhIiwiZGF0YVBhdGgiLCJzZXRRdWVyeURhdGEiLCJxdWVyeUtleSIsIkRlbGV0ZUl0ZW1CdXR0b24iLCJfZWwkNCIsIlRvZ2dsZVZhbHVlQnV0dG9uIiwiX2VsJDUiLCJpc0l0ZXJhYmxlIiwiRXhwbG9yZXIiLCJzZXRFeHBhbmRlZCIsImRlZmF1bHRFeHBhbmRlZCIsImxhYmVsIiwidG9nZ2xlRXhwYW5kZWQiLCJvbGQiLCJleHBhbmRlZFBhZ2VzIiwic2V0RXhwYW5kZWRQYWdlcyIsInN1YkVudHJpZXMiLCJ2YWwiLCJzdWJFbnRyeVBhZ2VzIiwiY3VycmVudERhdGFQYXRoIiwiX2VsJDgiLCJfZWwkOSIsIl9lbCQxMCIsIl9lbCQxMSIsIl9lbCQxMiIsIl9lbCQxMyIsImVkaXRhYmxlIiwiX2VsJDE0IiwiaXRlbXNEZWxldGFibGUiLCJhY3Rpb25zIiwiX3YkMyIsImV4cGFuZGVyQnV0dG9uQ29udGFpbmVyIiwiX3YkNCIsImV4cGFuZGVyQnV0dG9uIiwiX3YkNSIsImluZm8iLCJzdWJFbnRyeSIsIl9lbCQyMyIsIl9lbCQyNCIsIl9lbCQyNSIsIl92JDEwIiwiX3YkMTEiLCJfZWwkMTciLCJfZWwkMTgiLCJjaGFuZ2VFdmVudCIsInZhbHVlQXNOdW1iZXIiLCJfdiQ2IiwiX3YkNyIsImVkaXRhYmxlSW5wdXQiLCJfdiQ4Iiwicm93IiwiX3YkOSIsInN0eWxlc0ZhY3RvcnkiLCJkYXJrIiwiX3RtcGwkMjQiLCJfdG1wbCQyNSIsIl90bXBsJDMzIiwiX3RtcGwkNDMiLCJfdG1wbCQ1MyIsIl90bXBsJDYzIiwiX3RtcGwkNzMiLCJfdG1wbCQ4MyIsIl90bXBsJDkzIiwiX3RtcGwkMTAzIiwiX3RtcGwkMTEzIiwiX3RtcGwkMTIyIiwiX3RtcGwkMTMyIiwiX3RtcGwkMTQyIiwiX3RtcGwkMTUyIiwiX3RtcGwkMTYyIiwiX3RtcGwkMTcyIiwiX3RtcGwkMTgyIiwiX3RtcGwkMTkyIiwiX3RtcGwkMjAyIiwiX3RtcGwkMjEyIiwiX3RtcGwkMjIyIiwiX3RtcGwkMjMyIiwiX3RtcGwkMjQyIiwiX3RtcGwkMjUyIiwiX3RtcGwkMjYiLCJfdG1wbCQyNyIsIl90bXBsJDI4IiwiX3RtcGwkMjkiLCJfdG1wbCQzMCIsImZpcnN0QnJlYWtwb2ludCIsInNlY29uZEJyZWFrcG9pbnQiLCJ0aGlyZEJyZWFrcG9pbnQiLCJCVVRUT05fUE9TSVRJT04iLCJQT1NJVElPTiIsIlRIRU1FX1BSRUZFUkVOQ0UiLCJJTklUSUFMX0lTX09QRU4iLCJERUZBVUxUX0hFSUdIVCIsIkRFRkFVTFRfV0lEVEgiLCJERUZBVUxUX1NPUlRfRk5fTkFNRSIsIkRFRkFVTFRfU09SVF9PUkRFUiIsIkRFRkFVTFRfTVVUQVRJT05fU09SVF9GTl9OQU1FIiwic2VsZWN0ZWRRdWVyeUhhc2giLCJzZXRTZWxlY3RlZFF1ZXJ5SGFzaCIsInNlbGVjdGVkTXV0YXRpb25JZCIsInNldFNlbGVjdGVkTXV0YXRpb25JZCIsInBhbmVsV2lkdGgiLCJzZXRQYW5lbFdpZHRoIiwiRGV2dG9vbHNDb21wb25lbnQiLCJsb2NhbFN0b3JlIiwic2V0TG9jYWxTdG9yZSIsImNvbG9yU2NoZW1lIiwicHJlZmVyZW5jZSIsInRoZW1lX3ByZWZlcmVuY2UiLCJEZXZ0b29scyIsIkRldnRvb2xzX2RlZmF1bHQiLCJkYXJrU3R5bGVzMiIsImxpZ2h0U3R5bGVzMiIsImJ1dHRvblBvc2l0aW9uIiwiaW5pdGlhbElzT3BlbiIsInRyYW5zaXRpb25zQ29udGFpbmVyUmVmIiwicGFuZWxQb3NpdGlvbiIsImZvbnRTaXplIiwiRGV2dG9vbHNQYW5lbCIsImRldnRvb2xzQnRuIiwiaXNSZXNpemluZyIsInNldElzUmVzaXppbmciLCJoYW5kbGVEcmFnU3RhcnQiLCJwYW5lbEVsZW1lbnQiLCJzdGFydFgiLCJzdGFydFkiLCJuZXdTaXplIiwibWluSGVpZ2h0IiwibWluV2lkdGgiLCJydW5EcmFnIiwibW92ZUV2ZW50IiwidmFsVG9BZGQiLCJuZXdXaWR0aCIsInVuc3ViIiwicGFuZWxSZWYiLCJyb290Q29udGFpbmVyIiwiY3VycmVudFBvc2l0aW9uIiwic3R5bGVQcm9wIiwicHJldmlvdXNQYWRkaW5ncyIsInBhZGRpbmdCb3R0b20iLCJwYWRkaW5nUmlnaHQiLCJnZXRQYW5lbER5bmFtaWNTdHlsZXMiLCJfcmVmJDIiLCIkJG1vdXNlZG93biIsIkNvbnRlbnRWaWV3IiwicGFuZWwiLCJkcmFnSGFuZGxlIiwiY2xvc2VCdG4iLCJzZXR1cFF1ZXJ5Q2FjaGVTdWJzY3JpcHRpb24iLCJzZXR1cE11dGF0aW9uQ2FjaGVTdWJzY3JpcHRpb24iLCJjb250YWluZXJSZWYiLCJzZWxlY3RlZFZpZXciLCJzZXRTZWxlY3RlZFZpZXciLCJzb3J0T3JkZXIiLCJtdXRhdGlvblNvcnQiLCJtdXRhdGlvblNvcnRPcmRlciIsIm9mZmxpbmUiLCJzZXRPZmZsaW5lIiwic29ydEZuIiwibXV0YXRpb25Tb3J0Rm4iLCJxdWVyeV9jYWNoZSIsImdldFF1ZXJ5Q2FjaGUiLCJtdXRhdGlvbl9jYWNoZSIsImdldE11dGF0aW9uQ2FjaGUiLCJxdWVyeUNvdW50IiwiY3JlYXRlU3Vic2NyaWJlVG9RdWVyeUNhY2hlQmF0Y2hlciIsInF1ZXJ5Q2FjaGUiLCJxdWVyaWVzIiwiY3VyciIsImZpbHRlcmVkIiwicXVlcnlIYXNoIiwic29ydGVkIiwibXV0YXRpb25Db3VudCIsImNyZWF0ZVN1YnNjcmliZVRvTXV0YXRpb25DYWNoZUJhdGNoZXIiLCJtdXRhdGlvbkNhY2hlIiwibXV0YXRpb25GaWx0ZXIiLCJtdXRhdGlvbktleSIsIkpTT04iLCJzdWJtaXR0ZWRBdCIsInRvTG9jYWxlU3RyaW5nIiwic2V0RGV2dG9vbHNQb3NpdGlvbiIsInNldENvbXB1dGVkVmFyaWFibGVzIiwidmFyaWFibGUiLCJfZWwkMjYiLCJfcmVmJDMiLCJ2aWV3VG9nZ2xlIiwidGl0bGUiLCJRdWVyeVN0YXR1c0NvdW50IiwiTXV0YXRpb25TdGF0dXNDb3VudCIsIiQkaW5wdXQiLCJzZXRPbmxpbmUiLCJfYyQiLCJhY3Rpb25zQnRuIiwic2V0dGluZ3NNZW51Iiwic2V0dGluZ3NNZW51SGVhZGVyIiwic2V0dGluZ3NTdWJUcmlnZ2VyIiwic2V0dGluZ3NTdWJCdXR0b24iLCJ0aGVtZVNlbGVjdGVkQnV0dG9uIiwicSIsInF1ZXJ5IiwiUXVlcnlSb3ciLCJvdmVyZmxvd1F1ZXJ5Q29udGFpbmVyIiwibSIsIm11dGF0aW9uSWQiLCJNdXRhdGlvblJvdyIsInF1ZXJpZXNDb250YWluZXIiLCJsb2dvQW5kVG9nZ2xlQ29udGFpbmVyIiwibG9nbyIsInRhbnN0YWNrTG9nbyIsInF1ZXJ5Rmxhdm9yTG9nbyIsIl92JDEyIiwiX3YkMTMiLCJmaWx0ZXJzQ29udGFpbmVyIiwiX3YkMTQiLCJmaWx0ZXJJbnB1dCIsIl92JDE1IiwiZmlsdGVyU2VsZWN0IiwiX3YkMTYiLCJfdiQxNyIsIl92JDE4IiwiYWN0aW9uc0NvbnRhaW5lciIsIl92JDE5IiwiX3YkMjAiLCJfdiQyMSIsImFjdGlvbnNCdG5PZmZsaW5lIiwiX3YkMjIiLCJfdiQyMyIsIl92JDI0IiwiUXVlcnlEZXRhaWxzIiwiTXV0YXRpb25EZXRhaWxzIiwicXVlcnlTdGF0ZSIsImlzU3RhbGUiLCJvYnNlcnZlcnMiLCJnZXRPYnNlcnZlcnNDb3VudCIsIm9ic2VydmVyQ291bnQiLCJnZXRPYnNlcnZlckNvdW50Q29sb3JTdHlsZXMiLCJfdiQyNSIsInF1ZXJ5Um93Iiwic2VsZWN0ZWRRdWVyeVJvdyIsIl92JDI2IiwiX3YkMjciLCJtdXRhdGlvblN0YXRlIiwic3RhdHVzIiwiX3YkMjgiLCJfdiQyOSIsIl92JDMwIiwic3RhbGUiLCJmcmVzaCIsImZldGNoaW5nIiwicGF1c2VkIiwiaW5hY3RpdmUiLCJRdWVyeVN0YXR1cyIsInF1ZXJ5U3RhdHVzQ29udGFpbmVyIiwic3VjY2VzcyIsInBlbmRpbmciLCJ0YWdSZWYiLCJtb3VzZU92ZXIiLCJzZXRNb3VzZU92ZXIiLCJmb2N1c2VkIiwic2hvd0xhYmVsIiwiX3JlZiQ0IiwicXVlcnlTdGF0dXNUYWciLCJzdGF0dXNUb29sdGlwIiwicXVlcnlTdGF0dXNUYWdMYWJlbCIsIl92JDMxIiwiX3YkMzIiLCJxdWVyeVN0YXR1c0NvdW50IiwicmVzdG9yaW5nTG9hZGluZyIsInNldFJlc3RvcmluZ0xvYWRpbmciLCJlcnJvclR5cGVzIiwiYWN0aXZlUXVlcnlGcmVzaCIsImFjdGl2ZVF1ZXJ5U3RhdGUiLCJhY3RpdmVRdWVyeVN0YXRlRGF0YSIsInN0YXR1c0xhYmVsIiwicXVlcnlTdGF0dXMiLCJoYW5kbGVSZWZldGNoIiwicHJvbWlzZSIsImZldGNoIiwiY2F0Y2giLCJ0cmlnZ2VyRXJyb3IiLCJlcnJvclR5cGUiLCJpbml0aWFsaXplciIsIl9fcHJldmlvdXNRdWVyeU9wdGlvbnMiLCJzZXRTdGF0ZSIsImZldGNoTWV0YSIsInJlc3RvcmVRdWVyeUFmdGVyTG9hZGluZ09yRXJyb3IiLCJjYW5jZWxSZWZldGNoIiwiZ2V0UXVlcnlTdGF0dXNDb2xvcnMiLCJkYXRhVXBkYXRlZEF0IiwidG9Mb2NhbGVUaW1lU3RyaW5nIiwiaW52YWxpZGF0ZVF1ZXJpZXMiLCJyZXNldFF1ZXJpZXMiLCJyZW1vdmVRdWVyaWVzIiwiYWN0aXZlUXVlcnlWYWwiLCJxdWVyeUZuIiwiUHJvbWlzZSIsImdjVGltZSIsIl92JDMzIiwiX3YkMzQiLCJfdiQzNSIsIl92JDM2IiwiYWN0aW9uc1NlbGVjdCIsIl92JDM3IiwiX3YkMzgiLCJfdiQzOSIsImRldGFpbHNDb250YWluZXIiLCJfdiQ0MCIsImRldGFpbHNIZWFkZXIiLCJfdiQ0MSIsImRldGFpbHNCb2R5IiwiX3YkNDIiLCJxdWVyeURldGFpbHNTdGF0dXMiLCJfdiQ0MyIsIl92JDQ0IiwiYWN0aW9uc0JvZHkiLCJfdiQ0NSIsIl92JDQ2IiwiX3YkNDciLCJfdiQ0OCIsIl92JDQ5IiwiX3YkNTAiLCJfdiQ1MSIsIl92JDUyIiwiX3YkNTMiLCJfdiQ1NCIsIl92JDU1IiwiX3YkNTYiLCJfdiQ1NyIsIl92JDU4IiwiX3YkNTkiLCJfdiQ2MCIsIl92JDYxIiwiX3YkNjIiLCJfdiQ2MyIsImFjdGl2ZU11dGF0aW9uIiwidmFyaWFibGVzIiwiX3YkNjQiLCJfdiQ2NSIsIl92JDY2IiwiX3YkNjciLCJfdiQ2OCIsIl92JDY5IiwiX3YkNzAiLCJfdiQ3MSIsIl92JDcyIiwiX3YkNzMiLCJfdiQ3NCIsIl92JDc1IiwicXVlcnlDYWNoZU1hcCIsInN1YnNjcmliZSIsInNob3VsZFVwZGF0ZSIsImVxdWFsaXR5Q2hlY2siLCJtdXRhdGlvbkNhY2hlTWFwIiwic3R5bGVzRmFjdG9yeTIiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-devtools/build/Devtools/A6DP7BKI.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-devtools/build/chunk/UF7WX6DB.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tanstack/query-devtools/build/chunk/UF7WX6DB.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $PROXY: () => (/* binding */ $PROXY),\n/* harmony export */   $TRACK: () => (/* binding */ $TRACK),\n/* harmony export */   DEV: () => (/* binding */ DEV),\n/* harmony export */   Dynamic: () => (/* binding */ Dynamic),\n/* harmony export */   For: () => (/* binding */ For),\n/* harmony export */   Index: () => (/* binding */ Index),\n/* harmony export */   Match: () => (/* binding */ Match),\n/* harmony export */   Portal: () => (/* binding */ Portal),\n/* harmony export */   Show: () => (/* binding */ Show),\n/* harmony export */   Switch: () => (/* binding */ Switch),\n/* harmony export */   addEventListener: () => (/* binding */ addEventListener),\n/* harmony export */   batch: () => (/* binding */ batch),\n/* harmony export */   children: () => (/* binding */ children),\n/* harmony export */   className: () => (/* binding */ className),\n/* harmony export */   convertRemToPixels: () => (/* binding */ convertRemToPixels),\n/* harmony export */   createComponent: () => (/* binding */ createComponent),\n/* harmony export */   createComputed: () => (/* binding */ createComputed),\n/* harmony export */   createContext: () => (/* binding */ createContext),\n/* harmony export */   createEffect: () => (/* binding */ createEffect),\n/* harmony export */   createMemo: () => (/* binding */ createMemo),\n/* harmony export */   createRenderEffect: () => (/* binding */ createRenderEffect),\n/* harmony export */   createRoot: () => (/* binding */ createRoot),\n/* harmony export */   createSignal: () => (/* binding */ createSignal),\n/* harmony export */   createUniqueId: () => (/* binding */ createUniqueId),\n/* harmony export */   delegateEvents: () => (/* binding */ delegateEvents),\n/* harmony export */   deleteNestedDataByPath: () => (/* binding */ deleteNestedDataByPath),\n/* harmony export */   displayValue: () => (/* binding */ displayValue),\n/* harmony export */   getListener: () => (/* binding */ getListener),\n/* harmony export */   getMutationStatusColor: () => (/* binding */ getMutationStatusColor),\n/* harmony export */   getOwner: () => (/* binding */ getOwner),\n/* harmony export */   getPreferredColorScheme: () => (/* binding */ getPreferredColorScheme),\n/* harmony export */   getQueryStatusColor: () => (/* binding */ getQueryStatusColor),\n/* harmony export */   getQueryStatusColorByLabel: () => (/* binding */ getQueryStatusColorByLabel),\n/* harmony export */   getQueryStatusLabel: () => (/* binding */ getQueryStatusLabel),\n/* harmony export */   getSidedProp: () => (/* binding */ getSidedProp),\n/* harmony export */   insert: () => (/* binding */ insert),\n/* harmony export */   isServer: () => (/* binding */ isServer),\n/* harmony export */   lazy: () => (/* binding */ lazy),\n/* harmony export */   mergeProps: () => (/* binding */ mergeProps),\n/* harmony export */   mutationSortFns: () => (/* binding */ mutationSortFns),\n/* harmony export */   on: () => (/* binding */ on),\n/* harmony export */   onCleanup: () => (/* binding */ onCleanup),\n/* harmony export */   onMount: () => (/* binding */ onMount),\n/* harmony export */   render: () => (/* binding */ render),\n/* harmony export */   setAttribute: () => (/* binding */ setAttribute),\n/* harmony export */   setupStyleSheet: () => (/* binding */ setupStyleSheet),\n/* harmony export */   sortFns: () => (/* binding */ sortFns),\n/* harmony export */   splitProps: () => (/* binding */ splitProps),\n/* harmony export */   spread: () => (/* binding */ spread),\n/* harmony export */   stringify: () => (/* binding */ stringify),\n/* harmony export */   template: () => (/* binding */ template),\n/* harmony export */   untrack: () => (/* binding */ untrack),\n/* harmony export */   updateNestedDataByPath: () => (/* binding */ updateNestedDataByPath),\n/* harmony export */   use: () => (/* binding */ use),\n/* harmony export */   useContext: () => (/* binding */ useContext),\n/* harmony export */   useTransition: () => (/* binding */ useTransition)\n/* harmony export */ });\n// ../../node_modules/.pnpm/solid-js@1.8.7/node_modules/solid-js/dist/solid.js\nvar sharedConfig = {\n    context: void 0,\n    registry: void 0\n};\nfunction setHydrateContext(context) {\n    sharedConfig.context = context;\n}\nfunction nextHydrateContext() {\n    return {\n        ...sharedConfig.context,\n        id: `${sharedConfig.context.id}${sharedConfig.context.count++}-`,\n        count: 0\n    };\n}\nvar equalFn = (a, b)=>a === b;\nvar $PROXY = Symbol(\"solid-proxy\");\nvar $TRACK = Symbol(\"solid-track\");\nvar signalOptions = {\n    equals: equalFn\n};\nvar ERROR = null;\nvar runEffects = runQueue;\nvar STALE = 1;\nvar PENDING = 2;\nvar UNOWNED = {\n    owned: null,\n    cleanups: null,\n    context: null,\n    owner: null\n};\nvar NO_INIT = {};\nvar Owner = null;\nvar Transition = null;\nvar Scheduler = null;\nvar ExternalSourceFactory = null;\nvar Listener = null;\nvar Updates = null;\nvar Effects = null;\nvar ExecCount = 0;\nfunction createRoot(fn, detachedOwner) {\n    const listener = Listener, owner = Owner, unowned = fn.length === 0, current = detachedOwner === void 0 ? owner : detachedOwner, root = unowned ? UNOWNED : {\n        owned: null,\n        cleanups: null,\n        context: current ? current.context : null,\n        owner: current\n    }, updateFn = unowned ? fn : ()=>fn(()=>untrack(()=>cleanNode(root)));\n    Owner = root;\n    Listener = null;\n    try {\n        return runUpdates(updateFn, true);\n    } finally{\n        Listener = listener;\n        Owner = owner;\n    }\n}\nfunction createSignal(value, options) {\n    options = options ? Object.assign({}, signalOptions, options) : signalOptions;\n    const s = {\n        value,\n        observers: null,\n        observerSlots: null,\n        comparator: options.equals || void 0\n    };\n    const setter = (value2)=>{\n        if (typeof value2 === \"function\") {\n            if (Transition && Transition.running && Transition.sources.has(s)) value2 = value2(s.tValue);\n            else value2 = value2(s.value);\n        }\n        return writeSignal(s, value2);\n    };\n    return [\n        readSignal.bind(s),\n        setter\n    ];\n}\nfunction createComputed(fn, value, options) {\n    const c = createComputation(fn, value, true, STALE);\n    if (Scheduler && Transition && Transition.running) Updates.push(c);\n    else updateComputation(c);\n}\nfunction createRenderEffect(fn, value, options) {\n    const c = createComputation(fn, value, false, STALE);\n    if (Scheduler && Transition && Transition.running) Updates.push(c);\n    else updateComputation(c);\n}\nfunction createEffect(fn, value, options) {\n    runEffects = runUserEffects;\n    const c = createComputation(fn, value, false, STALE), s = SuspenseContext && useContext(SuspenseContext);\n    if (s) c.suspense = s;\n    if (!options || !options.render) c.user = true;\n    Effects ? Effects.push(c) : updateComputation(c);\n}\nfunction createMemo(fn, value, options) {\n    options = options ? Object.assign({}, signalOptions, options) : signalOptions;\n    const c = createComputation(fn, value, true, 0);\n    c.observers = null;\n    c.observerSlots = null;\n    c.comparator = options.equals || void 0;\n    if (Scheduler && Transition && Transition.running) {\n        c.tState = STALE;\n        Updates.push(c);\n    } else updateComputation(c);\n    return readSignal.bind(c);\n}\nfunction isPromise(v) {\n    return v && typeof v === \"object\" && \"then\" in v;\n}\nfunction createResource(pSource, pFetcher, pOptions) {\n    let source;\n    let fetcher;\n    let options;\n    if (arguments.length === 2 && typeof pFetcher === \"object\" || arguments.length === 1) {\n        source = true;\n        fetcher = pSource;\n        options = pFetcher || {};\n    } else {\n        source = pSource;\n        fetcher = pFetcher;\n        options = pOptions || {};\n    }\n    let pr = null, initP = NO_INIT, id = null, loadedUnderTransition = false, scheduled = false, resolved = \"initialValue\" in options, dynamic = typeof source === \"function\" && createMemo(source);\n    const contexts = /* @__PURE__ */ new Set(), [value, setValue] = (options.storage || createSignal)(options.initialValue), [error, setError] = createSignal(void 0), [track, trigger] = createSignal(void 0, {\n        equals: false\n    }), [state, setState] = createSignal(resolved ? \"ready\" : \"unresolved\");\n    if (sharedConfig.context) {\n        id = `${sharedConfig.context.id}${sharedConfig.context.count++}`;\n        let v;\n        if (options.ssrLoadFrom === \"initial\") initP = options.initialValue;\n        else if (sharedConfig.load && (v = sharedConfig.load(id))) initP = v;\n    }\n    function loadEnd(p, v, error2, key) {\n        if (pr === p) {\n            pr = null;\n            key !== void 0 && (resolved = true);\n            if ((p === initP || v === initP) && options.onHydrated) queueMicrotask(()=>options.onHydrated(key, {\n                    value: v\n                }));\n            initP = NO_INIT;\n            if (Transition && p && loadedUnderTransition) {\n                Transition.promises.delete(p);\n                loadedUnderTransition = false;\n                runUpdates(()=>{\n                    Transition.running = true;\n                    completeLoad(v, error2);\n                }, false);\n            } else completeLoad(v, error2);\n        }\n        return v;\n    }\n    function completeLoad(v, err) {\n        runUpdates(()=>{\n            if (err === void 0) setValue(()=>v);\n            setState(err !== void 0 ? \"errored\" : resolved ? \"ready\" : \"unresolved\");\n            setError(err);\n            for (const c of contexts.keys())c.decrement();\n            contexts.clear();\n        }, false);\n    }\n    function read() {\n        const c = SuspenseContext && useContext(SuspenseContext), v = value(), err = error();\n        if (err !== void 0 && !pr) throw err;\n        if (Listener && !Listener.user && c) {\n            createComputed(()=>{\n                track();\n                if (pr) {\n                    if (c.resolved && Transition && loadedUnderTransition) Transition.promises.add(pr);\n                    else if (!contexts.has(c)) {\n                        c.increment();\n                        contexts.add(c);\n                    }\n                }\n            });\n        }\n        return v;\n    }\n    function load(refetching = true) {\n        if (refetching !== false && scheduled) return;\n        scheduled = false;\n        const lookup = dynamic ? dynamic() : source;\n        loadedUnderTransition = Transition && Transition.running;\n        if (lookup == null || lookup === false) {\n            loadEnd(pr, untrack(value));\n            return;\n        }\n        if (Transition && pr) Transition.promises.delete(pr);\n        const p = initP !== NO_INIT ? initP : untrack(()=>fetcher(lookup, {\n                value: value(),\n                refetching\n            }));\n        if (!isPromise(p)) {\n            loadEnd(pr, p, void 0, lookup);\n            return p;\n        }\n        pr = p;\n        if (\"value\" in p) {\n            if (p.status === \"success\") loadEnd(pr, p.value, void 0, lookup);\n            else loadEnd(pr, void 0, void 0, lookup);\n            return p;\n        }\n        scheduled = true;\n        queueMicrotask(()=>scheduled = false);\n        runUpdates(()=>{\n            setState(resolved ? \"refreshing\" : \"pending\");\n            trigger();\n        }, false);\n        return p.then((v)=>loadEnd(p, v, void 0, lookup), (e)=>loadEnd(p, void 0, castError(e), lookup));\n    }\n    Object.defineProperties(read, {\n        state: {\n            get: ()=>state()\n        },\n        error: {\n            get: ()=>error()\n        },\n        loading: {\n            get () {\n                const s = state();\n                return s === \"pending\" || s === \"refreshing\";\n            }\n        },\n        latest: {\n            get () {\n                if (!resolved) return read();\n                const err = error();\n                if (err && !pr) throw err;\n                return value();\n            }\n        }\n    });\n    if (dynamic) createComputed(()=>load(false));\n    else load(false);\n    return [\n        read,\n        {\n            refetch: load,\n            mutate: setValue\n        }\n    ];\n}\nfunction batch(fn) {\n    return runUpdates(fn, false);\n}\nfunction untrack(fn) {\n    if (Listener === null) return fn();\n    const listener = Listener;\n    Listener = null;\n    try {\n        return fn();\n    } finally{\n        Listener = listener;\n    }\n}\nfunction on(deps, fn, options) {\n    const isArray3 = Array.isArray(deps);\n    let prevInput;\n    let defer = options && options.defer;\n    return (prevValue)=>{\n        let input;\n        if (isArray3) {\n            input = Array(deps.length);\n            for(let i = 0; i < deps.length; i++)input[i] = deps[i]();\n        } else input = deps();\n        if (defer) {\n            defer = false;\n            return void 0;\n        }\n        const result = untrack(()=>fn(input, prevInput, prevValue));\n        prevInput = input;\n        return result;\n    };\n}\nfunction onMount(fn) {\n    createEffect(()=>untrack(fn));\n}\nfunction onCleanup(fn) {\n    if (Owner === null) ;\n    else if (Owner.cleanups === null) Owner.cleanups = [\n        fn\n    ];\n    else Owner.cleanups.push(fn);\n    return fn;\n}\nfunction getListener() {\n    return Listener;\n}\nfunction getOwner() {\n    return Owner;\n}\nfunction runWithOwner(o, fn) {\n    const prev = Owner;\n    const prevListener = Listener;\n    Owner = o;\n    Listener = null;\n    try {\n        return runUpdates(fn, true);\n    } catch (err) {\n        handleError(err);\n    } finally{\n        Owner = prev;\n        Listener = prevListener;\n    }\n}\nfunction startTransition(fn) {\n    if (Transition && Transition.running) {\n        fn();\n        return Transition.done;\n    }\n    const l = Listener;\n    const o = Owner;\n    return Promise.resolve().then(()=>{\n        Listener = l;\n        Owner = o;\n        let t;\n        if (Scheduler || SuspenseContext) {\n            t = Transition || (Transition = {\n                sources: /* @__PURE__ */ new Set(),\n                effects: [],\n                promises: /* @__PURE__ */ new Set(),\n                disposed: /* @__PURE__ */ new Set(),\n                queue: /* @__PURE__ */ new Set(),\n                running: true\n            });\n            t.done || (t.done = new Promise((res)=>t.resolve = res));\n            t.running = true;\n        }\n        runUpdates(fn, false);\n        Listener = Owner = null;\n        return t ? t.done : void 0;\n    });\n}\nvar [transPending, setTransPending] = /* @__PURE__ */ createSignal(false);\nfunction useTransition() {\n    return [\n        transPending,\n        startTransition\n    ];\n}\nfunction createContext(defaultValue, options) {\n    const id = Symbol(\"context\");\n    return {\n        id,\n        Provider: createProvider(id),\n        defaultValue\n    };\n}\nfunction useContext(context) {\n    return Owner && Owner.context && Owner.context[context.id] !== void 0 ? Owner.context[context.id] : context.defaultValue;\n}\nfunction children(fn) {\n    const children2 = createMemo(fn);\n    const memo = createMemo(()=>resolveChildren(children2()));\n    memo.toArray = ()=>{\n        const c = memo();\n        return Array.isArray(c) ? c : c != null ? [\n            c\n        ] : [];\n    };\n    return memo;\n}\nvar SuspenseContext;\nfunction readSignal() {\n    const runningTransition = Transition && Transition.running;\n    if (this.sources && (runningTransition ? this.tState : this.state)) {\n        if ((runningTransition ? this.tState : this.state) === STALE) updateComputation(this);\n        else {\n            const updates = Updates;\n            Updates = null;\n            runUpdates(()=>lookUpstream(this), false);\n            Updates = updates;\n        }\n    }\n    if (Listener) {\n        const sSlot = this.observers ? this.observers.length : 0;\n        if (!Listener.sources) {\n            Listener.sources = [\n                this\n            ];\n            Listener.sourceSlots = [\n                sSlot\n            ];\n        } else {\n            Listener.sources.push(this);\n            Listener.sourceSlots.push(sSlot);\n        }\n        if (!this.observers) {\n            this.observers = [\n                Listener\n            ];\n            this.observerSlots = [\n                Listener.sources.length - 1\n            ];\n        } else {\n            this.observers.push(Listener);\n            this.observerSlots.push(Listener.sources.length - 1);\n        }\n    }\n    if (runningTransition && Transition.sources.has(this)) return this.tValue;\n    return this.value;\n}\nfunction writeSignal(node, value, isComp) {\n    let current = Transition && Transition.running && Transition.sources.has(node) ? node.tValue : node.value;\n    if (!node.comparator || !node.comparator(current, value)) {\n        if (Transition) {\n            const TransitionRunning = Transition.running;\n            if (TransitionRunning || !isComp && Transition.sources.has(node)) {\n                Transition.sources.add(node);\n                node.tValue = value;\n            }\n            if (!TransitionRunning) node.value = value;\n        } else node.value = value;\n        if (node.observers && node.observers.length) {\n            runUpdates(()=>{\n                for(let i = 0; i < node.observers.length; i += 1){\n                    const o = node.observers[i];\n                    const TransitionRunning = Transition && Transition.running;\n                    if (TransitionRunning && Transition.disposed.has(o)) continue;\n                    if (TransitionRunning ? !o.tState : !o.state) {\n                        if (o.pure) Updates.push(o);\n                        else Effects.push(o);\n                        if (o.observers) markDownstream(o);\n                    }\n                    if (!TransitionRunning) o.state = STALE;\n                    else o.tState = STALE;\n                }\n                if (Updates.length > 1e6) {\n                    Updates = [];\n                    if (false) {}\n                    throw new Error();\n                }\n            }, false);\n        }\n    }\n    return value;\n}\nfunction updateComputation(node) {\n    if (!node.fn) return;\n    cleanNode(node);\n    const time = ExecCount;\n    runComputation(node, Transition && Transition.running && Transition.sources.has(node) ? node.tValue : node.value, time);\n    if (Transition && !Transition.running && Transition.sources.has(node)) {\n        queueMicrotask(()=>{\n            runUpdates(()=>{\n                Transition && (Transition.running = true);\n                Listener = Owner = node;\n                runComputation(node, node.tValue, time);\n                Listener = Owner = null;\n            }, false);\n        });\n    }\n}\nfunction runComputation(node, value, time) {\n    let nextValue;\n    const owner = Owner, listener = Listener;\n    Listener = Owner = node;\n    try {\n        nextValue = node.fn(value);\n    } catch (err) {\n        if (node.pure) {\n            if (Transition && Transition.running) {\n                node.tState = STALE;\n                node.tOwned && node.tOwned.forEach(cleanNode);\n                node.tOwned = void 0;\n            } else {\n                node.state = STALE;\n                node.owned && node.owned.forEach(cleanNode);\n                node.owned = null;\n            }\n        }\n        node.updatedAt = time + 1;\n        return handleError(err);\n    } finally{\n        Listener = listener;\n        Owner = owner;\n    }\n    if (!node.updatedAt || node.updatedAt <= time) {\n        if (node.updatedAt != null && \"observers\" in node) {\n            writeSignal(node, nextValue, true);\n        } else if (Transition && Transition.running && node.pure) {\n            Transition.sources.add(node);\n            node.tValue = nextValue;\n        } else node.value = nextValue;\n        node.updatedAt = time;\n    }\n}\nfunction createComputation(fn, init, pure, state = STALE, options) {\n    const c = {\n        fn,\n        state,\n        updatedAt: null,\n        owned: null,\n        sources: null,\n        sourceSlots: null,\n        cleanups: null,\n        value: init,\n        owner: Owner,\n        context: Owner ? Owner.context : null,\n        pure\n    };\n    if (Transition && Transition.running) {\n        c.state = 0;\n        c.tState = state;\n    }\n    if (Owner === null) ;\n    else if (Owner !== UNOWNED) {\n        if (Transition && Transition.running && Owner.pure) {\n            if (!Owner.tOwned) Owner.tOwned = [\n                c\n            ];\n            else Owner.tOwned.push(c);\n        } else {\n            if (!Owner.owned) Owner.owned = [\n                c\n            ];\n            else Owner.owned.push(c);\n        }\n    }\n    if (ExternalSourceFactory) {\n        const [track, trigger] = createSignal(void 0, {\n            equals: false\n        });\n        const ordinary = ExternalSourceFactory(c.fn, trigger);\n        onCleanup(()=>ordinary.dispose());\n        const triggerInTransition = ()=>startTransition(trigger).then(()=>inTransition.dispose());\n        const inTransition = ExternalSourceFactory(c.fn, triggerInTransition);\n        c.fn = (x)=>{\n            track();\n            return Transition && Transition.running ? inTransition.track(x) : ordinary.track(x);\n        };\n    }\n    return c;\n}\nfunction runTop(node) {\n    const runningTransition = Transition && Transition.running;\n    if ((runningTransition ? node.tState : node.state) === 0) return;\n    if ((runningTransition ? node.tState : node.state) === PENDING) return lookUpstream(node);\n    if (node.suspense && untrack(node.suspense.inFallback)) return node.suspense.effects.push(node);\n    const ancestors = [\n        node\n    ];\n    while((node = node.owner) && (!node.updatedAt || node.updatedAt < ExecCount)){\n        if (runningTransition && Transition.disposed.has(node)) return;\n        if (runningTransition ? node.tState : node.state) ancestors.push(node);\n    }\n    for(let i = ancestors.length - 1; i >= 0; i--){\n        node = ancestors[i];\n        if (runningTransition) {\n            let top = node, prev = ancestors[i + 1];\n            while((top = top.owner) && top !== prev){\n                if (Transition.disposed.has(top)) return;\n            }\n        }\n        if ((runningTransition ? node.tState : node.state) === STALE) {\n            updateComputation(node);\n        } else if ((runningTransition ? node.tState : node.state) === PENDING) {\n            const updates = Updates;\n            Updates = null;\n            runUpdates(()=>lookUpstream(node, ancestors[0]), false);\n            Updates = updates;\n        }\n    }\n}\nfunction runUpdates(fn, init) {\n    if (Updates) return fn();\n    let wait = false;\n    if (!init) Updates = [];\n    if (Effects) wait = true;\n    else Effects = [];\n    ExecCount++;\n    try {\n        const res = fn();\n        completeUpdates(wait);\n        return res;\n    } catch (err) {\n        if (!wait) Effects = null;\n        Updates = null;\n        handleError(err);\n    }\n}\nfunction completeUpdates(wait) {\n    if (Updates) {\n        if (Scheduler && Transition && Transition.running) scheduleQueue(Updates);\n        else runQueue(Updates);\n        Updates = null;\n    }\n    if (wait) return;\n    let res;\n    if (Transition) {\n        if (!Transition.promises.size && !Transition.queue.size) {\n            const sources = Transition.sources;\n            const disposed = Transition.disposed;\n            Effects.push.apply(Effects, Transition.effects);\n            res = Transition.resolve;\n            for (const e2 of Effects){\n                \"tState\" in e2 && (e2.state = e2.tState);\n                delete e2.tState;\n            }\n            Transition = null;\n            runUpdates(()=>{\n                for (const d of disposed)cleanNode(d);\n                for (const v of sources){\n                    v.value = v.tValue;\n                    if (v.owned) {\n                        for(let i = 0, len = v.owned.length; i < len; i++)cleanNode(v.owned[i]);\n                    }\n                    if (v.tOwned) v.owned = v.tOwned;\n                    delete v.tValue;\n                    delete v.tOwned;\n                    v.tState = 0;\n                }\n                setTransPending(false);\n            }, false);\n        } else if (Transition.running) {\n            Transition.running = false;\n            Transition.effects.push.apply(Transition.effects, Effects);\n            Effects = null;\n            setTransPending(true);\n            return;\n        }\n    }\n    const e = Effects;\n    Effects = null;\n    if (e.length) runUpdates(()=>runEffects(e), false);\n    if (res) res();\n}\nfunction runQueue(queue) {\n    for(let i = 0; i < queue.length; i++)runTop(queue[i]);\n}\nfunction scheduleQueue(queue) {\n    for(let i = 0; i < queue.length; i++){\n        const item = queue[i];\n        const tasks = Transition.queue;\n        if (!tasks.has(item)) {\n            tasks.add(item);\n            Scheduler(()=>{\n                tasks.delete(item);\n                runUpdates(()=>{\n                    Transition.running = true;\n                    runTop(item);\n                }, false);\n                Transition && (Transition.running = false);\n            });\n        }\n    }\n}\nfunction runUserEffects(queue) {\n    let i, userLength = 0;\n    for(i = 0; i < queue.length; i++){\n        const e = queue[i];\n        if (!e.user) runTop(e);\n        else queue[userLength++] = e;\n    }\n    if (sharedConfig.context) {\n        if (sharedConfig.count) {\n            sharedConfig.effects || (sharedConfig.effects = []);\n            sharedConfig.effects.push(...queue.slice(0, userLength));\n            return;\n        } else if (sharedConfig.effects) {\n            queue = [\n                ...sharedConfig.effects,\n                ...queue\n            ];\n            userLength += sharedConfig.effects.length;\n            delete sharedConfig.effects;\n        }\n        setHydrateContext();\n    }\n    for(i = 0; i < userLength; i++)runTop(queue[i]);\n}\nfunction lookUpstream(node, ignore) {\n    const runningTransition = Transition && Transition.running;\n    if (runningTransition) node.tState = 0;\n    else node.state = 0;\n    for(let i = 0; i < node.sources.length; i += 1){\n        const source = node.sources[i];\n        if (source.sources) {\n            const state = runningTransition ? source.tState : source.state;\n            if (state === STALE) {\n                if (source !== ignore && (!source.updatedAt || source.updatedAt < ExecCount)) runTop(source);\n            } else if (state === PENDING) lookUpstream(source, ignore);\n        }\n    }\n}\nfunction markDownstream(node) {\n    const runningTransition = Transition && Transition.running;\n    for(let i = 0; i < node.observers.length; i += 1){\n        const o = node.observers[i];\n        if (runningTransition ? !o.tState : !o.state) {\n            if (runningTransition) o.tState = PENDING;\n            else o.state = PENDING;\n            if (o.pure) Updates.push(o);\n            else Effects.push(o);\n            o.observers && markDownstream(o);\n        }\n    }\n}\nfunction cleanNode(node) {\n    let i;\n    if (node.sources) {\n        while(node.sources.length){\n            const source = node.sources.pop(), index = node.sourceSlots.pop(), obs = source.observers;\n            if (obs && obs.length) {\n                const n = obs.pop(), s = source.observerSlots.pop();\n                if (index < obs.length) {\n                    n.sourceSlots[s] = index;\n                    obs[index] = n;\n                    source.observerSlots[index] = s;\n                }\n            }\n        }\n    }\n    if (Transition && Transition.running && node.pure) {\n        if (node.tOwned) {\n            for(i = node.tOwned.length - 1; i >= 0; i--)cleanNode(node.tOwned[i]);\n            delete node.tOwned;\n        }\n        reset(node, true);\n    } else if (node.owned) {\n        for(i = node.owned.length - 1; i >= 0; i--)cleanNode(node.owned[i]);\n        node.owned = null;\n    }\n    if (node.cleanups) {\n        for(i = node.cleanups.length - 1; i >= 0; i--)node.cleanups[i]();\n        node.cleanups = null;\n    }\n    if (Transition && Transition.running) node.tState = 0;\n    else node.state = 0;\n}\nfunction reset(node, top) {\n    if (!top) {\n        node.tState = 0;\n        Transition.disposed.add(node);\n    }\n    if (node.owned) {\n        for(let i = 0; i < node.owned.length; i++)reset(node.owned[i]);\n    }\n}\nfunction castError(err) {\n    if (err instanceof Error) return err;\n    return new Error(typeof err === \"string\" ? err : \"Unknown error\", {\n        cause: err\n    });\n}\nfunction runErrors(err, fns, owner) {\n    try {\n        for (const f of fns)f(err);\n    } catch (e) {\n        handleError(e, owner && owner.owner || null);\n    }\n}\nfunction handleError(err, owner = Owner) {\n    const fns = ERROR && owner && owner.context && owner.context[ERROR];\n    const error = castError(err);\n    if (!fns) throw error;\n    if (Effects) Effects.push({\n        fn () {\n            runErrors(error, fns, owner);\n        },\n        state: STALE\n    });\n    else runErrors(error, fns, owner);\n}\nfunction resolveChildren(children2) {\n    if (typeof children2 === \"function\" && !children2.length) return resolveChildren(children2());\n    if (Array.isArray(children2)) {\n        const results = [];\n        for(let i = 0; i < children2.length; i++){\n            const result = resolveChildren(children2[i]);\n            Array.isArray(result) ? results.push.apply(results, result) : results.push(result);\n        }\n        return results;\n    }\n    return children2;\n}\nfunction createProvider(id, options) {\n    return function provider(props) {\n        let res;\n        createRenderEffect(()=>res = untrack(()=>{\n                Owner.context = {\n                    ...Owner.context,\n                    [id]: props.value\n                };\n                return children(()=>props.children);\n            }), void 0);\n        return res;\n    };\n}\nvar FALLBACK = Symbol(\"fallback\");\nfunction dispose(d) {\n    for(let i = 0; i < d.length; i++)d[i]();\n}\nfunction mapArray(list, mapFn, options = {}) {\n    let items = [], mapped = [], disposers = [], len = 0, indexes = mapFn.length > 1 ? [] : null;\n    onCleanup(()=>dispose(disposers));\n    return ()=>{\n        let newItems = list() || [], i, j;\n        newItems[$TRACK];\n        return untrack(()=>{\n            let newLen = newItems.length, newIndices, newIndicesNext, temp, tempdisposers, tempIndexes, start, end, newEnd, item;\n            if (newLen === 0) {\n                if (len !== 0) {\n                    dispose(disposers);\n                    disposers = [];\n                    items = [];\n                    mapped = [];\n                    len = 0;\n                    indexes && (indexes = []);\n                }\n                if (options.fallback) {\n                    items = [\n                        FALLBACK\n                    ];\n                    mapped[0] = createRoot((disposer)=>{\n                        disposers[0] = disposer;\n                        return options.fallback();\n                    });\n                    len = 1;\n                }\n            } else if (len === 0) {\n                mapped = new Array(newLen);\n                for(j = 0; j < newLen; j++){\n                    items[j] = newItems[j];\n                    mapped[j] = createRoot(mapper);\n                }\n                len = newLen;\n            } else {\n                temp = new Array(newLen);\n                tempdisposers = new Array(newLen);\n                indexes && (tempIndexes = new Array(newLen));\n                for(start = 0, end = Math.min(len, newLen); start < end && items[start] === newItems[start]; start++);\n                for(end = len - 1, newEnd = newLen - 1; end >= start && newEnd >= start && items[end] === newItems[newEnd]; end--, newEnd--){\n                    temp[newEnd] = mapped[end];\n                    tempdisposers[newEnd] = disposers[end];\n                    indexes && (tempIndexes[newEnd] = indexes[end]);\n                }\n                newIndices = /* @__PURE__ */ new Map();\n                newIndicesNext = new Array(newEnd + 1);\n                for(j = newEnd; j >= start; j--){\n                    item = newItems[j];\n                    i = newIndices.get(item);\n                    newIndicesNext[j] = i === void 0 ? -1 : i;\n                    newIndices.set(item, j);\n                }\n                for(i = start; i <= end; i++){\n                    item = items[i];\n                    j = newIndices.get(item);\n                    if (j !== void 0 && j !== -1) {\n                        temp[j] = mapped[i];\n                        tempdisposers[j] = disposers[i];\n                        indexes && (tempIndexes[j] = indexes[i]);\n                        j = newIndicesNext[j];\n                        newIndices.set(item, j);\n                    } else disposers[i]();\n                }\n                for(j = start; j < newLen; j++){\n                    if (j in temp) {\n                        mapped[j] = temp[j];\n                        disposers[j] = tempdisposers[j];\n                        if (indexes) {\n                            indexes[j] = tempIndexes[j];\n                            indexes[j](j);\n                        }\n                    } else mapped[j] = createRoot(mapper);\n                }\n                mapped = mapped.slice(0, len = newLen);\n                items = newItems.slice(0);\n            }\n            return mapped;\n        });\n        function mapper(disposer) {\n            disposers[j] = disposer;\n            if (indexes) {\n                const [s, set] = createSignal(j);\n                indexes[j] = set;\n                return mapFn(newItems[j], s);\n            }\n            return mapFn(newItems[j]);\n        }\n    };\n}\nfunction indexArray(list, mapFn, options = {}) {\n    let items = [], mapped = [], disposers = [], signals = [], len = 0, i;\n    onCleanup(()=>dispose(disposers));\n    return ()=>{\n        const newItems = list() || [];\n        newItems[$TRACK];\n        return untrack(()=>{\n            if (newItems.length === 0) {\n                if (len !== 0) {\n                    dispose(disposers);\n                    disposers = [];\n                    items = [];\n                    mapped = [];\n                    len = 0;\n                    signals = [];\n                }\n                if (options.fallback) {\n                    items = [\n                        FALLBACK\n                    ];\n                    mapped[0] = createRoot((disposer)=>{\n                        disposers[0] = disposer;\n                        return options.fallback();\n                    });\n                    len = 1;\n                }\n                return mapped;\n            }\n            if (items[0] === FALLBACK) {\n                disposers[0]();\n                disposers = [];\n                items = [];\n                mapped = [];\n                len = 0;\n            }\n            for(i = 0; i < newItems.length; i++){\n                if (i < items.length && items[i] !== newItems[i]) {\n                    signals[i](()=>newItems[i]);\n                } else if (i >= items.length) {\n                    mapped[i] = createRoot(mapper);\n                }\n            }\n            for(; i < items.length; i++){\n                disposers[i]();\n            }\n            len = signals.length = disposers.length = newItems.length;\n            items = newItems.slice(0);\n            return mapped = mapped.slice(0, len);\n        });\n        function mapper(disposer) {\n            disposers[i] = disposer;\n            const [s, set] = createSignal(newItems[i]);\n            signals[i] = set;\n            return mapFn(s, i);\n        }\n    };\n}\nvar hydrationEnabled = false;\nfunction createComponent(Comp, props) {\n    if (hydrationEnabled) {\n        if (sharedConfig.context) {\n            const c = sharedConfig.context;\n            setHydrateContext(nextHydrateContext());\n            const r = untrack(()=>Comp(props || {}));\n            setHydrateContext(c);\n            return r;\n        }\n    }\n    return untrack(()=>Comp(props || {}));\n}\nfunction trueFn() {\n    return true;\n}\nvar propTraps = {\n    get (_, property, receiver) {\n        if (property === $PROXY) return receiver;\n        return _.get(property);\n    },\n    has (_, property) {\n        if (property === $PROXY) return true;\n        return _.has(property);\n    },\n    set: trueFn,\n    deleteProperty: trueFn,\n    getOwnPropertyDescriptor (_, property) {\n        return {\n            configurable: true,\n            enumerable: true,\n            get () {\n                return _.get(property);\n            },\n            set: trueFn,\n            deleteProperty: trueFn\n        };\n    },\n    ownKeys (_) {\n        return _.keys();\n    }\n};\nfunction resolveSource(s) {\n    return !(s = typeof s === \"function\" ? s() : s) ? {} : s;\n}\nfunction resolveSources() {\n    for(let i = 0, length = this.length; i < length; ++i){\n        const v = this[i]();\n        if (v !== void 0) return v;\n    }\n}\nfunction mergeProps(...sources) {\n    let proxy = false;\n    for(let i = 0; i < sources.length; i++){\n        const s = sources[i];\n        proxy = proxy || !!s && $PROXY in s;\n        sources[i] = typeof s === \"function\" ? (proxy = true, createMemo(s)) : s;\n    }\n    if (proxy) {\n        return new Proxy({\n            get (property) {\n                for(let i = sources.length - 1; i >= 0; i--){\n                    const v = resolveSource(sources[i])[property];\n                    if (v !== void 0) return v;\n                }\n            },\n            has (property) {\n                for(let i = sources.length - 1; i >= 0; i--){\n                    if (property in resolveSource(sources[i])) return true;\n                }\n                return false;\n            },\n            keys () {\n                const keys = [];\n                for(let i = 0; i < sources.length; i++)keys.push(...Object.keys(resolveSource(sources[i])));\n                return [\n                    ...new Set(keys)\n                ];\n            }\n        }, propTraps);\n    }\n    const target = {};\n    const sourcesMap = {};\n    const defined = /* @__PURE__ */ new Set();\n    for(let i = sources.length - 1; i >= 0; i--){\n        const source = sources[i];\n        if (!source) continue;\n        const sourceKeys = Object.getOwnPropertyNames(source);\n        for(let i2 = 0, length = sourceKeys.length; i2 < length; i2++){\n            const key = sourceKeys[i2];\n            if (key === \"__proto__\" || key === \"constructor\") continue;\n            const desc = Object.getOwnPropertyDescriptor(source, key);\n            if (!defined.has(key)) {\n                if (desc.get) {\n                    defined.add(key);\n                    Object.defineProperty(target, key, {\n                        enumerable: true,\n                        configurable: true,\n                        get: resolveSources.bind(sourcesMap[key] = [\n                            desc.get.bind(source)\n                        ])\n                    });\n                } else {\n                    if (desc.value !== void 0) defined.add(key);\n                    target[key] = desc.value;\n                }\n            } else {\n                const sources2 = sourcesMap[key];\n                if (sources2) {\n                    if (desc.get) {\n                        sources2.push(desc.get.bind(source));\n                    } else if (desc.value !== void 0) {\n                        sources2.push(()=>desc.value);\n                    }\n                } else if (target[key] === void 0) target[key] = desc.value;\n            }\n        }\n    }\n    return target;\n}\nfunction splitProps(props, ...keys) {\n    if ($PROXY in props) {\n        const blocked = new Set(keys.length > 1 ? keys.flat() : keys[0]);\n        const res = keys.map((k)=>{\n            return new Proxy({\n                get (property) {\n                    return k.includes(property) ? props[property] : void 0;\n                },\n                has (property) {\n                    return k.includes(property) && property in props;\n                },\n                keys () {\n                    return k.filter((property)=>property in props);\n                }\n            }, propTraps);\n        });\n        res.push(new Proxy({\n            get (property) {\n                return blocked.has(property) ? void 0 : props[property];\n            },\n            has (property) {\n                return blocked.has(property) ? false : property in props;\n            },\n            keys () {\n                return Object.keys(props).filter((k)=>!blocked.has(k));\n            }\n        }, propTraps));\n        return res;\n    }\n    const otherObject = {};\n    const objects = keys.map(()=>({}));\n    for (const propName of Object.getOwnPropertyNames(props)){\n        const desc = Object.getOwnPropertyDescriptor(props, propName);\n        const isDefaultDesc = !desc.get && !desc.set && desc.enumerable && desc.writable && desc.configurable;\n        let blocked = false;\n        let objectIndex = 0;\n        for (const k of keys){\n            if (k.includes(propName)) {\n                blocked = true;\n                isDefaultDesc ? objects[objectIndex][propName] = desc.value : Object.defineProperty(objects[objectIndex], propName, desc);\n            }\n            ++objectIndex;\n        }\n        if (!blocked) {\n            isDefaultDesc ? otherObject[propName] = desc.value : Object.defineProperty(otherObject, propName, desc);\n        }\n    }\n    return [\n        ...objects,\n        otherObject\n    ];\n}\nfunction lazy(fn) {\n    let comp;\n    let p;\n    const wrap = (props)=>{\n        const ctx = sharedConfig.context;\n        if (ctx) {\n            const [s, set] = createSignal();\n            sharedConfig.count || (sharedConfig.count = 0);\n            sharedConfig.count++;\n            (p || (p = fn())).then((mod)=>{\n                setHydrateContext(ctx);\n                sharedConfig.count--;\n                set(()=>mod.default);\n                setHydrateContext();\n            });\n            comp = s;\n        } else if (!comp) {\n            const [s] = createResource(()=>(p || (p = fn())).then((mod)=>mod.default));\n            comp = s;\n        }\n        let Comp;\n        return createMemo(()=>(Comp = comp()) && untrack(()=>{\n                if (false) {}\n                if (!ctx) return Comp(props);\n                const c = sharedConfig.context;\n                setHydrateContext(ctx);\n                const r = Comp(props);\n                setHydrateContext(c);\n                return r;\n            }));\n    };\n    wrap.preload = ()=>p || ((p = fn()).then((mod)=>comp = ()=>mod.default), p);\n    return wrap;\n}\nvar counter = 0;\nfunction createUniqueId() {\n    const ctx = sharedConfig.context;\n    return ctx ? `${ctx.id}${ctx.count++}` : `cl-${counter++}`;\n}\nvar narrowedError = (name)=>`Stale read from <${name}>.`;\nfunction For(props) {\n    const fallback = \"fallback\" in props && {\n        fallback: ()=>props.fallback\n    };\n    return createMemo(mapArray(()=>props.each, props.children, fallback || void 0));\n}\nfunction Index(props) {\n    const fallback = \"fallback\" in props && {\n        fallback: ()=>props.fallback\n    };\n    return createMemo(indexArray(()=>props.each, props.children, fallback || void 0));\n}\nfunction Show(props) {\n    const keyed = props.keyed;\n    const condition = createMemo(()=>props.when, void 0, {\n        equals: (a, b)=>keyed ? a === b : !a === !b\n    });\n    return createMemo(()=>{\n        const c = condition();\n        if (c) {\n            const child = props.children;\n            const fn = typeof child === \"function\" && child.length > 0;\n            return fn ? untrack(()=>child(keyed ? c : ()=>{\n                    if (!untrack(condition)) throw narrowedError(\"Show\");\n                    return props.when;\n                })) : child;\n        }\n        return props.fallback;\n    }, void 0, void 0);\n}\nfunction Switch(props) {\n    let keyed = false;\n    const equals = (a, b)=>a[0] === b[0] && (keyed ? a[1] === b[1] : !a[1] === !b[1]) && a[2] === b[2];\n    const conditions = children(()=>props.children), evalConditions = createMemo(()=>{\n        let conds = conditions();\n        if (!Array.isArray(conds)) conds = [\n            conds\n        ];\n        for(let i = 0; i < conds.length; i++){\n            const c = conds[i].when;\n            if (c) {\n                keyed = !!conds[i].keyed;\n                return [\n                    i,\n                    c,\n                    conds[i]\n                ];\n            }\n        }\n        return [\n            -1\n        ];\n    }, void 0, {\n        equals\n    });\n    return createMemo(()=>{\n        const [index, when, cond] = evalConditions();\n        if (index < 0) return props.fallback;\n        const c = cond.children;\n        const fn = typeof c === \"function\" && c.length > 0;\n        return fn ? untrack(()=>c(keyed ? when : ()=>{\n                if (untrack(evalConditions)[0] !== index) throw narrowedError(\"Match\");\n                return cond.when;\n            })) : c;\n    }, void 0, void 0);\n}\nfunction Match(props) {\n    return props;\n}\nvar DEV = void 0;\n// ../../node_modules/.pnpm/solid-js@1.8.7/node_modules/solid-js/web/dist/web.js\nvar booleans = [\n    \"allowfullscreen\",\n    \"async\",\n    \"autofocus\",\n    \"autoplay\",\n    \"checked\",\n    \"controls\",\n    \"default\",\n    \"disabled\",\n    \"formnovalidate\",\n    \"hidden\",\n    \"indeterminate\",\n    \"inert\",\n    \"ismap\",\n    \"loop\",\n    \"multiple\",\n    \"muted\",\n    \"nomodule\",\n    \"novalidate\",\n    \"open\",\n    \"playsinline\",\n    \"readonly\",\n    \"required\",\n    \"reversed\",\n    \"seamless\",\n    \"selected\"\n];\nvar Properties = /* @__PURE__ */ new Set([\n    \"className\",\n    \"value\",\n    \"readOnly\",\n    \"formNoValidate\",\n    \"isMap\",\n    \"noModule\",\n    \"playsInline\",\n    ...booleans\n]);\nvar ChildProperties = /* @__PURE__ */ new Set([\n    \"innerHTML\",\n    \"textContent\",\n    \"innerText\",\n    \"children\"\n]);\nvar Aliases = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(null), {\n    className: \"class\",\n    htmlFor: \"for\"\n});\nvar PropAliases = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(null), {\n    class: \"className\",\n    formnovalidate: {\n        $: \"formNoValidate\",\n        BUTTON: 1,\n        INPUT: 1\n    },\n    ismap: {\n        $: \"isMap\",\n        IMG: 1\n    },\n    nomodule: {\n        $: \"noModule\",\n        SCRIPT: 1\n    },\n    playsinline: {\n        $: \"playsInline\",\n        VIDEO: 1\n    },\n    readonly: {\n        $: \"readOnly\",\n        INPUT: 1,\n        TEXTAREA: 1\n    }\n});\nfunction getPropAlias(prop, tagName) {\n    const a = PropAliases[prop];\n    return typeof a === \"object\" ? a[tagName] ? a[\"$\"] : void 0 : a;\n}\nvar DelegatedEvents = /* @__PURE__ */ new Set([\n    \"beforeinput\",\n    \"click\",\n    \"dblclick\",\n    \"contextmenu\",\n    \"focusin\",\n    \"focusout\",\n    \"input\",\n    \"keydown\",\n    \"keyup\",\n    \"mousedown\",\n    \"mousemove\",\n    \"mouseout\",\n    \"mouseover\",\n    \"mouseup\",\n    \"pointerdown\",\n    \"pointermove\",\n    \"pointerout\",\n    \"pointerover\",\n    \"pointerup\",\n    \"touchend\",\n    \"touchmove\",\n    \"touchstart\"\n]);\nvar SVGElements = /* @__PURE__ */ new Set([\n    \"altGlyph\",\n    \"altGlyphDef\",\n    \"altGlyphItem\",\n    \"animate\",\n    \"animateColor\",\n    \"animateMotion\",\n    \"animateTransform\",\n    \"circle\",\n    \"clipPath\",\n    \"color-profile\",\n    \"cursor\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"feBlend\",\n    \"feColorMatrix\",\n    \"feComponentTransfer\",\n    \"feComposite\",\n    \"feConvolveMatrix\",\n    \"feDiffuseLighting\",\n    \"feDisplacementMap\",\n    \"feDistantLight\",\n    \"feFlood\",\n    \"feFuncA\",\n    \"feFuncB\",\n    \"feFuncG\",\n    \"feFuncR\",\n    \"feGaussianBlur\",\n    \"feImage\",\n    \"feMerge\",\n    \"feMergeNode\",\n    \"feMorphology\",\n    \"feOffset\",\n    \"fePointLight\",\n    \"feSpecularLighting\",\n    \"feSpotLight\",\n    \"feTile\",\n    \"feTurbulence\",\n    \"filter\",\n    \"font\",\n    \"font-face\",\n    \"font-face-format\",\n    \"font-face-name\",\n    \"font-face-src\",\n    \"font-face-uri\",\n    \"foreignObject\",\n    \"g\",\n    \"glyph\",\n    \"glyphRef\",\n    \"hkern\",\n    \"image\",\n    \"line\",\n    \"linearGradient\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"missing-glyph\",\n    \"mpath\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"radialGradient\",\n    \"rect\",\n    \"set\",\n    \"stop\",\n    \"svg\",\n    \"switch\",\n    \"symbol\",\n    \"text\",\n    \"textPath\",\n    \"tref\",\n    \"tspan\",\n    \"use\",\n    \"view\",\n    \"vkern\"\n]);\nvar SVGNamespace = {\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\"\n};\nfunction reconcileArrays(parentNode, a, b) {\n    let bLength = b.length, aEnd = a.length, bEnd = bLength, aStart = 0, bStart = 0, after = a[aEnd - 1].nextSibling, map = null;\n    while(aStart < aEnd || bStart < bEnd){\n        if (a[aStart] === b[bStart]) {\n            aStart++;\n            bStart++;\n            continue;\n        }\n        while(a[aEnd - 1] === b[bEnd - 1]){\n            aEnd--;\n            bEnd--;\n        }\n        if (aEnd === aStart) {\n            const node = bEnd < bLength ? bStart ? b[bStart - 1].nextSibling : b[bEnd - bStart] : after;\n            while(bStart < bEnd)parentNode.insertBefore(b[bStart++], node);\n        } else if (bEnd === bStart) {\n            while(aStart < aEnd){\n                if (!map || !map.has(a[aStart])) a[aStart].remove();\n                aStart++;\n            }\n        } else if (a[aStart] === b[bEnd - 1] && b[bStart] === a[aEnd - 1]) {\n            const node = a[--aEnd].nextSibling;\n            parentNode.insertBefore(b[bStart++], a[aStart++].nextSibling);\n            parentNode.insertBefore(b[--bEnd], node);\n            a[aEnd] = b[bEnd];\n        } else {\n            if (!map) {\n                map = /* @__PURE__ */ new Map();\n                let i = bStart;\n                while(i < bEnd)map.set(b[i], i++);\n            }\n            const index = map.get(a[aStart]);\n            if (index != null) {\n                if (bStart < index && index < bEnd) {\n                    let i = aStart, sequence = 1, t;\n                    while(++i < aEnd && i < bEnd){\n                        if ((t = map.get(a[i])) == null || t !== index + sequence) break;\n                        sequence++;\n                    }\n                    if (sequence > index - bStart) {\n                        const node = a[aStart];\n                        while(bStart < index)parentNode.insertBefore(b[bStart++], node);\n                    } else parentNode.replaceChild(b[bStart++], a[aStart++]);\n                } else aStart++;\n            } else a[aStart++].remove();\n        }\n    }\n}\nvar $$EVENTS = \"_$DX_DELEGATE\";\nfunction render(code, element, init, options = {}) {\n    let disposer;\n    createRoot((dispose2)=>{\n        disposer = dispose2;\n        element === document ? code() : insert(element, code(), element.firstChild ? null : void 0, init);\n    }, options.owner);\n    return ()=>{\n        disposer();\n        element.textContent = \"\";\n    };\n}\nfunction template(html, isCE, isSVG) {\n    let node;\n    const create = ()=>{\n        const t = document.createElement(\"template\");\n        t.innerHTML = html;\n        return isSVG ? t.content.firstChild.firstChild : t.content.firstChild;\n    };\n    const fn = isCE ? ()=>untrack(()=>document.importNode(node || (node = create()), true)) : ()=>(node || (node = create())).cloneNode(true);\n    fn.cloneNode = fn;\n    return fn;\n}\nfunction delegateEvents(eventNames, document2 = window.document) {\n    const e = document2[$$EVENTS] || (document2[$$EVENTS] = /* @__PURE__ */ new Set());\n    for(let i = 0, l = eventNames.length; i < l; i++){\n        const name = eventNames[i];\n        if (!e.has(name)) {\n            e.add(name);\n            document2.addEventListener(name, eventHandler);\n        }\n    }\n}\nfunction setAttribute(node, name, value) {\n    if (sharedConfig.context) return;\n    if (value == null) node.removeAttribute(name);\n    else node.setAttribute(name, value);\n}\nfunction setAttributeNS(node, namespace, name, value) {\n    if (sharedConfig.context) return;\n    if (value == null) node.removeAttributeNS(namespace, name);\n    else node.setAttributeNS(namespace, name, value);\n}\nfunction className(node, value) {\n    if (sharedConfig.context) return;\n    if (value == null) node.removeAttribute(\"class\");\n    else node.className = value;\n}\nfunction addEventListener(node, name, handler, delegate) {\n    if (delegate) {\n        if (Array.isArray(handler)) {\n            node[`$$${name}`] = handler[0];\n            node[`$$${name}Data`] = handler[1];\n        } else node[`$$${name}`] = handler;\n    } else if (Array.isArray(handler)) {\n        const handlerFn = handler[0];\n        node.addEventListener(name, handler[0] = (e)=>handlerFn.call(node, handler[1], e));\n    } else node.addEventListener(name, handler);\n}\nfunction classList(node, value, prev = {}) {\n    const classKeys = Object.keys(value || {}), prevKeys = Object.keys(prev);\n    let i, len;\n    for(i = 0, len = prevKeys.length; i < len; i++){\n        const key = prevKeys[i];\n        if (!key || key === \"undefined\" || value[key]) continue;\n        toggleClassKey(node, key, false);\n        delete prev[key];\n    }\n    for(i = 0, len = classKeys.length; i < len; i++){\n        const key = classKeys[i], classValue = !!value[key];\n        if (!key || key === \"undefined\" || prev[key] === classValue || !classValue) continue;\n        toggleClassKey(node, key, true);\n        prev[key] = classValue;\n    }\n    return prev;\n}\nfunction style(node, value, prev) {\n    if (!value) return prev ? setAttribute(node, \"style\") : value;\n    const nodeStyle = node.style;\n    if (typeof value === \"string\") return nodeStyle.cssText = value;\n    typeof prev === \"string\" && (nodeStyle.cssText = prev = void 0);\n    prev || (prev = {});\n    value || (value = {});\n    let v, s;\n    for(s in prev){\n        value[s] == null && nodeStyle.removeProperty(s);\n        delete prev[s];\n    }\n    for(s in value){\n        v = value[s];\n        if (v !== prev[s]) {\n            nodeStyle.setProperty(s, v);\n            prev[s] = v;\n        }\n    }\n    return prev;\n}\nfunction spread(node, props = {}, isSVG, skipChildren) {\n    const prevProps = {};\n    if (!skipChildren) {\n        createRenderEffect(()=>prevProps.children = insertExpression(node, props.children, prevProps.children));\n    }\n    createRenderEffect(()=>props.ref && props.ref(node));\n    createRenderEffect(()=>assign(node, props, isSVG, true, prevProps, true));\n    return prevProps;\n}\nfunction use(fn, element, arg) {\n    return untrack(()=>fn(element, arg));\n}\nfunction insert(parent, accessor, marker, initial) {\n    if (marker !== void 0 && !initial) initial = [];\n    if (typeof accessor !== \"function\") return insertExpression(parent, accessor, initial, marker);\n    createRenderEffect((current)=>insertExpression(parent, accessor(), current, marker), initial);\n}\nfunction assign(node, props, isSVG, skipChildren, prevProps = {}, skipRef = false) {\n    props || (props = {});\n    for(const prop in prevProps){\n        if (!(prop in props)) {\n            if (prop === \"children\") continue;\n            prevProps[prop] = assignProp(node, prop, null, prevProps[prop], isSVG, skipRef);\n        }\n    }\n    for(const prop in props){\n        if (prop === \"children\") {\n            if (!skipChildren) insertExpression(node, props.children);\n            continue;\n        }\n        const value = props[prop];\n        prevProps[prop] = assignProp(node, prop, value, prevProps[prop], isSVG, skipRef);\n    }\n}\nfunction getNextElement(template2) {\n    let node, key;\n    if (!sharedConfig.context || !(node = sharedConfig.registry.get(key = getHydrationKey()))) {\n        return template2();\n    }\n    if (sharedConfig.completed) sharedConfig.completed.add(node);\n    sharedConfig.registry.delete(key);\n    return node;\n}\nfunction toPropertyName(name) {\n    return name.toLowerCase().replace(/-([a-z])/g, (_, w)=>w.toUpperCase());\n}\nfunction toggleClassKey(node, key, value) {\n    const classNames = key.trim().split(/\\s+/);\n    for(let i = 0, nameLen = classNames.length; i < nameLen; i++)node.classList.toggle(classNames[i], value);\n}\nfunction assignProp(node, prop, value, prev, isSVG, skipRef) {\n    let isCE, isProp, isChildProp, propAlias, forceProp;\n    if (prop === \"style\") return style(node, value, prev);\n    if (prop === \"classList\") return classList(node, value, prev);\n    if (value === prev) return prev;\n    if (prop === \"ref\") {\n        if (!skipRef) value(node);\n    } else if (prop.slice(0, 3) === \"on:\") {\n        const e = prop.slice(3);\n        prev && node.removeEventListener(e, prev);\n        value && node.addEventListener(e, value);\n    } else if (prop.slice(0, 10) === \"oncapture:\") {\n        const e = prop.slice(10);\n        prev && node.removeEventListener(e, prev, true);\n        value && node.addEventListener(e, value, true);\n    } else if (prop.slice(0, 2) === \"on\") {\n        const name = prop.slice(2).toLowerCase();\n        const delegate = DelegatedEvents.has(name);\n        if (!delegate && prev) {\n            const h = Array.isArray(prev) ? prev[0] : prev;\n            node.removeEventListener(name, h);\n        }\n        if (delegate || value) {\n            addEventListener(node, name, value, delegate);\n            delegate && delegateEvents([\n                name\n            ]);\n        }\n    } else if (prop.slice(0, 5) === \"attr:\") {\n        setAttribute(node, prop.slice(5), value);\n    } else if ((forceProp = prop.slice(0, 5) === \"prop:\") || (isChildProp = ChildProperties.has(prop)) || !isSVG && ((propAlias = getPropAlias(prop, node.tagName)) || (isProp = Properties.has(prop))) || (isCE = node.nodeName.includes(\"-\"))) {\n        if (forceProp) {\n            prop = prop.slice(5);\n            isProp = true;\n        } else if (sharedConfig.context) return value;\n        if (prop === \"class\" || prop === \"className\") className(node, value);\n        else if (isCE && !isProp && !isChildProp) node[toPropertyName(prop)] = value;\n        else node[propAlias || prop] = value;\n    } else {\n        const ns = isSVG && prop.indexOf(\":\") > -1 && SVGNamespace[prop.split(\":\")[0]];\n        if (ns) setAttributeNS(node, ns, prop, value);\n        else setAttribute(node, Aliases[prop] || prop, value);\n    }\n    return value;\n}\nfunction eventHandler(e) {\n    const key = `$$${e.type}`;\n    let node = e.composedPath && e.composedPath()[0] || e.target;\n    if (e.target !== node) {\n        Object.defineProperty(e, \"target\", {\n            configurable: true,\n            value: node\n        });\n    }\n    Object.defineProperty(e, \"currentTarget\", {\n        configurable: true,\n        get () {\n            return node || document;\n        }\n    });\n    if (sharedConfig.registry && !sharedConfig.done) sharedConfig.done = _$HY.done = true;\n    while(node){\n        const handler = node[key];\n        if (handler && !node.disabled) {\n            const data = node[`${key}Data`];\n            data !== void 0 ? handler.call(node, data, e) : handler.call(node, e);\n            if (e.cancelBubble) return;\n        }\n        node = node._$host || node.parentNode || node.host;\n    }\n}\nfunction insertExpression(parent, value, current, marker, unwrapArray) {\n    if (sharedConfig.context) {\n        !current && (current = [\n            ...parent.childNodes\n        ]);\n        let cleaned = [];\n        for(let i = 0; i < current.length; i++){\n            const node = current[i];\n            if (node.nodeType === 8 && node.data.slice(0, 2) === \"!$\") node.remove();\n            else cleaned.push(node);\n        }\n        current = cleaned;\n    }\n    while(typeof current === \"function\")current = current();\n    if (value === current) return current;\n    const t = typeof value, multi = marker !== void 0;\n    parent = multi && current[0] && current[0].parentNode || parent;\n    if (t === \"string\" || t === \"number\") {\n        if (sharedConfig.context) return current;\n        if (t === \"number\") value = value.toString();\n        if (multi) {\n            let node = current[0];\n            if (node && node.nodeType === 3) {\n                node.data = value;\n            } else node = document.createTextNode(value);\n            current = cleanChildren(parent, current, marker, node);\n        } else {\n            if (current !== \"\" && typeof current === \"string\") {\n                current = parent.firstChild.data = value;\n            } else current = parent.textContent = value;\n        }\n    } else if (value == null || t === \"boolean\") {\n        if (sharedConfig.context) return current;\n        current = cleanChildren(parent, current, marker);\n    } else if (t === \"function\") {\n        createRenderEffect(()=>{\n            let v = value();\n            while(typeof v === \"function\")v = v();\n            current = insertExpression(parent, v, current, marker);\n        });\n        return ()=>current;\n    } else if (Array.isArray(value)) {\n        const array = [];\n        const currentArray = current && Array.isArray(current);\n        if (normalizeIncomingArray(array, value, current, unwrapArray)) {\n            createRenderEffect(()=>current = insertExpression(parent, array, current, marker, true));\n            return ()=>current;\n        }\n        if (sharedConfig.context) {\n            if (!array.length) return current;\n            if (marker === void 0) return [\n                ...parent.childNodes\n            ];\n            let node = array[0];\n            let nodes = [\n                node\n            ];\n            while((node = node.nextSibling) !== marker)nodes.push(node);\n            return current = nodes;\n        }\n        if (array.length === 0) {\n            current = cleanChildren(parent, current, marker);\n            if (multi) return current;\n        } else if (currentArray) {\n            if (current.length === 0) {\n                appendNodes(parent, array, marker);\n            } else reconcileArrays(parent, current, array);\n        } else {\n            current && cleanChildren(parent);\n            appendNodes(parent, array);\n        }\n        current = array;\n    } else if (value.nodeType) {\n        if (sharedConfig.context && value.parentNode) return current = multi ? [\n            value\n        ] : value;\n        if (Array.isArray(current)) {\n            if (multi) return current = cleanChildren(parent, current, marker, value);\n            cleanChildren(parent, current, null, value);\n        } else if (current == null || current === \"\" || !parent.firstChild) {\n            parent.appendChild(value);\n        } else parent.replaceChild(value, parent.firstChild);\n        current = value;\n    } else ;\n    return current;\n}\nfunction normalizeIncomingArray(normalized, array, current, unwrap) {\n    let dynamic = false;\n    for(let i = 0, len = array.length; i < len; i++){\n        let item = array[i], prev = current && current[i], t;\n        if (item == null || item === true || item === false) ;\n        else if ((t = typeof item) === \"object\" && item.nodeType) {\n            normalized.push(item);\n        } else if (Array.isArray(item)) {\n            dynamic = normalizeIncomingArray(normalized, item, prev) || dynamic;\n        } else if (t === \"function\") {\n            if (unwrap) {\n                while(typeof item === \"function\")item = item();\n                dynamic = normalizeIncomingArray(normalized, Array.isArray(item) ? item : [\n                    item\n                ], Array.isArray(prev) ? prev : [\n                    prev\n                ]) || dynamic;\n            } else {\n                normalized.push(item);\n                dynamic = true;\n            }\n        } else {\n            const value = String(item);\n            if (prev && prev.nodeType === 3 && prev.data === value) normalized.push(prev);\n            else normalized.push(document.createTextNode(value));\n        }\n    }\n    return dynamic;\n}\nfunction appendNodes(parent, array, marker = null) {\n    for(let i = 0, len = array.length; i < len; i++)parent.insertBefore(array[i], marker);\n}\nfunction cleanChildren(parent, current, marker, replacement) {\n    if (marker === void 0) return parent.textContent = \"\";\n    const node = replacement || document.createTextNode(\"\");\n    if (current.length) {\n        let inserted = false;\n        for(let i = current.length - 1; i >= 0; i--){\n            const el = current[i];\n            if (node !== el) {\n                const isParent = el.parentNode === parent;\n                if (!inserted && !i) isParent ? parent.replaceChild(node, el) : parent.insertBefore(node, marker);\n                else isParent && el.remove();\n            } else inserted = true;\n        }\n    } else parent.insertBefore(node, marker);\n    return [\n        node\n    ];\n}\nfunction getHydrationKey() {\n    const hydrate = sharedConfig.context;\n    return `${hydrate.id}${hydrate.count++}`;\n}\nvar isServer = false;\nvar SVG_NAMESPACE = \"http://www.w3.org/2000/svg\";\nfunction createElement(tagName, isSVG = false) {\n    return isSVG ? document.createElementNS(SVG_NAMESPACE, tagName) : document.createElement(tagName);\n}\nfunction Portal(props) {\n    const { useShadow } = props, marker = document.createTextNode(\"\"), mount = ()=>props.mount || document.body, owner = getOwner();\n    let content;\n    let hydrating = !!sharedConfig.context;\n    createEffect(()=>{\n        if (hydrating) getOwner().user = hydrating = false;\n        content || (content = runWithOwner(owner, ()=>createMemo(()=>props.children)));\n        const el = mount();\n        if (el instanceof HTMLHeadElement) {\n            const [clean, setClean] = createSignal(false);\n            const cleanup = ()=>setClean(true);\n            createRoot((dispose2)=>insert(el, ()=>!clean() ? content() : dispose2(), null));\n            onCleanup(cleanup);\n        } else {\n            const container = createElement(props.isSVG ? \"g\" : \"div\", props.isSVG), renderRoot = useShadow && container.attachShadow ? container.attachShadow({\n                mode: \"open\"\n            }) : container;\n            Object.defineProperty(container, \"_$host\", {\n                get () {\n                    return marker.parentNode;\n                },\n                configurable: true\n            });\n            insert(renderRoot, content);\n            el.appendChild(container);\n            props.ref && props.ref(container);\n            onCleanup(()=>el.removeChild(container));\n        }\n    }, void 0, {\n        render: !hydrating\n    });\n    return marker;\n}\nfunction Dynamic(props) {\n    const [p, others] = splitProps(props, [\n        \"component\"\n    ]);\n    const cached = createMemo(()=>p.component);\n    return createMemo(()=>{\n        const component = cached();\n        switch(typeof component){\n            case \"function\":\n                return untrack(()=>component(others));\n            case \"string\":\n                const isSvg = SVGElements.has(component);\n                const el = sharedConfig.context ? getNextElement() : createElement(component, isSvg);\n                spread(el, others, isSvg);\n                return el;\n        }\n    });\n}\n// ../../node_modules/.pnpm/superjson@1.13.3/node_modules/superjson/dist/esm/double-indexed-kv.js\nvar DoubleIndexedKV = /** @class */ function() {\n    function DoubleIndexedKV2() {\n        this.keyToValue = /* @__PURE__ */ new Map();\n        this.valueToKey = /* @__PURE__ */ new Map();\n    }\n    DoubleIndexedKV2.prototype.set = function(key, value) {\n        this.keyToValue.set(key, value);\n        this.valueToKey.set(value, key);\n    };\n    DoubleIndexedKV2.prototype.getByKey = function(key) {\n        return this.keyToValue.get(key);\n    };\n    DoubleIndexedKV2.prototype.getByValue = function(value) {\n        return this.valueToKey.get(value);\n    };\n    DoubleIndexedKV2.prototype.clear = function() {\n        this.keyToValue.clear();\n        this.valueToKey.clear();\n    };\n    return DoubleIndexedKV2;\n}();\n// ../../node_modules/.pnpm/superjson@1.13.3/node_modules/superjson/dist/esm/registry.js\nvar Registry = /** @class */ function() {\n    function Registry2(generateIdentifier) {\n        this.generateIdentifier = generateIdentifier;\n        this.kv = new DoubleIndexedKV();\n    }\n    Registry2.prototype.register = function(value, identifier) {\n        if (this.kv.getByValue(value)) {\n            return;\n        }\n        if (!identifier) {\n            identifier = this.generateIdentifier(value);\n        }\n        this.kv.set(identifier, value);\n    };\n    Registry2.prototype.clear = function() {\n        this.kv.clear();\n    };\n    Registry2.prototype.getIdentifier = function(value) {\n        return this.kv.getByValue(value);\n    };\n    Registry2.prototype.getValue = function(identifier) {\n        return this.kv.getByKey(identifier);\n    };\n    return Registry2;\n}();\n// ../../node_modules/.pnpm/superjson@1.13.3/node_modules/superjson/dist/esm/class-registry.js\nvar __extends = function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d2, b2) {\n            d2.__proto__ = b2;\n        } || function(d2, b2) {\n            for(var p in b2)if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar ClassRegistry = /** @class */ function(_super) {\n    __extends(ClassRegistry2, _super);\n    function ClassRegistry2() {\n        var _this = _super.call(this, function(c) {\n            return c.name;\n        }) || this;\n        _this.classToAllowedProps = /* @__PURE__ */ new Map();\n        return _this;\n    }\n    ClassRegistry2.prototype.register = function(value, options) {\n        if (typeof options === \"object\") {\n            if (options.allowProps) {\n                this.classToAllowedProps.set(value, options.allowProps);\n            }\n            _super.prototype.register.call(this, value, options.identifier);\n        } else {\n            _super.prototype.register.call(this, value, options);\n        }\n    };\n    ClassRegistry2.prototype.getAllowedProps = function(value) {\n        return this.classToAllowedProps.get(value);\n    };\n    return ClassRegistry2;\n}(Registry);\n// ../../node_modules/.pnpm/superjson@1.13.3/node_modules/superjson/dist/esm/util.js\nvar __read = function(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n};\nfunction valuesOfObj(record) {\n    if (\"values\" in Object) {\n        return Object.values(record);\n    }\n    var values = [];\n    for(var key in record){\n        if (record.hasOwnProperty(key)) {\n            values.push(record[key]);\n        }\n    }\n    return values;\n}\nfunction find(record, predicate) {\n    var values = valuesOfObj(record);\n    if (\"find\" in values) {\n        return values.find(predicate);\n    }\n    var valuesNotNever = values;\n    for(var i = 0; i < valuesNotNever.length; i++){\n        var value = valuesNotNever[i];\n        if (predicate(value)) {\n            return value;\n        }\n    }\n    return void 0;\n}\nfunction forEach(record, run) {\n    Object.entries(record).forEach(function(_a) {\n        var _b = __read(_a, 2), key = _b[0], value = _b[1];\n        return run(value, key);\n    });\n}\nfunction includes(arr, value) {\n    return arr.indexOf(value) !== -1;\n}\nfunction findArr(record, predicate) {\n    for(var i = 0; i < record.length; i++){\n        var value = record[i];\n        if (predicate(value)) {\n            return value;\n        }\n    }\n    return void 0;\n}\n// ../../node_modules/.pnpm/superjson@1.13.3/node_modules/superjson/dist/esm/custom-transformer-registry.js\nvar CustomTransformerRegistry = /** @class */ function() {\n    function CustomTransformerRegistry2() {\n        this.transfomers = {};\n    }\n    CustomTransformerRegistry2.prototype.register = function(transformer) {\n        this.transfomers[transformer.name] = transformer;\n    };\n    CustomTransformerRegistry2.prototype.findApplicable = function(v) {\n        return find(this.transfomers, function(transformer) {\n            return transformer.isApplicable(v);\n        });\n    };\n    CustomTransformerRegistry2.prototype.findByName = function(name) {\n        return this.transfomers[name];\n    };\n    return CustomTransformerRegistry2;\n}();\n// ../../node_modules/.pnpm/superjson@1.13.3/node_modules/superjson/dist/esm/is.js\nvar getType = function(payload) {\n    return Object.prototype.toString.call(payload).slice(8, -1);\n};\nvar isUndefined = function(payload) {\n    return typeof payload === \"undefined\";\n};\nvar isNull = function(payload) {\n    return payload === null;\n};\nvar isPlainObject = function(payload) {\n    if (typeof payload !== \"object\" || payload === null) return false;\n    if (payload === Object.prototype) return false;\n    if (Object.getPrototypeOf(payload) === null) return true;\n    return Object.getPrototypeOf(payload) === Object.prototype;\n};\nvar isEmptyObject = function(payload) {\n    return isPlainObject(payload) && Object.keys(payload).length === 0;\n};\nvar isArray = function(payload) {\n    return Array.isArray(payload);\n};\nvar isString = function(payload) {\n    return typeof payload === \"string\";\n};\nvar isNumber = function(payload) {\n    return typeof payload === \"number\" && !isNaN(payload);\n};\nvar isBoolean = function(payload) {\n    return typeof payload === \"boolean\";\n};\nvar isRegExp = function(payload) {\n    return payload instanceof RegExp;\n};\nvar isMap = function(payload) {\n    return payload instanceof Map;\n};\nvar isSet = function(payload) {\n    return payload instanceof Set;\n};\nvar isSymbol = function(payload) {\n    return getType(payload) === \"Symbol\";\n};\nvar isDate = function(payload) {\n    return payload instanceof Date && !isNaN(payload.valueOf());\n};\nvar isError = function(payload) {\n    return payload instanceof Error;\n};\nvar isNaNValue = function(payload) {\n    return typeof payload === \"number\" && isNaN(payload);\n};\nvar isPrimitive = function(payload) {\n    return isBoolean(payload) || isNull(payload) || isUndefined(payload) || isNumber(payload) || isString(payload) || isSymbol(payload);\n};\nvar isBigint = function(payload) {\n    return typeof payload === \"bigint\";\n};\nvar isInfinite = function(payload) {\n    return payload === Infinity || payload === -Infinity;\n};\nvar isTypedArray = function(payload) {\n    return ArrayBuffer.isView(payload) && !(payload instanceof DataView);\n};\nvar isURL = function(payload) {\n    return payload instanceof URL;\n};\n// ../../node_modules/.pnpm/superjson@1.13.3/node_modules/superjson/dist/esm/pathstringifier.js\nvar escapeKey = function(key) {\n    return key.replace(/\\./g, \"\\\\.\");\n};\nvar stringifyPath = function(path) {\n    return path.map(String).map(escapeKey).join(\".\");\n};\nvar parsePath = function(string) {\n    var result = [];\n    var segment = \"\";\n    for(var i = 0; i < string.length; i++){\n        var char = string.charAt(i);\n        var isEscapedDot = char === \"\\\\\" && string.charAt(i + 1) === \".\";\n        if (isEscapedDot) {\n            segment += \".\";\n            i++;\n            continue;\n        }\n        var isEndOfSegment = char === \".\";\n        if (isEndOfSegment) {\n            result.push(segment);\n            segment = \"\";\n            continue;\n        }\n        segment += char;\n    }\n    var lastSegment = segment;\n    result.push(lastSegment);\n    return result;\n};\n// ../../node_modules/.pnpm/superjson@1.13.3/node_modules/superjson/dist/esm/transformer.js\nvar __assign = function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read2 = function(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n};\nvar __spreadArray = function(to, from) {\n    for(var i = 0, il = from.length, j = to.length; i < il; i++, j++)to[j] = from[i];\n    return to;\n};\nfunction simpleTransformation(isApplicable, annotation, transform, untransform) {\n    return {\n        isApplicable,\n        annotation,\n        transform,\n        untransform\n    };\n}\nvar simpleRules = [\n    simpleTransformation(isUndefined, \"undefined\", function() {\n        return null;\n    }, function() {\n        return void 0;\n    }),\n    simpleTransformation(isBigint, \"bigint\", function(v) {\n        return v.toString();\n    }, function(v) {\n        if (typeof BigInt !== \"undefined\") {\n            return BigInt(v);\n        }\n        console.error(\"Please add a BigInt polyfill.\");\n        return v;\n    }),\n    simpleTransformation(isDate, \"Date\", function(v) {\n        return v.toISOString();\n    }, function(v) {\n        return new Date(v);\n    }),\n    simpleTransformation(isError, \"Error\", function(v, superJson) {\n        var baseError = {\n            name: v.name,\n            message: v.message\n        };\n        superJson.allowedErrorProps.forEach(function(prop) {\n            baseError[prop] = v[prop];\n        });\n        return baseError;\n    }, function(v, superJson) {\n        var e = new Error(v.message);\n        e.name = v.name;\n        e.stack = v.stack;\n        superJson.allowedErrorProps.forEach(function(prop) {\n            e[prop] = v[prop];\n        });\n        return e;\n    }),\n    simpleTransformation(isRegExp, \"regexp\", function(v) {\n        return \"\" + v;\n    }, function(regex) {\n        var body = regex.slice(1, regex.lastIndexOf(\"/\"));\n        var flags = regex.slice(regex.lastIndexOf(\"/\") + 1);\n        return new RegExp(body, flags);\n    }),\n    simpleTransformation(isSet, \"set\", // (sets only exist in es6+)\n    // eslint-disable-next-line es5/no-es6-methods\n    function(v) {\n        return __spreadArray([], __read2(v.values()));\n    }, function(v) {\n        return new Set(v);\n    }),\n    simpleTransformation(isMap, \"map\", function(v) {\n        return __spreadArray([], __read2(v.entries()));\n    }, function(v) {\n        return new Map(v);\n    }),\n    simpleTransformation(function(v) {\n        return isNaNValue(v) || isInfinite(v);\n    }, \"number\", function(v) {\n        if (isNaNValue(v)) {\n            return \"NaN\";\n        }\n        if (v > 0) {\n            return \"Infinity\";\n        } else {\n            return \"-Infinity\";\n        }\n    }, Number),\n    simpleTransformation(function(v) {\n        return v === 0 && 1 / v === -Infinity;\n    }, \"number\", function() {\n        return \"-0\";\n    }, Number),\n    simpleTransformation(isURL, \"URL\", function(v) {\n        return v.toString();\n    }, function(v) {\n        return new URL(v);\n    })\n];\nfunction compositeTransformation(isApplicable, annotation, transform, untransform) {\n    return {\n        isApplicable,\n        annotation,\n        transform,\n        untransform\n    };\n}\nvar symbolRule = compositeTransformation(function(s, superJson) {\n    if (isSymbol(s)) {\n        var isRegistered = !!superJson.symbolRegistry.getIdentifier(s);\n        return isRegistered;\n    }\n    return false;\n}, function(s, superJson) {\n    var identifier = superJson.symbolRegistry.getIdentifier(s);\n    return [\n        \"symbol\",\n        identifier\n    ];\n}, function(v) {\n    return v.description;\n}, function(_, a, superJson) {\n    var value = superJson.symbolRegistry.getValue(a[1]);\n    if (!value) {\n        throw new Error(\"Trying to deserialize unknown symbol\");\n    }\n    return value;\n});\nvar constructorToName = [\n    Int8Array,\n    Uint8Array,\n    Int16Array,\n    Uint16Array,\n    Int32Array,\n    Uint32Array,\n    Float32Array,\n    Float64Array,\n    Uint8ClampedArray\n].reduce(function(obj, ctor) {\n    obj[ctor.name] = ctor;\n    return obj;\n}, {});\nvar typedArrayRule = compositeTransformation(isTypedArray, function(v) {\n    return [\n        \"typed-array\",\n        v.constructor.name\n    ];\n}, function(v) {\n    return __spreadArray([], __read2(v));\n}, function(v, a) {\n    var ctor = constructorToName[a[1]];\n    if (!ctor) {\n        throw new Error(\"Trying to deserialize unknown typed array\");\n    }\n    return new ctor(v);\n});\nfunction isInstanceOfRegisteredClass(potentialClass, superJson) {\n    if (potentialClass === null || potentialClass === void 0 ? void 0 : potentialClass.constructor) {\n        var isRegistered = !!superJson.classRegistry.getIdentifier(potentialClass.constructor);\n        return isRegistered;\n    }\n    return false;\n}\nvar classRule = compositeTransformation(isInstanceOfRegisteredClass, function(clazz, superJson) {\n    var identifier = superJson.classRegistry.getIdentifier(clazz.constructor);\n    return [\n        \"class\",\n        identifier\n    ];\n}, function(clazz, superJson) {\n    var allowedProps = superJson.classRegistry.getAllowedProps(clazz.constructor);\n    if (!allowedProps) {\n        return __assign({}, clazz);\n    }\n    var result = {};\n    allowedProps.forEach(function(prop) {\n        result[prop] = clazz[prop];\n    });\n    return result;\n}, function(v, a, superJson) {\n    var clazz = superJson.classRegistry.getValue(a[1]);\n    if (!clazz) {\n        throw new Error(\"Trying to deserialize unknown class - check https://github.com/blitz-js/superjson/issues/116#issuecomment-773996564\");\n    }\n    return Object.assign(Object.create(clazz.prototype), v);\n});\nvar customRule = compositeTransformation(function(value, superJson) {\n    return !!superJson.customTransformerRegistry.findApplicable(value);\n}, function(value, superJson) {\n    var transformer = superJson.customTransformerRegistry.findApplicable(value);\n    return [\n        \"custom\",\n        transformer.name\n    ];\n}, function(value, superJson) {\n    var transformer = superJson.customTransformerRegistry.findApplicable(value);\n    return transformer.serialize(value);\n}, function(v, a, superJson) {\n    var transformer = superJson.customTransformerRegistry.findByName(a[1]);\n    if (!transformer) {\n        throw new Error(\"Trying to deserialize unknown custom value\");\n    }\n    return transformer.deserialize(v);\n});\nvar compositeRules = [\n    classRule,\n    symbolRule,\n    customRule,\n    typedArrayRule\n];\nvar transformValue = function(value, superJson) {\n    var applicableCompositeRule = findArr(compositeRules, function(rule) {\n        return rule.isApplicable(value, superJson);\n    });\n    if (applicableCompositeRule) {\n        return {\n            value: applicableCompositeRule.transform(value, superJson),\n            type: applicableCompositeRule.annotation(value, superJson)\n        };\n    }\n    var applicableSimpleRule = findArr(simpleRules, function(rule) {\n        return rule.isApplicable(value, superJson);\n    });\n    if (applicableSimpleRule) {\n        return {\n            value: applicableSimpleRule.transform(value, superJson),\n            type: applicableSimpleRule.annotation\n        };\n    }\n    return void 0;\n};\nvar simpleRulesByAnnotation = {};\nsimpleRules.forEach(function(rule) {\n    simpleRulesByAnnotation[rule.annotation] = rule;\n});\nvar untransformValue = function(json, type, superJson) {\n    if (isArray(type)) {\n        switch(type[0]){\n            case \"symbol\":\n                return symbolRule.untransform(json, type, superJson);\n            case \"class\":\n                return classRule.untransform(json, type, superJson);\n            case \"custom\":\n                return customRule.untransform(json, type, superJson);\n            case \"typed-array\":\n                return typedArrayRule.untransform(json, type, superJson);\n            default:\n                throw new Error(\"Unknown transformation: \" + type);\n        }\n    } else {\n        var transformation = simpleRulesByAnnotation[type];\n        if (!transformation) {\n            throw new Error(\"Unknown transformation: \" + type);\n        }\n        return transformation.untransform(json, superJson);\n    }\n};\n// ../../node_modules/.pnpm/superjson@1.13.3/node_modules/superjson/dist/esm/accessDeep.js\nvar getNthKey = function(value, n) {\n    var keys = value.keys();\n    while(n > 0){\n        keys.next();\n        n--;\n    }\n    return keys.next().value;\n};\nfunction validatePath(path) {\n    if (includes(path, \"__proto__\")) {\n        throw new Error(\"__proto__ is not allowed as a property\");\n    }\n    if (includes(path, \"prototype\")) {\n        throw new Error(\"prototype is not allowed as a property\");\n    }\n    if (includes(path, \"constructor\")) {\n        throw new Error(\"constructor is not allowed as a property\");\n    }\n}\nvar getDeep = function(object, path) {\n    validatePath(path);\n    for(var i = 0; i < path.length; i++){\n        var key = path[i];\n        if (isSet(object)) {\n            object = getNthKey(object, +key);\n        } else if (isMap(object)) {\n            var row = +key;\n            var type = +path[++i] === 0 ? \"key\" : \"value\";\n            var keyOfRow = getNthKey(object, row);\n            switch(type){\n                case \"key\":\n                    object = keyOfRow;\n                    break;\n                case \"value\":\n                    object = object.get(keyOfRow);\n                    break;\n            }\n        } else {\n            object = object[key];\n        }\n    }\n    return object;\n};\nvar setDeep = function(object, path, mapper) {\n    validatePath(path);\n    if (path.length === 0) {\n        return mapper(object);\n    }\n    var parent = object;\n    for(var i = 0; i < path.length - 1; i++){\n        var key = path[i];\n        if (isArray(parent)) {\n            var index = +key;\n            parent = parent[index];\n        } else if (isPlainObject(parent)) {\n            parent = parent[key];\n        } else if (isSet(parent)) {\n            var row = +key;\n            parent = getNthKey(parent, row);\n        } else if (isMap(parent)) {\n            var isEnd = i === path.length - 2;\n            if (isEnd) {\n                break;\n            }\n            var row = +key;\n            var type = +path[++i] === 0 ? \"key\" : \"value\";\n            var keyOfRow = getNthKey(parent, row);\n            switch(type){\n                case \"key\":\n                    parent = keyOfRow;\n                    break;\n                case \"value\":\n                    parent = parent.get(keyOfRow);\n                    break;\n            }\n        }\n    }\n    var lastKey = path[path.length - 1];\n    if (isArray(parent)) {\n        parent[+lastKey] = mapper(parent[+lastKey]);\n    } else if (isPlainObject(parent)) {\n        parent[lastKey] = mapper(parent[lastKey]);\n    }\n    if (isSet(parent)) {\n        var oldValue = getNthKey(parent, +lastKey);\n        var newValue = mapper(oldValue);\n        if (oldValue !== newValue) {\n            parent[\"delete\"](oldValue);\n            parent.add(newValue);\n        }\n    }\n    if (isMap(parent)) {\n        var row = +path[path.length - 2];\n        var keyToRow = getNthKey(parent, row);\n        var type = +lastKey === 0 ? \"key\" : \"value\";\n        switch(type){\n            case \"key\":\n                {\n                    var newKey = mapper(keyToRow);\n                    parent.set(newKey, parent.get(keyToRow));\n                    if (newKey !== keyToRow) {\n                        parent[\"delete\"](keyToRow);\n                    }\n                    break;\n                }\n            case \"value\":\n                {\n                    parent.set(keyToRow, mapper(parent.get(keyToRow)));\n                    break;\n                }\n        }\n    }\n    return object;\n};\n// ../../node_modules/.pnpm/superjson@1.13.3/node_modules/superjson/dist/esm/plainer.js\nvar __read3 = function(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n};\nvar __spreadArray2 = function(to, from) {\n    for(var i = 0, il = from.length, j = to.length; i < il; i++, j++)to[j] = from[i];\n    return to;\n};\nfunction traverse(tree, walker2, origin) {\n    if (origin === void 0) {\n        origin = [];\n    }\n    if (!tree) {\n        return;\n    }\n    if (!isArray(tree)) {\n        forEach(tree, function(subtree, key) {\n            return traverse(subtree, walker2, __spreadArray2(__spreadArray2([], __read3(origin)), __read3(parsePath(key))));\n        });\n        return;\n    }\n    var _a = __read3(tree, 2), nodeValue = _a[0], children2 = _a[1];\n    if (children2) {\n        forEach(children2, function(child, key) {\n            traverse(child, walker2, __spreadArray2(__spreadArray2([], __read3(origin)), __read3(parsePath(key))));\n        });\n    }\n    walker2(nodeValue, origin);\n}\nfunction applyValueAnnotations(plain, annotations, superJson) {\n    traverse(annotations, function(type, path) {\n        plain = setDeep(plain, path, function(v) {\n            return untransformValue(v, type, superJson);\n        });\n    });\n    return plain;\n}\nfunction applyReferentialEqualityAnnotations(plain, annotations) {\n    function apply(identicalPaths, path) {\n        var object = getDeep(plain, parsePath(path));\n        identicalPaths.map(parsePath).forEach(function(identicalObjectPath) {\n            plain = setDeep(plain, identicalObjectPath, function() {\n                return object;\n            });\n        });\n    }\n    if (isArray(annotations)) {\n        var _a = __read3(annotations, 2), root = _a[0], other = _a[1];\n        root.forEach(function(identicalPath) {\n            plain = setDeep(plain, parsePath(identicalPath), function() {\n                return plain;\n            });\n        });\n        if (other) {\n            forEach(other, apply);\n        }\n    } else {\n        forEach(annotations, apply);\n    }\n    return plain;\n}\nvar isDeep = function(object, superJson) {\n    return isPlainObject(object) || isArray(object) || isMap(object) || isSet(object) || isInstanceOfRegisteredClass(object, superJson);\n};\nfunction addIdentity(object, path, identities) {\n    var existingSet = identities.get(object);\n    if (existingSet) {\n        existingSet.push(path);\n    } else {\n        identities.set(object, [\n            path\n        ]);\n    }\n}\nfunction generateReferentialEqualityAnnotations(identitites, dedupe) {\n    var result = {};\n    var rootEqualityPaths = void 0;\n    identitites.forEach(function(paths) {\n        if (paths.length <= 1) {\n            return;\n        }\n        if (!dedupe) {\n            paths = paths.map(function(path) {\n                return path.map(String);\n            }).sort(function(a, b) {\n                return a.length - b.length;\n            });\n        }\n        var _a = __read3(paths), representativePath = _a[0], identicalPaths = _a.slice(1);\n        if (representativePath.length === 0) {\n            rootEqualityPaths = identicalPaths.map(stringifyPath);\n        } else {\n            result[stringifyPath(representativePath)] = identicalPaths.map(stringifyPath);\n        }\n    });\n    if (rootEqualityPaths) {\n        if (isEmptyObject(result)) {\n            return [\n                rootEqualityPaths\n            ];\n        } else {\n            return [\n                rootEqualityPaths,\n                result\n            ];\n        }\n    } else {\n        return isEmptyObject(result) ? void 0 : result;\n    }\n}\nvar walker = function(object, identities, superJson, dedupe, path, objectsInThisPath, seenObjects) {\n    var _a;\n    if (path === void 0) {\n        path = [];\n    }\n    if (objectsInThisPath === void 0) {\n        objectsInThisPath = [];\n    }\n    if (seenObjects === void 0) {\n        seenObjects = /* @__PURE__ */ new Map();\n    }\n    var primitive = isPrimitive(object);\n    if (!primitive) {\n        addIdentity(object, path, identities);\n        var seen = seenObjects.get(object);\n        if (seen) {\n            return dedupe ? {\n                transformedValue: null\n            } : seen;\n        }\n    }\n    if (!isDeep(object, superJson)) {\n        var transformed_1 = transformValue(object, superJson);\n        var result_1 = transformed_1 ? {\n            transformedValue: transformed_1.value,\n            annotations: [\n                transformed_1.type\n            ]\n        } : {\n            transformedValue: object\n        };\n        if (!primitive) {\n            seenObjects.set(object, result_1);\n        }\n        return result_1;\n    }\n    if (includes(objectsInThisPath, object)) {\n        return {\n            transformedValue: null\n        };\n    }\n    var transformationResult = transformValue(object, superJson);\n    var transformed = (_a = transformationResult === null || transformationResult === void 0 ? void 0 : transformationResult.value) !== null && _a !== void 0 ? _a : object;\n    var transformedValue = isArray(transformed) ? [] : {};\n    var innerAnnotations = {};\n    forEach(transformed, function(value, index) {\n        var recursiveResult = walker(value, identities, superJson, dedupe, __spreadArray2(__spreadArray2([], __read3(path)), [\n            index\n        ]), __spreadArray2(__spreadArray2([], __read3(objectsInThisPath)), [\n            object\n        ]), seenObjects);\n        transformedValue[index] = recursiveResult.transformedValue;\n        if (isArray(recursiveResult.annotations)) {\n            innerAnnotations[index] = recursiveResult.annotations;\n        } else if (isPlainObject(recursiveResult.annotations)) {\n            forEach(recursiveResult.annotations, function(tree, key) {\n                innerAnnotations[escapeKey(index) + \".\" + key] = tree;\n            });\n        }\n    });\n    var result = isEmptyObject(innerAnnotations) ? {\n        transformedValue,\n        annotations: !!transformationResult ? [\n            transformationResult.type\n        ] : void 0\n    } : {\n        transformedValue,\n        annotations: !!transformationResult ? [\n            transformationResult.type,\n            innerAnnotations\n        ] : innerAnnotations\n    };\n    if (!primitive) {\n        seenObjects.set(object, result);\n    }\n    return result;\n};\n// ../../node_modules/.pnpm/is-what@4.1.15/node_modules/is-what/dist/index.js\nfunction getType2(payload) {\n    return Object.prototype.toString.call(payload).slice(8, -1);\n}\nfunction isPlainObject2(payload) {\n    if (getType2(payload) !== \"Object\") return false;\n    const prototype = Object.getPrototypeOf(payload);\n    return !!prototype && prototype.constructor === Object && prototype === Object.prototype;\n}\nfunction isArray2(payload) {\n    return getType2(payload) === \"Array\";\n}\n// ../../node_modules/.pnpm/copy-anything@3.0.5/node_modules/copy-anything/dist/index.js\nfunction assignProp2(carry, key, newVal, originalObject, includeNonenumerable) {\n    const propType = ({}).propertyIsEnumerable.call(originalObject, key) ? \"enumerable\" : \"nonenumerable\";\n    if (propType === \"enumerable\") carry[key] = newVal;\n    if (includeNonenumerable && propType === \"nonenumerable\") {\n        Object.defineProperty(carry, key, {\n            value: newVal,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        });\n    }\n}\nfunction copy(target, options = {}) {\n    if (isArray2(target)) {\n        return target.map((item)=>copy(item, options));\n    }\n    if (!isPlainObject2(target)) {\n        return target;\n    }\n    const props = Object.getOwnPropertyNames(target);\n    const symbols = Object.getOwnPropertySymbols(target);\n    return [\n        ...props,\n        ...symbols\n    ].reduce((carry, key)=>{\n        if (isArray2(options.props) && !options.props.includes(key)) {\n            return carry;\n        }\n        const val = target[key];\n        const newVal = copy(val, options);\n        assignProp2(carry, key, newVal, target, options.nonenumerable);\n        return carry;\n    }, {});\n}\n// ../../node_modules/.pnpm/superjson@1.13.3/node_modules/superjson/dist/esm/index.js\nvar __assign2 = function() {\n    __assign2 = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign2.apply(this, arguments);\n};\nvar __read4 = function(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n};\nvar __spreadArray3 = function(to, from) {\n    for(var i = 0, il = from.length, j = to.length; i < il; i++, j++)to[j] = from[i];\n    return to;\n};\nvar SuperJSON = /** @class */ function() {\n    function SuperJSON2(_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.dedupe, dedupe = _c === void 0 ? false : _c;\n        this.classRegistry = new ClassRegistry();\n        this.symbolRegistry = new Registry(function(s) {\n            var _a2;\n            return (_a2 = s.description) !== null && _a2 !== void 0 ? _a2 : \"\";\n        });\n        this.customTransformerRegistry = new CustomTransformerRegistry();\n        this.allowedErrorProps = [];\n        this.dedupe = dedupe;\n    }\n    SuperJSON2.prototype.serialize = function(object) {\n        var identities = /* @__PURE__ */ new Map();\n        var output = walker(object, identities, this, this.dedupe);\n        var res = {\n            json: output.transformedValue\n        };\n        if (output.annotations) {\n            res.meta = __assign2(__assign2({}, res.meta), {\n                values: output.annotations\n            });\n        }\n        var equalityAnnotations = generateReferentialEqualityAnnotations(identities, this.dedupe);\n        if (equalityAnnotations) {\n            res.meta = __assign2(__assign2({}, res.meta), {\n                referentialEqualities: equalityAnnotations\n            });\n        }\n        return res;\n    };\n    SuperJSON2.prototype.deserialize = function(payload) {\n        var json = payload.json, meta = payload.meta;\n        var result = copy(json);\n        if (meta === null || meta === void 0 ? void 0 : meta.values) {\n            result = applyValueAnnotations(result, meta.values, this);\n        }\n        if (meta === null || meta === void 0 ? void 0 : meta.referentialEqualities) {\n            result = applyReferentialEqualityAnnotations(result, meta.referentialEqualities);\n        }\n        return result;\n    };\n    SuperJSON2.prototype.stringify = function(object) {\n        return JSON.stringify(this.serialize(object));\n    };\n    SuperJSON2.prototype.parse = function(string) {\n        return this.deserialize(JSON.parse(string));\n    };\n    SuperJSON2.prototype.registerClass = function(v, options) {\n        this.classRegistry.register(v, options);\n    };\n    SuperJSON2.prototype.registerSymbol = function(v, identifier) {\n        this.symbolRegistry.register(v, identifier);\n    };\n    SuperJSON2.prototype.registerCustom = function(transformer, name) {\n        this.customTransformerRegistry.register(__assign2({\n            name\n        }, transformer));\n    };\n    SuperJSON2.prototype.allowErrorProps = function() {\n        var _a;\n        var props = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            props[_i] = arguments[_i];\n        }\n        (_a = this.allowedErrorProps).push.apply(_a, __spreadArray3([], __read4(props)));\n    };\n    SuperJSON2.defaultInstance = new SuperJSON2();\n    SuperJSON2.serialize = SuperJSON2.defaultInstance.serialize.bind(SuperJSON2.defaultInstance);\n    SuperJSON2.deserialize = SuperJSON2.defaultInstance.deserialize.bind(SuperJSON2.defaultInstance);\n    SuperJSON2.stringify = SuperJSON2.defaultInstance.stringify.bind(SuperJSON2.defaultInstance);\n    SuperJSON2.parse = SuperJSON2.defaultInstance.parse.bind(SuperJSON2.defaultInstance);\n    SuperJSON2.registerClass = SuperJSON2.defaultInstance.registerClass.bind(SuperJSON2.defaultInstance);\n    SuperJSON2.registerSymbol = SuperJSON2.defaultInstance.registerSymbol.bind(SuperJSON2.defaultInstance);\n    SuperJSON2.registerCustom = SuperJSON2.defaultInstance.registerCustom.bind(SuperJSON2.defaultInstance);\n    SuperJSON2.allowErrorProps = SuperJSON2.defaultInstance.allowErrorProps.bind(SuperJSON2.defaultInstance);\n    return SuperJSON2;\n}();\nvar serialize = SuperJSON.serialize;\nSuperJSON.deserialize;\nvar stringify = SuperJSON.stringify;\nSuperJSON.parse;\nSuperJSON.registerClass;\nSuperJSON.registerCustom;\nSuperJSON.registerSymbol;\nSuperJSON.allowErrorProps;\n// src/utils.tsx\nfunction getQueryStatusLabel(query) {\n    return query.state.fetchStatus === \"fetching\" ? \"fetching\" : !query.getObserversCount() ? \"inactive\" : query.state.fetchStatus === \"paused\" ? \"paused\" : query.isStale() ? \"stale\" : \"fresh\";\n}\nfunction getSidedProp(prop, side) {\n    return `${prop}${side.charAt(0).toUpperCase() + side.slice(1)}`;\n}\nfunction getQueryStatusColor({ queryState, observerCount, isStale }) {\n    return queryState.fetchStatus === \"fetching\" ? \"blue\" : !observerCount ? \"gray\" : queryState.fetchStatus === \"paused\" ? \"purple\" : isStale ? \"yellow\" : \"green\";\n}\nfunction getMutationStatusColor({ status, isPaused }) {\n    return isPaused ? \"purple\" : status === \"error\" ? \"red\" : status === \"pending\" ? \"yellow\" : status === \"success\" ? \"green\" : \"gray\";\n}\nfunction getQueryStatusColorByLabel(label) {\n    return label === \"fresh\" ? \"green\" : label === \"stale\" ? \"yellow\" : label === \"paused\" ? \"purple\" : label === \"inactive\" ? \"gray\" : \"blue\";\n}\nvar displayValue = (value, beautify = false)=>{\n    const { json } = serialize(value);\n    return JSON.stringify(json, null, beautify ? 2 : void 0);\n};\nvar getStatusRank = (q)=>q.state.fetchStatus !== \"idle\" ? 0 : !q.getObserversCount() ? 3 : q.isStale() ? 2 : 1;\nvar queryHashSort = (a, b)=>a.queryHash.localeCompare(b.queryHash);\nvar dateSort = (a, b)=>a.state.dataUpdatedAt < b.state.dataUpdatedAt ? 1 : -1;\nvar statusAndDateSort = (a, b)=>{\n    if (getStatusRank(a) === getStatusRank(b)) {\n        return dateSort(a, b);\n    }\n    return getStatusRank(a) > getStatusRank(b) ? 1 : -1;\n};\nvar sortFns = {\n    status: statusAndDateSort,\n    \"query hash\": queryHashSort,\n    \"last updated\": dateSort\n};\nvar getMutationStatusRank = (m)=>m.state.isPaused ? 0 : m.state.status === \"error\" ? 2 : m.state.status === \"pending\" ? 1 : 3;\nvar mutationDateSort = (a, b)=>a.state.submittedAt < b.state.submittedAt ? 1 : -1;\nvar mutationStatusSort = (a, b)=>{\n    if (getMutationStatusRank(a) === getMutationStatusRank(b)) {\n        return mutationDateSort(a, b);\n    }\n    return getMutationStatusRank(a) > getMutationStatusRank(b) ? 1 : -1;\n};\nvar mutationSortFns = {\n    status: mutationStatusSort,\n    \"last updated\": mutationDateSort\n};\nvar convertRemToPixels = (rem)=>{\n    return rem * parseFloat(getComputedStyle(document.documentElement).fontSize);\n};\nvar getPreferredColorScheme = ()=>{\n    const [colorScheme, setColorScheme] = createSignal(\"dark\");\n    onMount(()=>{\n        const query = window.matchMedia(\"(prefers-color-scheme: dark)\");\n        setColorScheme(query.matches ? \"dark\" : \"light\");\n        const listener = (e)=>{\n            setColorScheme(e.matches ? \"dark\" : \"light\");\n        };\n        query.addEventListener(\"change\", listener);\n        onCleanup(()=>query.removeEventListener(\"change\", listener));\n    });\n    return colorScheme;\n};\nvar updateNestedDataByPath = (oldData, updatePath, value)=>{\n    if (updatePath.length === 0) {\n        return value;\n    }\n    if (oldData instanceof Map) {\n        const newData = new Map(oldData);\n        if (updatePath.length === 1) {\n            newData.set(updatePath[0], value);\n            return newData;\n        }\n        const [head, ...tail] = updatePath;\n        newData.set(head, updateNestedDataByPath(newData.get(head), tail, value));\n        return newData;\n    }\n    if (oldData instanceof Set) {\n        const setAsArray = updateNestedDataByPath(Array.from(oldData), updatePath, value);\n        return new Set(setAsArray);\n    }\n    if (Array.isArray(oldData)) {\n        const newData = [\n            ...oldData\n        ];\n        if (updatePath.length === 1) {\n            newData[updatePath[0]] = value;\n            return newData;\n        }\n        const [head, ...tail] = updatePath;\n        newData[head] = updateNestedDataByPath(newData[head], tail, value);\n        return newData;\n    }\n    if (oldData instanceof Object) {\n        const newData = {\n            ...oldData\n        };\n        if (updatePath.length === 1) {\n            newData[updatePath[0]] = value;\n            return newData;\n        }\n        const [head, ...tail] = updatePath;\n        newData[head] = updateNestedDataByPath(newData[head], tail, value);\n        return newData;\n    }\n    return oldData;\n};\nvar deleteNestedDataByPath = (oldData, deletePath)=>{\n    if (oldData instanceof Map) {\n        const newData = new Map(oldData);\n        if (deletePath.length === 1) {\n            newData.delete(deletePath[0]);\n            return newData;\n        }\n        const [head, ...tail] = deletePath;\n        newData.set(head, deleteNestedDataByPath(newData.get(head), tail));\n        return newData;\n    }\n    if (oldData instanceof Set) {\n        const setAsArray = deleteNestedDataByPath(Array.from(oldData), deletePath);\n        return new Set(setAsArray);\n    }\n    if (Array.isArray(oldData)) {\n        const newData = [\n            ...oldData\n        ];\n        if (deletePath.length === 1) {\n            return newData.filter((_, idx)=>idx.toString() !== deletePath[0]);\n        }\n        const [head, ...tail] = deletePath;\n        newData[head] = deleteNestedDataByPath(newData[head], tail);\n        return newData;\n    }\n    if (oldData instanceof Object) {\n        const newData = {\n            ...oldData\n        };\n        if (deletePath.length === 1) {\n            delete newData[deletePath[0]];\n            return newData;\n        }\n        const [head, ...tail] = deletePath;\n        newData[head] = deleteNestedDataByPath(newData[head], tail);\n        return newData;\n    }\n    return oldData;\n};\nvar setupStyleSheet = (nonce)=>{\n    if (!nonce) return;\n    const styleExists = document.querySelector(\"#_goober\");\n    if (styleExists) return;\n    const styleTag = document.createElement(\"style\");\n    const textNode = document.createTextNode(\"\");\n    styleTag.appendChild(textNode);\n    styleTag.id = \"_goober\";\n    styleTag.setAttribute(\"nonce\", nonce);\n    document.head.appendChild(styleTag);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-devtools/build/chunk/UF7WX6DB.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-devtools/build/dev.js":
/*!************************************************************!*\
  !*** ./node_modules/@tanstack/query-devtools/build/dev.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TanstackQueryDevtools: () => (/* binding */ TanstackQueryDevtools)\n/* harmony export */ });\n/* harmony import */ var _chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk/UF7WX6DB.js */ \"(ssr)/./node_modules/@tanstack/query-devtools/build/chunk/UF7WX6DB.js\");\n\n// src/index.tsx\nvar TanstackQueryDevtools = class {\n    #client;\n    #onlineManager;\n    #queryFlavor;\n    #version;\n    #isMounted;\n    #styleNonce;\n    #buttonPosition;\n    #position;\n    #initialIsOpen;\n    #errorTypes;\n    #Component;\n    #dispose;\n    constructor(config){\n        this.#isMounted = false;\n        const { client, queryFlavor, version, onlineManager, buttonPosition, position, initialIsOpen, errorTypes, styleNonce } = config;\n        this.#client = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(client);\n        this.#queryFlavor = queryFlavor;\n        this.#version = version;\n        this.#onlineManager = onlineManager;\n        this.#styleNonce = styleNonce;\n        this.#buttonPosition = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(buttonPosition);\n        this.#position = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(position);\n        this.#initialIsOpen = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(initialIsOpen);\n        this.#errorTypes = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createSignal)(errorTypes);\n    }\n    setButtonPosition(position) {\n        this.#buttonPosition[1](position);\n    }\n    setPosition(position) {\n        this.#position[1](position);\n    }\n    setInitialIsOpen(isOpen) {\n        this.#initialIsOpen[1](isOpen);\n    }\n    setErrorTypes(errorTypes) {\n        this.#errorTypes[1](errorTypes);\n    }\n    setClient(client) {\n        this.#client[1](client);\n    }\n    mount(el) {\n        if (this.#isMounted) {\n            throw new Error(\"Devtools is already mounted\");\n        }\n        const dispose = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.render)(()=>{\n            const [btnPosition] = this.#buttonPosition;\n            const [pos] = this.#position;\n            const [isOpen] = this.#initialIsOpen;\n            const [errors] = this.#errorTypes;\n            const [queryClient] = this.#client;\n            let Devtools;\n            if (this.#Component) {\n                Devtools = this.#Component;\n            } else {\n                Devtools = (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.lazy)(()=>__webpack_require__.e(/*! import() */ \"vendor-chunks/@tanstack\").then(__webpack_require__.bind(__webpack_require__, /*! ./Devtools/A6DP7BKI.js */ \"(ssr)/./node_modules/@tanstack/query-devtools/build/Devtools/A6DP7BKI.js\")));\n                this.#Component = Devtools;\n            }\n            (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.setupStyleSheet)(this.#styleNonce);\n            const _self$ = this;\n            return (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.createComponent)(Devtools, (0,_chunk_UF7WX6DB_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps)({\n                get queryFlavor () {\n                    return _self$.#queryFlavor;\n                },\n                get version () {\n                    return _self$.#version;\n                },\n                get onlineManager () {\n                    return _self$.#onlineManager;\n                }\n            }, {\n                get client () {\n                    return queryClient();\n                },\n                get buttonPosition () {\n                    return btnPosition();\n                },\n                get position () {\n                    return pos();\n                },\n                get initialIsOpen () {\n                    return isOpen();\n                },\n                get errorTypes () {\n                    return errors();\n                }\n            }));\n        }, el);\n        this.#isMounted = true;\n        this.#dispose = dispose;\n    }\n    unmount() {\n        if (!this.#isMounted) {\n            throw new Error(\"Devtools is not mounted\");\n        }\n        this.#dispose?.();\n        this.#isMounted = false;\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-devtools/build/dev.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query-devtools/build/modern/devtools.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tanstack/react-query-devtools/build/modern/devtools.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReactQueryDevtools: () => (/* binding */ ReactQueryDevtools)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/onlineManager.js\");\n/* harmony import */ var _tanstack_query_devtools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tanstack/query-devtools */ \"(ssr)/./node_modules/@tanstack/query-devtools/build/dev.js\");\n/* __next_internal_client_entry_do_not_use__ ReactQueryDevtools auto */ // src/devtools.tsx\n\n\n\nfunction ReactQueryDevtools(props) {\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_2__.useQueryClient)();\n    const client = props.client || queryClient;\n    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const { buttonPosition, position, initialIsOpen, errorTypes, styleNonce } = props;\n    const [devtools] = react__WEBPACK_IMPORTED_MODULE_0__.useState(new _tanstack_query_devtools__WEBPACK_IMPORTED_MODULE_1__.TanstackQueryDevtools({\n        client,\n        queryFlavor: \"React Query\",\n        version: \"5\",\n        onlineManager: _tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__.onlineManager,\n        buttonPosition,\n        position,\n        initialIsOpen,\n        errorTypes,\n        styleNonce\n    }));\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        devtools.setClient(client);\n    }, [\n        client,\n        devtools\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (buttonPosition) {\n            devtools.setButtonPosition(buttonPosition);\n        }\n    }, [\n        buttonPosition,\n        devtools\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (position) {\n            devtools.setPosition(position);\n        }\n    }, [\n        position,\n        devtools\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        devtools.setInitialIsOpen(initialIsOpen || false);\n    }, [\n        initialIsOpen,\n        devtools\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        devtools.setErrorTypes(errorTypes || []);\n    }, [\n        errorTypes,\n        devtools\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (ref.current) {\n            devtools.mount(ref.current);\n        }\n        return ()=>{\n            devtools.unmount();\n        };\n    }, [\n        devtools\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"tsqd-parent-container\",\n        ref\n    });\n}\n //# sourceMappingURL=devtools.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5LWRldnRvb2xzL2J1aWxkL21vZGVybi9kZXZ0b29scy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozt3RUFFQSxtQkFBbUI7QUFDWTtBQUN1QztBQUNMO0FBQ2pFLFNBQVNJLG1CQUFtQkMsS0FBSztJQUMvQixNQUFNQyxjQUFjSixxRUFBY0E7SUFDbEMsTUFBTUssU0FBU0YsTUFBTUUsTUFBTSxJQUFJRDtJQUMvQixNQUFNRSxNQUFNUix5Q0FBWSxDQUFDO0lBQ3pCLE1BQU0sRUFBRVUsY0FBYyxFQUFFQyxRQUFRLEVBQUVDLGFBQWEsRUFBRUMsVUFBVSxFQUFFQyxVQUFVLEVBQUUsR0FBR1Q7SUFDNUUsTUFBTSxDQUFDVSxTQUFTLEdBQUdmLDJDQUFjLENBQy9CLElBQUlHLDJFQUFxQkEsQ0FBQztRQUN4Qkk7UUFDQVUsYUFBYTtRQUNiQyxTQUFTO1FBQ1RqQixhQUFhQSxrRUFBQUE7UUFDYlM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7SUFDRjtJQUVGZCw0Q0FBZSxDQUFDO1FBQ2RlLFNBQVNLLFNBQVMsQ0FBQ2I7SUFDckIsR0FBRztRQUFDQTtRQUFRUTtLQUFTO0lBQ3JCZiw0Q0FBZSxDQUFDO1FBQ2QsSUFBSVUsZ0JBQWdCO1lBQ2xCSyxTQUFTTSxpQkFBaUIsQ0FBQ1g7UUFDN0I7SUFDRixHQUFHO1FBQUNBO1FBQWdCSztLQUFTO0lBQzdCZiw0Q0FBZSxDQUFDO1FBQ2QsSUFBSVcsVUFBVTtZQUNaSSxTQUFTTyxXQUFXLENBQUNYO1FBQ3ZCO0lBQ0YsR0FBRztRQUFDQTtRQUFVSTtLQUFTO0lBQ3ZCZiw0Q0FBZSxDQUFDO1FBQ2RlLFNBQVNRLGdCQUFnQixDQUFDWCxpQkFBaUI7SUFDN0MsR0FBRztRQUFDQTtRQUFlRztLQUFTO0lBQzVCZiw0Q0FBZSxDQUFDO1FBQ2RlLFNBQVNTLGFBQWEsQ0FBQ1gsY0FBYyxFQUFFO0lBQ3pDLEdBQUc7UUFBQ0E7UUFBWUU7S0FBUztJQUN6QmYsNENBQWUsQ0FBQztRQUNkLElBQUlRLElBQUlpQixPQUFPLEVBQUU7WUFDZlYsU0FBU1csS0FBSyxDQUFDbEIsSUFBSWlCLE9BQU87UUFDNUI7UUFDQSxPQUFPO1lBQ0xWLFNBQVNZLE9BQU87UUFDbEI7SUFDRixHQUFHO1FBQUNaO0tBQVM7SUFDYixPQUFPLGFBQWEsaUJBQUdmLGdEQUFtQixDQUFDLE9BQU87UUFBRTZCLFdBQVc7UUFBeUJyQjtJQUFJO0FBQzlGO0FBR0UsQ0FDRixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2VfY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS1kZXZ0b29scy9idWlsZC9tb2Rlcm4vZGV2dG9vbHMuanM/YzkyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcblxuLy8gc3JjL2RldnRvb2xzLnRzeFxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBvbmxpbmVNYW5hZ2VyLCB1c2VRdWVyeUNsaWVudCB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcbmltcG9ydCB7IFRhbnN0YWNrUXVlcnlEZXZ0b29scyB9IGZyb20gXCJAdGFuc3RhY2svcXVlcnktZGV2dG9vbHNcIjtcbmZ1bmN0aW9uIFJlYWN0UXVlcnlEZXZ0b29scyhwcm9wcykge1xuICBjb25zdCBxdWVyeUNsaWVudCA9IHVzZVF1ZXJ5Q2xpZW50KCk7XG4gIGNvbnN0IGNsaWVudCA9IHByb3BzLmNsaWVudCB8fCBxdWVyeUNsaWVudDtcbiAgY29uc3QgcmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCB7IGJ1dHRvblBvc2l0aW9uLCBwb3NpdGlvbiwgaW5pdGlhbElzT3BlbiwgZXJyb3JUeXBlcywgc3R5bGVOb25jZSB9ID0gcHJvcHM7XG4gIGNvbnN0IFtkZXZ0b29sc10gPSBSZWFjdC51c2VTdGF0ZShcbiAgICBuZXcgVGFuc3RhY2tRdWVyeURldnRvb2xzKHtcbiAgICAgIGNsaWVudCxcbiAgICAgIHF1ZXJ5Rmxhdm9yOiBcIlJlYWN0IFF1ZXJ5XCIsXG4gICAgICB2ZXJzaW9uOiBcIjVcIixcbiAgICAgIG9ubGluZU1hbmFnZXIsXG4gICAgICBidXR0b25Qb3NpdGlvbixcbiAgICAgIHBvc2l0aW9uLFxuICAgICAgaW5pdGlhbElzT3BlbixcbiAgICAgIGVycm9yVHlwZXMsXG4gICAgICBzdHlsZU5vbmNlXG4gICAgfSlcbiAgKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBkZXZ0b29scy5zZXRDbGllbnQoY2xpZW50KTtcbiAgfSwgW2NsaWVudCwgZGV2dG9vbHNdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYnV0dG9uUG9zaXRpb24pIHtcbiAgICAgIGRldnRvb2xzLnNldEJ1dHRvblBvc2l0aW9uKGJ1dHRvblBvc2l0aW9uKTtcbiAgICB9XG4gIH0sIFtidXR0b25Qb3NpdGlvbiwgZGV2dG9vbHNdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocG9zaXRpb24pIHtcbiAgICAgIGRldnRvb2xzLnNldFBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICB9XG4gIH0sIFtwb3NpdGlvbiwgZGV2dG9vbHNdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBkZXZ0b29scy5zZXRJbml0aWFsSXNPcGVuKGluaXRpYWxJc09wZW4gfHwgZmFsc2UpO1xuICB9LCBbaW5pdGlhbElzT3BlbiwgZGV2dG9vbHNdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBkZXZ0b29scy5zZXRFcnJvclR5cGVzKGVycm9yVHlwZXMgfHwgW10pO1xuICB9LCBbZXJyb3JUeXBlcywgZGV2dG9vbHNdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocmVmLmN1cnJlbnQpIHtcbiAgICAgIGRldnRvb2xzLm1vdW50KHJlZi5jdXJyZW50KTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRldnRvb2xzLnVubW91bnQoKTtcbiAgICB9O1xuICB9LCBbZGV2dG9vbHNdKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInRzcWQtcGFyZW50LWNvbnRhaW5lclwiLCByZWYgfSk7XG59XG5leHBvcnQge1xuICBSZWFjdFF1ZXJ5RGV2dG9vbHNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZXZ0b29scy5qcy5tYXAiXSwibmFtZXMiOlsiUmVhY3QiLCJvbmxpbmVNYW5hZ2VyIiwidXNlUXVlcnlDbGllbnQiLCJUYW5zdGFja1F1ZXJ5RGV2dG9vbHMiLCJSZWFjdFF1ZXJ5RGV2dG9vbHMiLCJwcm9wcyIsInF1ZXJ5Q2xpZW50IiwiY2xpZW50IiwicmVmIiwidXNlUmVmIiwiYnV0dG9uUG9zaXRpb24iLCJwb3NpdGlvbiIsImluaXRpYWxJc09wZW4iLCJlcnJvclR5cGVzIiwic3R5bGVOb25jZSIsImRldnRvb2xzIiwidXNlU3RhdGUiLCJxdWVyeUZsYXZvciIsInZlcnNpb24iLCJ1c2VFZmZlY3QiLCJzZXRDbGllbnQiLCJzZXRCdXR0b25Qb3NpdGlvbiIsInNldFBvc2l0aW9uIiwic2V0SW5pdGlhbElzT3BlbiIsInNldEVycm9yVHlwZXMiLCJjdXJyZW50IiwibW91bnQiLCJ1bm1vdW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query-devtools/build/modern/devtools.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query-devtools/build/modern/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tanstack/react-query-devtools/build/modern/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReactQueryDevtools: () => (/* binding */ ReactQueryDevtools2)\n/* harmony export */ });\n/* harmony import */ var _devtools_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./devtools.js */ \"(ssr)/./node_modules/@tanstack/react-query-devtools/build/modern/devtools.js\");\n/* __next_internal_client_entry_do_not_use__ ReactQueryDevtools auto */ // src/index.ts\n\nvar ReactQueryDevtools2 =  false ? 0 : _devtools_js__WEBPACK_IMPORTED_MODULE_0__.ReactQueryDevtools;\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5LWRldnRvb2xzL2J1aWxkL21vZGVybi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozt3RUFFQSxlQUFlO0FBQzJCO0FBQzFDLElBQUlDLHNCQUFzQkMsTUFBc0MsR0FBRyxDQUVsRSxHQUFHRiw0REFBMkI7QUFHN0IsQ0FDRixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2VfY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS1kZXZ0b29scy9idWlsZC9tb2Rlcm4vaW5kZXguanM/YWRlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcblxuLy8gc3JjL2luZGV4LnRzXG5pbXBvcnQgKiBhcyBkZXZ0b29scyBmcm9tIFwiLi9kZXZ0b29scy5qc1wiO1xudmFyIFJlYWN0UXVlcnlEZXZ0b29sczIgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJkZXZlbG9wbWVudFwiID8gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBudWxsO1xufSA6IGRldnRvb2xzLlJlYWN0UXVlcnlEZXZ0b29scztcbmV4cG9ydCB7XG4gIFJlYWN0UXVlcnlEZXZ0b29sczIgYXMgUmVhY3RRdWVyeURldnRvb2xzXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbImRldnRvb2xzIiwiUmVhY3RRdWVyeURldnRvb2xzMiIsInByb2Nlc3MiLCJSZWFjdFF1ZXJ5RGV2dG9vbHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query-devtools/build/modern/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryClientContext: () => (/* binding */ QueryClientContext),\n/* harmony export */   QueryClientProvider: () => (/* binding */ QueryClientProvider),\n/* harmony export */   useQueryClient: () => (/* binding */ useQueryClient)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ QueryClientContext,QueryClientProvider,useQueryClient auto */ // src/QueryClientProvider.tsx\n\nvar QueryClientContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0);\nvar useQueryClient = (queryClient)=>{\n    const client = react__WEBPACK_IMPORTED_MODULE_0__.useContext(QueryClientContext);\n    if (queryClient) {\n        return queryClient;\n    }\n    if (!client) {\n        throw new Error(\"No QueryClient set, use QueryClientProvider to set one\");\n    }\n    return client;\n};\nvar QueryClientProvider = ({ client, children })=>{\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        client.mount();\n        return ()=>{\n            client.unmount();\n        };\n    }, [\n        client\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QueryClientContext.Provider, {\n        value: client\n    }, children);\n};\n //# sourceMappingURL=QueryClientProvider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL21vZGVybi9RdWVyeUNsaWVudFByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7MkdBRUEsOEJBQThCO0FBQ0M7QUFDL0IsSUFBSUMsbUNBQXFCRCxnREFBbUIsQ0FDMUMsS0FBSztBQUVQLElBQUlHLGlCQUFpQixDQUFDQztJQUNwQixNQUFNQyxTQUFTTCw2Q0FBZ0IsQ0FBQ0M7SUFDaEMsSUFBSUcsYUFBYTtRQUNmLE9BQU9BO0lBQ1Q7SUFDQSxJQUFJLENBQUNDLFFBQVE7UUFDWCxNQUFNLElBQUlFLE1BQU07SUFDbEI7SUFDQSxPQUFPRjtBQUNUO0FBQ0EsSUFBSUcsc0JBQXNCLENBQUMsRUFDekJILE1BQU0sRUFDTkksUUFBUSxFQUNUO0lBQ0NULDRDQUFlLENBQUM7UUFDZEssT0FBT00sS0FBSztRQUNaLE9BQU87WUFDTE4sT0FBT08sT0FBTztRQUNoQjtJQUNGLEdBQUc7UUFBQ1A7S0FBTztJQUNYLE9BQU8sYUFBYSxpQkFBR0wsZ0RBQW1CLENBQUNDLG1CQUFtQmEsUUFBUSxFQUFFO1FBQUVDLE9BQU9WO0lBQU8sR0FBR0k7QUFDN0Y7QUFLRSxDQUNGLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZV9jbGllbnQvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL21vZGVybi9RdWVyeUNsaWVudFByb3ZpZGVyLmpzPzE4ZDYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbi8vIHNyYy9RdWVyeUNsaWVudFByb3ZpZGVyLnRzeFxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG52YXIgUXVlcnlDbGllbnRDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChcbiAgdm9pZCAwXG4pO1xudmFyIHVzZVF1ZXJ5Q2xpZW50ID0gKHF1ZXJ5Q2xpZW50KSA9PiB7XG4gIGNvbnN0IGNsaWVudCA9IFJlYWN0LnVzZUNvbnRleHQoUXVlcnlDbGllbnRDb250ZXh0KTtcbiAgaWYgKHF1ZXJ5Q2xpZW50KSB7XG4gICAgcmV0dXJuIHF1ZXJ5Q2xpZW50O1xuICB9XG4gIGlmICghY2xpZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gUXVlcnlDbGllbnQgc2V0LCB1c2UgUXVlcnlDbGllbnRQcm92aWRlciB0byBzZXQgb25lXCIpO1xuICB9XG4gIHJldHVybiBjbGllbnQ7XG59O1xudmFyIFF1ZXJ5Q2xpZW50UHJvdmlkZXIgPSAoe1xuICBjbGllbnQsXG4gIGNoaWxkcmVuXG59KSA9PiB7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY2xpZW50Lm1vdW50KCk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNsaWVudC51bm1vdW50KCk7XG4gICAgfTtcbiAgfSwgW2NsaWVudF0pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUXVlcnlDbGllbnRDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBjbGllbnQgfSwgY2hpbGRyZW4pO1xufTtcbmV4cG9ydCB7XG4gIFF1ZXJ5Q2xpZW50Q29udGV4dCxcbiAgUXVlcnlDbGllbnRQcm92aWRlcixcbiAgdXNlUXVlcnlDbGllbnRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1RdWVyeUNsaWVudFByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJSZWFjdCIsIlF1ZXJ5Q2xpZW50Q29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJ1c2VRdWVyeUNsaWVudCIsInF1ZXJ5Q2xpZW50IiwiY2xpZW50IiwidXNlQ29udGV4dCIsIkVycm9yIiwiUXVlcnlDbGllbnRQcm92aWRlciIsImNoaWxkcmVuIiwidXNlRWZmZWN0IiwibW91bnQiLCJ1bm1vdW50IiwiY3JlYXRlRWxlbWVudCIsIlByb3ZpZGVyIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/modern/QueryErrorResetBoundary.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/modern/QueryErrorResetBoundary.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryErrorResetBoundary: () => (/* binding */ QueryErrorResetBoundary),\n/* harmony export */   useQueryErrorResetBoundary: () => (/* binding */ useQueryErrorResetBoundary)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ QueryErrorResetBoundary,useQueryErrorResetBoundary auto */ // src/QueryErrorResetBoundary.tsx\n\nfunction createValue() {\n    let isReset = false;\n    return {\n        clearReset: ()=>{\n            isReset = false;\n        },\n        reset: ()=>{\n            isReset = true;\n        },\n        isReset: ()=>{\n            return isReset;\n        }\n    };\n}\nvar QueryErrorResetBoundaryContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(createValue());\nvar useQueryErrorResetBoundary = ()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(QueryErrorResetBoundaryContext);\nvar QueryErrorResetBoundary = ({ children })=>{\n    const [value] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>createValue());\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QueryErrorResetBoundaryContext.Provider, {\n        value\n    }, typeof children === \"function\" ? children(value) : children);\n};\n //# sourceMappingURL=QueryErrorResetBoundary.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL21vZGVybi9RdWVyeUVycm9yUmVzZXRCb3VuZGFyeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7d0dBRUEsa0NBQWtDO0FBQ0g7QUFDL0IsU0FBU0M7SUFDUCxJQUFJQyxVQUFVO0lBQ2QsT0FBTztRQUNMQyxZQUFZO1lBQ1ZELFVBQVU7UUFDWjtRQUNBRSxPQUFPO1lBQ0xGLFVBQVU7UUFDWjtRQUNBQSxTQUFTO1lBQ1AsT0FBT0E7UUFDVDtJQUNGO0FBQ0Y7QUFDQSxJQUFJRywrQ0FBaUNMLGdEQUFtQixDQUFDQztBQUN6RCxJQUFJTSw2QkFBNkIsSUFBTVAsNkNBQWdCLENBQUNLO0FBQ3hELElBQUlJLDBCQUEwQixDQUFDLEVBQzdCQyxRQUFRLEVBQ1Q7SUFDQyxNQUFNLENBQUNDLE1BQU0sR0FBR1gsMkNBQWMsQ0FBQyxJQUFNQztJQUNyQyxPQUFPLGFBQWEsaUJBQUdELGdEQUFtQixDQUFDSywrQkFBK0JTLFFBQVEsRUFBRTtRQUFFSDtJQUFNLEdBQUcsT0FBT0QsYUFBYSxhQUFhQSxTQUFTQyxTQUFTRDtBQUNwSjtBQUlFLENBQ0YsbURBQW1EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlX2NsaWVudC8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcmVhY3QtcXVlcnkvYnVpbGQvbW9kZXJuL1F1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5LmpzPzRkN2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbi8vIHNyYy9RdWVyeUVycm9yUmVzZXRCb3VuZGFyeS50c3hcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gY3JlYXRlVmFsdWUoKSB7XG4gIGxldCBpc1Jlc2V0ID0gZmFsc2U7XG4gIHJldHVybiB7XG4gICAgY2xlYXJSZXNldDogKCkgPT4ge1xuICAgICAgaXNSZXNldCA9IGZhbHNlO1xuICAgIH0sXG4gICAgcmVzZXQ6ICgpID0+IHtcbiAgICAgIGlzUmVzZXQgPSB0cnVlO1xuICAgIH0sXG4gICAgaXNSZXNldDogKCkgPT4ge1xuICAgICAgcmV0dXJuIGlzUmVzZXQ7XG4gICAgfVxuICB9O1xufVxudmFyIFF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5Q29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoY3JlYXRlVmFsdWUoKSk7XG52YXIgdXNlUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkgPSAoKSA9PiBSZWFjdC51c2VDb250ZXh0KFF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5Q29udGV4dCk7XG52YXIgUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkgPSAoe1xuICBjaGlsZHJlblxufSkgPT4ge1xuICBjb25zdCBbdmFsdWVdID0gUmVhY3QudXNlU3RhdGUoKCkgPT4gY3JlYXRlVmFsdWUoKSk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChRdWVyeUVycm9yUmVzZXRCb3VuZGFyeUNvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWUgfSwgdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBjaGlsZHJlbih2YWx1ZSkgOiBjaGlsZHJlbik7XG59O1xuZXhwb3J0IHtcbiAgUXVlcnlFcnJvclJlc2V0Qm91bmRhcnksXG4gIHVzZVF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UXVlcnlFcnJvclJlc2V0Qm91bmRhcnkuanMubWFwIl0sIm5hbWVzIjpbIlJlYWN0IiwiY3JlYXRlVmFsdWUiLCJpc1Jlc2V0IiwiY2xlYXJSZXNldCIsInJlc2V0IiwiUXVlcnlFcnJvclJlc2V0Qm91bmRhcnlDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsInVzZVF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5IiwidXNlQ29udGV4dCIsIlF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5IiwiY2hpbGRyZW4iLCJ2YWx1ZSIsInVzZVN0YXRlIiwiY3JlYXRlRWxlbWVudCIsIlByb3ZpZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/modern/QueryErrorResetBoundary.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/modern/errorBoundaryUtils.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/modern/errorBoundaryUtils.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ensurePreventErrorBoundaryRetry: () => (/* binding */ ensurePreventErrorBoundaryRetry),\n/* harmony export */   getHasError: () => (/* binding */ getHasError),\n/* harmony export */   useClearResetErrorBoundary: () => (/* binding */ useClearResetErrorBoundary)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/react-query/build/modern/utils.js\");\n/* __next_internal_client_entry_do_not_use__ ensurePreventErrorBoundaryRetry,getHasError,useClearResetErrorBoundary auto */ // src/errorBoundaryUtils.ts\n\n\nvar ensurePreventErrorBoundaryRetry = (options, errorResetBoundary)=>{\n    if (options.suspense || options.throwOnError) {\n        if (!errorResetBoundary.isReset()) {\n            options.retryOnMount = false;\n        }\n    }\n};\nvar useClearResetErrorBoundary = (errorResetBoundary)=>{\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        errorResetBoundary.clearReset();\n    }, [\n        errorResetBoundary\n    ]);\n};\nvar getHasError = ({ result, errorResetBoundary, throwOnError, query })=>{\n    return result.isError && !errorResetBoundary.isReset() && !result.isFetching && query && (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.shouldThrowError)(throwOnError, [\n        result.error,\n        query\n    ]);\n};\n //# sourceMappingURL=errorBoundaryUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL21vZGVybi9lcnJvckJvdW5kYXJ5VXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7NEhBRUEsNEJBQTRCO0FBQ0c7QUFDZTtBQUM5QyxJQUFJRSxrQ0FBa0MsQ0FBQ0MsU0FBU0M7SUFDOUMsSUFBSUQsUUFBUUUsUUFBUSxJQUFJRixRQUFRRyxZQUFZLEVBQUU7UUFDNUMsSUFBSSxDQUFDRixtQkFBbUJHLE9BQU8sSUFBSTtZQUNqQ0osUUFBUUssWUFBWSxHQUFHO1FBQ3pCO0lBQ0Y7QUFDRjtBQUNBLElBQUlDLDZCQUE2QixDQUFDTDtJQUNoQ0osNENBQWUsQ0FBQztRQUNkSSxtQkFBbUJPLFVBQVU7SUFDL0IsR0FBRztRQUFDUDtLQUFtQjtBQUN6QjtBQUNBLElBQUlRLGNBQWMsQ0FBQyxFQUNqQkMsTUFBTSxFQUNOVCxrQkFBa0IsRUFDbEJFLFlBQVksRUFDWlEsS0FBSyxFQUNOO0lBQ0MsT0FBT0QsT0FBT0UsT0FBTyxJQUFJLENBQUNYLG1CQUFtQkcsT0FBTyxNQUFNLENBQUNNLE9BQU9HLFVBQVUsSUFBSUYsU0FBU2IsMkRBQWdCQSxDQUFDSyxjQUFjO1FBQUNPLE9BQU9JLEtBQUs7UUFBRUg7S0FBTTtBQUMvSTtBQUtFLENBQ0YsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlX2NsaWVudC8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcmVhY3QtcXVlcnkvYnVpbGQvbW9kZXJuL2Vycm9yQm91bmRhcnlVdGlscy5qcz9mZjAzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG4vLyBzcmMvZXJyb3JCb3VuZGFyeVV0aWxzLnRzXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHNob3VsZFRocm93RXJyb3IgfSBmcm9tIFwiLi91dGlscy5qc1wiO1xudmFyIGVuc3VyZVByZXZlbnRFcnJvckJvdW5kYXJ5UmV0cnkgPSAob3B0aW9ucywgZXJyb3JSZXNldEJvdW5kYXJ5KSA9PiB7XG4gIGlmIChvcHRpb25zLnN1c3BlbnNlIHx8IG9wdGlvbnMudGhyb3dPbkVycm9yKSB7XG4gICAgaWYgKCFlcnJvclJlc2V0Qm91bmRhcnkuaXNSZXNldCgpKSB7XG4gICAgICBvcHRpb25zLnJldHJ5T25Nb3VudCA9IGZhbHNlO1xuICAgIH1cbiAgfVxufTtcbnZhciB1c2VDbGVhclJlc2V0RXJyb3JCb3VuZGFyeSA9IChlcnJvclJlc2V0Qm91bmRhcnkpID0+IHtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBlcnJvclJlc2V0Qm91bmRhcnkuY2xlYXJSZXNldCgpO1xuICB9LCBbZXJyb3JSZXNldEJvdW5kYXJ5XSk7XG59O1xudmFyIGdldEhhc0Vycm9yID0gKHtcbiAgcmVzdWx0LFxuICBlcnJvclJlc2V0Qm91bmRhcnksXG4gIHRocm93T25FcnJvcixcbiAgcXVlcnlcbn0pID0+IHtcbiAgcmV0dXJuIHJlc3VsdC5pc0Vycm9yICYmICFlcnJvclJlc2V0Qm91bmRhcnkuaXNSZXNldCgpICYmICFyZXN1bHQuaXNGZXRjaGluZyAmJiBxdWVyeSAmJiBzaG91bGRUaHJvd0Vycm9yKHRocm93T25FcnJvciwgW3Jlc3VsdC5lcnJvciwgcXVlcnldKTtcbn07XG5leHBvcnQge1xuICBlbnN1cmVQcmV2ZW50RXJyb3JCb3VuZGFyeVJldHJ5LFxuICBnZXRIYXNFcnJvcixcbiAgdXNlQ2xlYXJSZXNldEVycm9yQm91bmRhcnlcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvckJvdW5kYXJ5VXRpbHMuanMubWFwIl0sIm5hbWVzIjpbIlJlYWN0Iiwic2hvdWxkVGhyb3dFcnJvciIsImVuc3VyZVByZXZlbnRFcnJvckJvdW5kYXJ5UmV0cnkiLCJvcHRpb25zIiwiZXJyb3JSZXNldEJvdW5kYXJ5Iiwic3VzcGVuc2UiLCJ0aHJvd09uRXJyb3IiLCJpc1Jlc2V0IiwicmV0cnlPbk1vdW50IiwidXNlQ2xlYXJSZXNldEVycm9yQm91bmRhcnkiLCJ1c2VFZmZlY3QiLCJjbGVhclJlc2V0IiwiZ2V0SGFzRXJyb3IiLCJyZXN1bHQiLCJxdWVyeSIsImlzRXJyb3IiLCJpc0ZldGNoaW5nIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/modern/errorBoundaryUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/modern/isRestoring.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/modern/isRestoring.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IsRestoringProvider: () => (/* binding */ IsRestoringProvider),\n/* harmony export */   useIsRestoring: () => (/* binding */ useIsRestoring)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ IsRestoringProvider,useIsRestoring auto */ // src/isRestoring.ts\n\nvar IsRestoringContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(false);\nvar useIsRestoring = ()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(IsRestoringContext);\nvar IsRestoringProvider = IsRestoringContext.Provider;\n //# sourceMappingURL=isRestoring.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL21vZGVybi9pc1Jlc3RvcmluZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7d0ZBRUEscUJBQXFCO0FBQ1U7QUFDL0IsSUFBSUMsbUNBQXFCRCxnREFBbUIsQ0FBQztBQUM3QyxJQUFJRyxpQkFBaUIsSUFBTUgsNkNBQWdCLENBQUNDO0FBQzVDLElBQUlJLHNCQUFzQkosbUJBQW1CSyxRQUFRO0FBSW5ELENBQ0YsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlX2NsaWVudC8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcmVhY3QtcXVlcnkvYnVpbGQvbW9kZXJuL2lzUmVzdG9yaW5nLmpzPzM3ODYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbi8vIHNyYy9pc1Jlc3RvcmluZy50c1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG52YXIgSXNSZXN0b3JpbmdDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChmYWxzZSk7XG52YXIgdXNlSXNSZXN0b3JpbmcgPSAoKSA9PiBSZWFjdC51c2VDb250ZXh0KElzUmVzdG9yaW5nQ29udGV4dCk7XG52YXIgSXNSZXN0b3JpbmdQcm92aWRlciA9IElzUmVzdG9yaW5nQ29udGV4dC5Qcm92aWRlcjtcbmV4cG9ydCB7XG4gIElzUmVzdG9yaW5nUHJvdmlkZXIsXG4gIHVzZUlzUmVzdG9yaW5nXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNSZXN0b3JpbmcuanMubWFwIl0sIm5hbWVzIjpbIlJlYWN0IiwiSXNSZXN0b3JpbmdDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsInVzZUlzUmVzdG9yaW5nIiwidXNlQ29udGV4dCIsIklzUmVzdG9yaW5nUHJvdmlkZXIiLCJQcm92aWRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/modern/isRestoring.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/modern/suspense.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/modern/suspense.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultThrowOnError: () => (/* binding */ defaultThrowOnError),\n/* harmony export */   ensureStaleTime: () => (/* binding */ ensureStaleTime),\n/* harmony export */   fetchOptimistic: () => (/* binding */ fetchOptimistic),\n/* harmony export */   shouldSuspend: () => (/* binding */ shouldSuspend),\n/* harmony export */   willFetch: () => (/* binding */ willFetch)\n/* harmony export */ });\n// src/suspense.ts\nvar defaultThrowOnError = (_error, query)=>typeof query.state.data === \"undefined\";\nvar ensureStaleTime = (defaultedOptions)=>{\n    if (defaultedOptions.suspense) {\n        if (typeof defaultedOptions.staleTime !== \"number\") {\n            defaultedOptions.staleTime = 1e3;\n        }\n    }\n};\nvar willFetch = (result, isRestoring)=>result.isLoading && result.isFetching && !isRestoring;\nvar shouldSuspend = (defaultedOptions, result)=>defaultedOptions?.suspense && result.isPending;\nvar fetchOptimistic = (defaultedOptions, observer, errorResetBoundary)=>observer.fetchOptimistic(defaultedOptions).catch(()=>{\n        errorResetBoundary.clearReset();\n    });\n //# sourceMappingURL=suspense.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL21vZGVybi9zdXNwZW5zZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLGtCQUFrQjtBQUNsQixJQUFJQSxzQkFBc0IsQ0FBQ0MsUUFBUUMsUUFBVSxPQUFPQSxNQUFNQyxLQUFLLENBQUNDLElBQUksS0FBSztBQUN6RSxJQUFJQyxrQkFBa0IsQ0FBQ0M7SUFDckIsSUFBSUEsaUJBQWlCQyxRQUFRLEVBQUU7UUFDN0IsSUFBSSxPQUFPRCxpQkFBaUJFLFNBQVMsS0FBSyxVQUFVO1lBQ2xERixpQkFBaUJFLFNBQVMsR0FBRztRQUMvQjtJQUNGO0FBQ0Y7QUFDQSxJQUFJQyxZQUFZLENBQUNDLFFBQVFDLGNBQWdCRCxPQUFPRSxTQUFTLElBQUlGLE9BQU9HLFVBQVUsSUFBSSxDQUFDRjtBQUNuRixJQUFJRyxnQkFBZ0IsQ0FBQ1Isa0JBQWtCSSxTQUFXSixrQkFBa0JDLFlBQVlHLE9BQU9LLFNBQVM7QUFDaEcsSUFBSUMsa0JBQWtCLENBQUNWLGtCQUFrQlcsVUFBVUMscUJBQXVCRCxTQUFTRCxlQUFlLENBQUNWLGtCQUFrQmEsS0FBSyxDQUFDO1FBQ3pIRCxtQkFBbUJFLFVBQVU7SUFDL0I7QUFPRSxDQUNGLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZV9jbGllbnQvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL21vZGVybi9zdXNwZW5zZS5qcz8xYzEzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9zdXNwZW5zZS50c1xudmFyIGRlZmF1bHRUaHJvd09uRXJyb3IgPSAoX2Vycm9yLCBxdWVyeSkgPT4gdHlwZW9mIHF1ZXJ5LnN0YXRlLmRhdGEgPT09IFwidW5kZWZpbmVkXCI7XG52YXIgZW5zdXJlU3RhbGVUaW1lID0gKGRlZmF1bHRlZE9wdGlvbnMpID0+IHtcbiAgaWYgKGRlZmF1bHRlZE9wdGlvbnMuc3VzcGVuc2UpIHtcbiAgICBpZiAodHlwZW9mIGRlZmF1bHRlZE9wdGlvbnMuc3RhbGVUaW1lICE9PSBcIm51bWJlclwiKSB7XG4gICAgICBkZWZhdWx0ZWRPcHRpb25zLnN0YWxlVGltZSA9IDFlMztcbiAgICB9XG4gIH1cbn07XG52YXIgd2lsbEZldGNoID0gKHJlc3VsdCwgaXNSZXN0b3JpbmcpID0+IHJlc3VsdC5pc0xvYWRpbmcgJiYgcmVzdWx0LmlzRmV0Y2hpbmcgJiYgIWlzUmVzdG9yaW5nO1xudmFyIHNob3VsZFN1c3BlbmQgPSAoZGVmYXVsdGVkT3B0aW9ucywgcmVzdWx0KSA9PiBkZWZhdWx0ZWRPcHRpb25zPy5zdXNwZW5zZSAmJiByZXN1bHQuaXNQZW5kaW5nO1xudmFyIGZldGNoT3B0aW1pc3RpYyA9IChkZWZhdWx0ZWRPcHRpb25zLCBvYnNlcnZlciwgZXJyb3JSZXNldEJvdW5kYXJ5KSA9PiBvYnNlcnZlci5mZXRjaE9wdGltaXN0aWMoZGVmYXVsdGVkT3B0aW9ucykuY2F0Y2goKCkgPT4ge1xuICBlcnJvclJlc2V0Qm91bmRhcnkuY2xlYXJSZXNldCgpO1xufSk7XG5leHBvcnQge1xuICBkZWZhdWx0VGhyb3dPbkVycm9yLFxuICBlbnN1cmVTdGFsZVRpbWUsXG4gIGZldGNoT3B0aW1pc3RpYyxcbiAgc2hvdWxkU3VzcGVuZCxcbiAgd2lsbEZldGNoXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3VzcGVuc2UuanMubWFwIl0sIm5hbWVzIjpbImRlZmF1bHRUaHJvd09uRXJyb3IiLCJfZXJyb3IiLCJxdWVyeSIsInN0YXRlIiwiZGF0YSIsImVuc3VyZVN0YWxlVGltZSIsImRlZmF1bHRlZE9wdGlvbnMiLCJzdXNwZW5zZSIsInN0YWxlVGltZSIsIndpbGxGZXRjaCIsInJlc3VsdCIsImlzUmVzdG9yaW5nIiwiaXNMb2FkaW5nIiwiaXNGZXRjaGluZyIsInNob3VsZFN1c3BlbmQiLCJpc1BlbmRpbmciLCJmZXRjaE9wdGltaXN0aWMiLCJvYnNlcnZlciIsImVycm9yUmVzZXRCb3VuZGFyeSIsImNhdGNoIiwiY2xlYXJSZXNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/modern/suspense.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/modern/useBaseQuery.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/modern/useBaseQuery.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useBaseQuery: () => (/* binding */ useBaseQuery)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _tanstack_query_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tanstack/query-core */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/notifyManager.js\");\n/* harmony import */ var _QueryErrorResetBoundary_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./QueryErrorResetBoundary.js */ \"(ssr)/./node_modules/@tanstack/react-query/build/modern/QueryErrorResetBoundary.js\");\n/* harmony import */ var _QueryClientProvider_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./QueryClientProvider.js */ \"(ssr)/./node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js\");\n/* harmony import */ var _isRestoring_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isRestoring.js */ \"(ssr)/./node_modules/@tanstack/react-query/build/modern/isRestoring.js\");\n/* harmony import */ var _errorBoundaryUtils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./errorBoundaryUtils.js */ \"(ssr)/./node_modules/@tanstack/react-query/build/modern/errorBoundaryUtils.js\");\n/* harmony import */ var _suspense_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./suspense.js */ \"(ssr)/./node_modules/@tanstack/react-query/build/modern/suspense.js\");\n/* __next_internal_client_entry_do_not_use__ useBaseQuery auto */ // src/useBaseQuery.ts\n\n\n\n\n\n\n\nfunction useBaseQuery(options, Observer, queryClient) {\n    if (true) {\n        if (typeof options !== \"object\" || Array.isArray(options)) {\n            throw new Error('Bad argument type. Starting with v5, only the \"Object\" form is allowed when calling query related functions. Please use the error stack to find the culprit call. More info here: https://tanstack.com/query/latest/docs/react/guides/migrating-to-v5#supports-a-single-signature-one-object');\n        }\n    }\n    const client = (0,_QueryClientProvider_js__WEBPACK_IMPORTED_MODULE_1__.useQueryClient)(queryClient);\n    const isRestoring = (0,_isRestoring_js__WEBPACK_IMPORTED_MODULE_2__.useIsRestoring)();\n    const errorResetBoundary = (0,_QueryErrorResetBoundary_js__WEBPACK_IMPORTED_MODULE_3__.useQueryErrorResetBoundary)();\n    const defaultedOptions = client.defaultQueryOptions(options);\n    defaultedOptions._optimisticResults = isRestoring ? \"isRestoring\" : \"optimistic\";\n    (0,_suspense_js__WEBPACK_IMPORTED_MODULE_4__.ensureStaleTime)(defaultedOptions);\n    (0,_errorBoundaryUtils_js__WEBPACK_IMPORTED_MODULE_5__.ensurePreventErrorBoundaryRetry)(defaultedOptions, errorResetBoundary);\n    (0,_errorBoundaryUtils_js__WEBPACK_IMPORTED_MODULE_5__.useClearResetErrorBoundary)(errorResetBoundary);\n    const [observer] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>new Observer(client, defaultedOptions));\n    const result = observer.getOptimisticResult(defaultedOptions);\n    react__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore(react__WEBPACK_IMPORTED_MODULE_0__.useCallback((onStoreChange)=>{\n        const unsubscribe = isRestoring ? ()=>void 0 : observer.subscribe(_tanstack_query_core__WEBPACK_IMPORTED_MODULE_6__.notifyManager.batchCalls(onStoreChange));\n        observer.updateResult();\n        return unsubscribe;\n    }, [\n        observer,\n        isRestoring\n    ]), ()=>observer.getCurrentResult(), ()=>observer.getCurrentResult());\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        observer.setOptions(defaultedOptions, {\n            listeners: false\n        });\n    }, [\n        defaultedOptions,\n        observer\n    ]);\n    if ((0,_suspense_js__WEBPACK_IMPORTED_MODULE_4__.shouldSuspend)(defaultedOptions, result)) {\n        throw (0,_suspense_js__WEBPACK_IMPORTED_MODULE_4__.fetchOptimistic)(defaultedOptions, observer, errorResetBoundary);\n    }\n    if ((0,_errorBoundaryUtils_js__WEBPACK_IMPORTED_MODULE_5__.getHasError)({\n        result,\n        errorResetBoundary,\n        throwOnError: defaultedOptions.throwOnError,\n        query: client.getQueryCache().get(defaultedOptions.queryHash)\n    })) {\n        throw result.error;\n    }\n    return !defaultedOptions.notifyOnChangeProps ? observer.trackResult(result) : result;\n}\n //# sourceMappingURL=useBaseQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL21vZGVybi91c2VCYXNlUXVlcnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7a0VBRUEsc0JBQXNCO0FBQ1M7QUFDc0I7QUFDcUI7QUFDaEI7QUFDUjtBQUtqQjtBQUMrQztBQUNoRixTQUFTVyxhQUFhQyxPQUFPLEVBQUVDLFFBQVEsRUFBRUMsV0FBVztJQUNsRCxJQUFJQyxJQUFxQyxFQUFFO1FBQ3pDLElBQUksT0FBT0gsWUFBWSxZQUFZSSxNQUFNQyxPQUFPLENBQUNMLFVBQVU7WUFDekQsTUFBTSxJQUFJTSxNQUNSO1FBRUo7SUFDRjtJQUNBLE1BQU1DLFNBQVNoQix1RUFBY0EsQ0FBQ1c7SUFDOUIsTUFBTU0sY0FBY2hCLCtEQUFjQTtJQUNsQyxNQUFNaUIscUJBQXFCbkIsdUZBQTBCQTtJQUNyRCxNQUFNb0IsbUJBQW1CSCxPQUFPSSxtQkFBbUIsQ0FBQ1g7SUFDcERVLGlCQUFpQkUsa0JBQWtCLEdBQUdKLGNBQWMsZ0JBQWdCO0lBQ3BFWiw2REFBZUEsQ0FBQ2M7SUFDaEJqQix1RkFBK0JBLENBQUNpQixrQkFBa0JEO0lBQ2xEZCxrRkFBMEJBLENBQUNjO0lBQzNCLE1BQU0sQ0FBQ0ksU0FBUyxHQUFHekIsMkNBQWMsQ0FDL0IsSUFBTSxJQUFJYSxTQUNSTSxRQUNBRztJQUdKLE1BQU1LLFNBQVNGLFNBQVNHLG1CQUFtQixDQUFDTjtJQUM1Q3RCLHVEQUEwQixDQUN4QkEsOENBQWlCLENBQ2YsQ0FBQytCO1FBQ0MsTUFBTUMsY0FBY1osY0FBYyxJQUFNLEtBQUssSUFBSUssU0FBU1EsU0FBUyxDQUFDaEMsK0RBQWFBLENBQUNpQyxVQUFVLENBQUNIO1FBQzdGTixTQUFTVSxZQUFZO1FBQ3JCLE9BQU9IO0lBQ1QsR0FDQTtRQUFDUDtRQUFVTDtLQUFZLEdBRXpCLElBQU1LLFNBQVNXLGdCQUFnQixJQUMvQixJQUFNWCxTQUFTVyxnQkFBZ0I7SUFFakNwQyw0Q0FBZSxDQUFDO1FBQ2R5QixTQUFTYSxVQUFVLENBQUNoQixrQkFBa0I7WUFBRWlCLFdBQVc7UUFBTTtJQUMzRCxHQUFHO1FBQUNqQjtRQUFrQkc7S0FBUztJQUMvQixJQUFJZiwyREFBYUEsQ0FBQ1ksa0JBQWtCSyxTQUFTO1FBQzNDLE1BQU1sQiw2REFBZUEsQ0FBQ2Esa0JBQWtCRyxVQUFVSjtJQUNwRDtJQUNBLElBQUlmLG1FQUFXQSxDQUFDO1FBQ2RxQjtRQUNBTjtRQUNBbUIsY0FBY2xCLGlCQUFpQmtCLFlBQVk7UUFDM0NDLE9BQU90QixPQUFPdUIsYUFBYSxHQUFHQyxHQUFHLENBQUNyQixpQkFBaUJzQixTQUFTO0lBQzlELElBQUk7UUFDRixNQUFNakIsT0FBT2tCLEtBQUs7SUFDcEI7SUFDQSxPQUFPLENBQUN2QixpQkFBaUJ3QixtQkFBbUIsR0FBR3JCLFNBQVNzQixXQUFXLENBQUNwQixVQUFVQTtBQUNoRjtBQUdFLENBQ0Ysd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlX2NsaWVudC8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcmVhY3QtcXVlcnkvYnVpbGQvbW9kZXJuL3VzZUJhc2VRdWVyeS5qcz84YTY1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG4vLyBzcmMvdXNlQmFzZVF1ZXJ5LnRzXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IG5vdGlmeU1hbmFnZXIgfSBmcm9tIFwiQHRhbnN0YWNrL3F1ZXJ5LWNvcmVcIjtcbmltcG9ydCB7IHVzZVF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5IH0gZnJvbSBcIi4vUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkuanNcIjtcbmltcG9ydCB7IHVzZVF1ZXJ5Q2xpZW50IH0gZnJvbSBcIi4vUXVlcnlDbGllbnRQcm92aWRlci5qc1wiO1xuaW1wb3J0IHsgdXNlSXNSZXN0b3JpbmcgfSBmcm9tIFwiLi9pc1Jlc3RvcmluZy5qc1wiO1xuaW1wb3J0IHtcbiAgZW5zdXJlUHJldmVudEVycm9yQm91bmRhcnlSZXRyeSxcbiAgZ2V0SGFzRXJyb3IsXG4gIHVzZUNsZWFyUmVzZXRFcnJvckJvdW5kYXJ5XG59IGZyb20gXCIuL2Vycm9yQm91bmRhcnlVdGlscy5qc1wiO1xuaW1wb3J0IHsgZW5zdXJlU3RhbGVUaW1lLCBmZXRjaE9wdGltaXN0aWMsIHNob3VsZFN1c3BlbmQgfSBmcm9tIFwiLi9zdXNwZW5zZS5qc1wiO1xuZnVuY3Rpb24gdXNlQmFzZVF1ZXJ5KG9wdGlvbnMsIE9ic2VydmVyLCBxdWVyeUNsaWVudCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSBcIm9iamVjdFwiIHx8IEFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0JhZCBhcmd1bWVudCB0eXBlLiBTdGFydGluZyB3aXRoIHY1LCBvbmx5IHRoZSBcIk9iamVjdFwiIGZvcm0gaXMgYWxsb3dlZCB3aGVuIGNhbGxpbmcgcXVlcnkgcmVsYXRlZCBmdW5jdGlvbnMuIFBsZWFzZSB1c2UgdGhlIGVycm9yIHN0YWNrIHRvIGZpbmQgdGhlIGN1bHByaXQgY2FsbC4gTW9yZSBpbmZvIGhlcmU6IGh0dHBzOi8vdGFuc3RhY2suY29tL3F1ZXJ5L2xhdGVzdC9kb2NzL3JlYWN0L2d1aWRlcy9taWdyYXRpbmctdG8tdjUjc3VwcG9ydHMtYS1zaW5nbGUtc2lnbmF0dXJlLW9uZS1vYmplY3QnXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBjb25zdCBjbGllbnQgPSB1c2VRdWVyeUNsaWVudChxdWVyeUNsaWVudCk7XG4gIGNvbnN0IGlzUmVzdG9yaW5nID0gdXNlSXNSZXN0b3JpbmcoKTtcbiAgY29uc3QgZXJyb3JSZXNldEJvdW5kYXJ5ID0gdXNlUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkoKTtcbiAgY29uc3QgZGVmYXVsdGVkT3B0aW9ucyA9IGNsaWVudC5kZWZhdWx0UXVlcnlPcHRpb25zKG9wdGlvbnMpO1xuICBkZWZhdWx0ZWRPcHRpb25zLl9vcHRpbWlzdGljUmVzdWx0cyA9IGlzUmVzdG9yaW5nID8gXCJpc1Jlc3RvcmluZ1wiIDogXCJvcHRpbWlzdGljXCI7XG4gIGVuc3VyZVN0YWxlVGltZShkZWZhdWx0ZWRPcHRpb25zKTtcbiAgZW5zdXJlUHJldmVudEVycm9yQm91bmRhcnlSZXRyeShkZWZhdWx0ZWRPcHRpb25zLCBlcnJvclJlc2V0Qm91bmRhcnkpO1xuICB1c2VDbGVhclJlc2V0RXJyb3JCb3VuZGFyeShlcnJvclJlc2V0Qm91bmRhcnkpO1xuICBjb25zdCBbb2JzZXJ2ZXJdID0gUmVhY3QudXNlU3RhdGUoXG4gICAgKCkgPT4gbmV3IE9ic2VydmVyKFxuICAgICAgY2xpZW50LFxuICAgICAgZGVmYXVsdGVkT3B0aW9uc1xuICAgIClcbiAgKTtcbiAgY29uc3QgcmVzdWx0ID0gb2JzZXJ2ZXIuZ2V0T3B0aW1pc3RpY1Jlc3VsdChkZWZhdWx0ZWRPcHRpb25zKTtcbiAgUmVhY3QudXNlU3luY0V4dGVybmFsU3RvcmUoXG4gICAgUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgICAob25TdG9yZUNoYW5nZSkgPT4ge1xuICAgICAgICBjb25zdCB1bnN1YnNjcmliZSA9IGlzUmVzdG9yaW5nID8gKCkgPT4gdm9pZCAwIDogb2JzZXJ2ZXIuc3Vic2NyaWJlKG5vdGlmeU1hbmFnZXIuYmF0Y2hDYWxscyhvblN0b3JlQ2hhbmdlKSk7XG4gICAgICAgIG9ic2VydmVyLnVwZGF0ZVJlc3VsdCgpO1xuICAgICAgICByZXR1cm4gdW5zdWJzY3JpYmU7XG4gICAgICB9LFxuICAgICAgW29ic2VydmVyLCBpc1Jlc3RvcmluZ11cbiAgICApLFxuICAgICgpID0+IG9ic2VydmVyLmdldEN1cnJlbnRSZXN1bHQoKSxcbiAgICAoKSA9PiBvYnNlcnZlci5nZXRDdXJyZW50UmVzdWx0KClcbiAgKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBvYnNlcnZlci5zZXRPcHRpb25zKGRlZmF1bHRlZE9wdGlvbnMsIHsgbGlzdGVuZXJzOiBmYWxzZSB9KTtcbiAgfSwgW2RlZmF1bHRlZE9wdGlvbnMsIG9ic2VydmVyXSk7XG4gIGlmIChzaG91bGRTdXNwZW5kKGRlZmF1bHRlZE9wdGlvbnMsIHJlc3VsdCkpIHtcbiAgICB0aHJvdyBmZXRjaE9wdGltaXN0aWMoZGVmYXVsdGVkT3B0aW9ucywgb2JzZXJ2ZXIsIGVycm9yUmVzZXRCb3VuZGFyeSk7XG4gIH1cbiAgaWYgKGdldEhhc0Vycm9yKHtcbiAgICByZXN1bHQsXG4gICAgZXJyb3JSZXNldEJvdW5kYXJ5LFxuICAgIHRocm93T25FcnJvcjogZGVmYXVsdGVkT3B0aW9ucy50aHJvd09uRXJyb3IsXG4gICAgcXVlcnk6IGNsaWVudC5nZXRRdWVyeUNhY2hlKCkuZ2V0KGRlZmF1bHRlZE9wdGlvbnMucXVlcnlIYXNoKVxuICB9KSkge1xuICAgIHRocm93IHJlc3VsdC5lcnJvcjtcbiAgfVxuICByZXR1cm4gIWRlZmF1bHRlZE9wdGlvbnMubm90aWZ5T25DaGFuZ2VQcm9wcyA/IG9ic2VydmVyLnRyYWNrUmVzdWx0KHJlc3VsdCkgOiByZXN1bHQ7XG59XG5leHBvcnQge1xuICB1c2VCYXNlUXVlcnlcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VCYXNlUXVlcnkuanMubWFwIl0sIm5hbWVzIjpbIlJlYWN0Iiwibm90aWZ5TWFuYWdlciIsInVzZVF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5IiwidXNlUXVlcnlDbGllbnQiLCJ1c2VJc1Jlc3RvcmluZyIsImVuc3VyZVByZXZlbnRFcnJvckJvdW5kYXJ5UmV0cnkiLCJnZXRIYXNFcnJvciIsInVzZUNsZWFyUmVzZXRFcnJvckJvdW5kYXJ5IiwiZW5zdXJlU3RhbGVUaW1lIiwiZmV0Y2hPcHRpbWlzdGljIiwic2hvdWxkU3VzcGVuZCIsInVzZUJhc2VRdWVyeSIsIm9wdGlvbnMiLCJPYnNlcnZlciIsInF1ZXJ5Q2xpZW50IiwicHJvY2VzcyIsIkFycmF5IiwiaXNBcnJheSIsIkVycm9yIiwiY2xpZW50IiwiaXNSZXN0b3JpbmciLCJlcnJvclJlc2V0Qm91bmRhcnkiLCJkZWZhdWx0ZWRPcHRpb25zIiwiZGVmYXVsdFF1ZXJ5T3B0aW9ucyIsIl9vcHRpbWlzdGljUmVzdWx0cyIsIm9ic2VydmVyIiwidXNlU3RhdGUiLCJyZXN1bHQiLCJnZXRPcHRpbWlzdGljUmVzdWx0IiwidXNlU3luY0V4dGVybmFsU3RvcmUiLCJ1c2VDYWxsYmFjayIsIm9uU3RvcmVDaGFuZ2UiLCJ1bnN1YnNjcmliZSIsInN1YnNjcmliZSIsImJhdGNoQ2FsbHMiLCJ1cGRhdGVSZXN1bHQiLCJnZXRDdXJyZW50UmVzdWx0IiwidXNlRWZmZWN0Iiwic2V0T3B0aW9ucyIsImxpc3RlbmVycyIsInRocm93T25FcnJvciIsInF1ZXJ5IiwiZ2V0UXVlcnlDYWNoZSIsImdldCIsInF1ZXJ5SGFzaCIsImVycm9yIiwibm90aWZ5T25DaGFuZ2VQcm9wcyIsInRyYWNrUmVzdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/modern/useBaseQuery.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/modern/useMutation.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/modern/useMutation.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMutation: () => (/* binding */ useMutation)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _tanstack_query_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tanstack/query-core */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/mutationObserver.js\");\n/* harmony import */ var _tanstack_query_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tanstack/query-core */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/notifyManager.js\");\n/* harmony import */ var _QueryClientProvider_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./QueryClientProvider.js */ \"(ssr)/./node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/react-query/build/modern/utils.js\");\n/* __next_internal_client_entry_do_not_use__ useMutation auto */ // src/useMutation.ts\n\n\n\n\nfunction useMutation(options, queryClient) {\n    const client = (0,_QueryClientProvider_js__WEBPACK_IMPORTED_MODULE_1__.useQueryClient)(queryClient);\n    const [observer] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>new _tanstack_query_core__WEBPACK_IMPORTED_MODULE_2__.MutationObserver(client, options));\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        observer.setOptions(options);\n    }, [\n        observer,\n        options\n    ]);\n    const result = react__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore(react__WEBPACK_IMPORTED_MODULE_0__.useCallback((onStoreChange)=>observer.subscribe(_tanstack_query_core__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batchCalls(onStoreChange)), [\n        observer\n    ]), ()=>observer.getCurrentResult(), ()=>observer.getCurrentResult());\n    const mutate = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((variables, mutateOptions)=>{\n        observer.mutate(variables, mutateOptions).catch(noop);\n    }, [\n        observer\n    ]);\n    if (result.error && (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.shouldThrowError)(observer.options.throwOnError, [\n        result.error\n    ])) {\n        throw result.error;\n    }\n    return {\n        ...result,\n        mutate,\n        mutateAsync: result.mutate\n    };\n}\nfunction noop() {}\n //# sourceMappingURL=useMutation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL21vZGVybi91c2VNdXRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7aUVBRUEscUJBQXFCO0FBQ1U7QUFDd0M7QUFDYjtBQUNaO0FBQzlDLFNBQVNLLFlBQVlDLE9BQU8sRUFBRUMsV0FBVztJQUN2QyxNQUFNQyxTQUFTTCx1RUFBY0EsQ0FBQ0k7SUFDOUIsTUFBTSxDQUFDRSxTQUFTLEdBQUdULDJDQUFjLENBQy9CLElBQU0sSUFBSUMsa0VBQWdCQSxDQUN4Qk8sUUFDQUY7SUFHSk4sNENBQWUsQ0FBQztRQUNkUyxTQUFTRyxVQUFVLENBQUNOO0lBQ3RCLEdBQUc7UUFBQ0c7UUFBVUg7S0FBUTtJQUN0QixNQUFNTyxTQUFTYix1REFBMEIsQ0FDdkNBLDhDQUFpQixDQUNmLENBQUNnQixnQkFBa0JQLFNBQVNRLFNBQVMsQ0FBQ2YsK0RBQWFBLENBQUNnQixVQUFVLENBQUNGLGlCQUMvRDtRQUFDUDtLQUFTLEdBRVosSUFBTUEsU0FBU1UsZ0JBQWdCLElBQy9CLElBQU1WLFNBQVNVLGdCQUFnQjtJQUVqQyxNQUFNQyxTQUFTcEIsOENBQWlCLENBQzlCLENBQUNxQixXQUFXQztRQUNWYixTQUFTVyxNQUFNLENBQUNDLFdBQVdDLGVBQWVDLEtBQUssQ0FBQ0M7SUFDbEQsR0FDQTtRQUFDZjtLQUFTO0lBRVosSUFBSUksT0FBT1ksS0FBSyxJQUFJckIsMkRBQWdCQSxDQUFDSyxTQUFTSCxPQUFPLENBQUNvQixZQUFZLEVBQUU7UUFBQ2IsT0FBT1ksS0FBSztLQUFDLEdBQUc7UUFDbkYsTUFBTVosT0FBT1ksS0FBSztJQUNwQjtJQUNBLE9BQU87UUFBRSxHQUFHWixNQUFNO1FBQUVPO1FBQVFPLGFBQWFkLE9BQU9PLE1BQU07SUFBQztBQUN6RDtBQUNBLFNBQVNJLFFBQ1Q7QUFHRSxDQUNGLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZV9jbGllbnQvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL21vZGVybi91c2VNdXRhdGlvbi5qcz9iNDEzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG4vLyBzcmMvdXNlTXV0YXRpb24udHNcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgTXV0YXRpb25PYnNlcnZlciwgbm90aWZ5TWFuYWdlciB9IGZyb20gXCJAdGFuc3RhY2svcXVlcnktY29yZVwiO1xuaW1wb3J0IHsgdXNlUXVlcnlDbGllbnQgfSBmcm9tIFwiLi9RdWVyeUNsaWVudFByb3ZpZGVyLmpzXCI7XG5pbXBvcnQgeyBzaG91bGRUaHJvd0Vycm9yIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbmZ1bmN0aW9uIHVzZU11dGF0aW9uKG9wdGlvbnMsIHF1ZXJ5Q2xpZW50KSB7XG4gIGNvbnN0IGNsaWVudCA9IHVzZVF1ZXJ5Q2xpZW50KHF1ZXJ5Q2xpZW50KTtcbiAgY29uc3QgW29ic2VydmVyXSA9IFJlYWN0LnVzZVN0YXRlKFxuICAgICgpID0+IG5ldyBNdXRhdGlvbk9ic2VydmVyKFxuICAgICAgY2xpZW50LFxuICAgICAgb3B0aW9uc1xuICAgIClcbiAgKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBvYnNlcnZlci5zZXRPcHRpb25zKG9wdGlvbnMpO1xuICB9LCBbb2JzZXJ2ZXIsIG9wdGlvbnNdKTtcbiAgY29uc3QgcmVzdWx0ID0gUmVhY3QudXNlU3luY0V4dGVybmFsU3RvcmUoXG4gICAgUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgICAob25TdG9yZUNoYW5nZSkgPT4gb2JzZXJ2ZXIuc3Vic2NyaWJlKG5vdGlmeU1hbmFnZXIuYmF0Y2hDYWxscyhvblN0b3JlQ2hhbmdlKSksXG4gICAgICBbb2JzZXJ2ZXJdXG4gICAgKSxcbiAgICAoKSA9PiBvYnNlcnZlci5nZXRDdXJyZW50UmVzdWx0KCksXG4gICAgKCkgPT4gb2JzZXJ2ZXIuZ2V0Q3VycmVudFJlc3VsdCgpXG4gICk7XG4gIGNvbnN0IG11dGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgICh2YXJpYWJsZXMsIG11dGF0ZU9wdGlvbnMpID0+IHtcbiAgICAgIG9ic2VydmVyLm11dGF0ZSh2YXJpYWJsZXMsIG11dGF0ZU9wdGlvbnMpLmNhdGNoKG5vb3ApO1xuICAgIH0sXG4gICAgW29ic2VydmVyXVxuICApO1xuICBpZiAocmVzdWx0LmVycm9yICYmIHNob3VsZFRocm93RXJyb3Iob2JzZXJ2ZXIub3B0aW9ucy50aHJvd09uRXJyb3IsIFtyZXN1bHQuZXJyb3JdKSkge1xuICAgIHRocm93IHJlc3VsdC5lcnJvcjtcbiAgfVxuICByZXR1cm4geyAuLi5yZXN1bHQsIG11dGF0ZSwgbXV0YXRlQXN5bmM6IHJlc3VsdC5tdXRhdGUgfTtcbn1cbmZ1bmN0aW9uIG5vb3AoKSB7XG59XG5leHBvcnQge1xuICB1c2VNdXRhdGlvblxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZU11dGF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJSZWFjdCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJub3RpZnlNYW5hZ2VyIiwidXNlUXVlcnlDbGllbnQiLCJzaG91bGRUaHJvd0Vycm9yIiwidXNlTXV0YXRpb24iLCJvcHRpb25zIiwicXVlcnlDbGllbnQiLCJjbGllbnQiLCJvYnNlcnZlciIsInVzZVN0YXRlIiwidXNlRWZmZWN0Iiwic2V0T3B0aW9ucyIsInJlc3VsdCIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwidXNlQ2FsbGJhY2siLCJvblN0b3JlQ2hhbmdlIiwic3Vic2NyaWJlIiwiYmF0Y2hDYWxscyIsImdldEN1cnJlbnRSZXN1bHQiLCJtdXRhdGUiLCJ2YXJpYWJsZXMiLCJtdXRhdGVPcHRpb25zIiwiY2F0Y2giLCJub29wIiwiZXJyb3IiLCJ0aHJvd09uRXJyb3IiLCJtdXRhdGVBc3luYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/modern/useMutation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/modern/useQuery.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/modern/useQuery.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useQuery: () => (/* binding */ useQuery)\n/* harmony export */ });\n/* harmony import */ var _tanstack_query_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tanstack/query-core */ \"(ssr)/./node_modules/@tanstack/query-core/build/modern/queryObserver.js\");\n/* harmony import */ var _useBaseQuery_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./useBaseQuery.js */ \"(ssr)/./node_modules/@tanstack/react-query/build/modern/useBaseQuery.js\");\n/* __next_internal_client_entry_do_not_use__ useQuery auto */ // src/useQuery.ts\n\n\nfunction useQuery(options, queryClient) {\n    return (0,_useBaseQuery_js__WEBPACK_IMPORTED_MODULE_0__.useBaseQuery)(options, _tanstack_query_core__WEBPACK_IMPORTED_MODULE_1__.QueryObserver, queryClient);\n}\n //# sourceMappingURL=useQuery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL21vZGVybi91c2VRdWVyeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OERBRUEsa0JBQWtCO0FBQ21DO0FBQ0o7QUFDakQsU0FBU0UsU0FBU0MsT0FBTyxFQUFFQyxXQUFXO0lBQ3BDLE9BQU9ILDhEQUFZQSxDQUFDRSxTQUFTSCwrREFBYUEsRUFBRUk7QUFDOUM7QUFHRSxDQUNGLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZV9jbGllbnQvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL21vZGVybi91c2VRdWVyeS5qcz9jZDQ3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG4vLyBzcmMvdXNlUXVlcnkudHNcbmltcG9ydCB7IFF1ZXJ5T2JzZXJ2ZXIgfSBmcm9tIFwiQHRhbnN0YWNrL3F1ZXJ5LWNvcmVcIjtcbmltcG9ydCB7IHVzZUJhc2VRdWVyeSB9IGZyb20gXCIuL3VzZUJhc2VRdWVyeS5qc1wiO1xuZnVuY3Rpb24gdXNlUXVlcnkob3B0aW9ucywgcXVlcnlDbGllbnQpIHtcbiAgcmV0dXJuIHVzZUJhc2VRdWVyeShvcHRpb25zLCBRdWVyeU9ic2VydmVyLCBxdWVyeUNsaWVudCk7XG59XG5leHBvcnQge1xuICB1c2VRdWVyeVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZVF1ZXJ5LmpzLm1hcCJdLCJuYW1lcyI6WyJRdWVyeU9ic2VydmVyIiwidXNlQmFzZVF1ZXJ5IiwidXNlUXVlcnkiLCJvcHRpb25zIiwicXVlcnlDbGllbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/modern/useQuery.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/modern/utils.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/modern/utils.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shouldThrowError: () => (/* binding */ shouldThrowError)\n/* harmony export */ });\n// src/utils.ts\nfunction shouldThrowError(throwError, params) {\n    if (typeof throwError === \"function\") {\n        return throwError(...params);\n    }\n    return !!throwError;\n}\n //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL21vZGVybi91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsZUFBZTtBQUNmLFNBQVNBLGlCQUFpQkMsVUFBVSxFQUFFQyxNQUFNO0lBQzFDLElBQUksT0FBT0QsZUFBZSxZQUFZO1FBQ3BDLE9BQU9BLGNBQWNDO0lBQ3ZCO0lBQ0EsT0FBTyxDQUFDLENBQUNEO0FBQ1g7QUFHRSxDQUNGLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZV9jbGllbnQvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL21vZGVybi91dGlscy5qcz8wYzU5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy91dGlscy50c1xuZnVuY3Rpb24gc2hvdWxkVGhyb3dFcnJvcih0aHJvd0Vycm9yLCBwYXJhbXMpIHtcbiAgaWYgKHR5cGVvZiB0aHJvd0Vycm9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gdGhyb3dFcnJvciguLi5wYXJhbXMpO1xuICB9XG4gIHJldHVybiAhIXRocm93RXJyb3I7XG59XG5leHBvcnQge1xuICBzaG91bGRUaHJvd0Vycm9yXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbInNob3VsZFRocm93RXJyb3IiLCJ0aHJvd0Vycm9yIiwicGFyYW1zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/modern/utils.js\n");

/***/ })

};
;